sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.834666013718


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (-2.8523101806640625, 63.982608795166016, 4.617343425750732, 13.977014541625977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f090ff976c8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f090ffb9488>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (-3.0578038692474365, 63.87335205078125, 4.687748432159424, 13.471818923950195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.24173235893
y: -70.2470016479
theta: 1.31842958927
speed: 13.7388105392
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.24173235893
y: -70.2470016479
theta: 1.31842958927
speed: 13.7388105392
id: 0
t: 4
xxx after update is x: 2.30572032928
y: -70.335105896
theta: 1.3036608696
speed: 14.0865316391
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.222222222222






self.maneuver_requested None
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


xxx before update is x: 2.30572032928
y: -70.335105896
theta: 1.3036608696
speed: 14.0865316391
id: 0
t: 5
xxx after update is x: 3.76406288147
y: -69.2988128662
theta: 1.6492587328
speed: 13.7948989868
id: 0
t: 6
msim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.85181593895
222 self.state_dicts[msg.id][msg.t] is (3.0294387340545654, -74.53472137451172, 1.5595699548721313, 13.650707244873047)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (2.8289551734924316, -74.03047180175781, 1.3153663873672485, 14.040716171264648)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fc2e35d0c68>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fc2e35f4098>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (3.3716039657592773, -72.81719970703125, 1.4220242500305176, 13.990822792053223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.48634338379
y: 58.6607704163
theta: 4.62957954407
speed: 13.8957328796
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.355555555556






self.maneuver_requested None
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, whyaneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.76406288147
y: -69.2988128662
theta: 1.6492587328
speed: 13.7948989868
id: 0
t: 6
xxx after update is x: 3.03924918175
y: -69.1394195557
theta: 1.6107480526
speed: 13.6895532608
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:7




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: 3.03924918175
y: -69.1394195557
theta: 1.6107480526
speed: 13.6895532608
id: 0
t: 7
xxx after update is x: 3.89637517929
y: -68.3590393066
theta: 1.64816129208
speed: 14.1011238098
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: 3.89637517929
y: -68.3590393066
theta: 1.64816129208
speed: 14.1011238098
id: 0
t: 8
xxx after update is x: 2.76801538467
y: -67.9175720215
theta: 1.55884599686
speed: 13.8575143814
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: 2.76801538467
y: -67.9175720215
theta: 1.55884599686
speed: 13.8575143814
id: 0
t: 9
xxx after update is x: 2.87218165398
y: -66.5250015259
theta: 1.80876064301
speed: 13.8611469269
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.434193961546295, 0.46867135370816915]
222 self.state_dicts[msg.id][msg.t] is (-3.5188844203948975, 57.694923400878906, 4.752338409423828, 13.648130416870117)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: 2.87218165398
y: -66.5250015259
theta: 1.80876064301
speed: 13.8611469269
id: 0
t: 10
xxx after update is x: 3.06546974182
y: -66.9164047241
theta: 1.54033565521
speed: 14.0112752914
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: 3.06546974182
y: -66.9164047241
theta: 1.54033565521
speed: 14.0112752914
id: 0
t: 11
xxx after update is x: 3.61617732048
y: -66.3217468262
theta: 1.65736079216
speed: 13.8294334412
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: 3.61617732048
y: -66.3217468262
theta: 1.65736079216
speed: 13.8294334412
id: 0
t: 12
xxx after update is x: 2.9256465435
y: -64.5454025269
theta: 1.73325991631
speed: 13.8818216324
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14


xxx before update is x: 2.9256465435
y: -64.5454025269
theta: 1.73325991631
speed: 13.8818216324
id: 0
t: 13
xxx after update is x: 3.74632287025
y: -64.7458953857
theta: 1.54609179497
speed: 13.9678087234
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion


 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: -3.48634338379
y: 58.6607704163
theta: 4.62957954407
speed: 13.8957328796
id: 1
t: 8
xxx after update is x: -3.25242757797
y: 57.6396446228
theta: 4.66600942612
speed: 14.2951211929
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: -3.25242757797
y: 57.6396446228
theta: 4.66600942612
speed: 14.2951211929
id: 1
t: 9
xxx after update is x: -3.51888442039
y: 57.6949234009
theta: 4.75233840942
speed: 13.6481304169
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: -3.51888442039
y: 57.6949234009
theta: 4.75233840942
speed: 13.6481304169
id: 1
t: 10
xxx after update is x: -3.13650274277
y: 57.1748428345
theta: 4.71810722351
speed: 13.8539524078
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.39487653212819274, 0.2997463828396749]
222 self.state_dicts[msg.id][msg.t] is (3.065469741821289, -66.9164047241211, 1.5403356552124023, 14.011275291442871)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function xxx before update is x: -3.13650274277
y: 57.1748428345
theta: 4.71810722351
speed: 13.8539524078
id: 1
t: 11
xxx after update is x: -3.32808113098
y: 56.6567573547
theta: 4.81908512115
speed: 14.0060520172
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:12




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32808113098
y: 56.6567573547
theta: 4.81908512115
speed: 14.0060520172
id: 1
t: 12
xxx after update is x: -2.40015649796
y: 56.2215194702
theta: 4.62038898468
speed: 13.5849428177
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:13




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.40015649796
y: 56.2215194702
theta: 4.62038898468
speed: 13.5849428177
id: 1
t: 13
xxx after update is x: -3.49834656715
y: 54.8117980957
theta: 4.60898637772
speed: 13.9880723953
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:14




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: -3.49834656715
y: 54.8117980957
theta: 4.60898637772
speed: 13.9880723953
id: 1
t: 14
xxx after update is x: -3.53902029991
y: 54.5553741455
theta: 4.71045684814
speed: 13.8484687805
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.17552147564900217, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7788124084472656, -63.926849365234375, 1.5656404495239258, 13.509285926818848)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


goingoing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: 3.74632287025
y: -64.7458953857
theta: 1.54609179497
speed: 13.9678087234
id: 0
t: 14
xxx after update is x: 2.77881240845
y: -63.9268493652
theta: 1.56564044952
speed: 13.5092859268
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0863043404636349, 0.4067589909381512]
222 self.state_dicts[msg.id][msg.t] is (-3.539020299911499, 54.55537414550781, 4.710456848144531, 13.848468780517578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: 2.77881240845
y: -63.9268493652
theta: 1.56564044952
speed: 13.5092859268
id: 0
t: 15
xxx after update is x: 3.22991061211
y: -63.7198028564
theta: 1.56714439392
speed: 13.6706285477
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: 3.22991061211
y: -63.7198028564
theta: 1.56714439392
speed: 13.6706285477
id: 0
t: 16
xxx after update is x: 3.13262701035
y: -62.5095176697
theta: 1.37058627605
speed: 13.6918478012
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.13262701035
y: -62.5095176697
theta: 1.37058627605
speed: 13.6918478012
id: 0
t: 17
xxx after update is x: 2.99200868607
y: -62.0764808655
theta: 1.51886582375
speed: 13.6237535477
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:18




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.99200868607
y: -62.0764808655
theta: 1.51886582375
speed: 13.6237535477
id: 0
t: 18
xxx after update is x: 3.18781495094
y: -61.0987701416
theta: 1.53275668621
speed: 13.6225185394
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:19




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.18781495094
y: -61.0987701416
theta: 1.53275668621
speed: 13.6225185394
id: 0
t: 19
xxx after update is x: 3.04133367538
y: -60.6280517578
theta: 1.58639121056
speed: 13.926607132
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20


aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: 3.04133367538
y: -60.6280517578
theta: 1.58639121056
speed: 13.926607132
id: 0
t: 20
xxx after update is x: 3.3145263195
y: -60.431842804
theta: 1.69391751289
speed: 13.780962944
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.22391546308169452, 0.4136967214176248]
222 self.state_dicts[msg.id][msg.t] is (-3.3301002979278564, 50.65538787841797, 4.865150451660156, 13.718953132629395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: 3.3145263195g to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: -3.53902029991
y: 54.5553741455
theta: 4.71045684814
speed: 13.8484687805
id: 1
t: 15
xxx after update is x: -3.32721400261
y: 53.4842948914
theta: 4.73915910721
speed: 14.02709198
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: -3.32721400261
y: 53.4842948914
theta: 4.73915910721
speed: 14.02709198
id: 1
t: 16
xxx after update is x: -3.60427546501
y: 53.4640007019
theta: 4.71671533585
speed: 14.0132789612
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: -3.60427546501
y: 53.4640007019
theta: 4.71671533585
speed: 14.0132789612
id: 1
t: 17
xxx after update is x: -2.64874458313
y: 52.8606948853
theta: 4.79735803604
speed: 13.7082433701
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.16085077615011034, 0]
222 self.state_dicts[msg.id][msg.t] is (2.992008686065674, -62.076480865478516, 1.5188658237457275, 13.623753547668457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: -2.64874458313
y: 52.8606948853
theta: 4.79735803604
speed: 13.7082433701
id: 1
t: 18
xxx after update is x: -2.56559062004
y: 52.0470314026
theta: 4.52596187592
speed: 14.1212434769
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: -2.56559062004
y: 52.0470314026
theta: 4.52596187592
speed: 14.1212434769
id: 1
t: 19
xxx after update is x: -3.3724219799
y: 50.8425674438
theta: 4.68228149414
speed: 13.8877477646
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.3724219799
y: 50.8425674438
theta: 4.68228149414
speed: 13.8877477646
id: 1
t: 20
xxx after update is x: -3.33010029793
y: 50.6553878784
theta: 4.86515045166
speed: 13.7189531326
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:21




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: -3.33010029793
y: 50.6553878784
theta: 4.86515045166
speed: 13.7189531326
id: 1
t: 21
xxx after update is x: -3.72056078911
y: 49.7680282593
theta: 4.78391313553
speed: 13.9681987762
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.36950091007000346, 0]
222 self.state_dicts[msg.id][msg.t] is (3.453007936477661, -59.6214599609375, 1.4179937839508057, 13.81046199798584)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 
y: -60.431842804
theta: 1.69391751289
speed: 13.780962944
id: 0
t: 21
xxx after update is x: 3.45300793648
y: -59.6214599609
theta: 1.41799378395
speed: 13.810461998
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:23


xxx before update is x: 3.45300793648
y: -59.6214599609
theta: 1.41799378395
speed: 13.810461998
id: 0
t: 22
xxx after update is x: 3.21742987633
y: -58.9796333313
theta: 1.78571903706
speed: 14.180809021
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: 3.21742987633
y: -58.9796333313
theta: 1.78571903706
speed: 14.180809021
id: 0
t: 23
xxx after update is x: 3.34863448143
y: -58.59425354
theta: 1.61762905121
speed: 13.6412439346
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: 3.34863448143
y: -58.59425354
theta: 1.61762905121
speed: 13.6412439346
id: 0
t: 24
xxx after update is x: 3.35713410378
y: -58.2851409912
theta: 1.5192605257
speed: 13.9331541061
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.30395855686850465, 0.2729219124241906]
222 self.state_dicts[msg.id][msg.t] is (-3.3671000003814697, 48.07572555541992, 4.788015365600586, 13.704728126525879)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.35713410378
y: -58.2851409912
theta: 1.5192605257
speed: 13.9331541061
id: 0
t: 25
xxx after update is x: 2.97735619545
y: -57.058506012
theta: 1.61510694027
speed: 14.1965789795
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:26




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: 2.97735619545
y: -57.058506012
theta: 1.61510694027
speed: 14.1965789795
id: 0
t: 26
xxx after update is x: 2.84417295456
y: -56.6641120911
theta: 1.70653581619
speed: 13.9143533707
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: 2.84417295456
y: -56.6641120911
theta: 1.70653581619
speed: 13.9143533707
id: 0
t: 27
xxx after update is x: 3.13329601288
y: -55.6611633301
theta: 1.66268408298
speed: 13.6723737717
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.13329601288
y: -55.6611633301
theta: 1.66268408298
speed: 13.6723737717
id: 0
t: 28
xxx after update is x: 3.51949095726
y: -55.2550735474
theta: 1.47392320633
speed: 13.9476575851
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.51949095726
y: -55.2550735474
theta: 1.47392320633
speed: 13.9476575851
id: 0
t: 29
xxx after update is x: 3.67674160004
y: -54.8681106567
theta: 1.1):
xxx before update is x: -3.72056078911
y: 49.7680282593
theta: 4.78391313553
speed: 13.9681987762
id: 1
t: 22
xxx after update is x: -3.59696745872
y: 49.5123786926
theta: 4.52564620972
speed: 14.0005664825
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: -3.59696745872
y: 49.5123786926
theta: 4.52564620972
speed: 14.0005664825
id: 1
t: 23
xxx after update is x: -3.44971847534
y: 48.7760734558
theta: 4.67280673981
speed: 14.1902370453
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: -3.44971847534
y: 48.7760734558
theta: 4.67280673981
speed: 14.1902370453
id: 1
t: 24
xxx after update is x: -3.36710000038
y: 48.0757255554
theta: 4.7880153656
speed: 13.7047281265
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: -3.36710000038
y: 48.0757255554
theta: 4.7880153656
speed: 13.7047281265
id: 1
t: 25
xxx after update is x: -3.53920555115
y: 47.5938720703
theta: 4.72387218475
speed: 13.7567148209
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3423558564643983, 0]
222 self.state_dicts[msg.id][msg.t] is (2.977356195449829, -57.05850601196289, 1.6151069402694702, 14.196578979492188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: -3.53920555115
y: 47.5938720703
theta: 4.72387218475
speed: 13.7567148209
id: 1
t: 26
xxx after update is x: -3.47908449173
y: 46.6835174561
theta: 4.62908411026
speed: 13.8812923431
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: -3.47908449173
y: 46.6835174561
theta: 4.62908411026
speed: 13.8812923431
id: 1
t: 27
xxx after update is x: -2.76471829414
y: 46.3598213196
theta: 4.84690761566
speed: 13.7347354889
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29


xxx before update is x: -2.76471829414
y: 46.3598213196
theta: 4.84690761566
speed: 13.7347354889
id: 1
t: 28
xxx after update is x: -3.29738354683
y: 45.2624588013
theta: 4.86024665833
speed: 13.8663749695
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29738354683
y: 45.2624588013
theta: 4.86024665833
speed: 13.8663749695
id: 1
t: 29
xxx after update is x: -2.64858222008
y: 44.9668540955
theta: 4.84780454636
speed: 14.2149848938
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31




going to the update function
sim.py in the sim.py update function 
xxx before update is x: -2.64858222008
y: 44.9668540955
theta: 4.84780454636
speed: 14.2149848938
id: 1
t: 30
xxx after update is x: -3.00431275368
y: 43.2783927917
theta: 4.85439968109
speed: 13.6016960144
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.00431275368
y: 43.2783927917
theta: 4.85439968109
speed: 13.6016960144
id: 1
t: 31
xxx after update is x: -3.56239080429
y: 43.6897354126
theta: 4.92169141769
speed: 14.1212844849
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:32




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56239080429
y: 43.6897354126
theta: 4.92169141769
speed: 14.1212844849
id: 1
t: 32
xxx after update is x: -3.41441345215
y: 43.0995445251
theta: 4.63964986801
speed: 14.1259813309
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: -3.41441345215
y: 43.0995445251
theta: 4.63964986801
speed: 14.1259813309
id: 1
t: 33
xxx after update is x: -3.54237866402
y: 41.2614402771
theta: 4.62855672836
speed: 13.9738731384
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.54237866402
y: 41.2614402771
theta: 4.62855672836
speed: 13.9738731384
id: 1
t: 34
xxx after update is x: -3.37364459038
y: 41.2968406677
theta: 4.65126800537
speed: 13.5760412216
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


xxx before update is x: -3.37364459038
y: 41.2968406677
theta: 4.65126800537
speed: 13.5760412216
id: 1
t: 35
xxx after update is x: -2.95452094078
y: 40.6499671936
theta: 4.83647489548
speed: 14.1675338745
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.95452094078
y: 40.6499671936
theta: 4.83647489548
speed: 14.1675338745
id: 1
t: 36
xxx after update is x: -2.88228845596
y: 40.0407295227
theta: 4.59919071198
speed: 13.8121795654
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:37


aaaaaa
aaaaaabbbbb
risk is [0.30971754938520984, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9822847843170166, -50.36935806274414, 1.5571128129959106, 14.120423316955566)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.88228845596
y: 40.0407295227
theta: 4.59919071198
speed: 13.8121795654
id: 1
t: 37
xxx after update is x: -2.61579060555
y: 40.2246055603
theta: 4.66845607758
speed: 13.9591875076
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function,62180578709
speed: 14.0960264206
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: 3.67674160004
y: -54.8681106567
theta: 1.62180578709
speed: 14.0960264206
id: 0
t: 30
xxx after update is x: 3.23385262489
y: -54.0844039917
theta: 1.57186877728
speed: 13.6825838089
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: 3.23385262489
y: -54.0844039917
theta: 1.57186877728
speed: 13.6825838089
id: 0
t: 31
xxx after update is x: 3.84216880798
y: -53.5788803101
theta: 1.53665232658
speed: 13.9136915207
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3938955629515512, 0.41984456623865773]
222 self.state_dicts[msg.id][msg.t] is (-3.5623908042907715, 43.689735412597656, 4.921691417694092, 14.121284484863281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: 3.84216880798
y: -53.5788803101
theta: 1.53665232658
speed: 13.9136915207
id: 0
t: 32
xxx after update is x: 3.15586972237
y: -52.1444206238
theta: 1.73529577255
speed: 13.8817768097
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.15586972237
y: -52.1444206238
theta: 1.73529577255
speed: 13.8817768097
id: 0
t: 33
xxx after update is x: 3.1191072464
y: -51.6187934875
theta: 1.59739100933
speed: 13.7750597
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.1191072464
y: -51.6187934875
theta: 1.59739100933
speed: 13.7750597
id: 0
t: 34
xxx after update is x: 3.33491039276
y: -51.721736908
theta: 1.54476511478
speed: 13.3950977325
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36


xxx before update is x: 3.33491039276
y: -51.721736908
theta: 1.54476511478
speed: 13.3950977325
id: 0
t: 35
xxx after update is x: 2.91423106194
y: -50.8216667175
theta: 1.61603116989
speed: 13.8348197937
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: 2.91423106194
y: -50.8216667175
theta: 1.61603116989
speed: 13.8348197937
id: 0
t: 36
xxx after update is x: 2.98228478432
y: -50.3693580627
theta: 1.557112813
speed: 14.120423317
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.98228478432
y: -50.3693580627
theta: 1.557112813
speed: 14.120423317
id: 0
t: 37
xxx after update is x: 3.24966454506
y: -49.653968811
theta: 1.65421402454
speed: 14.2180557251
id: 0
t: 38
maneuver_negotiatir. finish the n times spin:38




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: -2.61579060555
y: 40.2246055603
theta: 4.66845607758
speed: 13.9591875076
id: 1
t: 38
xxx after update is x: -3.4153649807
y: 39.7672767639
theta: 4.90509605408
speed: 14.0626039505
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: -3.4153649807
y: 39.7672767639
theta: 4.90509605408
speed: 14.0626039505
id: 1
t: 39
xxx after update is x: -3.16411232948
y: 39.2724990845
theta: 4.76355886459
speed: 14.047750473
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: -3.16411232948
y: 39.2724990845
theta: 4.76355886459
speed: 14.047750473
id: 1
t: 40
xxx after update is x: -3.29034924507
y: 37.9449577332
theta: 4.65852117538
speed: 13.7988319397
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31696590367694283, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2636072635650635, -48.518890380859375, 1.4811272621154785, 14.04899787902832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


xxx before update is x: -3.29034924507
y: 37.9449577332
theta: 4.65852117538
speed: 13.7988319397
id: 1
t: 41
xxx after update is x: -3.01062059402
y: 37.6869812012
theta: 4.55255508423
speed: 14.0087280273
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: -3.01062059402
y: 37.6869812012
theta: 4.55255508423
speed: 14.0087280273
id: 1
t: 42
xxx after update is x: -3.28184103966
y: 37.3485031128
theta: 4.65876293182
speed: 13.687005043
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28184103966
y: 37.3485031128
theta: 4.65876293182
speed: 13.687005043
id: 1
t: 43
xxx after update is x: -3.13030982018
y: 36.4600639343
theta: 4.71546363831
speed: 14.1588506699
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:44


aaaaaa
aaaaaabbbbb
risk is [0.3167048886541636, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4254190921783447, -46.02931213378906, 1.3480154275894165, 13.97575569152832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: -3.13030982018
y: 36.4600639343
theta: 4.71546363831
speed: 14.1588506699
id: 1
t: 44
xxx after update is x: -2.87981843948
y: 35.8499221802
theta: 4.64912223816
speed: 13.7712240219
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeepy finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:38




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: 3.24966454506
y: -49.653968811
theta: 1.65421402454
speed: 14.2180557251
id: 0
t: 38
xxx after update is x: 3.58094573021
y: -49.3257675171
theta: 1.52612602711
speed: 14.1186380386
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: 3.58094573021
y: -49.3257675171
theta: 1.52612602711
speed: 14.1186380386
id: 0
t: 39
xxx after update is x: 2.79484391212
y: -48.2100028992
theta: 1.59163796902
speed: 13.7231817245
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: 2.79484391212
y: -48.2100028992
theta: 1.59163796902
speed: 13.7231817245
id: 0
t: 40
xxx after update is x: 3.26360726357
y: -48.5188903809
theta: 1.48112726212
speed: 14.048997879
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.36579134445408384, 0.31116783201635734]
222 self.state_dicts[msg.id][msg.t] is (-3.290349245071411, 37.9449577331543, 4.6585211753845215, 13.798831939697266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:42


xxx before update is x: 3.26360726357
y: -48.5188903809
theta: 1.48112726212
speed: 14.048997879
id: 0
t: 41
xxx after update is x: 3.01374030113
y: -47.0378913879
theta: 1.42104649544
speed: 13.9174318314
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: 3.01374030113
y: -47.0378913879
theta: 1.42104649544
speed: 13.9174318314
id: 0
t: 42
xxx after update is x: 3.40651965141
y: -46.9699363708
theta: 1.65357363224
speed: 13.7804937363
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: 3.40651965141
y: -46.9699363708
theta: 1.65357363224
speed: 13.7804937363
id: 0
t: 43
xxx after update is x: 3.42541909218
y: -46.0293121338
theta: 1.34801542759
speed: 13.9757556915
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3040905146913255, 0.42354567865410137]
222 self.state_dicts[msg.id][msg.t] is (-3.130309820175171, 36.46006393432617, 4.715463638305664, 14.15885066986084)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: 3.42541909218
y: -46.0293121338
theta: 1.34801542759
speed: 13.9757556915
id: 0
t: 44
xxx after update is x: 3.23935627937
y: -45.1221656799
theta: 1.83459568024
speed: 13.6939029694
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < seld < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: -2.87981843948
y: 35.8499221802
theta: 4.64912223816
speed: 13.7712240219
id: 1
t: 45
xxx after update is x: -2.66196846962
y: 35.535068512
theta: 4.67662811279
speed: 13.9443645477
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: -2.66196846962
y: 35.535068512
theta: 4.67662811279
speed: 13.9443645477
id: 1
t: 46
xxx after update is x: -3.26233196259
y: 34.2543334961
theta: 4.61178159714
speed: 13.9619112015
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.29029526342785145, 0]
222 self.state_dicts[msg.id][msg.t] is (3.681361436843872, -44.45428466796875, 1.4015934467315674, 14.30154037475586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: -3.26233196259
y: 34.2543334961
theta: 4.61178159714
speed: 13.9619112015
id: 1
t: 47
xxx after update is x: -3.14159941673
y: 34.1638374329
theta: 4.58876037598
speed: 13.6644992828
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49


xxx before update is x: -3.14159941673
y: 34.1638374329
theta: 4.58876037598
speed: 13.6644992828
id: 1
t: 48
xxx after update is x: -3.33665108681
y: 33.8646392822
theta: 4.6585149765
speed: 13.672586441
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: -3.33665108681
y: 33.8646392822
theta: 4.6585149765
speed: 13.672586441
id: 1
t: 49
xxx after update is x: -3.47158408165
y: 32.6914520264
theta: 4.52538299561
speed: 14.0724067688
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21515438332382308, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3692538738250732, -42.64182662963867, 1.5556155443191528, 13.804656028747559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: -3.47158408165
y: 32.6914520264
theta: 4.52538299561
speed: 14.0724067688
id: 1
t: 50
xxx after update is x: -3.37949442863
y: 31.9389801025
theta: 4.63290214539
speed: 13.7811126709
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.37949442863
y: 31.9389801025
theta: 4.63290214539
speed: 13.7811126709
id: 1
t: 51
xxx after update is x: -3.19757604599
y: 31.1106243134
theta: 4.7120718956
speed: 14.0047006607
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:52


aaaaaa
aaaaaabbbbb
risk is [0.3836691335525404, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3429057598114014, -41.479286193847656, 1.6709911823272705, 13.789694786071777)
if we have all mef.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: 3.23935627937
y: -45.1221656799
theta: 1.83459568024
speed: 13.6939029694
id: 0
t: 45
xxx after update is x: 2.92897176743
y: -44.9549789429
theta: 1.5532797575
speed: 14.0462446213
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: 2.92897176743
y: -44.9549789429
theta: 1.5532797575
speed: 14.0462446213
id: 0
t: 46
xxx after update is x: 3.68136143684
y: -44.454284668
theta: 1.40159344673
speed: 14.3015403748
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3987971413787323, 0.32220069062046247]
222 self.state_dicts[msg.id][msg.t] is (-3.262331962585449, 34.25433349609375, 4.611781597137451, 13.96191120147705)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: 3.68136143684
y: -44.454284668
theta: 1.40159344673
speed: 14.3015403748
id: 0
t: 47
xxx after update is x: 3.2007124424
y: -43.5031661987
theta: 1.57225966454
speed: 13.8725271225
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.2007124424
y: -43.5031661987
theta: 1.57225966454
speed: 13.8725271225
id: 0
t: 48
xxx after update is x: 3.10454368591
y: -43.1150360107
theta: 1.56161689758
speed: 13.7927942276
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.10454368591
y: -43.1150360107
theta: 1.56161689758
speed: 13.7927942276
id: 0
t: 49
xxx after update is x: 3.36925387383
y: -42.6418266296
theta: 1.55561554432
speed: 13.8046560287
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:50




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: 3.36925387383
y: -42.6418266296
theta: 1.55561554432
speed: 13.8046560287
id: 0
t: 50
xxx after update is x: 3.69863343239
y: -42.1270713806
theta: 1.56029844284
speed: 13.9788866043
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.42524733669069315, 0.38435734365526364]
222 self.state_dicts[msg.id][msg.t] is (-3.3794944286346436, 31.938980102539062, 4.632902145385742, 13.781112670898438)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: 3.69863343239
y: -42.1270713806
theta: 1.56029844284
speed: 13.9788866043
id: 0
t: 51
xxx after update is x: 3.34290575981
y: -41.4792861938
theta: 1.67099118233
speed: 13.7896947861
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: 3.34290575981
y: -41.4792861938
theta: 1.67099118233
speed: 13.7896947861
id: 0
t: 52
xxx afterasurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: -3.19757604599
y: 31.1106243134
theta: 4.7120718956
speed: 14.0047006607
id: 1
t: 52
xxx after update is x: -3.35634088516
y: 30.5187683105
theta: 4.72278928757
speed: 13.8490381241
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: -3.35634088516
y: 30.5187683105
theta: 4.72278928757
speed: 13.8490381241
id: 1
t: 53
xxx after update is x: -3.03694224358
y: 29.2005310059
theta: 4.6644949913
speed: 13.7626886368
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: -3.03694224358
y: 29.2005310059
theta: 4.6644949913
speed: 13.7626886368
id: 1
t: 54
xxx after update is x: -3.38814020157
y: 29.4606399536
theta: 4.77108860016
speed: 13.8449020386
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: -3.38814020157
y: 29.4606399536
theta: 4.77108860016
speed: 13.8449020386
id: 1
t: 55
xxx after update is x: -3.27582931519
y: 28.8160076141
theta: 4.87541913986
speed: 13.9978847504
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32920020509756337, 0]
222 self.state_dicts[msg.id][msg.t] is (3.48223876953125, -38.37947082519531, 1.620884656906128, 14.004459381103516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: -3.27582931519
y: 28.8160076141
theta: 4.87541913986
speed: 13.9978847504
id: 1
t: 56
xxx after update is x: -3.34945440292
y: 28.6251373291
theta: 4.70142889023
speed: 13.7673034668
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: -3.34945440292
y: 28.6251373291
theta: 4.70142889023
speed: 13.7673034668
id: 1
t: 57
xxx after update is x: -3.16779088974
y: 28.0560016632
theta: 4.53855752945
speed: 13.6801290512
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: -3.16779088974
y: 28.0560016632
theta: 4.53855752945
speed: 13.6801290512
id: 1
t: 58
xxx after update is x: -2.84834885597
y: 27.559709549
theta: 4.63418245316
speed: 13.5857439041
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3702515138460247, 0]
222 self.state_dicts[msg.id][msg.t] is (2.590247392654419, -36.76172637939453, 1.4186618328094482, 13.942094802856445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state f update is x: 3.0241150856
y: -40.3694915771
theta: 1.43047475815
speed: 14.0533399582
id: 0
t: 53

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:54




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55



maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.0241150856
y: -40.3694915771
theta: 1.43047475815
speed: 14.0533399582
id: 0
t: 53
xxx after update is x: 3.62425136566
y: -38.7823295593
theta: 1.4667263031
speed: 13.5194940567
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.62425136566
y: -38.7823295593
theta: 1.4667263031
speed: 13.5194940567
id: 0
t: 54
xxx after update is x: 3.35291028023
y: -39.2820892334
theta: 1.37444090843
speed: 13.6582956314
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: 3.35291028023
y: -39.2820892334
theta: 1.37444090843
speed: 13.6582956314
id: 0
t: 55
xxx after update is x: 3.48223876953
y: -38.3794708252
theta: 1.62088465691
speed: 14.0044593811
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: 3.48223876953
y: -38.3794708252
theta: 1.62088465691
speed: 14.0044593811
id: 0
t: 56
xxx after update is x: 2.93065571785
y: -38.0179138184
theta: 1.60650682449
speed: 13.9424686432
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.30794835439139895, 0.3905124768425985]
222 self.state_dicts[msg.id][msg.t] is (-3.349454402923584, 28.625137329101562, 4.7014288902282715, 13.767303466796875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: 2.93065571785
y: -38.0179138184
theta: 1.60650682449
speed: 13.9424686432
id: 0
t: 57
xxx after update is x: 3.19131827354
y: -37.2131080627
theta: 1.55818200111
speed: 14.2886095047
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: 3.19131827354
y: -37.2131080627
theta: 1.55818200111
speed: 14.2886095047
id: 0
t: 58
xxx after update is x: 2.59024739265
y: -36.7617263794
theta: 1.41866183281
speed: 13.9420948029
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: 2.59024739265
y: -36.7617263794
theta: 1.41866183281
speed: 13.9420948029
id: 0
t: 59
xxx after update is x: 3.56047534943
y: -36.6257247925
theta: 1.51730632782
speed: 14.24958992
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: 3.56047534943
y: -36.6257247925
theta: 1.51730632782
speed: 14.24958992
id: 0
t: 60
xxx after update is x: 3.09344244003
y: -36.2182388306
theta: 1.6unction


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: -2.84834885597
y: 27.559709549
theta: 4.63418245316
speed: 13.5857439041
id: 1
t: 59
xxx after update is x: -3.44875907898
y: 26.8170032501
theta: 4.69028615952
speed: 14.1164922714
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: -3.44875907898
y: 26.8170032501
theta: 4.69028615952
speed: 14.1164922714
id: 1
t: 60
xxx after update is x: -3.21489477158
y: 26.1719932556
theta: 4.8152256012
speed: 13.8331489563
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: -3.21489477158
y: 26.1719932556
theta: 4.8152256012
speed: 13.8331489563
id: 1
t: 61
xxx after update is x: -3.46149516106
y: 25.2880535126
theta: 4.63026809692
speed: 13.8792037964
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3372131813753932, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1980462074279785, -34.89228820800781, 1.7315829992294312, 13.834322929382324)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: -3.46149516106
y: 25.2880535126
theta: 4.63026809692
speed: 13.8792037964
id: 1
t: 62
xxx after update is x: -2.98400449753
y: 24.7492256165
theta: 4.55526447296
speed: 14.0443105698
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: -2.98400449753
y: 24.7492256165
theta: 4.55526447296
speed: 14.0443105698
id: 1
t: 63
xxx after update is x: -3.31959629059
y: 23.9350070953
theta: 4.89595031738
speed: 13.6196498871
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31959629059
y: 23.9350070953
theta: 4.89595031738
speed: 13.6196498871
id: 1
t: 64
xxx after update is x: -2.94894123077
y: 23.8756008148
theta: 4.69883346558
speed: 13.7959403992
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65


aaaaaa
aaaaaabbbbb
risk is [0.31632845078879795, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7255778312683105, -33.169219970703125, 1.5502716302871704, 13.964031219482422)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: -2.94894123077
y: 23.8756008148
theta: 4.69883346558
speed: 13.7959403992
id: 1
t: 65
xxx after update is x: -3.1988761425
y: 22.6371498108
theta: 4.64377117157
speed: 13.9808855057
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxx3185727596
speed: 13.9402704239
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.35852643405123436, 0.3419832984777647]
222 self.state_dicts[msg.id][msg.t] is (-3.2148947715759277, 26.171993255615234, 4.815225601196289, 13.833148956298828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: 3.09344244003
y: -36.2182388306
theta: 1.63185727596
speed: 13.9402704239
id: 0
t: 61
xxx after update is x: 3.19804620743
y: -34.892288208
theta: 1.73158299923
speed: 13.8343229294
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: 3.19804620743
y: -34.892288208
theta: 1.73158299923
speed: 13.8343229294
id: 0
t: 62
xxx after update is x: 3.15520429611
y: -34.3525543213
theta: 1.57291483879
speed: 13.6090202332
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: 3.15520429611
y: -34.3525543213
theta: 1.57291483879
speed: 13.6090202332
id: 0
t: 63
xxx after update is x: 2.98128819466
y: -33.8153305054
theta: 1.49139690399
speed: 13.7793741226
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.40067710422342795, 0.37453633302063344]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:65


xxx before update is x: 2.98128819466
y: -33.8153305054
theta: 1.49139690399
speed: 13.7793741226
id: 0
t: 64
xxx after update is x: 2.72557783127
y: -33.1692199707
theta: 1.55027163029
speed: 13.9640312195
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-2.948941230773926, 23.875600814819336, 4.698833465576172, 13.795940399169922)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: 2.72557783127
y: -33.1692199707
theta: 1.55027163029
speed: 13.9640312195
id: 0
t: 65
xxx after update is x: 3.27410030365
y: -32.1725616455
theta: 1.42648327351
speed: 13.5386104584
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: 3.27410030365
y: -32.1725616455
theta: 1.42648327351
speed: 13.5386104584
id: 0
t: 66
xxx after update is x: 3.37239456177
y: -31.6015300751
theta: 1.53228509426
speed: 13.9664011002
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: 3.37239456177
y: -31.6015300751
theta: 1.53228509426
speed: 13.9664011002
id: 0
t: 67
xxx after update is x: 3.4297451973
y: -31.617023468
theta: 1.54477822781
speed: 13.613240242
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: -3.1988761425
y: 22.6371498108
theta: 4.64377117157
speed: 13.9808855057
id: 1
t: 66
xxx after update is x: -3.43821048737
y: 22.3482303619
theta: 4.66183423996
speed: 13.7618284225
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: -3.43821048737
y: 22.3482303619
theta: 4.66183423996
speed: 13.7618284225
id: 1
t: 67
xxx after update is x: -3.7298541069
y: 21.7643299103
theta: 4.85360717773
speed: 14.0133075714
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.28842023564033487, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4297451972961426, -31.617023468017578, 1.5447782278060913, 13.613240242004395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.7298541069
y: 21.7643299103
theta: 4.85360717773
speed: 14.0133075714
id: 1
t: 68
xxx after update is x: -3.2429125309
y: 21.1172046661
theta: 4.9402923584
speed: 13.6323261261
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: -3.2429125309
y: 21.1172046661
theta: 4.9402923584
speed: 13.6323261261
id: 1
t: 69
xxx after update is x: -3.53578233719
y: 20.6558380127
theta: 4.68693494797
speed: 13.5520963669
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: -3.53578233719
y: 20.6558380127
theta: 4.68693494797
speed: 13.5520963669
id: 1
t: 70
xxx after update is x: -3.32074952126
y: 20.2058506012
theta: 4.83272123337
speed: 13.7941226959
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.42821463210151334, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7205495834350586, -29.59819984436035, 1.5125772953033447, 13.985767364501953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: -3.32074952126
y: 20.2058506012
theta: 4.83272123337
speed: 13.7941226959
id: 1
t: 71
xxx after update is x: -3.67227101326
y: 19.3264255524
theta: 4.67163562775
speed: 13.9680051804
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.67227101326
y: 19.3264255524
theta: 4.67163562775
speed: 13.9680051804
id: 1
t: 72
xxx after update is x: -2.50700068474
y: 18.5551261902
theta: 4.57375907898
speed: 13.8480873108
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:73


aaaaaa
aaaaaabbbbb
risk is [0.40936941780524927, 0]
222 self.state_dicts[msg.id][msg.t] is (2.975583553314209, -28.42362403869629, 1.4912874698638916, 13.516555786132812)
if we have all measurements for axxxxxxxxx
leave the update function 
in spin function, finish the n times spin:69


xxx before update is x: 3.4297451973
y: -31.617023468
theta: 1.54477822781
speed: 13.613240242
id: 0
t: 68
xxx after update is x: 2.98058819771
y: -30.5667476654
theta: 1.76626873016
speed: 13.5740098953
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3190299066051162, 0.35759371688258695]
222 self.state_dicts[msg.id][msg.t] is (-3.242912530899048, 21.117204666137695, 4.9402923583984375, 13.632326126098633)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: 2.98058819771
y: -30.5667476654
theta: 1.76626873016
speed: 13.5740098953
id: 0
t: 69
xxx after update is x: 3.88988375664
y: -30.1459827423
theta: 1.59001648426
speed: 13.8060159683
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.88988375664
y: -30.1459827423
theta: 1.59001648426
speed: 13.8060159683
id: 0
t: 70
xxx after update is x: 2.72054958344
y: -29.5981998444
theta: 1.5125772953
speed: 13.9857673645
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:71




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: 2.72054958344
y: -29.5981998444
theta: 1.5125772953
speed: 13.9857673645
id: 0
t: 71
xxx after update is x: 3.44289493561
y: -29.0305576324
theta: 1.58265137672
speed: 13.6507091522
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:73


xxx before update is x: 3.44289493561
y: -29.0305576324
theta: 1.58265137672
speed: 13.6507091522
id: 0
t: 72
xxx after update is x: 2.97558355331
y: -28.4236240387
theta: 1.49128746986
speed: 13.5165557861
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3556328278454036, 0.05610871232621644]
222 self.state_dicts[msg.id][msg.t] is (-2.507000684738159, 18.555126190185547, 4.573759078979492, 13.848087310791016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: 2.97558355331
y: -28.4236240387
theta: 1.49128746986
speed: 13.5165557861
id: 0
t: 73
xxx after update is x: 3.23620939255
y: -28.3627605438
theta: 1.64991724491
speed: 13.8417329788
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:75


xxx before update is x: 3.23620939255
y: -28.3627605438
theta: 1.64991724491
speed: 13.8417329788
id: 0
t: 74
xxx after update is x: 3.00773739815
y: -27.2937660217
theta: 1.54236793518
speed: 13.8640623093
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: 3.00773739815
y: -27.2937660217
theta: 1.54236793518
speed: 13.8640623093
id: 0
t: 75
xxx after update is x: 3 certain time-stamp perform risk estimation

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: -2.50700068474
y: 18.5551261902
theta: 4.57375907898
speed: 13.8480873108
id: 1
t: 73
xxx after update is x: -2.91972351074
y: 18.0696773529
theta: 4.83978033066
speed: 13.8625926971
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion

self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75


xxx before update is x: -2.91972351074
y: 18.0696773529
theta: 4.83978033066
speed: 13.8625926971
id: 1
t: 74
xxx after update is x: -3.35299348831
y: 17.0831928253
theta: 4.93016672134
speed: 14.1593093872
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: -3.35299348831
y: 17.0831928253
theta: 4.93016672134
speed: 14.1593093872
id: 1
t: 75
xxx after update is x: -2.58686828613
y: 16.4412269592
theta: 4.8661775589
speed: 13.7248945236
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
xxx before update is x: -2.58686828613
y: 16.4412269592
theta: 4.8661775589
speed: 13.7248945236
id: 1
t: 76
xxx after update is x: -3.00997328758
y: 16.2664813995
theta: 4.70868825912
speed: 13.6532821655
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
in spin function, finish the n times spin:77


aaaaaa
aaaaaabbbbb
risk is [0.4444893596570803, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3132646083831787, -25.52204132080078, 1.5325369834899902, 13.550836563110352)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: -3.00997328758
y: 16.2664813995
theta: 4.70868825912
speed: 13.6532821655
id: 1
t: 77
xxx after update is x: -3.23397469521
y: 15.4861087799
theta: 4.74012088776
speed: 13.6721811295
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: -3.23397469521
y: 15.4861087799
theta: 4.74012088776
speed: 13.6721811295
id: 1
t: 78
xxx after update is x: -2.99528002739
y: 14.6782445908
theta: 4.72066402435
speed: 13.887714386
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: -2.99528002739
y: 14.6782445908
theta: 4.72066402435
speed: 13.887714386
id: 1
t: 79
xxx after update is x: -3.20397400856
y: 14.5276708603
theta: 4.81227397919
speed: 14.2887058258
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3306335684734995, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0378365516662598, -24.20735740661621, 1.767988681793213, 12.937798500061035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


goin.44073390961
y: -26.3089542389
theta: 1.57953727245
speed: 13.7481241226
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.42522238132126183, 0.021008964182082177]
222 self.state_dicts[msg.id][msg.t] is (-2.5868682861328125, 16.441226959228516, 4.866177558898926, 13.724894523620605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: 3.44073390961
y: -26.3089542389
theta: 1.57953727245
speed: 13.7481241226
id: 0
t: 76
xxx after update is x: 3.31326460838
y: -25.5220413208
theta: 1.53253698349
speed: 13.5508365631
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.31326460838
y: -25.5220413208
theta: 1.53253698349
speed: 13.5508365631
id: 0
t: 77
xxx after update is x: 2.64704704285
y: -25.6798763275
theta: 1.51682031155
speed: 12.9093952179
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:78




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.64704704285
y: -25.6798763275
theta: 1.51682031155
speed: 12.9093952179
id: 0
t: 78
xxx after update is x: 3.1848897934
y: -24.4565162659
theta: 1.71375346184
speed: 12.94165802
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:79


aaaaaa
risk is [0.4058487887235678, 0.0012942445481483845]
222 self.state_dicts[msg.id][msg.t] is (-2.9952800273895264, 14.678244590759277, 4.720664024353027, 13.887714385986328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: 3.1848897934
y: -24.4565162659
theta: 1.71375346184
speed: 12.94165802
id: 0
t: 79
xxx after update is x: 3.03783655167
y: -24.2073574066
theta: 1.76798868179
speed: 12.9377985001
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: 3.03783655167
y: -24.2073574066
theta: 1.76798868179
speed: 12.9377985001
id: 0
t: 80
xxx after update is x: 3.45235085487
y: -23.3531608582
theta: 1.56664204597
speed: 12.928358078
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: 3.45235085487
y: -23.3531608582
theta: 1.56664204597
speed: 12.928358078
id: 0
t: 81
xxx after update is x: 3.36873483658
y: -22.7107582092
theta: 1.4857827425
speed: 12.3316001892
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: 3.36873483658
y: -22.7107582092
theta: 1.4857827425
speed: 12.3316001892
id: 0
t: 82
xxx after update is x: 3.01382541656
y: -22.6403503418
theta: 1.51122093201
speed: 12.1860485077
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.5729132852682478, 0.058647634556176165]
222 self.state_dicts[msg.id][msg.t] is (-3.3087337017059326g to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: -3.20397400856
y: 14.5276708603
theta: 4.81227397919
speed: 14.2887058258
id: 1
t: 80
xxx after update is x: -3.15072059631
y: 13.6783390045
theta: 4.66008234024
speed: 13.6228942871
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: -3.15072059631
y: 13.6783390045
theta: 4.66008234024
speed: 13.6228942871
id: 1
t: 81
xxx after update is x: -2.93594741821
y: 13.4161453247
theta: 4.75928449631
speed: 13.6230335236
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: -2.93594741821
y: 13.4161453247
theta: 4.75928449631
speed: 13.6230335236
id: 1
t: 82
xxx after update is x: -3.30873370171
y: 12.3559103012
theta: 4.57974720001
speed: 13.8641109467
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.27997287143698674, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0138254165649414, -22.640350341796875, 1.511220932006836, 12.18604850769043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: -3.30873370171
y: 12.3559103012
theta: 4.57974720001
speed: 13.8641109467
id: 1
t: 83
xxx after update is x: -3.30507230759
y: 11.8318881989
theta: 4.54835033417
speed: 13.6757526398
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85


xxx before update is x: -3.30507230759
y: 11.8318881989
theta: 4.54835033417
speed: 13.6757526398
id: 1
t: 84
xxx after update is x: -3.63257193565
y: 10.9543638229
theta: 4.96776533127
speed: 14.0419616699
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.288276204593984, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3501057624816895, -21.334617614746094, 1.5873922109603882, 11.36069393157959)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: -3.63257193565
y: 10.9543638229
theta: 4.96776533127
speed: 14.0419616699
id: 1
t: 85
xxx after update is x: -3.27136826515
y: 10.8758306503
theta: 4.87260055542
speed: 13.8635444641
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: -3.27136826515
y: 10.8758306503
theta: 4.87260055542
speed: 13.8635444641
id: 1
t: 86
xxx after update is x: -3.82131409645
y: 9.61098098755
theta: 4.52999544144
speed: 14.0234727859
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.34236682751919506, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9205429553985596, 12.355910301208496, 4.579747200012207, 13.864110946655273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: 3.01382541656
y: -22.6403503418
theta: 1.51122093201
speed: 12.1860485077
id: 0
t: 83
xxx after update is x: 2.67711019516
y: -21.5504798889
theta: 1.4898225069
speed: 12.1948232651
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:85


xxx before update is x: 2.67711019516
y: -21.5504798889
theta: 1.4898225069
speed: 12.1948232651
id: 0
t: 84
xxx after update is x: 3.35010576248
y: -21.3346176147
theta: 1.58739221096
speed: 11.3606939316
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: 3.35010576248
y: -21.3346176147
theta: 1.58739221096
speed: 11.3606939316
id: 0
t: 85
xxx after update is x: 3.3243830204
y: -20.778263092
theta: 1.53826963902
speed: 11.7974071503
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.2356462169279085, 0.037444365055338096]
222 self.state_dicts[msg.id][msg.t] is (-3.2713682651519775, 10.87583065032959, 4.872600555419922, 13.863544464111328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: 3.3243830204
y: -20.778263092
theta: 1.53826963902
speed: 11.7974071503
id: 0
t: 86
xxx after update is x: 2.9205429554
y: -20.2412242889
theta: 1.47160291672
speed: 11.5146045685
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$


 self.man_init:
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: 2.9205429554
y: -20.2412242889
theta: 1.47160291672
speed: 11.5146045685
id: 0
t: 87
xxx after update is x: 3.66191124916
y: -19.9637737274
theta: 1.34497737885
speed: 11.1388158798
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 3.91111111111
!!!!after check statue the self.tag is [3.911111111111111, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.91111111111

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.8666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0,left
!!!!change state to get
GET,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.91111111111
self.communication_details == 0
sending GET,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0,left to c, -20.24122428894043, 1.4716029167175293, 11.514604568481445)

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: -3.82131409645
y: 9.61098098755
theta: 4.52999544144
speed: 14.0234727859
id: 1
t: 87
xxx after update is x: -2.81979632378
y: 9.29473781586
theta: 4.64762496948
speed: 14.0064678192
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion

if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.81979632378
y: 9.29473781586
theta: 4.64762496948
speed: 14.0064678192
id: 1
t: 88
xxx after update is x: -3.23028278351
y: 7.76601028442
theta: 4.51565551758
speed: 13.6292066574
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23028278351
y: 7.76601028442
theta: 4.51565551758
speed: 13.6292066574
id: 1
t: 89
xxx after update is x: -3.09577703476
y: 8.18618392944
theta: 4.79118871689
speed: 13.6246967316
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.09577703476
y: 8.18618392944
theta: 4.79118871689
speed: 13.6246967316
id: 1
t: 90
xxx after update is x: -3.14539384842
y: 7.53584432602
theta: 4.78285884857
speed: 13.6577892303
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91


aaaaaa
aaaaaabbbbb
risk is [0.36925906616326104, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2347683906555176, -17.822818756103516, 1.5666848421096802, 10.329644203186035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: -3.14539384842
y: 7.53584432602
theta: 4.78285884857
speed: 13.6577892303
id: 1
t: 91
xxx after update is x: -3.82133364677
y: 6.3953332901
theta: 4.83745336533
speed: 13.9329490662
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 4.08888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.08888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '3.91111111111', 'IntendedCourse': 'left', 'Position': ['3.6619112491607666', ' -19.963773727416992', ' 1.3449773788452148'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.173827160494
sender travel direction is:  north
sender earliest entering time is:  1.85109705512
sender last entering time is:  1.85109705512
sender last leaving time is:  4.24416330668
my entering time is:  0.173827160494
my leaving time is:  1.17784671294
i have left the inar 1 from car 0

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: 3.66191124916
y: -19.9637737274
theta: 1.34497737885
speed: 11.1388158798
id: 0
t: 88
xxx after update is x: 3.37544608116
y: -18.3429889679
theta: 1.51448881626
speed: 10.3586101532
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.37544608116
y: -18.3429889679
theta: 1.51448881626
speed: 10.3586101532
id: 0
t: 89
xxx after update is x: 3.56935381889
y: -18.4589958191
theta: 1.39630568027
speed: 10.6734037399
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.56935381889
y: -18.4589958191
theta: 1.39630568027
speed: 10.6734037399
id: 0
t: 90
xxx after update is x: 3.23476839066
y: -17.8228187561
theta: 1.56668484211
speed: 10.3296442032
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
current clock is 4.04444444444




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.04444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.08888888889', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,4.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: 3.23476839066
y: -17.8228187561
theta: 1.56668484211
speed: 10.3296442032
id: 0
t: 91
xxx after update is x: 4.08593273163
y: -16.8965816498
theta: 1.59205532074
speed: 10.236779213
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: 4.08593273163
y: -16.8965816498
theta: 1.59205532074
speed: 10.236779213
id: 0
t: 92
xxx after update is x: 3.2244811058
y: -16.891784668
theta: 1.60930454731
speed: 9.78716850281
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
membership is [4.133333333333334, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.133333333333334, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94


xxx before update is x: 3.2244811058
y: -16.891784668
theta: 1.60930454731
speed: 9.78716850281
id: 0
t: 93
xxx after update is x: 2.86584162712
y: -16.5676193237
theta: 1.50474262238
speed:tersection:  False
not conflicted because sender enters after i leave
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,4.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [8.866666666666667, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 4.08888888889
self.communication_details == 0
sending GRANT,1,4.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 4.08888888889




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: -3.82133364677
y: 6.3953332901
theta: 4.83745336533
speed: 13.9329490662
id: 1
t: 92
xxx after update is x: -3.64416360855
y: 5.90154743195
theta: 4.68478155136
speed: 14.172287941
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94


xxx before update is x: -3.64416360855
y: 5.90154743195
theta: 4.68478155136
speed: 14.172287941
id: 1
t: 93
xxx after update is x: -3.33135890961
y: 5.59406757355
theta: 4.78425598145
speed: 13.7928943634
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.424009787873653, 0.998084738608417]
222 self.state_dicts[msg.id][msg.t] is (2.8658416271209717, -16.56761932373047, 1.5047426223754883, 9.79006576538086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: -3.33135890961
y: 5.59406757355
theta: 4.78425598145
speed: 13.7928943634
id: 1
t: 94
xxx after update is x: -3.9555644989
y: 4.7957367897
theta: 4.76277160645
speed: 13.9985561371
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: -3.9555644989
y: 4.7957367897
theta: 4.76277160645
speed: 13.9985561371
id: 1
t: 95
xxx after update is x: -2.84871673584
y: 4.19278717041
theta: 4.78076076508
speed: 13.8706827164
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3311866402100882, 0.9871211743465468]
222 self.state_dicts[msg.id][msg.t] is (3.4256887435913086, -16.44045639038086, 1.452440619468689, 9.22809886932373)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: -2.84871673584
y: 4.19278717041
theta: 4.78076076508
speed: 13.8706827164
id: 1
t: 96
xxx after update is x: -3.27734851837
y: 3.45394706726
theta: 4.81986808777
speed: 14.076292038
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin funct 9.79006576538
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.35838330988540645, 0.11920932431702173]
222 self.state_dicts[msg.id][msg.t] is (-3.3313589096069336, 5.594067573547363, 4.7842559814453125, 13.79289436340332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: 2.86584162712
y: -16.5676193237
theta: 1.50474262238
speed: 9.79006576538
id: 0
t: 94
xxx after update is x: 3.06619334221
y: -17.1858673096
theta: 1.7878702879
speed: 9.47552108765
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.06619334221
y: -17.1858673096
theta: 1.7878702879
speed: 9.47552108765
id: 0
t: 95
xxx after update is x: 3.42568874359
y: -16.4404563904
theta: 1.45244061947
speed: 9.22809886932
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:96




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: 3.42568874359
y: -16.4404563904
theta: 1.45244061947
speed: 9.22809886932
id: 0
t: 96
xxx after update is x: 3.40213489532
y: -15.1003160477
theta: 1.57298016548
speed: 8.87687397003
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.39297845716771584, 0.0815212119200935]
222 self.state_dicts[msg.id][msg.t] is (-3.277348518371582, 3.453947067260742, 4.819868087768555, 14.076292037963867)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98


xxx before update is x: 3.40213489532
y: -15.1003160477
theta: 1.57298016548
speed: 8.87687397003
id: 0
t: 97
xxx after update is x: 3.52625870705
y: -15.0917081833
theta: 1.5799280405
speed: 8.47941398621
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: 3.52625870705
y: -15.0917081833
theta: 1.5799280405
speed: 8.47941398621
id: 0
t: 98
xxx after update is x: 3.19101238251
y: -14.9990797043
theta: 1.61770939827
speed: 8.845079422
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: 3.19101238251
y: -14.9990797043
theta: 1.61770939827
speed: 8.845079422
id: 0
t: 99
xxx after update is x: 3.70897865295
y: -14.9060945511
theta: 1.58870732784
speed: 8.07826900482
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: 3.70897865295
y: -14.9060945511
theta: 1.58870732784
speed: 8.07826900482
id: 0
t: 100
xxx after update is x: 3.64819121361
y: -13.8813762665
theta: 1.51858460903
speed: 8.28624248505
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5787925917818595, 0.020729545460805052]
222 ion, finish the n times spin:98

xxx before update is x: -3.27734851837
y: 3.45394706726
theta: 4.81986808777
speed: 14.076292038
id: 1
t: 97
xxx after update is x: -3.11389422417
y: 2.67546010017
theta: 4.660572052
speed: 13.9472675323
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: -3.11389422417
y: 2.67546010017
theta: 4.660572052
speed: 13.9472675323
id: 1
t: 98
xxx after update is x: -2.88266181946
y: 2.48479819298
theta: 4.64761686325
speed: 13.9955148697
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.34566062340611176, 0.9922941356747623]
222 self.state_dicts[msg.id][msg.t] is (3.191012382507324, -14.999079704284668, 1.6177093982696533, 8.84507942199707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: -2.88266181946
y: 2.48479819298
theta: 4.64761686325
speed: 13.9955148697
id: 1
t: 99
xxx after update is x: -3.03511619568
y: 1.39909148216
theta: 4.97552776337
speed: 13.9663724899
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: -3.03511619568
y: 1.39909148216
theta: 4.97552776337
speed: 13.9663724899
id: 1
t: 100
xxx after update is x: -3.88562083244
y: 1.57103526592
theta: 4.73375558853
speed: 13.7742156982
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: -3.88562083244
y: 1.57103526592
theta: 4.73375558853
speed: 13.7742156982
id: 1
t: 101
xxx after update is x: -2.74770283699
y: -0.12271437794
theta: 4.67759132385
speed: 13.9802150726
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: -2.74770283699
y: -0.12271437794
theta: 4.67759132385
speed: 13.9802150726
id: 1
t: 102
xxx after update is x: -3.18640184402
y: 0.431872189045
theta: 4.71079349518
speed: 14.1345863342
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21996560562464335, 0.9856155266105183]
222 self.state_dicts[msg.id][msg.t] is (2.6109306812286377, -13.341870307922363, 1.4000275135040283, 7.803592205047607)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: -3.18640184402
y: 0.431872189045
theta: 4.71079349518
speed: 14.1345863342
id: 1
t: 103
xxx after update is x: -3.97763061523
y: -0.552242219448
theta: 4.6549949646
speed: 13.7797231674
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105


xxx before update isself.state_dicts[msg.id][msg.t] is (-3.8856208324432373, 1.5710352659225464, 4.733755588531494, 13.774215698242188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: 3.64819121361
y: -13.8813762665
theta: 1.51858460903
speed: 8.28624248505
id: 0
t: 101
xxx after update is x: 4.01825284958
y: -13.6796960831
theta: 1.59281373024
speed: 8.15171146393
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4347019713688192, 1.6796825631083277e-48]
222 self.state_dicts[msg.id][msg.t] is (-2.7477028369903564, -0.12271437793970108, 4.677591323852539, 13.980215072631836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: 4.01825284958
y: -13.6796960831
theta: 1.59281373024
speed: 8.15171146393
id: 0
t: 102
xxx after update is x: 2.61093068123
y: -13.3418703079
theta: 1.4000275135
speed: 7.80359220505
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: 2.61093068123
y: -13.3418703079
theta: 1.4000275135
speed: 7.80359220505
id: 0
t: 103
xxx after update is x: 3.37433600426
y: -13.0749759674
theta: 1.62992548943
speed: 7.25331687927
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: 3.37433600426
y: -13.0749759674
theta: 1.62992548943
speed: 7.25331687927
id: 0
t: 104
xxx after update is x: 3.87277340889
y: -13.1597490311
theta: 1.45947813988
speed: 6.99748325348
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6254071288735008, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9441542625427246, -1.195480227470398, 4.832306385040283, 13.759685516357422)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: 3.87277340889
y: -13.1597490311
theta: 1.45947813988
speed: 6.99748325348
id: 0
t: 105
xxx after update is x: 3.28583598137
y: -12.7935161591
theta: 1.48077750206
speed: 6.98739051819
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.71111111111
self.communication_details == 0
sending RELEASE,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.s x: -3.97763061523
y: -0.552242219448
theta: 4.6549949646
speed: 13.7797231674
id: 1
t: 104

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106



xxx after update is x: -2.94415426254
y: -1.19548022747
theta: 4.83230638504
speed: 13.7596855164
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.94415426254
y: -1.19548022747
theta: 4.83230638504
speed: 13.7596855164
id: 1
t: 105
xxx after update is x: -3.64908242226
y: -1.84587621689
theta: 4.59971284866
speed: 14.0307168961
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107


xxx before update is x: -3.64908242226
y: -1.84587621689
theta: 4.59971284866
speed: 14.0307168961
id: 1
t: 106
xxx after update is x: -3.13759160042
y: -2.48542356491
theta: 4.5341758728
speed: 13.8025875092
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6117116539622862, 0.9918556985059201]
Received -->>: 
current clock is 4.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '11', 'Sender': '0', 'TagID': '1', 'Time': '3.91111111111', 'Position': ['(3.6619112491607666', ' -19.963773727416992', ' 1.3449773788452148)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.91111111111,(3.6619112491607666, -19.963773727416992, 1.3449773788452148),11,1,3.91111111111,0 from  car0
status: 4




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 4.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '4.71111111111', 'IntendedCourse': 'left', 'Position': ['3.2858359813690186', ' -12.793516159057617', ' 1.4807775020599365'], 'TagID': '0', 'Type': 'GET', 'Velocity': '6'}
car 1 received GET,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.209382716049
sender travel direction is:  north
sender earliest entering time is:  1.11998040998
sender last entering time is:  1.39710251208
sender last leaving time is:  3.46223346181
my entering time is:  0.209382716049
my leaving time is:  0.573987774931
i have left the intersection:  False
not conflicted because sender enters after i leave
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.75555555556
self.communication_details == 0
sending DENY,1,4.75555555556,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




222 self.state_dicts[msg.id][msg.t] is (3.649662733078003, -12.219383239746094, 1.530971884727478, 6.813894271850586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function

tatus is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.71111111111

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.711111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0,left
!!!!change state to get
GET,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.71111111111
self.communication_details == 0
sending GET,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
current clock is 4.71111111111




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.71111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.75555555556', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'DENY'}
car 0 received DENY,1,4.75555555556,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.711111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.711111111111111, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107


xxx before update is x: 3.28583598137
y: -12.7935161591
theta: 1.48077750206
speed: 6.98739051819
id: 0
t: 106
xxx after update is x: 3.64966273308
y: -12.2193832397
theta: 1.53097188473
speed: 6.81389427185
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: 3.64966273308
y: -12.2193832397
theta: 1.53097188473
speed: 6.81389427185
id: 0
t: 107
xxx after update is x: 3.06170034409
y: -12.126739502
theta: 1.61343896389
speed: 6.63015413284
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5598094434507582, 0.013754216580268774]
222 self.state_dicts[msg.id][msg.t] is (-2.8015224933624268, -2.225846767425537, 4.754234790802002, 13.998493194580078)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: 3.06170034409
y: -12.126739502
theta: 1.61343896389
speed: 6.63015413284
id: 0
t: 108
xxx after update is x: 3.80315113068
y: -12.1122331619
theta: 1.54548919201
speed: 6.29737234116
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 se
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: -3.13759160042
y: -2.48542356491
theta: 4.5341758728
speed: 13.8025875092
id: 1
t: 107
xxx after update is x: -2.80152249336
y: -2.22584676743
theta: 4.7542347908
speed: 13.9984931946
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: -2.80152249336
y: -2.22584676743
theta: 4.7542347908
speed: 13.9984931946
id: 1
t: 108
xxx after update is x: -3.42924308777
y: -3.79577589035
theta: 4.91077136993
speed: 13.7311897278
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5183895584241686, 0.9996373354944742]
222 self.state_dicts[msg.id][msg.t] is (3.8031511306762695, -12.11223316192627, 1.5454891920089722, 6.297372341156006)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110


xxx before update is x: -3.42924308777
y: -3.79577589035
theta: 4.91077136993
speed: 13.7311897278
id: 1
t: 109
xxx after update is x: -3.32510471344
y: -3.81042432785
theta: 4.74365663528
speed: 13.5883188248
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: -3.32510471344
y: -3.81042432785
theta: 4.74365663528
speed: 13.5883188248
id: 1
t: 110
xxx after update is x: -3.24022173882
y: -5.12572669983
theta: 4.62167215347
speed: 14.0294532776
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: -3.24022173882
y: -5.12572669983
theta: 4.62167215347
speed: 14.0294532776
id: 1
t: 111
xxx after update is x: -3.48550367355
y: -5.30557870865
theta: 4.85854053497
speed: 13.8835954666
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5755954631608465, 0.9939328730989065]
222 self.state_dicts[msg.id][msg.t] is (3.4433107376098633, -10.72896671295166, 1.6286758184432983, 5.8764190673828125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.48550367355
y: -5.30557870865
theta: 4.85854053497
speed: 13.8835954666
id: 1
t: 112
xxx after update is x: -3.40257525444
y: -6.02323102951
theta: 4.71516227722
speed: 13.894490242
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:113




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: -3.40257525444
y: -6.02323102951
theta: 4.71516227722
speed: 13.894490242
id: 1
t: 113
xxx after update is x: -3.47349524498
y: -7.03671216965
theta: 4.72021913528
speed: 13.5808372498
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.38539400679lf.man_init:
xxx before update is x: 3.80315113068
y: -12.1122331619
theta: 1.54548919201
speed: 6.29737234116
id: 0
t: 109
xxx after update is x: 3.28943514824
y: -10.7787284851
theta: 1.55928778648
speed: 6.04008674622
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: 3.28943514824
y: -10.7787284851
theta: 1.55928778648
speed: 6.04008674622
id: 0
t: 110
xxx after update is x: 3.46418499947
y: -11.1035795212
theta: 1.53845655918
speed: 5.86941814423
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4458770907699694, 3.0359426094686806e-34]
222 self.state_dicts[msg.id][msg.t] is (-3.2402217388153076, -5.125726699829102, 4.6216721534729, 14.02945327758789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: 3.46418499947
y: -11.1035795212
theta: 1.53845655918
speed: 5.86941814423
id: 0
t: 111
xxx after update is x: 3.44331073761
y: -10.728966713
theta: 1.62867581844
speed: 5.87641906738
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: 3.44331073761
y: -10.728966713
theta: 1.62867581844
speed: 5.87641906738
id: 0
t: 112
xxx after update is x: 3.53482627869
y: -10.4571752548
theta: 1.6528608799
speed: 5.32683801651
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: 3.53482627869
y: -10.4571752548
theta: 1.6528608799
speed: 5.32683801651
id: 0
t: 113
xxx after update is x: 3.66887950897
y: -9.42212200165
theta: 1.74651932716
speed: 5.13490724564
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3942727281923552, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4734952449798584, -7.036712169647217, 4.720219135284424, 13.58083724975586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: 3.66887950897
y: -9.42212200165
theta: 1.74651932716
speed: 5.13490724564
id: 0
t: 114
xxx after update is x: 3.41081905365
y: -9.83078193665
theta: 1.36598622799
speed: 4.84904670715
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: 3.41081905365
y: -9.83078193665
theta: 1.36598622799
speed: 4.84904670715
id: 0
t: 115
xxx after update is x: 2.92017269135
y: -9.13031005859
theta: 1.59760534763
speed: 4.67708730698
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: 2.92017269135
y: -9.13031005859
theta: 1.59760534763
spe471064, 0.9980101716330472]
222 self.state_dicts[msg.id][msg.t] is (3.668879508972168, -9.42212200164795, 1.7465193271636963, 5.134907245635986)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: -3.47349524498
y: -7.03671216965
theta: 4.72021913528
speed: 13.5808372498
id: 1
t: 114
xxx after update is x: -3.46742248535
y: -7.20951795578
theta: 4.74668121338
speed: 13.5632200241
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: -3.46742248535
y: -7.20951795578
theta: 4.74668121338
speed: 13.5632200241
id: 1
t: 115
xxx after update is x: -3.04688549042
y: -7.12369680405
theta: 4.68443584442
speed: 13.932311058
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: -3.04688549042
y: -7.12369680405
theta: 4.68443584442
speed: 13.932311058
id: 1
t: 116
xxx after update is x: -3.82372021675
y: -8.3875207901
theta: 4.69704437256
speed: 13.6938199997
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6809724073064263, 0.0005857514626624522]
222 self.state_dicts[msg.id][msg.t] is (3.683987617492676, -9.713738441467285, 1.5748882293701172, 4.409501552581787)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.82372021675
y: -8.3875207901
theta: 4.69704437256
speed: 13.6938199997
id: 1
t: 117
xxx after update is x: -3.10396003723
y: -9.19576358795
theta: 4.59749984741
speed: 13.6128368378
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: -3.10396003723
y: -9.19576358795
theta: 4.59749984741
speed: 13.6128368378
id: 1
t: 118
xxx after update is x: -3.96556210518
y: -10.1097784042
theta: 4.78860473633
speed: 13.9361743927
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.96556210518
y: -10.1097784042
theta: 4.78860473633
speed: 13.9361743927
id: 1
t: 119
xxx after update is x: -3.59078979492
y: -9.99796104431
theta: 4.81898117065
speed: 13.8187074661
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120


aaaaaa
aaaaaabbbbb
risk is [0.9977344898177972, 0]
Stops!
222 self.state_dicts[msg.id][msg.t] is (4.244799613952637, -8.623592376708984, 1.5156947374343872, 3.811030864715576)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: -3.59078979492
y: -9.99796104431
theta: 4.81898ed: 4.67708730698
id: 0
t: 116

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119



xxx after update is x: 3.68398761749
y: -9.71373844147
theta: 1.57488822937
speed: 4.40950155258
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.68398761749
y: -9.71373844147
theta: 1.57488822937
speed: 4.40950155258
id: 0
t: 117
xxx after update is x: 3.57577013969
y: -9.34313964844
theta: 1.56772232056
speed: 3.7473526001
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.57577013969
y: -9.34313964844
theta: 1.56772232056
speed: 3.7473526001
id: 0
t: 118
xxx after update is x: 3.03380656242
y: -8.62914943695
theta: 1.67371428013
speed: 3.93908286095
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.3139000776234926, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.965562105178833, -10.10977840423584, 4.788604736328125, 13.936174392700195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120


xxx before update is x: 3.03380656242
y: -8.62914943695
theta: 1.67371428013
speed: 3.93908286095
id: 0
t: 119
xxx after update is x: 4.24479961395
y: -8.62359237671
theta: 1.51569473743
speed: 3.81103086472
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 4.24479961395
y: -8.62359237671
theta: 1.51569473743
speed: 3.81103086472
id: 0
t: 120
xxx after update is x: 2.81723189354
y: -8.87944316864
theta: 1.55785799026
speed: 3.53288125992
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:121


maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 5.37777777778
self.communication_details == 0
sending RELEASE,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.37777777778

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.377777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0,left
!!!!change state to get
GET,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0,left
maneuver_negotiatir.py117065
speed: 13.8187074661
id: 1
t: 120maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 5.33333333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122


Received -->>: 
current clock is 5.33333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '6', 'Sender': '0', 'TagID': '1', 'Time': '4.71111111111', 'Position': ['(3.2858359813690186', ' -12.793516159057617', ' 1.4807775020599365)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.71111111111,(3.2858359813690186, -12.793516159057617, 1.4807775020599365),6,1,3.91111111111,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 5.33333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '5.37777777778', 'IntendedCourse': 'left', 'Position': ['2.8172318935394287', ' -8.879443168640137', ' 1.5578579902648926'], 'TagID': '0', 'Type': 'GET', 'Velocity': '3'}
car 1 received GET,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.239012345679
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.33333333333,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0

xxx after update is x: -3.74908971786
y: -11.3431901932
theta: 4.59905147552
speed: 13.6732320786
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.74908971786
y: -11.3431901932
theta: 4.59905147552
speed: 13.6732320786
id: 1
t: 121
xxx after update is x: -3.50315356255
y: -11.6872730255
theta: 4.54367351532
speed: 13.9023857117
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
!!!threading.Timer
tgarnt done
added car with id 0 to grantlist. current grantlist:  {0: [10.2, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 5.42222222222
self.communication_details == 0
sending GRANT,1,5.33333333333,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 5.42222222222




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: -3.50315356255
y: -11.6872730255
theta: 4.54367351532
speed: 13.9023857117
id: 1
t: 122
xxx after update is x: -3.2458050251
y: -12.1201238632
theta: 4.60708522797
speed: 13.5692653656
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: -3.2458050251
y: -12.1201238632
theta: 4.607 start the update_agent_message
current clock is 5.37777777778
self.communication_details == 0
sending GET,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 5.37777777778




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.37777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '5.33333333333', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.33333333333,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.377777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.377777777777778, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
xxx before update is x: 2.81723189354
y: -8.87944316864
theta: 1.55785799026
speed: 3.53288125992
id: 0
t: 121
xxx after update is x: 3.3191819191
y: -9.06258010864
theta: 1.64079928398
speed: 3.42333173752
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:122


aaaaaa
risk is [0.9852638889584354, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5031535625457764, -11.687273025512695, 4.543673515319824, 13.902385711669922)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: 3.3191819191
y: -9.06258010864
theta: 1.64079928398
speed: 3.42333173752
id: 0
t: 122
xxx after update is x: 2.80169391632
y: -8.37059211731
theta: 1.62294483185
speed: 2.83633947372
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: 2.80169391632
y: -8.37059211731
theta: 1.62294483185
speed: 2.83633947372
id: 0
t: 123
xxx after update is x: 3.0164706707
y: -7.94533777237
theta: 1.69143986702
speed: 2.70564746857
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9629761436241505, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.590238094329834, -12.85888671875, 4.712667942047119, 13.923651695251465)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: 3.0164706707
y: -7.94533777237
theta: 1.69143986702
speed: 2.70564746857
id: 0
t: 124
xxx after update is x: 3.99466395378
y: -7.98118591309
theta: 1.650771260208522797
speed: 13.5692653656
id: 1
t: 123
xxx after update is x: -3.59023809433
y: -12.8588867188
theta: 4.71266794205
speed: 13.9236516953
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: -3.59023809433
y: -12.8588867188
theta: 4.71266794205
speed: 13.9236516953
id: 1
t: 124
xxx after update is x: -2.75414729118
y: -13.3190193176
theta: 4.70700836182
speed: 13.7904024124
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9681541691970628, 0.4943999999999979]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.994663953781128, -7.9811859130859375, 1.6507712602615356, 2.6541876792907715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: -2.75414729118
y: -13.3190193176
theta: 4.70700836182
speed: 13.7904024124
id: 1
t: 125
xxx after update is x: -3.3247821331
y: -14.0840969086
theta: 4.63781261444
speed: 13.5820646286
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: -3.3247821331
y: -14.0840969086
theta: 4.63781261444
speed: 13.5820646286
id: 1
t: 126
xxx after update is x: -3.19896316528
y: -14.4251871109
theta: 4.85710430145
speed: 14.2146158218
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9706131988470437, 0.4895999999999979]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.231472969055176, -8.288256645202637, 1.4871183633804321, 2.1546130180358887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: -3.19896316528
y: -14.4251871109
theta: 4.85710430145
speed: 14.2146158218
id: 1
t: 127
xxx after update is x: -3.48996138573
y: -14.8611545563
theta: 4.69303417206
speed: 13.5167007446
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: -3.48996138573
y: -14.8611545563
theta: 4.69303417206
speed: 13.5167007446
id: 1
t: 128
xxx after update is x: -3.15142321587
y: -16.4765167236
theta: 4.86394834518
speed: 14.082493782
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8489259915795058, 0.479999999999998]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.3039610385894775, -7.571414470672607, 1.4807038307189941, 1.8701863288879395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: -3.15142321587
y: -16.4765167236
theta: 4.86394834518
speed: 14.082493782
id: 1
t: 129
xxx after updat6
speed: 2.65418767929
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.99466395378
y: -7.98118591309
theta: 1.65077126026
speed: 2.65418767929
id: 0
t: 125
xxx after update is x: 2.95800161362
y: -8.62801933289
theta: 1.60335278511
speed: 2.29569721222
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:126




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: 2.95800161362
y: -8.62801933289
theta: 1.60335278511
speed: 2.29569721222
id: 0
t: 126
xxx after update is x: 3.23147296906
y: -8.2882566452
theta: 1.48711836338
speed: 2.15461301804
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8993160877424057, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.198963165283203, -14.425187110900879, 4.857104301452637, 14.214615821838379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: 3.23147296906
y: -8.2882566452
theta: 1.48711836338
speed: 2.15461301804
id: 0
t: 127
xxx after update is x: 2.61379671097
y: -7.8564286232
theta: 1.50485098362
speed: 2.28120827675
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: 2.61379671097
y: -7.8564286232
theta: 1.50485098362
speed: 2.28120827675
id: 0
t: 128
xxx after update is x: 3.30396103859
y: -7.57141447067
theta: 1.48070383072
speed: 1.87018632889
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: 3.30396103859
y: -7.57141447067
theta: 1.48070383072
speed: 1.87018632889
id: 0
t: 129
xxx after update is x: 3.09010243416
y: -7.72897052765
theta: 1.38350772858
speed: 1.2142175436
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8720868806217631, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4541664123535156, -16.58652687072754, 4.677587985992432, 13.620234489440918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131


xxx before update is x: 3.09010243416
y: -7.72897052765
theta: 1.38350772858
speed: 1.2142175436
id: 0
t: 130
xxx after update is x: 3.80390095711
y: -7.54926252365
theta: 1.4927893877
speed: 1.08990442753
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: 3.80390095711
y: -7.54926252365
theta: 1.4927893877
speed: 1.08990442753
id: 0
t: 131
xxx after update is x: 3.3370923996
y: -7.57485628128
theta: 1.59960317612
speed: 1.35928189754
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function e is x: -3.45416641235
y: -16.5865268707
theta: 4.67758798599
speed: 13.6202344894
id: 1
t: 130maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 5.77777777778


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131



maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.45416641235
y: -16.5865268707
theta: 4.67758798599
speed: 13.6202344894
id: 1
t: 130
xxx after update is x: -3.70981216431
y: -17.3377399445
theta: 4.66226243973
speed: 13.7360010147
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
!!!threading.Timer
tgarnt done


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: -3.70981216431
y: -17.3377399445
theta: 4.66226243973
speed: 13.7360010147
id: 1
t: 131
xxx after update is x: -2.80232620239
y: -17.7746868134
theta: 4.68912792206
speed: 13.6820602417
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133


xxx before update is x: -2.80232620239
y: -17.7746868134
theta: 4.68912792206
speed: 13.6820602417
id: 1
t: 132
xxx after update is x: -3.22384572029
y: -18.7727069855
theta: 4.62542152405
speed: 13.4868946075
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6717779435604053, 0.48799999999999794]
222 self.state_dicts[msg.id][msg.t] is (3.117351531982422, -7.976583003997803, 1.3691998720169067, 0.6568541526794434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134


xxx before update is x: -3.22384572029
y: -18.7727069855
theta: 4.62542152405
speed: 13.4868946075
id: 1
t: 133
xxx after update is x: -2.6865131855
y: -19.0189151764
theta: 4.7807674408
speed: 14.0740203857
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: -2.6865131855
y: -19.0189151764
theta: 4.7807674408
speed: 14.0740203857
id: 1
t: 134
xxx after update is x: -3.59771203995
y: -19.9068412781
theta: 4.67182064056
speed: 13.9471693039
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: -3.59771203995
y: -19.9068412781
theta: 4.67182064056
speed: 13.9471693039
id: 1
t: 135
xxx after update is x: -3.21472859383
y: -20.2760238647
theta: 4.53087615967
speed: 13.6696243286
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9515204604838656, 0.4927999999999979]
Stops!
222 self.state_dicts[msg.id][msg.t] is (2.9618756771087646, -7.521360874176025, 1.3810402154922485, 0.12395227700471878)
if
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.3370923996
y: -7.57485628128
theta: 1.59960317612
speed: 1.35928189754
id: 0
t: 132
xxx after update is x: 3.11735153198
y: -7.976583004
theta: 1.36919987202
speed: 0.656854152679
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:133


aaaaaa
risk is [0.888017349094194, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2238457202911377, -18.772706985473633, 4.625421524047852, 13.486894607543945)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.11735153198
y: -7.976583004
theta: 1.36919987202
speed: 0.656854152679
id: 0
t: 133
xxx after update is x: 3.25279593468
y: -8.42137432098
theta: 1.64245665073
speed: 0.494153320789
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: 3.25279593468
y: -8.42137432098
theta: 1.64245665073
speed: 0.494153320789
id: 0
t: 134
xxx after update is x: 3.78842711449
y: -7.45888614655
theta: 1.59222745895
speed: 0.324004769325
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8493919390734592, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5977120399475098, -19.906841278076172, 4.671820640563965, 13.947169303894043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: 3.78842711449
y: -7.45888614655
theta: 1.59222745895
speed: 0.324004769325
id: 0
t: 135
xxx after update is x: 2.96187567711
y: -7.52136087418
theta: 1.38104021549
speed: 0.123952277005
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: 2.96187567711
y: -7.52136087418
theta: 1.38104021549
speed: 0.123952277005
id: 0
t: 136
xxx after update is x: 3.13907384872
y: -7.51958465576
theta: 1.67101657391
speed: 0.0337882936001
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 6.08888888889
self.communication_details == 0
sending RELEASE,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 6.08888888889

maneuver_negotiatir.py get membership, in the get_MR fun we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: -3.21472859383
y: -20.2760238647
theta: 4.53087615967
speed: 13.6696243286
id: 1
t: 136
xxx after update is x: -3.51091480255
y: -20.797039032
theta: 4.80559587479
speed: 13.1686086655
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 6.08888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 6.08888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '3', 'Sender': '0', 'TagID': '1', 'Time': '5.37777777778', 'Position': ['(2.8172318935394287', ' -8.879443168640137', ' 1.5578579902648926)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,5.37777777778,(2.8172318935394287, -8.879443168640137, 1.5578579902648926),3,1,3.91111111111,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 6.08888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 6.08888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '6.08888888889', 'IntendedCourse': 'left', 'Position': ['3.1390738487243652', ' -7.519584655761719', ' 1.6710165739059448'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.270617283951
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,6.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [10.911111111111111, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 6.08888888889
self.communication_details == 0
sending GRANT,1,6.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 6.08888888889


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138


xxx before update is x: -3.51091480255
y: -20.797039032
theta: 4.80559587479
speed: 13.1686086655
id: 1
t: 137
xxx after update is x: -3.37682366371
y: -21.9627494812
theta: 4.8450088501
speed: 14.4819736481
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 6.13333333333
!!!threading.Timer
tgarnt done
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8376046581044734, 0.5247999999999986]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.339754819869995, -7.504806995391846, 1.6764466762542725, -0.21802176535129547)
if we ction, start
membership is [6.044444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 6.08888888889
self.communication_details == 0
sending GET,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
current clock is 6.08888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 6.08888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '6.08888888889', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,6.08888888889,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [6.044444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [6.044444444444444, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138


xxx before update is x: 3.13907384872
y: -7.51958465576
theta: 1.67101657391
speed: 0.0337882936001
id: 0
t: 137
xxx after update is x: 3.33975481987
y: -7.50480699539
theta: 1.67644667625
speed: -0.218021765351
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8300673209831858, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.376823663711548, -21.962749481201172, 4.845008850097656, 14.481973648071289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: 3.33975481987
y: -7.50480699539
theta: 1.67644667625
speed: -0.218021765351
id: 0
t: 138
xxx after update is x: 2.95665192604
y: -7.47830057144
theta: 1.65947818756
speed: -0.314804136753
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: 2.95665192604
y: -7.47830057144
theta: 1.65947818756
speed: -0.314804136753
id: 0
t: 139
xxx after update is x: 2.69828152657
y: -7.11378669739
theta: 1.49896383286
speed: -0.123489454389
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_inhave all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: -3.37682366371
y: -21.9627494812
theta: 4.8450088501
speed: 14.4819736481
id: 1
t: 138
xxx after update is x: -3.03260278702
y: -21.6685237885
theta: 4.69195079803
speed: 13.6799087524
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: -3.03260278702
y: -21.6685237885
theta: 4.69195079803
speed: 13.6799087524
id: 1
t: 139
xxx after update is x: -3.64203667641
y: -22.3809127808
theta: 4.63425922394
speed: 13.5337638855
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8410363379196713, 0.4959999999999979]
Stops!
222 self.state_dicts[msg.id][msg.t] is (2.6982815265655518, -7.113786697387695, 1.4989638328552246, -0.12348945438861847)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: -3.64203667641
y: -22.3809127808
theta: 4.63425922394
speed: 13.5337638855
id: 1
t: 140
xxx after update is x: -3.11172318459
y: -23.617483139
theta: 4.55532693863
speed: 13.358915329
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11172318459
y: -23.617483139
theta: 4.55532693863
speed: 13.358915329
id: 1
t: 141
xxx after update is x: -3.29085063934
y: -23.5935955048
theta: 4.78129911423
speed: 13.6046285629
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:142




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: -3.29085063934
y: -23.5935955048
theta: 4.78129911423
speed: 13.6046285629
id: 1
t: 142
xxx after update is x: -3.62513303757
y: -24.7281455994
theta: 4.53592061996
speed: 14.066983223
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: -3.62513303757
y: -24.7281455994
theta: 4.53592061996
speed: 14.066983223
id: 1
t: 143
xxx after update is x: -3.31124973297
y: -25.0000362396
theta: 4.69740772247
speed: 14.0480833054
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8093683035607531, 0.49919999999999787]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.296618938446045, -7.5886430740356445, 1.5422844886779785, -0.03728756308555603)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: -3.31124973297
y: -25.0000362396
theta: 4.69740772247
speed: 14.0480833054
id: 1
t: 144it:
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: 2.69828152657
y: -7.11378669739
theta: 1.49896383286
speed: -0.123489454389
id: 0
t: 140
xxx after update is x: 3.33597755432
y: -6.85825490952
theta: 1.69778823853
speed: 0.197044432163
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: 3.33597755432
y: -6.85825490952
theta: 1.69778823853
speed: 0.197044432163
id: 0
t: 141
xxx after update is x: 3.41098618507
y: -7.37396240234
theta: 1.64396071434
speed: 0.251926809549
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8640534882664542, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2908506393432617, -23.593595504760742, 4.781299114227295, 13.604628562927246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: 3.41098618507
y: -7.37396240234
theta: 1.64396071434
speed: 0.251926809549
id: 0
t: 142
xxx after update is x: 3.02928972244
y: -7.54247093201
theta: 1.59747755527
speed: -0.145208179951
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function  xxx before update is x: 3.02928972244
y: -7.54247093201
theta: 1.59747755527
speed: -0.145208179951
id: 0
t: 143
xxx after update is x: 3.29661893845
y: -7.58864307404
theta: 1.54228448868
speed: -0.0372875630856
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:144


aaaaaa
risk is [0.7282838981490504, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3112497329711914, -25.000036239624023, 4.6974077224731445, 14.048083305358887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.29661893845
y: -7.58864307404
theta: 1.54228448868
speed: -0.0372875630856
id: 0
t: 144
xxx after update is x: 3.14820575714
y: -7.58666944504
theta: 1.7206799984
speed: -0.0878108143806
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:145




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: 3.14820575714
y: -7.58666944504
theta: 1.7206799984
speed: -0.0878108143806
id: 0
t: 145
xxx after update is x: 3.67652177811
y: -6.60659790039
theta: 1.51520335674
speed: 0.101473592222
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: 3.67652177811
y: -6.60659790039
theta: 1.51520335674
speed: 0.101473592222
id: 0
t: 146
xxx after update is x: 2.88563323021
y: -7.45233488083
theta: 1.71957182884
speed: 0.215688675642
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:14
xxx after update is x: -3.58777284622
y: -25.7207431793
theta: 4.71750307083
speed: 13.6578454971
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: -3.58777284622
y: -25.7207431793
theta: 4.71750307083
speed: 13.6578454971
id: 1
t: 145
xxx after update is x: -3.45793604851
y: -26.2336521149
theta: 4.75698423386
speed: 13.8927993774
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: -3.45793604851
y: -26.2336521149
theta: 4.75698423386
speed: 13.8927993774
id: 1
t: 146
xxx after update is x: -3.30943655968
y: -26.7606945038
theta: 4.82994842529
speed: 13.8590860367
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9265787177025476, 0.48479999999999795]
Stops!
222 self.state_dicts[msg.id][msg.t] is (2.8856332302093506, -7.452334880828857, 1.719571828842163, 0.21568867564201355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


xxx before update is x: -3.30943655968
y: -26.7606945038
theta: 4.82994842529
speed: 13.8590860367
id: 1
t: 147
xxx after update is x: -2.88685512543
y: -27.6502075195
theta: 4.85173559189
speed: 13.2839155197
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: -2.88685512543
y: -27.6502075195
theta: 4.85173559189
speed: 13.2839155197
id: 1
t: 148
xxx after update is x: -3.11612296104
y: -28.1741409302
theta: 4.67205142975
speed: 13.7887306213
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: -3.11612296104
y: -28.1741409302
theta: 4.67205142975
speed: 13.7887306213
id: 1
t: 149
xxx after update is x: -2.92618584633
y: -28.4523658752
theta: 4.67598962784
speed: 14.0071802139
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7857011602869974, 0.5215999999999985]
222 self.state_dicts[msg.id][msg.t] is (3.2690327167510986, -7.51349401473999, 1.5902031660079956, 0.4138129949569702)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: -2.92618584633
y: -28.4523658752
theta: 4.67598962784
speed: 14.0071802139
id: 1
t: 150
xxx after update is x: -3.39526891708
y: -30.0543231964
theta: 4.72736310959
speed: 13.8808517456
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: -3.39526891708
y: -308

xxx before update is x: 2.88563323021
y: -7.45233488083
theta: 1.71957182884
speed: 0.215688675642
id: 0
t: 147
xxx after update is x: 3.47319602966
y: -8.02970790863
theta: 1.58018910885
speed: 0.204288035631
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [0.904222780947887, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.886855125427246, -27.65020751953125, 4.851735591888428, 13.283915519714355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: 3.47319602966
y: -8.02970790863
theta: 1.58018910885
speed: 0.204288035631
id: 0
t: 148
xxx after update is x: 3.22998690605
y: -6.84641265869
theta: 1.53277099133
speed: -0.148183584213
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: 3.22998690605
y: -6.84641265869
theta: 1.53277099133
speed: -0.148183584213
id: 0
t: 149
xxx after update is x: 3.26903271675
y: -7.51349401474
theta: 1.59020316601
speed: 0.413812994957
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: 3.26903271675
y: -7.51349401474
theta: 1.59020316601
speed: 0.413812994957
id: 0
t: 150
xxx after update is x: 3.56299567223
y: -7.38842535019
theta: 1.56796193123
speed: 0.0297972094268
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8732919199459332, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3952689170837402, -30.054323196411133, 4.727363109588623, 13.880851745605469)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: 3.56299567223
y: -7.38842535019
theta: 1.56796193123
speed: 0.0297972094268
id: 0
t: 151
xxx after update is x: 3.40639638901
y: -7.2868309021
theta: 1.59499835968
speed: -0.0702612474561
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 6.75555555556
self.communication_details == 0
sending RELEASE,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 6.75555555556

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [6.711111111111111, True, ['1']]
maneuver_negotiatir.0543231964
theta: 4.72736310959
speed: 13.8808517456
id: 1
t: 151
xxx after update is x: -3.53937602043
y: -29.6051273346
theta: 4.76062774658
speed: 13.880616188
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


Received -->>: 
current clock is 6.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 6.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '6.08888888889', 'Position': ['(3.1390738487243652', ' -7.519584655761719', ' 1.6710165739059448)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,6.08888888889,(3.1390738487243652, -7.519584655761719, 1.6710165739059448),0,1,3.91111111111,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 6.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 6.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '6.75555555556', 'IntendedCourse': 'left', 'Position': ['3.4063963890075684', ' -7.286830902099609', ' 1.5949983596801758'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.30024691358
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,6.75555555556,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0
xxx before update is x: -3.53937602043
y: -29.6051273346
theta: 4.76062774658
speed: 13.880616188
id: 1
t: 152
xxx after update is x: -2.7874777317
y: -30.1290035248
theta: 4.72568035126
speed: 13.5391454697
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
added car with id 0 to grantlist. current grantlist:  {0: [11.533333333333333, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 6.8
self.communication_details == 0
sending GRANT,1,6.75555555556,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 6.8




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 6.8
!!!threading.Timer
tgarnt done
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6410218451922732, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (2.7507948875427246, -7.747435569763184, 1.8084834814071655, 0.0757947489619255)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: -2.7874777317
y: -30.1290035248
theta: 4.72568035126
sp.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 6.75555555556
self.communication_details == 0
sending GET,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
current clock is 6.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 6.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '6.75555555556', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,6.75555555556,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [6.711111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [6.711111111111111, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: 3.40639638901
y: -7.2868309021
theta: 1.59499835968
speed: -0.0702612474561
id: 0
t: 152
xxx after update is x: 2.75079488754
y: -7.74743556976
theta: 1.80848348141
speed: 0.0757947489619
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: 2.75079488754
y: -7.74743556976
theta: 1.80848348141
speed: 0.0757947489619
id: 0
t: 153
xxx after update is x: 3.01422119141
y: -8.01374530792
theta: 1.53164708614
speed: 0.0188394710422
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8591219666845205, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1504671573638916, -31.5146541595459, 4.711714267730713, 13.757430076599121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: 3.01422119141
y: -8.01374530792
theta: 1.53164708614
speed: 0.0188394710422
id: 0
t: 154
xxx after update is x: 3.79965376854
y: -7.38055467606
theta: 1.42967283726
speed: 0.257943540812
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


xxeed: 13.5391454697
id: 1
t: 153
xxx after update is x: -3.15046715736
y: -31.5146541595
theta: 4.71171426773
speed: 13.7574300766
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: -3.15046715736
y: -31.5146541595
theta: 4.71171426773
speed: 13.7574300766
id: 1
t: 154
xxx after update is x: -3.23576569557
y: -32.2179756165
theta: 4.66052722931
speed: 13.8692007065
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: -3.23576569557
y: -32.2179756165
theta: 4.66052722931
speed: 13.8692007065
id: 1
t: 155
xxx after update is x: -3.21775555611
y: -32.5920410156
theta: 4.8064789772
speed: 13.9723072052
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7416986245905852, 0.48639999999999795]
222 self.state_dicts[msg.id][msg.t] is (3.2419819831848145, -7.898784637451172, 1.639925241470337, 0.24725617468357086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: -3.21775555611
y: -32.5920410156
theta: 4.8064789772
speed: 13.9723072052
id: 1
t: 156
xxx after update is x: -3.40744900703
y: -32.8392105103
theta: 4.78494310379
speed: 14.0976734161
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: -3.40744900703
y: -32.8392105103
theta: 4.78494310379
speed: 14.0976734161
id: 1
t: 157
xxx after update is x: -3.14137220383
y: -33.1859512329
theta: 4.73299789429
speed: 13.3489646912
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7723126908973331, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (2.9379634857177734, -7.7409772872924805, 1.4558523893356323, -0.06857740134000778)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: -3.14137220383
y: -33.1859512329
theta: 4.73299789429
speed: 13.3489646912
id: 1
t: 158
xxx after update is x: -3.43843722343
y: -34.6411781311
theta: 4.96162176132
speed: 14.1877660751
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: -3.43843722343
y: -34.6411781311
theta: 4.96162176132
speed: 14.1877660751
id: 1
t: 159
xxx after update is x: -3.37007570267
y: -34.4876403809
theta: 4.7338051796
speed: 13.785159111
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


xxx before upx before update is x: 3.79965376854
y: -7.38055467606
theta: 1.42967283726
speed: 0.257943540812
id: 0
t: 155
xxx after update is x: 3.24198198318
y: -7.89878463745
theta: 1.63992524147
speed: 0.247256174684
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: 3.24198198318
y: -7.89878463745
theta: 1.63992524147
speed: 0.247256174684
id: 0
t: 156
xxx after update is x: 3.08536553383
y: -7.92057275772
theta: 1.63265919685
speed: -0.216551750898
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.88095648772187, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4074490070343018, -32.839210510253906, 4.784943103790283, 14.097673416137695)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: 3.08536553383
y: -7.92057275772
theta: 1.63265919685
speed: -0.216551750898
id: 0
t: 157
xxx after update is x: 2.93796348572
y: -7.74097728729
theta: 1.45585238934
speed: -0.06857740134
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: 2.93796348572
y: -7.74097728729
theta: 1.45585238934
speed: -0.06857740134
id: 0
t: 158
xxx after update is x: 3.25604224205
y: -7.11983108521
theta: 1.64434289932
speed: -0.276623666286
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: 3.25604224205
y: -7.11983108521
theta: 1.64434289932
speed: -0.276623666286
id: 0
t: 159
xxx after update is x: 3.24443984032
y: -7.79928779602
theta: 1.47162771225
speed: -0.489683747292
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8406812799889668, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3700757026672363, -34.487640380859375, 4.733805179595947, 13.78515911102295)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: 3.24443984032
y: -7.79928779602
theta: 1.47162771225
speed: -0.489683747292
id: 0
t: 160
xxx after update is x: 3.0410823822
y: -7.47782707214
theta: 1.5736310482
speed: 0.107346914709
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: 3.0410823822
y: -7.47782707214
theta: 1.5736310482
speed: 0.107346914709
id: 0
t: 161
xxx after update is x: 3.43113780022
y: -7.50469017029
theta: 1.61683273315
speed: 0.160541549325
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: 3.43113780022
y: -7.50469017029
theta: 1.61683273315
speed: 0.160date is x: -3.37007570267
y: -34.4876403809
theta: 4.7338051796
speed: 13.785159111
id: 1
t: 160
xxx after update is x: -3.12986516953
y: -35.7563591003
theta: 4.53506755829
speed: 13.9042739868
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.822013131529859, 0.5183999999999984]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.0410823822021484, -7.477827072143555, 1.5736310482025146, 0.10734691470861435)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: -3.12986516953
y: -35.7563591003
theta: 4.53506755829
speed: 13.9042739868
id: 1
t: 161
xxx after update is x: -3.44961190224
y: -35.8839492798
theta: 4.87606334686
speed: 13.3143873215
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: -3.44961190224
y: -35.8839492798
theta: 4.87606334686
speed: 13.3143873215
id: 1
t: 162
xxx after update is x: -3.37440037727
y: -37.0778198242
theta: 4.91667079926
speed: 14.0288066864
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -3.37440037727
y: -37.0778198242
theta: 4.91667079926
speed: 14.0288066864
id: 1
t: 163
xxx after update is x: -3.12803173065
y: -37.5129966736
theta: 4.66467618942
speed: 13.800620079
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8336681573679082, 0.503999999999998]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.3853213787078857, -7.912333965301514, 1.4201617240905762, 0.17939092218875885)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: -3.12803173065
y: -37.5129966736
theta: 4.66467618942
speed: 13.800620079
id: 1
t: 164
xxx after update is x: -3.0693192482
y: -38.0247001648
theta: 4.62899398804
speed: 13.5710906982
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -3.0693192482
y: -38.0247001648
theta: 4.62899398804
speed: 13.5710906982
id: 1
t: 165
xxx after update is x: -3.48994064331
y: -38.4991035461
theta: 4.63458585739
speed: 13.9065322876
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167


xxx before update is x: -3.48994064331
y: -38.4991035461
theta: 4.63458585739
speed: 13.9065322876
id: 1
t: 166
xxx after update is x: -3.36578392982
y: -39.3672065735
theta: 4.61752414703
speed: 13.6717014313
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
************normalize weight**********************


going to the update function
sim.py in541549325
id: 0
t: 162
xxx after update is x: 3.19918036461
y: -7.42816543579
theta: 1.5659018755
speed: 0.223970636725
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.45988877882908935, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3744003772735596, -37.07781982421875, 4.916670799255371, 14.028806686401367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: 3.19918036461
y: -7.42816543579
theta: 1.5659018755
speed: 0.223970636725
id: 0
t: 163
xxx after update is x: 3.38532137871
y: -7.9123339653
theta: 1.42016172409
speed: 0.179390922189
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: 3.38532137871
y: -7.9123339653
theta: 1.42016172409
speed: 0.179390922189
id: 0
t: 164
xxx after update is x: 3.59495925903
y: -7.15945911407
theta: 1.75717401505
speed: -0.0279739070684
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: 3.59495925903
y: -7.15945911407
theta: 1.75717401505
speed: -0.0279739070684
id: 0
t: 165
xxx after update is x: 3.23022699356
y: -7.22175741196
theta: 1.31052303314
speed: -0.00759517354891
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


xxx before update is x: 3.23022699356
y: -7.22175741196
theta: 1.31052303314
speed: -0.00759517354891
id: 0
t: 166
xxx after update is x: 3.83849525452
y: -7.22803640366
theta: 1.58128857613
speed: -0.0332633145154
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 7.42222222222
self.communication_details == 0
sending RELEASE,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 7.42222222222

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.377777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3 the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -3.36578392982
y: -39.3672065735
theta: 4.61752414703
speed: 13.6717014313
id: 1
t: 167
xxx after update is x: -3.38108897209
y: -39.8538398743
theta: 4.85900211334
speed: 14.33959198
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7572313607390935, 0.4975999999999979]
Received -->>: 
current clock is 7.46666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.46666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '6.75555555556', 'Position': ['(3.4063963890075684', ' -7.286830902099609', ' 1.5949983596801758)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,6.75555555556,(3.4063963890075684, -7.286830902099609, 1.5949983596801758),0,1,3.91111111111,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 7.46666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.46666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '7.42222222222', 'IntendedCourse': 'left', 'Position': ['3.8384952545166016', ' -7.228036403656006', ' 1.5812885761260986'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.32987654321
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,7.46666666667,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [12.288888888888888, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 7.46666666667
self.communication_details == 0
sending GRANT,1,7.46666666667,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 7.46666666667




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 7.46666666667
!!!threading.Timer
tgarnt done
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
222 self.state_dicts[msg.id][msg.t] is (3.3248088359832764, -7.56477689743042, 1.5706162452697754, 0.20294834673404694)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: -3.38108897209
y: -39.8538398743
theta: 4.85900211334
speed: 14.33959198
id: 1
t: 168
xxx after update is x: -3.0394616127
y: -40.8559379578
theta: 4.7765007019
speed: 13.5599794388
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxx.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 7.42222222222
self.communication_details == 0
sending GET,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0,left to car 1 from car 0
Received -->>: 
current clock is 7.42222222222




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 7.42222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '7.46666666667', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,7.46666666667,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.377777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [7.377777777777778, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
aaaaaa
risk is [0.6162118070138921, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.365783929824829, -39.36720657348633, 4.617524147033691, 13.671701431274414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: 3.83849525452
y: -7.22803640366
theta: 1.58128857613
speed: -0.0332633145154
id: 0
t: 167
xxx after update is x: 3.32480883598
y: -7.56477689743
theta: 1.57061624527
speed: 0.202948346734
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: 3.32480883598
y: -7.56477689743
theta: 1.57061624527
speed: 0.202948346734
id: 0
t: 168
xxx after update is x: 2.85502505302
y: -8.10790157318
theta: 1.60637843609
speed: 0.127076789737
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: 2.85502505302
y: -8.10790157318
theta: 1.60637843609
speed: 0.127076789737
id: 0
t: 169
xxx after update is x: 3.60239124298
y: -7.06872320175
theta: 1.45731782913
speed: -0.0168492905796
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.60239124298
y: -7.06872320175
theta: 1.45731782913
speed: -0.0168492905796
id: 0
t: 170
xxx after update is x: 2.9005150795
y: -7.59683322906
theta: 1.60695874691
speed: -0.212704479694
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:173




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: 2.9005150795
y: -7.59683322906
theta: 1.60695874691
speed: -0.212704479694
id: 0
t: 171
xxx after update is x: 3.07678604126
y: -7.1485543251
theta: 1.5502705574
speed: -0.0564120560884
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.07678604126
y: -7.1485543251
theta: 1.5502705574
speed: -0.0564120560884
id: 0
t: 172
xxx after update is x: 3.12061333656
y: -7.4531955719
theta: 1.62468397617
speed: -0.0568754561245
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.12061333656
y: -7.4531955719
theta: 1.62468397617
speed: -0.0568754561245
id: 0
t: 173
xxx after update is x: 3.17332553864
y: -7.56559562683
theta: 1.59571301937
speed: 0.0401076450944
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.17332553864
y: -7.56559562683
theta: 1.59571301937
speed: 0.0401076450944
id: 0
t: 174
xxx after update is x: 3.02432322502
y: -7.30743217468
theta: 1.70976865292
speed: -0.0055136391893
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175


aaaaaa
risk is [0.7654595430238161, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


xxx before update is x: 3.02432322502
y: -7.30743217468
theta: 1.70976865292
speed: -0.0055136391893
id: 0
t: 175
xxx after update is x: 3.74741029739
y: -7.6978931427
theta: 1.56559789181
speed: 0.0681611597538
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: 3.74741029739
y: -7.6978931427
theta: 1.56559789181
speed: 0.0681611597538
id: 0
t: 176
xxx after update is x: 3.10861039162
y: -7.72449350357
theta: 1.49043488503
speed: -0.00627363938838
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.10861039162
y: -7.72449350357
theta: 1.49043488503
speed: -0.00627363938838
id: 0
t: 177
xxx after update is x: 3.15360856056
y: -7.59699583054
theta: 1.40448665619
speed: 0.353914111853
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:178




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.15360856056
y: -7.59699583054
theta: 1.40448665619
speed: 0.353914111853
id: 0
t: 178
xxx after update is x: 3.48880028725
y: -7.85479688644
theta: 1.62873160839
speed: 0.29634693265
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:179




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.48880028725
y: -7.85479688644
theta: 1.62873160839
speed: 0.29634693265
id: 0
t: 179xxxxx************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7816552341549482, 0.4911999999999979]

(self.id == 1):
xxx before update is x: -3.0394616127
y: -40.8559379578
theta: 4.7765007019
speed: 13.5599794388
id: 1
t: 169
xxx after update is x: -3.14063644409
y: -41.687538147
theta: 4.49726819992
speed: 13.8352279663
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:170




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14063644409
y: -41.687538147
theta: 4.49726819992
speed: 13.8352279663
id: 1
t: 170
xxx after update is x: -3.39648580551
y: -44.4154586792
theta: 4.66673707962
speed: 13.7959947586
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:171


222 self.state_dicts[msg.id][msg.t] is (2.900515079498291, -7.596833229064941, 1.6069587469100952, -0.21270447969436646)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: -3.39648580551
y: -44.4154586792
theta: 4.66673707962
speed: 13.7959947586
id: 1
t: 171
xxx after update is x: -3.47404837608
y: -44.4246177673
theta: 4.60306310654
speed: 13.5016231537
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8331981365186082, 0.5263999999999986]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.0767860412597656, -7.14855432510376, 1.5502705574035645, -0.05641205608844757)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -3.47404837608
y: -44.4246177673
theta: 4.60306310654
speed: 13.5016231537
id: 1
t: 172
xxx after update is x: -3.00817728043
y: -45.9286270142
theta: 4.63925743103
speed: 13.2944955826
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: -3.00817728043
y: -45.9286270142
theta: 4.63925743103
speed: 13.2944955826
id: 1
t: 173
xxx after update is x: -3.42081189156
y: -46.2615280151
theta: 4.86691331863
speed: 14.2388086319
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7697256842815343, 0.4911999999999979]
222 self.state_dicts[msg.id][msg.t] is (3.173325538635254, -7.565595626831055, 1.5957130193710327, 0.040107645094394684)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -3.42081189156
y: -46.2615280151
theta: 4.86691331863
speed: 14.2388086319
id: 1
t: 174
xxx after update is x: -3.53350138664
y: -46.8293266296
theta: 4.71689987183
speed: 13.8644790649
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxxaaaaaa
aaaaaabbbbb
risk is [0.8265366485300871, 0.505599999999998]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.747410297393799, -7.697893142700195, 1.5655978918075562, 0.06816115975379944)
222 self.state_dicts[msg.id][msg.t] is (3.1086103916168213, -7.724493503570557, 1.4904348850250244, -0.006273639388382435)
222 self.state_dicts[msg.id][msg.t] is (3.153608560562134, -7.596995830535889, 1.4044866561889648, 0.3539141118526459)
222 self.state_dicts[msg.id][msg.t] is (3.488800287246704, -7.854796886444092, 1.628731608390808, 0.2963469326496124)
222 self.state_dicts[msg.id][msg.t] is (3.1174187660217285, -7.745296478271484, 1.437596321105957, -0.19063310325145721)
Received -->>: 
current clock is 7.77777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.77777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '7.42222222222', 'Position': ['(3.8384952545166016', ' -7.228036403656006', ' 1.5812885761260986)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 7.77777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.77777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.91111111111', 'Sender': '0', 'Time': '8.0', 'IntendedCourse': 'left', 'Position': ['3.1174187660217285', ' -7.745296478271484', ' 1.437596321105957'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.355555555556
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,7.77777777778,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [12.733333333333334, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 7.77777777778
self.communication_details == 0
sending GRANT,1,7.77777777778,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 7.77777777778




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 7.77777777778
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
!!!threading.Timer
tgarnt done

(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176



xxx after update is x: 3.11741876602
y: -7.74529647827
theta: 1.43759632111
speed: -0.190633103251
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,7.42222222222,(3.8384952545166016, -7.228036403656006, 1.5812885761260986),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
current clock is 8.0




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 8.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '7.77777777778', 'Position': ['(-3.4863433837890625', ' 58.660770416259766', ' 4.629579544067383)'], 'Type': 'GRANT'}
car 0 received GRANT,1,7.77777777778,(-3.4863433837890625, 58.660770416259766, 4.629579544067383),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [7.777777777777778, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




leave the update function 
in spin function, finish the n times spin:180


maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_messagemaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuvermaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our requestmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reachedmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 8.0

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [7.777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
!!!!change state to get
GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending GET,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.0
self.communication_details == 0
sending RELEASE,0,8.0,(3.1174187660217285, -7.745296478271484, 1.437596321105957),0,1,3.91111111111,0 to c... logging to /home/lu/.ros/log/be4fdec2-ff25-11e8-af00-000c291801fc/roslaunch-ubuntu-21254.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:44901/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [21264][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to be4fdec2-ff25-11e8-af00-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [21277][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [21280][0m
[1mprocess[rviz-3]: started with pid [21295][0m
[1mprocess[car0-4]: started with pid [21296][0m
[1mprocess[car1-5]: started with pid [21297][0m
[1mprocess[cloud-6]: started with pid [21298][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
