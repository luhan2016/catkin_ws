sim.py in the sim.py main function
sim.py in the sim.py car function 


self.id is 1


s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback



in the sim.py spin function 
diff 1.74357700348
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1


sim.py in the sim.py statecallback function
msg is 

x: 2.93553638458
y: -84.4651260376
theta: 1.62037324905
speed: 13.9629535675
id: 0
t: 1


222 self.state_dicts[msg.id][msg.t] is (2.9355363845825195, -84.46512603759766, 1.620373249053955, 13.962953567504883)


if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f20d157eef0>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f20d15a3320>


run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0


maneuver_negotiatir.py call the clock(), give the clock to self.agent_state

maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


sim.py in the sim.py statecallback function
msg is 
x: 3.14022493362
y: -83.4670639038
theta: 1.5583139658
speed: 13.9478931427
id: 0
t: 2

222 self.state_dicts[msg.id][msg.t] is (3.1402249336242676, -83.4670639038086, 1.5583139657974243, 13.947893142700195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function

xxx before update is 
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0

xxx after update is 
x: -3.07441616058
y: 63.7949943542
theta: 4.80388498306
speed: 13.9255695343
id: 1
t: 2

maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
xxx before update is 
x: -3.07441616058
y: 63.7949943542
theta: 4.80388498306
speed: 13.9255695343
id: 1
t: 2
xxx after update is 
x: -3.43600153923
y: 62.8817558289
theta: 4.54243707657
speed: 14.3426990509
id: 1
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is 
x: -3.43600153923
y: 62.8817558289
theta: 4.54243707657
speed: 14.3426990509
id: 1
t: 3
xxx after update is 
x: -3.45044493675
y: 62.5738372803
theta: 4.7228975296
speed: 14.0914106369
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion

leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(sesim.py in the sim.py main function







sim.py in the sim.py car function 

self.id is 0


s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.63847398758
sim.py in the sim.py statecallback function
msg is x: -3.33741307259
y: 64.465171814
theta: 4.6587896347
speed: 13.504240036
id: 1
t: 1
222 self.state_dicts[msg.id][msg.t] is (-3.3374130725860596, 64.46517181396484, 4.65878963470459, 13.504240036010742)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function
msg is x: -3.07441616058
y: 63.7949943542
theta: 4.80388498306
speed: 13.9255695343
id: 1
t: 2
222 self.state_dicts[msg.id][msg.t] is (-3.074416160583496, 63.79499435424805, 4.803884983062744, 13.925569534301758)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fba3c3d28c0>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fba3c3f07a0>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
sim.py in the sim.py statecallback function
msg is x: -3.43600153923
y: 62.8817558289
theta: 4.54243707657
speed: 14.3426990509
id: 1
t: 3
222 self.state_dicts[msg.id][msg.t] is (-3.4360015392303467, 62.88175582885742, 4.5424370765686035, 14.34269905090332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.5676484108
y: -82.1294250488
theta: 1.59115707874
speed: 13.7212429047
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.5676484108
y: -82.1294250488
theta: 1.59115707874
speed: 13.7212429047
id: 0
t: 5
xxx after update is x: 3.49612402916
y: -80.6719512939
theta: 1.57062828541
speed: 14.1213521957
id: 0
t: lf.id == 1):
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: -3.45044493675
y: 62.5738372803
theta: 4.7228975296
speed: 14.0914106369
id: 1
t: 4
xxx after update is x: -3.39227366447
y: 61.9958572388
theta: 4.66486740112
speed: 13.8680143356
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: -3.39227366447
y: 61.9958572388
theta: 4.66486740112
speed: 13.8680143356
id: 1
t: 5
xxx after update is x: -2.95786762238
y: 61.2939033508
theta: 4.74871349335
speed: 13.3063831329
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -2.95786762238
y: 61.2939033508
theta: 4.74871349335
speed: 13.3063831329
id: 1
t: 6
xxx after update is x: -3.13200950623
y: 60.7815818787
theta: 4.92430591583
speed: 13.5643844604
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.13200950623
y: 60.7815818787
theta: 4.92430591583
speed: 13.5643844604
id: 1
t: 7
xxx after update is x: -3.0513381958
y: 60.3307113647
theta: 4.78229284286
speed: 13.6548519135
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.38701368799336416, 0.31628768178988387]
sim.py in the sim.py statecallback function
msg is x: 3.0532283783
y: -83.3821258545
theta: 1.70867455006
speed: 13.7215642929
id: 0
t: 3
sim.py in the sim.py statecallback function
msg is x: 3.65972495079
y: -81.7498550415
theta: 1.58075129986
speed: 13.6750154495
id: 0
t: 4
sim.py in the sim.py statecallback function
msg is x: 3.5676484108
y: -82.1294250488
theta: 1.59115707874
speed: 13.7212429047
id: 0
t: 5
sim.py in the sim.py statecallback function
msg is x: 3.49612402916
y: -80.6719512939
theta: 1.57062828541
speed: 14.1213521957
id: 0
t: 6
sim.py in the sim.py statecallback function
msg is x: 3.29171323776
y: -80.6752090454
theta: 1.51843750477
speed: 14.0279054642
id: 0
t: 7
sim.py in the sim.py statecallback function
msg is x: 3.7262108326
y: -80.4712142944
theta: 1.63096678257
speed: 14.1936235428
id: 0
t: 8
222 self.state_dicts[msg.id][msg.t] is (3.726210832595825, -80.4712142944336, 1.6309667825698853, 14.193623542785645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.0513381958
y: 60.3307113647
theta: 4.78229284286
speed: 13.6548519135
id: 1
t: 8
current clock is .t / rate/slowdown
0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: -3.0513381958
y: 60.3307113647
theta: 4.78229284286
speed: 13.6548519135
id: 1
t: 8
xxx after update is x: -3.41985917091
y: 59.0168876648
theta: 4.81211519241
speed: 13.9735422134
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < 6
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:6
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 3.49612402916
y: -80.6719512939
theta: 1.57062828541
speed: 14.1213521957
id: 0
t: 6
xxx after update is x: 3.29171323776
y: -80.6752090454
theta: 1.51843750477
speed: 14.0279054642
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 3.29171323776
y: -80.6752090454
theta: 1.51843750477
speed: 14.0279054642
id: 0
t: 7
xxx after update is x: 3.7262108326
y: -80.4712142944
theta: 1.63096678257
speed: 14.1936235428
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.45174708912244216, 0.4286354572350929]
sim.py in the sim.py statecallback function
msg is x: -3.45044493675
y: 62.5738372803
theta: 4.7228975296
speed: 14.0914106369
id: 1
t: 4
sim.py in the sim.py statecallback function
msg is x: -3.39227366447
y: 61.9958572388
theta: 4.66486740112
speed: 13.8680143356
id: 1
t: 5
sim.py in the sim.py statecallback function
msg is x: -2.95786762238
y: 61.2939033508
theta: 4.74871349335
speed: 13.3063831329
id: 1
t: 6
sim.py in the sim.py statecallback function
msg is x: -3.13200950623
y: 60.7815818787
theta: 4.92430591583
speed: 13.5643844604
id: 1
t: 7
sim.py in the sim.py statecallback function
msg is x: -3.0513381958
y: 60.3307113647
theta: 4.78229284286
speed: 13.6548519135
id: 1
t: 8
222 self.state_dicts[msg.id][msg.t] is (-3.0513381958007812, 60.330711364746094, 4.78229284286499, 13.654851913452148)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.7262108326
y: -80.4712142944
theta: 1.63096678257
speed: 14.1936235428
id: 0
t: 8
xxx after update is x: 2.84693551064
y: -79.8655929565
theta: 1.49286484718
speed: 13.7724523544
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.84693551064
y: -79.8655929565
theta: 1.49286484718
speed: 13.7724523544
id: 0
t: 9
xxx after update is x: 2.8595867157
y: -78.7359695435
theta: 1.43314349651
speed: 13.6719093323
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.8595867157
y: -78.7359695435
theta: 1.43314349651
speed: 13.6719093323
id: 0
t: 10
current clock is .t / rate/slowdown
0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 2.8595867157
y: -78.7359695435
theta: 1.43314349651
speed: 13.6719093323
id: 0
t: 10
xxx after update is x: 2.45271945
y: -78.1158828735
theta: 1.54999542236
speed: 13.8166589737
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.pyself.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: -3.41985917091
y: 59.0168876648
theta: 4.81211519241
speed: 13.9735422134
id: 1
t: 9
xxx after update is x: -3.29344081879
y: 59.0976638794
theta: 4.80437755585
speed: 13.7543592453
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -3.29344081879
y: 59.0976638794
theta: 4.80437755585
speed: 13.7543592453
id: 1
t: 10
xxx after update is x: -3.54993510246
y: 58.2023468018
theta: 4.81124401093
speed: 14.0348110199
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.20421368608434434, 0]
sim.py in the sim.py statecallback function
msg is x: 2.84693551064
y: -79.8655929565
theta: 1.49286484718
speed: 13.7724523544
id: 0
t: 9
sim.py in the sim.py statecallback function
msg is x: 2.8595867157
y: -78.7359695435
theta: 1.43314349651
speed: 13.6719093323
id: 0
t: 10
sim.py in the sim.py statecallback function
msg is x: 2.45271945
y: -78.1158828735
theta: 1.54999542236
speed: 13.8166589737
id: 0
t: 11
222 self.state_dicts[msg.id][msg.t] is (2.4527194499969482, -78.11588287353516, 1.5499954223632812, 13.816658973693848)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: -3.54993510246
y: 58.2023468018
theta: 4.81124401093
speed: 14.0348110199
id: 1
t: 11
xxx after update is x: -3.29018211365
y: 57.0521011353
theta: 4.7771897316
speed: 13.8718767166
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -3.29018211365
y: 57.0521011353
theta: 4.7771897316
speed: 13.8718767166
id: 1
t: 12
xxx after update is x: -3.1334066391
y: 57.0190849304
theta: 4.73400497437
speed: 13.7960443497
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3114909208549215, 0]
sim.py in the sim.py statecallback function
msg is x: 3.48101782799
y: -77.3112030029
theta: 1.63403153419
speed: 14.1477432251
id: 0
t: 12
sim.py in the sim.py statecallback function
msg is x: 2.96890377998
y: -76.8633270264
theta: 1.59484684467
speed: 13.5880775452
id: 0
t: 13
222 self.state_dicts[msg.id][msg.t] is (2.9689037799835205, -76.86332702636719, 1.5948468446731567, 13.588077545166016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -3.1334066391
y: 57.0190849304
theta: 4.73400497437
speed: 13.7960443497
id: 1
t: 13
xxx after update is x: -3.49402189255
y: 56.2375564575
theta: 4.5721244812
speed: 14.03358078
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: -3.49402189255
y: 56.2375564575
theta: 4.5721244812
speed: 14.03358078
id: 1
t: 14
xxx after update is x: -3.43973922729
y: 55.2293319702
theta: 4.84667921066
speed: 13.6843214035
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going  update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 2.45271945
y: -78.1158828735
theta: 1.54999542236
speed: 13.8166589737
id: 0
t: 11
xxx after update is x: 3.48101782799
y: -77.3112030029
theta: 1.63403153419
speed: 14.1477432251
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: 3.48101782799
y: -77.3112030029
theta: 1.63403153419
speed: 14.1477432251
id: 0
t: 12
xxx after update is x: 2.96890377998
y: -76.8633270264
theta: 1.59484684467
speed: 13.5880775452
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.31639895243858246, 0.3804470519471434]
sim.py in the sim.py statecallback function
msg is x: -3.41985917091
y: 59.0168876648
theta: 4.81211519241
speed: 13.9735422134
id: 1
t: 9
sim.py in the sim.py statecallback function
msg is x: -3.29344081879
y: 59.0976638794
theta: 4.80437755585
speed: 13.7543592453
id: 1
t: 10
sim.py in the sim.py statecallback function
msg is x: -3.54993510246
y: 58.2023468018
theta: 4.81124401093
speed: 14.0348110199
id: 1
t: 11
sim.py in the sim.py statecallback function
msg is x: -3.29018211365
y: 57.0521011353
theta: 4.7771897316
speed: 13.8718767166
id: 1
t: 12
sim.py in the sim.py statecallback function
msg is x: -3.1334066391
y: 57.0190849304
theta: 4.73400497437
speed: 13.7960443497
id: 1
t: 13
222 self.state_dicts[msg.id][msg.t] is (-3.133406639099121, 57.01908493041992, 4.734004974365234, 13.79604434967041)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 2.96890377998
y: -76.8633270264
theta: 1.59484684467
speed: 13.5880775452
id: 0
t: 13
xxx after update is x: 3.48382306099
y: -75.7498550415
theta: 1.62488520145
speed: 13.9770488739
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: 3.48382306099
y: -75.7498550415
theta: 1.62488520145
speed: 13.9770488739
id: 0
t: 14
xxx after update is x: 3.68707561493
y: -76.1030731201
theta: 1.51815485954
speed: 13.7952861786
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: 3.68707561493
y: -76.1030731201
theta: 1.51815485954
speed: 13.7952861786
id: 0
t: 15
xxx after update is x: 2.91288208961
y: -75.6417999268
theta: 1.54504811764
speed: 14.2286062241
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.477361214533117, 0.3842969686573068]
sim.py in the sim.py statecallback function
msg is x: -3.49402189255
y: 56.2375564575
theta: 4.5721244812
speed: 14.03358078
id: 1
t: 14
sim.py in the sim.py statecallback function
msg is x: -3.43973922729
y: 55.2293319702
theta: 4.84667921066
speed: 13.6843214035
id: 1
t: 15
sim.py in the sim.py statecallback function
msg is x: -3.71250414848
y: 54.955280304
theta: 4.76551198959
speed: 13.5823698044
id: 1
t: 16
222 self.state_dicts[msg.id][msg.t] is (-3.7125041484832764, 54.95528030395508, 4.765511989593506, 13.582369804382324)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave tto the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: -3.43973922729
y: 55.2293319702
theta: 4.84667921066
speed: 13.6843214035
id: 1
t: 15
xxx after update is x: -3.71250414848
y: 54.955280304
theta: 4.76551198959
speed: 13.5823698044
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4383821222750964, 0]
sim.py in the sim.py statecallback function
msg is x: 3.48382306099
y: -75.7498550415
theta: 1.62488520145
speed: 13.9770488739
id: 0
t: 14
sim.py in the sim.py statecallback function
msg is x: 3.68707561493
y: -76.1030731201
theta: 1.51815485954
speed: 13.7952861786
id: 0
t: 15
sim.py in the sim.py statecallback function
msg is x: 2.91288208961
y: -75.6417999268
theta: 1.54504811764
speed: 14.2286062241
id: 0
t: 16
222 self.state_dicts[msg.id][msg.t] is (2.912882089614868, -75.64179992675781, 1.5450481176376343, 14.228606224060059)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.71250414848
y: 54.955280304
theta: 4.76551198959
speed: 13.5823698044
id: 1
t: 16
current clock is .t / rate/slowdown
0.711111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.71250414848
y: 54.955280304
theta: 4.76551198959
speed: 13.5823698044
id: 1
t: 16
xxx after update is x: -3.90991377831
y: 54.2174453735
theta: 4.70146751404
speed: 14.109872818
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.90991377831
y: 54.2174453735
theta: 4.70146751404
speed: 14.109872818
id: 1
t: 17
xxx after update is x: -3.05365610123
y: 53.8576164246
theta: 4.56526136398
speed: 13.9807834625
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: -3.05365610123
y: 53.8576164246
theta: 4.56526136398
speed: 13.9807834625
id: 1
t: 18
xxx after update is x: -3.3729300499
y: 53.3749237061
theta: 4.74893093109
speed: 13.6934022903
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3975595577969351, 0]
sim.py in the sim.py statecallback function
msg is x: 3.27204394341
y: -74.1801834106
theta: 1.47925257683
speed: 13.7206583023
id: 0
t: 17
sim.py in the sim.py statecallback function
msg is x: 3.10376644135
y: -73.4914855957
theta: 1.51724779606
speed: 13.980055809
id: 0
t: 18
sim.py in the sim.py statecallback function
msg is x: 2.9778945446
y: -72.8689346313
theta: 1.47827792168
speed: 13.9948854446
id: 0
t: 19
222 self.state_dicts[msg.id][msg.t] is (2.9778945446014404, -72.86893463134766, 1.4782779216766357, 13.994885444641113)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the updathe update function xxx before update is x: 2.91288208961
y: -75.6417999268
theta: 1.54504811764
speed: 14.2286062241
id: 0
t: 16
xxx after update is x: 3.27204394341
y: -74.1801834106
theta: 1.47925257683
speed: 13.7206583023
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:17
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: 3.27204394341
y: -74.1801834106
theta: 1.47925257683
speed: 13.7206583023
id: 0
t: 17
xxx after update is x: 3.10376644135
y: -73.4914855957
theta: 1.51724779606
speed: 13.980055809
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.10376644135
y: -73.4914855957
theta: 1.51724779606
speed: 13.980055809
id: 0
t: 18
current clock is .t / rate/slowdown
0.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.10376644135
y: -73.4914855957
theta: 1.51724779606
speed: 13.980055809
id: 0
t: 18
xxx after update is x: 2.9778945446
y: -72.8689346313
theta: 1.47827792168
speed: 13.9948854446
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: 2.9778945446
y: -72.8689346313
theta: 1.47827792168
speed: 13.9948854446
id: 0
t: 19
xxx after update is x: 3.1169924736
y: -72.6508789062
theta: 1.54921603203
speed: 14.0070257187
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.32293694861023065, 0.410691562718424]
sim.py in the sim.py statecallback function
msg is x: -3.90991377831
y: 54.2174453735
theta: 4.70146751404
speed: 14.109872818
id: 1
t: 17
sim.py in the sim.py statecallback function
msg is x: -3.05365610123
y: 53.8576164246
theta: 4.56526136398
speed: 13.9807834625
id: 1
t: 18
sim.py in the sim.py statecallback function
msg is x: -3.3729300499
y: 53.3749237061
theta: 4.74893093109
speed: 13.6934022903
id: 1
t: 19
sim.py in the sim.py statecallback function
msg is x: -3.35379624367
y: 52.5508270264
theta: 4.77111530304
speed: 13.5990762711
id: 1
t: 20
222 self.state_dicts[msg.id][msg.t] is (-3.3537962436676025, 52.55082702636719, 4.771115303039551, 13.599076271057129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 3.1169924736
y: -72.6508789062
theta: 1.54921603203
speed: 14.0070257187
id: 0
t: 20
xxx after update is x: 3.32492637634
y: -72.0520095825
theta: 1.65930664539
speed: 14.0229187012
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.32492637634
y: -72.0520095825
theta: 1.65930664539
speed: 14.0229187012
id: 0
t: 21
xxx after update is x: 3.33276891708
y: -71.3670883179
theta: 1.54883635044
speed: 13.9096288681
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin funce function xxx before update is x: -3.3729300499
y: 53.3749237061
theta: 4.74893093109
speed: 13.6934022903
id: 1
t: 19
xxx after update is x: -3.35379624367
y: 52.5508270264
theta: 4.77111530304
speed: 13.5990762711
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:20
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: -3.35379624367
y: 52.5508270264
theta: 4.77111530304
speed: 13.5990762711
id: 1
t: 20
xxx after update is x: -3.06355190277
y: 51.4210739136
theta: 4.68891000748
speed: 14.2569112778
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06355190277
y: 51.4210739136
theta: 4.68891000748
speed: 14.2569112778
id: 1
t: 21
xxx after update is x: -2.83813214302
y: 51.4541091919
theta: 4.73233270645
speed: 13.7149600983
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:22
aaaaaa
aaaaaabbbbb
risk is [0.3204534428818599, 0]
sim.py in the sim.py statecallback function
msg is x: 3.1169924736
y: -72.6508789062
theta: 1.54921603203
speed: 14.0070257187
id: 0
t: 20
sim.py in the sim.py statecallback function
msg is x: 3.32492637634
y: -72.0520095825
theta: 1.65930664539
speed: 14.0229187012
id: 0
t: 21
sim.py in the sim.py statecallback function
msg is x: 3.33276891708
y: -71.3670883179
theta: 1.54883635044
speed: 13.9096288681
id: 0
t: 22
222 self.state_dicts[msg.id][msg.t] is (3.3327689170837402, -71.3670883178711, 1.548836350440979, 13.909628868103027)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.83813214302
y: 51.4541091919
theta: 4.73233270645
speed: 13.7149600983
id: 1
t: 22
xxx after update is x: -3.0350291729
y: 50.9067268372
theta: 4.8751206398
speed: 14.00548172
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -3.0350291729
y: 50.9067268372
theta: 4.8751206398
speed: 14.00548172
id: 1
t: 23
xxx after update is x: -3.14687633514
y: 50.0877189636
theta: 4.6963429451
speed: 14.2292232513
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.14687633514
y: 50.0877189636
theta: 4.6963429451
speed: 14.2292232513
id: 1
t: 24
current clock is .t / rate/slowdown
1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: -3.14687633514
y: 50.0877189636
theta: 4.6963429451
speed: 14.2292232513
id: 1
t: 24
xxx after update is x: -3.42317438126
y: 49.2369537354
theta: 4.79706430435
speed: 13.9194345474
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.pytion, finish the n times spin:22
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: 3.33276891708
y: -71.3670883179
theta: 1.54883635044
speed: 13.9096288681
id: 0
t: 22
xxx after update is x: 2.69181656837
y: -70.4335632324
theta: 1.55754888058
speed: 13.9533901215
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.69181656837
y: -70.4335632324
theta: 1.55754888058
speed: 13.9533901215
id: 0
t: 23
xxx after update is x: 3.09270095825
y: -70.0705718994
theta: 1.71914887428
speed: 13.7334957123
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:24
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 3.09270095825
y: -70.0705718994
theta: 1.71914887428
speed: 13.7334957123
id: 0
t: 24
xxx after update is x: 3.68417215347
y: -69.239692688
theta: 1.54541051388
speed: 13.7093286514
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 3.68417215347
y: -69.239692688
theta: 1.54541051388
speed: 13.7093286514
id: 0
t: 25
xxx after update is x: 3.02192854881
y: -69.1722869873
theta: 1.6097317934
speed: 14.0935621262
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.02192854881
y: -69.1722869873
theta: 1.6097317934
speed: 14.0935621262
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
risk is [0.3491369315144078, 0.38680222887955545]
sim.py in the sim.py statecallback function
msg is x: -3.06355190277
y: 51.4210739136
theta: 4.68891000748
speed: 14.2569112778
id: 1
t: 21
sim.py in the sim.py statecallback function
msg is x: -2.83813214302
y: 51.4541091919
theta: 4.73233270645
speed: 13.7149600983
id: 1
t: 22
sim.py in the sim.py statecallback function
msg is x: -3.0350291729
y: 50.9067268372
theta: 4.8751206398
speed: 14.00548172
id: 1
t: 23
sim.py in the sim.py statecallback function
msg is x: -3.14687633514
y: 50.0877189636
theta: 4.6963429451
speed: 14.2292232513
id: 1
t: 24
sim.py in the sim.py statecallback function
msg is x: -3.42317438126
y: 49.2369537354
theta: 4.79706430435
speed: 13.9194345474
id: 1
t: 25
sim.py in the sim.py statecallback function
msg is x: -3.3329539299
y: 48.5398139954
theta: 4.81010103226
speed: 14.1076784134
id: 1
t: 26
222 self.state_dicts[msg.id][msg.t] is (-3.332953929901123, 48.53981399536133, 4.81010103225708, 14.107678413391113)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: 3.02192854881
y: -69.1722869873
theta: 1.6097317934
speed: 14.0935621262
id: 0
t: 26
xxx after update is x: 2.52867889404
y: -67.9779205322
theta: 1.55118012428
speed: 14.2648925781
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
g in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: -3.42317438126
y: 49.2369537354
theta: 4.79706430435
speed: 13.9194345474
id: 1
t: 25
xxx after update is x: -3.3329539299
y: 48.5398139954
theta: 4.81010103226
speed: 14.1076784134
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3592895173837288, 0]
sim.py in the sim.py statecallback function
msg is x: 2.69181656837
y: -70.4335632324
theta: 1.55754888058
speed: 13.9533901215
id: 0
t: 23
sim.py in the sim.py statecallback function
msg is x: 3.09270095825
y: -70.0705718994
theta: 1.71914887428
speed: 13.7334957123
id: 0
t: 24
sim.py in the sim.py statecallback function
msg is x: 3.68417215347
y: -69.239692688
theta: 1.54541051388
speed: 13.7093286514
id: 0
t: 25
sim.py in the sim.py statecallback function
msg is x: 3.02192854881
y: -69.1722869873
theta: 1.6097317934
speed: 14.0935621262
id: 0
t: 26
222 self.state_dicts[msg.id][msg.t] is (3.021928548812866, -69.17228698730469, 1.6097317934036255, 14.093562126159668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: -3.3329539299
y: 48.5398139954
theta: 4.81010103226
speed: 14.1076784134
id: 1
t: 26
xxx after update is x: -3.61922955513
y: 48.5922088623
theta: 4.75197792053
speed: 13.9135875702
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: -3.61922955513
y: 48.5922088623
theta: 4.75197792053
speed: 13.9135875702
id: 1
t: 27
xxx after update is x: -3.80973696709
y: 47.8727989197
theta: 4.70155096054
speed: 14.0663022995
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: -3.80973696709
y: 47.8727989197
theta: 4.70155096054
speed: 14.0663022995
id: 1
t: 28
xxx after update is x: -3.23544287682
y: 47.2075042725
theta: 4.66939592361
speed: 13.7567281723
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: -3.23544287682
y: 47.2075042725
theta: 4.66939592361
speed: 13.7567281723
id: 1
t: 29
xxx after update is x: -3.03295063972
y: 46.5761222839
theta: 4.76730203629
speed: 14.040643692
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3557162132715956, 0]
sim.py in the sim.py statecallback function
msg is x: 2.52867889404
y: -67.9779205322
theta: 1.55118012428
speed: 14.2648925781
id: 0
t: 27
sim.py in the sim.py statecallback function
msg is x: 2.96184515953
y: -67.8681793213
theta: 1.60101044178
speed: 13.714682579
id: 0
t: 28
sim.py in the sim.py statecallback function
msg is x: 3.2592830658
y: -67.0939254761
theta: 1.42817974091
speed: 14.1149463654
id: 0
t: 29
sim.py in the sim.py statecallback function
msg is x: 3.26916980743
y: -66.1149673462
theta: 1.63562953472
speed: 13.9417963028
id: 0
t: 30
222 self.state_dicts[msg.id][msg.t] is (3.269169807434082, -66.1149673461914, 1.6356295347213745, 13.94179630279541)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the upoing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: 2.52867889404
y: -67.9779205322
theta: 1.55118012428
speed: 14.2648925781
id: 0
t: 27
xxx after update is x: 2.96184515953
y: -67.8681793213
theta: 1.60101044178
speed: 13.714682579
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: 2.96184515953
y: -67.8681793213
theta: 1.60101044178
speed: 13.714682579
id: 0
t: 28
xxx after update is x: 3.2592830658
y: -67.0939254761
theta: 1.42817974091
speed: 14.1149463654
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: 3.2592830658
y: -67.0939254761
theta: 1.42817974091
speed: 14.1149463654
id: 0
t: 29
xxx after update is x: 3.26916980743
y: -66.1149673462
theta: 1.63562953472
speed: 13.9417963028
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3246999412535287, 0.3888108421117478]
sim.py in the sim.py statecallback function
msg is x: -3.61922955513
y: 48.5922088623
theta: 4.75197792053
speed: 13.9135875702
id: 1
t: 27
sim.py in the sim.py statecallback function
msg is x: -3.80973696709
y: 47.8727989197
theta: 4.70155096054
speed: 14.0663022995
id: 1
t: 28
sim.py in the sim.py statecallback function
msg is x: -3.23544287682
y: 47.2075042725
theta: 4.66939592361
speed: 13.7567281723
id: 1
t: 29
sim.py in the sim.py statecallback function
msg is x: -3.03295063972
y: 46.5761222839
theta: 4.76730203629
speed: 14.040643692
id: 1
t: 30
222 self.state_dicts[msg.id][msg.t] is (-3.0329506397247314, 46.57612228393555, 4.7673020362854, 14.040643692016602)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 3.26916980743
y: -66.1149673462
theta: 1.63562953472
speed: 13.9417963028
id: 0
t: 30
xxx after update is x: 3.3617374897
y: -65.891166687
theta: 1.31483471394
speed: 13.6890563965
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 3.3617374897
y: -65.891166687
theta: 1.31483471394
speed: 13.6890563965
id: 0
t: 31
xxx after update is x: 3.34748649597
y: -65.7164382935
theta: 1.50831878185
speed: 13.9077177048
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: 3.34748649597
y: -65.7164382935
theta: 1.50831878185
speed: 13.9077177048
id: 0
t: 32
xxx after update is x: 3.10887646675
y: -64.1796112061
theta: 1.54767239094
speed: 13.9973115921
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: 3.10887646675
y: -64.1796112061
theta: 1.54767239094
speed: 13.9973115921
id: 0
t: 33
xxx after update is x: 2.89556264877
y: -64.1584091187
theta: 1.6867672205
speed: 13.9010400772
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtiodate function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: -3.03295063972
y: 46.5761222839
theta: 4.76730203629
speed: 14.040643692
id: 1
t: 30
xxx after update is x: -2.98456048965
y: 45.7980499268
theta: 4.61368179321
speed: 13.8486471176
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -2.98456048965
y: 45.7980499268
theta: 4.61368179321
speed: 13.8486471176
id: 1
t: 31
xxx after update is x: -3.00757670403
y: 45.5525016785
theta: 4.55361509323
speed: 13.8500986099
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.00757670403
y: 45.5525016785
theta: 4.55361509323
speed: 13.8500986099
id: 1
t: 32
current clock is .t / rate/slowdown
1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: -3.00757670403
y: 45.5525016785
theta: 4.55361509323
speed: 13.8500986099
id: 1
t: 32
xxx after update is x: -2.90914726257
y: 44.2520866394
theta: 4.8702545166
speed: 13.7861442566
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.350046615575768, 0]
sim.py in the sim.py statecallback function
msg is x: 3.3617374897
y: -65.891166687
theta: 1.31483471394
speed: 13.6890563965
id: 0
t: 31
sim.py in the sim.py statecallback function
msg is x: 3.34748649597
y: -65.7164382935
theta: 1.50831878185
speed: 13.9077177048
id: 0
t: 32
sim.py in the sim.py statecallback function
msg is x: 3.10887646675
y: -64.1796112061
theta: 1.54767239094
speed: 13.9973115921
id: 0
t: 33
222 self.state_dicts[msg.id][msg.t] is (3.1088764667510986, -64.17961120605469, 1.5476723909378052, 13.99731159210205)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.90914726257
y: 44.2520866394
theta: 4.8702545166
speed: 13.7861442566
id: 1
t: 33
xxx after update is x: -3.35873746872
y: 43.7545089722
theta: 4.79079627991
speed: 13.7984046936
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:34
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -3.35873746872
y: 43.7545089722
theta: 4.79079627991
speed: 13.7984046936
id: 1
t: 34
xxx after update is x: -2.9169690609
y: 42.8169250488
theta: 4.84357213974
speed: 14.1833286285
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: -2.9169690609
y: 42.8169250488
theta: 4.84357213974
speed: 14.1833286285
id: 1
t: 35
xxx after update is x: -3.1928229332
y: 43.2186508179
theta: 4.7053232193
speed: 14.091222n
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.89556264877
y: -64.1584091187
theta: 1.6867672205
speed: 13.9010400772
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: 2.89556264877
y: -64.1584091187
theta: 1.6867672205
speed: 13.9010400772
id: 0
t: 34
xxx after update is x: 3.43953847885
y: -63.7334098816
theta: 1.52832138538
speed: 13.9874105453
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3620186113450814, 0.36605801185348874]
sim.py in the sim.py statecallback function
msg is x: -2.98456048965
y: 45.7980499268
theta: 4.61368179321
speed: 13.8486471176
id: 1
t: 31
sim.py in the sim.py statecallback function
msg is x: -3.00757670403
y: 45.5525016785
theta: 4.55361509323
speed: 13.8500986099
id: 1
t: 32
sim.py in the sim.py statecallback function
msg is x: -2.90914726257
y: 44.2520866394
theta: 4.8702545166
speed: 13.7861442566
id: 1
t: 33
sim.py in the sim.py statecallback function
msg is x: -3.35873746872
y: 43.7545089722
theta: 4.79079627991
speed: 13.7984046936
id: 1
t: 34
sim.py in the sim.py statecallback function
msg is x: -2.9169690609
y: 42.8169250488
theta: 4.84357213974
speed: 14.1833286285
id: 1
t: 35
222 self.state_dicts[msg.id][msg.t] is (-2.916969060897827, 42.816925048828125, 4.84357213973999, 14.183328628540039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: 3.43953847885
y: -63.7334098816
theta: 1.52832138538
speed: 13.9874105453
id: 0
t: 35
xxx after update is x: 3.89369416237
y: -63.1777954102
theta: 1.71341431141
speed: 13.9382867813
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 3.89369416237
y: -63.1777954102
theta: 1.71341431141
speed: 13.9382867813
id: 0
t: 36
xxx after update is x: 3.37424564362
y: -62.4173812866
theta: 1.64445543289
speed: 14.0534439087
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: 3.37424564362
y: -62.4173812866
theta: 1.64445543289
speed: 14.0534439087
id: 0
t: 37
xxx after update is x: 3.44756340981
y: -61.7761421204
theta: 1.66824615002
speed: 13.8851337433
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 3.44756340981
y: -61.7761421204
theta: 1.66824615002
speed: 13.8851337433
id: 0
t: 38
xxx after update is x: 3.21457576752
y: -61.0942306519
theta: 1.5867420435
speed: 13.8947591782
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.33984559700536887, 0.24941572629827408]
sim.py in the sim.py statecallback function
msg is x: -3.1928229332
y: 43.2186508179
theta: 4.7053232193
sp7631
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -3.1928229332
y: 43.2186508179
theta: 4.7053232193
speed: 14.0912227631
id: 1
t: 36
xxx after update is x: -3.01604413986
y: 41.8638916016
theta: 4.81781101227
speed: 13.8159294128
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32424474992449964, 0]
sim.py in the sim.py statecallback function
msg is x: 2.89556264877
y: -64.1584091187
theta: 1.6867672205
speed: 13.9010400772
id: 0
t: 34
sim.py in the sim.py statecallback function
msg is x: 3.43953847885
y: -63.7334098816
theta: 1.52832138538
speed: 13.9874105453
id: 0
t: 35
sim.py in the sim.py statecallback function
msg is x: 3.89369416237
y: -63.1777954102
theta: 1.71341431141
speed: 13.9382867813
id: 0
t: 36
sim.py in the sim.py statecallback function
msg is x: 3.37424564362
y: -62.4173812866
theta: 1.64445543289
speed: 14.0534439087
id: 0
t: 37
222 self.state_dicts[msg.id][msg.t] is (3.3742456436157227, -62.417381286621094, 1.6444554328918457, 14.053443908691406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: -3.01604413986
y: 41.8638916016
theta: 4.81781101227
speed: 13.8159294128
id: 1
t: 37
xxx after update is x: -3.31515073776
y: 40.9264640808
theta: 4.81710958481
speed: 14.1278123856
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -3.31515073776
y: 40.9264640808
theta: 4.81710958481
speed: 14.1278123856
id: 1
t: 38
xxx after update is x: -3.33709454536
y: 41.1096343994
theta: 4.93030738831
speed: 13.7472019196
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33709454536
y: 41.1096343994
theta: 4.93030738831
speed: 13.7472019196
id: 1
t: 39
current clock is .t / rate/slowdown
1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.3273835888015553, 0]
sim.py in the sim.py statecallback function
msg is x: 3.44756340981
y: -61.7761421204
theta: 1.66824615002
speed: 13.8851337433
id: 0
t: 38
sim.py in the sim.py statecallback function
msg is x: 3.21457576752
y: -61.0942306519
theta: 1.5867420435
speed: 13.8947591782
id: 0
t: 39
222 self.state_dicts[msg.id][msg.t] is (3.21457576751709, -61.09423065185547, 1.5867420434951782, 13.894759178161621)
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
maneuver_negotiatir.py in the try maneuver function update -. strat
xxx before update is x: -3.33709454536
y: 41.1096343994
theta: 4.93030738831
speed: 13.7472019196
id: 1
t: 39
xxx after update is x: -3.22809410095
y: 40.6362190247
theta: 4.85663127899
speed: 13.9340162277
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py eed: 14.0912227631
id: 1
t: 36
sim.py in the sim.py statecallback function
msg is x: -3.01604413986
y: 41.8638916016
theta: 4.81781101227
speed: 13.8159294128
id: 1
t: 37
sim.py in the sim.py statecallback function
msg is x: -3.31515073776
y: 40.9264640808
theta: 4.81710958481
speed: 14.1278123856
id: 1
t: 38
sim.py in the sim.py statecallback function
msg is x: -3.33709454536
y: 41.1096343994
theta: 4.93030738831
speed: 13.7472019196
id: 1
t: 39
222 self.state_dicts[msg.id][msg.t] is (-3.33709454536438, 41.10963439941406, 4.930307388305664, 13.747201919555664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: 3.21457576752
y: -61.0942306519
theta: 1.5867420435
speed: 13.8947591782
id: 0
t: 39
xxx after update is x: 3.29922151566
y: -59.8103981018
theta: 1.70066273212
speed: 14.0381994247
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 3.29922151566
y: -59.8103981018
theta: 1.70066273212
speed: 14.0381994247
id: 0
t: 40
xxx after update is x: 3.16069531441
y: -59.7930221558
theta: 1.64409649372
speed: 13.6566963196
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:42
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.16069531441
y: -59.7930221558
theta: 1.64409649372
speed: 13.6566963196
id: 0
t: 41
current clock is .t / rate/slowdown
1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: 3.16069531441
y: -59.7930221558
theta: 1.64409649372
speed: 13.6566963196
id: 0
t: 41
xxx after update is x: 2.92299818993
y: -59.2136955261
theta: 1.58466148376
speed: 13.5820741653
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 2.92299818993
y: -59.2136955261
theta: 1.58466148376
speed: 13.5820741653
id: 0
t: 42
xxx after update is x: 3.67714619637
y: -58.4119911194
theta: 1.37938821316
speed: 13.756228447
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 3.67714619637
y: -58.4119911194
theta: 1.37938821316
speed: 13.756228447
id: 0
t: 43
xxx after update is x: 3.01266098022
y: -57.7041358948
theta: 1.56970071793
speed: 13.9186201096
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 3.01266098022
y: -57.7041358948
theta: 1.56970071793
speed: 13.9186201096
id: 0
t: 44
xxx after update is x: 3.78180456161
y: -57.076751709
theta: 1.74158394337
speed: 13.6566095352
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risin the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: -3.22809410095
y: 40.6362190247
theta: 4.85663127899
speed: 13.9340162277
id: 1
t: 40
xxx after update is x: -2.8845603466
y: 38.9275436401
theta: 4.63323497772
speed: 13.9705610275
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: -2.8845603466
y: 38.9275436401
theta: 4.63323497772
speed: 13.9705610275
id: 1
t: 41
xxx after update is x: -2.99280381203
y: 38.9039726257
theta: 4.7313117981
speed: 14.0330305099
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -2.99280381203
y: 38.9039726257
theta: 4.7313117981
speed: 14.0330305099
id: 1
t: 42
xxx after update is x: -3.57014322281
y: 38.4939842224
theta: 4.75832605362
speed: 13.8687257767
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: -3.57014322281
y: 38.4939842224
theta: 4.75832605362
speed: 13.8687257767
id: 1
t: 43
xxx after update is x: -3.54784989357
y: 37.6335105896
theta: 4.69432210922
speed: 13.8256664276
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.33497144696223985, 0]
sim.py in the sim.py statecallback function
msg is x: 3.29922151566
y: -59.8103981018
theta: 1.70066273212
speed: 14.0381994247
id: 0
t: 40
sim.py in the sim.py statecallback function
msg is x: 3.16069531441
y: -59.7930221558
theta: 1.64409649372
speed: 13.6566963196
id: 0
t: 41
sim.py in the sim.py statecallback function
msg is x: 2.92299818993
y: -59.2136955261
theta: 1.58466148376
speed: 13.5820741653
id: 0
t: 42
sim.py in the sim.py statecallback function
msg is x: 3.67714619637
y: -58.4119911194
theta: 1.37938821316
speed: 13.756228447
id: 0
t: 43
sim.py in the sim.py statecallback function
msg is x: 3.01266098022
y: -57.7041358948
theta: 1.56970071793
speed: 13.9186201096
id: 0
t: 44
222 self.state_dicts[msg.id][msg.t] is (3.0126609802246094, -57.70413589477539, 1.5697007179260254, 13.918620109558105)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -3.54784989357
y: 37.6335105896
theta: 4.69432210922
speed: 13.8256664276
id: 1
t: 44
xxx after update is x: -3.22899127007
y: 37.11277771
theta: 4.78641319275
speed: 13.9138498306
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.22899127007
y: 37.11277771
theta: 4.78641319275
speed: 13.9138498306
id: 1
t: 45
current clock is .t / rate/slowdown
2.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.36293005132128703, 0]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.22899127007
y: 37.11277771
theta: 4.78641319275
speed: 13.9138498306
id: 1
t: 45
current clock is .t / rate/slowdown
2.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
k is [0.3398295711258108, 0.3651796695628542]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.78180456161
y: -57.076751709
theta: 1.74158394337
speed: 13.6566095352
id: 0
t: 45
current clock is .t / rate/slowdown
2.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46
... logging to /home/lu/.ros/log/d1dbc790-fbaa-11e8-8a22-000c291801fc/roslaunch-ubuntu-21519.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:42451/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [21529][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to d1dbc790-fbaa-11e8-8a22-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [21543][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [21558][0m
[1mprocess[rviz-3]: started with pid [21562][0m
[1mprocess[car0-4]: started with pid [21568][0m
[1mprocess[car1-5]: started with pid [21569][0m
[1mprocess[cloud-6]: started with pid [21570][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
