sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.8468670845
sim.py in the sim.py statecallback function, msg is

x: 2.99435734749
y: -34.3026695251
theta: 1.43783259392
speed: 13.7066860199
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (2.9943573474884033, -34.302669525146484, 1.4378325939178467, 13.706686019897461)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: 3.40115642548
y: -33.5845108032
theta: 1.60990989208
speed: 14.0743665695
id: 0
t: 2

222 self.state_dicts[msg.id][msg.t] is (3.401156425476074, -33.584510803222656, 1.6099098920822144, 14.074366569519043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fc55a351fc8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fc55a3743f8>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -2.9175465107
y: 32.9110946655
theta: 4.77497005463
speed: 13.7861251831
id: 1
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: 3.76142430305
y: -33.3332672119
theta: 1.5148755312
speed: 13.9926023483
id: 0
t: 3

222 self.state_dicts[msg.id][msg.t] is (3.7614243030548096, -33.33326721191406, 1.5148755311965942, 13.992602348327637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: -2.9175465107
y: 32.9110946655
theta: 4.77497005463
speed: 13.7861251831
id: 1
t: 3
xxx after update is x: -3.16176915169
y: 32.7969093323
theta: 4.64424324036
speed: 13.8568344116
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16176915169
y: 32.7969093323
theta: 4.64424324036
speed: 13.8568344116
id: 1
sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.86344408989
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: -3.51085591316
y: 34.7843933105
theta: 4.97733736038
speed: 14.1648902893
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-3.5108559131622314, 34.784393310546875, 4.97733736038208, 14.16489028930664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fe1745d5b00>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fe1745f1e18>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: -3.23013997078
y: 33.9584121704
theta: 4.69399547577
speed: 14.051823616
id: 1
t: 2

222 self.state_dicts[msg.id][msg.t] is (-3.230139970779419, 33.958412170410156, 4.693995475769043, 14.051823616027832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.40115642548
y: -33.5845108032
theta: 1.60990989208
speed: 14.0743665695
id: 0
t: 2
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: 3.40115642548
y: -33.5845108032
theta: 1.60990989208
speed: 14.0743665695
id: 0
t: 2
xxx after update is x: 3.76142430305
y: -33.3332672119
theta: 1.5148755312
speed: 13.9926023483
id: 0
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: 3.76142430305
y: -33.3332672119
theta: 1.5148755312
speed: 13.9926023483
id: 0
t: 3
xxx after update is x: 3.46300911903
y: -33.0817489624
theta: 1.78885352612
speed: 14.1166210175
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.46300911903
y: -33.0817489624
theta: 1.78885352612
speed: 14.1166210175
id: 0
t: 4
xxx after update is x: 3.4100689888
y: -32.09582901
tt: 4
xxx after update is x: -3.57487845421
y: 31.8867282867
theta: 4.89389610291
speed: 14.0980434418
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:5
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: -3.57487845421
y: 31.8867282867
theta: 4.89389610291
speed: 14.0980434418
id: 1
t: 5
xxx after update is x: -2.61627960205
y: 31.1766452789
theta: 4.73722314835
speed: 13.6933746338
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -2.61627960205
y: 31.1766452789
theta: 4.73722314835
speed: 13.6933746338
id: 1
t: 6
xxx after update is x: -3.54339027405
y: 30.3015384674
theta: 4.67138051987
speed: 13.8931894302
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.2951289087630071, 0.3462001439136557]
sim.py in the sim.py statecallback function, msg is

x: 3.46300911903
y: -33.0817489624
theta: 1.78885352612
speed: 14.1166210175
id: 0
t: 4

sim.py in the sim.py statecallback function, msg is

x: 3.4100689888
y: -32.09582901
theta: 1.57156026363
speed: 13.6718378067
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 3.03386116028
y: -31.4615039825
theta: 1.38471877575
speed: 13.7146339417
id: 0
t: 6

sim.py in the sim.py statecallback function, msg is

x: 3.34219837189
y: -30.7689094543
theta: 1.62186515331
speed: 13.8970079422
id: 0
t: 7

222 self.state_dicts[msg.id][msg.t] is (3.342198371887207, -30.768909454345703, 1.621865153312683, 13.897007942199707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.54339027405
y: 30.3015384674
theta: 4.67138051987
speed: 13.8931894302
id: 1
t: 7
xxx after update is x: -3.16228985786
y: 29.8605060577
theta: 4.95417261124
speed: 13.7847213745
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: -3.16228985786
y: 29.8605060577
theta: 4.95417261124
speed: 13.7847213745
id: 1
t: 8
xxx after update is x: -3.35836815834
y: 29.4074077606
theta: 4.88765335083
speed: 14.0246610641
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: -3.35836815834
y: 29.4074077606
theta: 4.88765335083
speed: 14.0246610641
id: 1
t: 9
xxx after update is x: -3.68371462822
y: 28.4413776398
theta: 4.49159288406
speed: 13.7659025192
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.350101480602136, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.62696051598
y: -29.7483901978
theta: 1.51968967915
speed: 14.001578331
id: 0
t: 8

sim.py in the sim.py statecallback function, msg is

x: 2.62369155884
y: -29.2483615875
theta: 1.55935704708
speed: 13.9209413528
id: 0
t: 9

sim.py in the sim.py statecallback function, msg is

x: 3.18288636208
y: -28.6214199066
theta: 1.34850823879
speed: 13.8836545944
id: 0
t: 10

222 self.state_dicts[msg.id][msg.t] is (3.1828863620758057, -28.62141990661621, 1.3485082387924194, 13.8836545944213heta: 1.57156026363
speed: 13.6718378067
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:5
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: 3.4100689888
y: -32.09582901
theta: 1.57156026363
speed: 13.6718378067
id: 0
t: 5
xxx after update is x: 3.03386116028
y: -31.4615039825
theta: 1.38471877575
speed: 13.7146339417
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3577674191144573, 0.25567929961204733]
sim.py in the sim.py statecallback function, msg is

x: -2.9175465107
y: 32.9110946655
theta: 4.77497005463
speed: 13.7861251831
id: 1
t: 3

sim.py in the sim.py statecallback function, msg is

x: -3.16176915169
y: 32.7969093323
theta: 4.64424324036
speed: 13.8568344116
id: 1
t: 4

sim.py in the sim.py statecallback function, msg is

x: -3.57487845421
y: 31.8867282867
theta: 4.89389610291
speed: 14.0980434418
id: 1
t: 5

sim.py in the sim.py statecallback function, msg is

x: -2.61627960205
y: 31.1766452789
theta: 4.73722314835
speed: 13.6933746338
id: 1
t: 6

222 self.state_dicts[msg.id][msg.t] is (-2.6162796020507812, 31.176645278930664, 4.737223148345947, 13.693374633789062)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 3.03386116028
y: -31.4615039825
theta: 1.38471877575
speed: 13.7146339417
id: 0
t: 6
xxx after update is x: 3.34219837189
y: -30.7689094543
theta: 1.62186515331
speed: 13.8970079422
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 3.34219837189
y: -30.7689094543
theta: 1.62186515331
speed: 13.8970079422
id: 0
t: 7
xxx after update is x: 3.62696051598
y: -29.7483901978
theta: 1.51968967915
speed: 14.001578331
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.62696051598
y: -29.7483901978
theta: 1.51968967915
speed: 14.001578331
id: 0
t: 8
current clock is 0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.62696051598
y: -29.7483901978
theta: 1.51968967915
speed: 14.001578331
id: 0
t: 8
xxx after update is x: 2.62369155884
y: -29.2483615875
theta: 1.55935704708
speed: 13.9209413528
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: 2.62369155884
y: -29.2483615875
theta: 1.55935704708
speed: 13.9209413528
id: 0
t: 9
xxx after update is x: 3.18288636208
y: -28.6214199066
theta: 1.34850823879
speed: 13.8836545944
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 3.18288636208
y: -28.62141987)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.68371462822
y: 28.4413776398
theta: 4.49159288406
speed: 13.7659025192
id: 1
t: 10
current clock is 0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -3.68371462822
y: 28.4413776398
theta: 4.49159288406
speed: 13.7659025192
id: 1
t: 10
xxx after update is x: -3.11292314529
y: 28.26679039
theta: 4.79123353958
speed: 14.1669864655
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: -3.11292314529
y: 28.26679039
theta: 4.79123353958
speed: 14.1669864655
id: 1
t: 11
xxx after update is x: -3.44306635857
y: 27.944519043
theta: 4.52630281448
speed: 13.8416833878
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -3.44306635857
y: 27.944519043
theta: 4.52630281448
speed: 13.8416833878
id: 1
t: 12
xxx after update is x: -3.18967866898
y: 26.7412700653
theta: 4.46976852417
speed: 13.9240131378
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32086324493675433, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.42675757408
y: -28.0706386566
theta: 1.62635874748
speed: 13.7937707901
id: 0
t: 11

sim.py in the sim.py statecallback function, msg is

x: 2.56003212929
y: -27.2810001373
theta: 1.39101076126
speed: 14.5562915802
id: 0
t: 12

sim.py in the sim.py statecallback function, msg is

x: 2.39182448387
y: -27.1798248291
theta: 1.51113009453
speed: 13.5585899353
id: 0
t: 13

222 self.state_dicts[msg.id][msg.t] is (2.39182448387146, -27.179824829101562, 1.5111300945281982, 13.558589935302734)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -3.18967866898
y: 26.7412700653
theta: 4.46976852417
speed: 13.9240131378
id: 1
t: 13
xxx after update is x: -2.9882338047
y: 26.2203083038
theta: 4.62502288818
speed: 13.8485298157
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: -2.9882338047
y: 26.2203083038
theta: 4.62502288818
speed: 13.8485298157
id: 1
t: 14
xxx after update is x: -3.12824654579
y: 25.5896282196
theta: 4.84980964661
speed: 14.1301116943
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12824654579
y: 25.5896282196
theta: 4.84980964661
speed: 14.1301116943
id: 1
t: 15
xxx after update is x: -3.22974038124
y: 24.6549091339
theta: 4.696621418
speed: 13.8577709198
i9066
theta: 1.34850823879
speed: 13.8836545944
id: 0
t: 10
xxx after update is x: 3.42675757408
y: -28.0706386566
theta: 1.62635874748
speed: 13.7937707901
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3928168991630976, 0.3235980779304883]
sim.py in the sim.py statecallback function, msg is

x: -3.54339027405
y: 30.3015384674
theta: 4.67138051987
speed: 13.8931894302
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.16228985786
y: 29.8605060577
theta: 4.95417261124
speed: 13.7847213745
id: 1
t: 8

sim.py in the sim.py statecallback function, msg is

x: -3.35836815834
y: 29.4074077606
theta: 4.88765335083
speed: 14.0246610641
id: 1
t: 9

sim.py in the sim.py statecallback function, msg is

x: -3.68371462822
y: 28.4413776398
theta: 4.49159288406
speed: 13.7659025192
id: 1
t: 10

sim.py in the sim.py statecallback function, msg is

x: -3.11292314529
y: 28.26679039
theta: 4.79123353958
speed: 14.1669864655
id: 1
t: 11

222 self.state_dicts[msg.id][msg.t] is (-3.1129231452941895, 28.26679039001465, 4.791233539581299, 14.166986465454102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 3.42675757408
y: -28.0706386566
theta: 1.62635874748
speed: 13.7937707901
id: 0
t: 11
xxx after update is x: 2.56003212929
y: -27.2810001373
theta: 1.39101076126
speed: 14.5562915802
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: 2.56003212929
y: -27.2810001373
theta: 1.39101076126
speed: 14.5562915802
id: 0
t: 12
xxx after update is x: 2.39182448387
y: -27.1798248291
theta: 1.51113009453
speed: 13.5585899353
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 2.39182448387
y: -27.1798248291
theta: 1.51113009453
speed: 13.5585899353
id: 0
t: 13
xxx after update is x: 3.2322716713
y: -26.3154315948
theta: 1.57481110096
speed: 13.7705745697
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.375599865621883, 0.36227563860739137]
sim.py in the sim.py statecallback function, msg is

x: -3.44306635857
y: 27.944519043
theta: 4.52630281448
speed: 13.8416833878
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -3.18967866898
y: 26.7412700653
theta: 4.46976852417
speed: 13.9240131378
id: 1
t: 13

sim.py in the sim.py statecallback function, msg is

x: -2.9882338047
y: 26.2203083038
theta: 4.62502288818
speed: 13.8485298157
id: 1
t: 14

222 self.state_dicts[msg.id][msg.t] is (-2.988233804702759, 26.220308303833008, 4.625022888183594, 13.848529815673828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: 3.2322716713
y: -26.3154315948
theta: 1.57481110096
speed: 13.7705745697
id: 0
t: 14
xxx after update is x: 3.23145294189
y: -25.4672756195
theta: 1.55333387852
speed: 13.926035881
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: 3.23145294189
y: -25.4672756195
theta: 1.55333387852
speed: 1d: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:16
aaaaaa
aaaaaabbbbb
risk is [0.4260418612145612, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.2322716713
y: -26.3154315948
theta: 1.57481110096
speed: 13.7705745697
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 3.23145294189
y: -25.4672756195
theta: 1.55333387852
speed: 13.926035881
id: 0
t: 15

sim.py in the sim.py statecallback function, msg is

x: 3.19781827927
y: -24.8286895752
theta: 1.67696762085
speed: 13.8411798477
id: 0
t: 16

222 self.state_dicts[msg.id][msg.t] is (3.1978182792663574, -24.828689575195312, 1.6769676208496094, 13.841179847717285)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.22974038124
y: 24.6549091339
theta: 4.696621418
speed: 13.8577709198
id: 1
t: 16
xxx after update is x: -3.20257043839
y: 24.2015266418
theta: 4.73951005936
speed: 13.4876651764
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20257043839
y: 24.2015266418
theta: 4.73951005936
speed: 13.4876651764
id: 1
t: 17
current clock is 0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.20257043839
y: 24.2015266418
theta: 4.73951005936
speed: 13.4876651764
id: 1
t: 17
xxx after update is x: -3.02726244926
y: 23.3858032227
theta: 4.97341060638
speed: 13.9210996628
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.2930322400236975, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.43475842476
y: -24.5615634918
theta: 1.65359485149
speed: 14.188167572
id: 0
t: 17

sim.py in the sim.py statecallback function, msg is

x: 3.12460923195
y: -23.8644294739
theta: 1.6162532568
speed: 14.1532077789
id: 0
t: 18

222 self.state_dicts[msg.id][msg.t] is (3.1246092319488525, -23.864429473876953, 1.6162532567977905, 14.153207778930664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: -3.02726244926
y: 23.3858032227
theta: 4.97341060638
speed: 13.9210996628
id: 1
t: 18
xxx after update is x: -2.80721211433
y: 22.9850502014
theta: 4.7191362381
speed: 13.8634548187
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: -2.80721211433
y: 22.9850502014
theta: 4.7191362381
speed: 13.8634548187
id: 1
t: 19
xxx after update is x: -3.88713049889
y: 22.9007301331
theta: 4.76236438751
speed: 13.7022666931
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21
xxx b3.926035881
id: 0
t: 15
xxx after update is x: 3.19781827927
y: -24.8286895752
theta: 1.67696762085
speed: 13.8411798477
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.19781827927
y: -24.8286895752
theta: 1.67696762085
speed: 13.8411798477
id: 0
t: 16
current clock is 0.711111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: 3.19781827927
y: -24.8286895752
theta: 1.67696762085
speed: 13.8411798477
id: 0
t: 16
xxx after update is x: 3.43475842476
y: -24.5615634918
theta: 1.65359485149
speed: 14.188167572
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: 3.43475842476
y: -24.5615634918
theta: 1.65359485149
speed: 14.188167572
id: 0
t: 17
xxx after update is x: 3.12460923195
y: -23.8644294739
theta: 1.6162532568
speed: 14.1532077789
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.12460923195
y: -23.8644294739
theta: 1.6162532568
speed: 14.1532077789
id: 0
t: 18
xxx after update is x: 2.95761036873
y: -23.3573265076
theta: 1.42296481133
speed: 13.9898843765
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.38330953956710534, 0.3629941954498903]
sim.py in the sim.py statecallback function, msg is

x: -3.12824654579
y: 25.5896282196
theta: 4.84980964661
speed: 14.1301116943
id: 1
t: 15

sim.py in the sim.py statecallback function, msg is

x: -3.22974038124
y: 24.6549091339
theta: 4.696621418
speed: 13.8577709198
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.20257043839
y: 24.2015266418
theta: 4.73951005936
speed: 13.4876651764
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -3.02726244926
y: 23.3858032227
theta: 4.97341060638
speed: 13.9210996628
id: 1
t: 18

sim.py in the sim.py statecallback function, msg is

x: -2.80721211433
y: 22.9850502014
theta: 4.7191362381
speed: 13.8634548187
id: 1
t: 19

222 self.state_dicts[msg.id][msg.t] is (-2.8072121143341064, 22.985050201416016, 4.7191362380981445, 13.863454818725586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: 2.95761036873
y: -23.3573265076
theta: 1.42296481133
speed: 13.9898843765
id: 0
t: 19
xxx after update is x: 3.51860046387
y: -22.0592021942
theta: 1.52741742134
speed: 13.266327858
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 3.51860046387
y: -22.0592021942
theta: 1.52741742134
speed: 13.266327858
id: 0
t: 20
xxx after update is x: 3.2422709465
y: -22.1575698853
theta: 1.61396861076
speed: 13.4274749756
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeefore update is x: -3.88713049889
y: 22.9007301331
theta: 4.76236438751
speed: 13.7022666931
id: 1
t: 20
xxx after update is x: -3.06227231026
y: 21.5569477081
theta: 4.64223337173
speed: 14.0241336823
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.27444639709124075, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.95761036873
y: -23.3573265076
theta: 1.42296481133
speed: 13.9898843765
id: 0
t: 19

sim.py in the sim.py statecallback function, msg is

x: 3.51860046387
y: -22.0592021942
theta: 1.52741742134
speed: 13.266327858
id: 0
t: 20

sim.py in the sim.py statecallback function, msg is

x: 3.2422709465
y: -22.1575698853
theta: 1.61396861076
speed: 13.4274749756
id: 0
t: 21

222 self.state_dicts[msg.id][msg.t] is (3.2422709465026855, -22.157569885253906, 1.6139686107635498, 13.427474975585938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: -3.06227231026
y: 21.5569477081
theta: 4.64223337173
speed: 14.0241336823
id: 1
t: 21
xxx after update is x: -3.24630355835
y: 21.8409080505
theta: 4.76365375519
speed: 14.1745548248
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: -3.24630355835
y: 21.8409080505
theta: 4.76365375519
speed: 14.1745548248
id: 1
t: 22
xxx after update is x: -3.28635168076
y: 20.6004066467
theta: 4.64657688141
speed: 13.8871393204
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -3.28635168076
y: 20.6004066467
theta: 4.64657688141
speed: 13.8871393204
id: 1
t: 23
xxx after update is x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.9093074799
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.15943701119273201, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.26627349854
y: -21.5646076202
theta: 1.48080682755
speed: 13.2170171738
id: 0
t: 22

sim.py in the sim.py statecallback function, msg is

x: 3.06705570221
y: -20.8747768402
theta: 1.62520349026
speed: 12.5838766098
id: 0
t: 23

sim.py in the sim.py statecallback function, msg is

x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24

222 self.state_dicts[msg.id][msg.t] is (3.1757779121398926, -19.854801177978516, 1.562498927116394, 12.434611320495605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
 self.man_init:
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.9093074799
id: 1
t: 24
current clock is 1.06666666667
!!!!after check statue the self.tag is [1.0666666666666667, 1]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.909307479ed < self.speed:
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: 3.2422709465
y: -22.1575698853
theta: 1.61396861076
speed: 13.4274749756
id: 0
t: 21
xxx after update is x: 3.26627349854
y: -21.5646076202
theta: 1.48080682755
speed: 13.2170171738
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: 3.26627349854
y: -21.5646076202
theta: 1.48080682755
speed: 13.2170171738
id: 0
t: 22
xxx after update is x: 3.06705570221
y: -20.8747768402
theta: 1.62520349026
speed: 12.5838766098
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.31625494047586644, 0.27282168887245745]
sim.py in the sim.py statecallback function, msg is

x: -3.88713049889
y: 22.9007301331
theta: 4.76236438751
speed: 13.7022666931
id: 1
t: 20

sim.py in the sim.py statecallback function, msg is

x: -3.06227231026
y: 21.5569477081
theta: 4.64223337173
speed: 14.0241336823
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.24630355835
y: 21.8409080505
theta: 4.76365375519
speed: 14.1745548248
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -3.28635168076
y: 20.6004066467
theta: 4.64657688141
speed: 13.8871393204
id: 1
t: 23

222 self.state_dicts[msg.id][msg.t] is (-3.2863516807556152, 20.600406646728516, 4.646576881408691, 13.887139320373535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: 3.06705570221
y: -20.8747768402
theta: 1.62520349026
speed: 12.5838766098
id: 0
t: 23
xxx after update is x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24
current clock is 1.06666666667
!!!!after check statue the self.tag is [1.0666666666666667, 0]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
 self.man_init:
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 3.17577791214
y: -19.854801178
theta: 1.56249892712
speed: 12.4346113205
id: 0
t: 24
xxx after update is x: 3.36585855484
9
id: 1
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
straight
membership is [1.0222222222222221, True, []]
1.02222222222
True

maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.06666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.02222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
Empty
self.agents_to_ask is []
message is :GET,1,1.06666666667,(-3.3666040897369385, 20.348224639892578, 4.689070701599121),13,1,1.06666666667,1,straight
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
!!!!change state to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 1 to grantlist. current grantlist:  {1: [5.933333333333334, 'straight']}
Doing maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.9093074799
id: 1
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.9093074799
id: 1
t: 24
xxx after update is x: -3.08676695824
y: 19.2743778229
theta: 4.75463724136
speed: 14.1807947159
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.08676695824
y: 19.2743778229
theta: 4.75463724136
speed: 14.1807947159
id: 1
t: 25
xxx after update is x: -3.50519013405
y: 18.3354187012
theta: 4.66763544083
speed: 13.9068889618
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.50519013405
y: 18.3354187012
theta: 4.66763544083
speed: 13.9068889618
id: 1
t: 26
xxx after update is x: -3.41419887543
y: 18.0862922668
theta: 4.59531736374
speed: 14.0014715195
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.23848015444418252, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.36585855484
y: -19.9545536041
theta: 1.58637297153
speed: 11.9792137146
id: 0
t: 25

sim.py in the sim.py statecallback function, msg is

x: 3.08238244057
y: -19.54271698
theta: 1.51402282715
speed: 11.7457180023
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.60515928268
y: -18.2872867584
theta: 1.4546186924
speed: 12.3715143204
id: 0
t: 27

222 self.state_dicts[msg.id][msg.t] is (3.605159282684326, -18.28728675842285, 1.4546186923980713, 12.371514320373535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: -3.41419887543
y: 18.0862922668
theta: 4.59531736374
speed: 14.0014715195
id: 1
t: 27
xxx after update is xy: -19.9545536041
theta: 1.58637297153
speed: 11.9792137146
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py intended_course
straight
membership is [1.0222222222222221, True, []]
1.02222222222
True

maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.06666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.02222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
Empty
self.agents_to_ask is []
message is :GET,0,1.06666666667,(3.1757779121398926, -19.854801177978516, 1.562498927116394),12,1,1.06666666667,0,straight
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
!!!!change state to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [5.844444444444444, 'straight']}
Doing maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 3.36585855484
y: -19.9545536041
theta: 1.58637297153
speed: 11.9792137146
id: 0
t: 25
xxx after update is x: 3.08238244057
y: -19.54271698
theta: 1.51402282715
speed: 11.7457180023
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: 3.08238244057
y: -19.54271698
theta: 1.51402282715
speed: 11.7457180023
id: 0
t: 26
xxx after update is x: 3.60515928268
y: -18.2872867584
theta: 1.4546186924
speed: 12.3715143204
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: 3.60515928268
y: -18.2872867584
theta: 1.4546186924
speed: 12.3715143204
id: 0
t: 27
xxx after update is x: 3.36221265793
y: -17.9281024933
theta: 1.50366914272
speed: 12.3134307861
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4465903352709363, 0.9966992961022454]
sim.py in the sim.py statecallback function, msg is

x: -3.36660408974
y: 20.3482246399
theta: 4.6890707016
speed: 13.9093074799
id: 1
t: 24

sim.py in the sim.py statecallback function, msg is

x: -3.08676695824
y: 19.2743778229
theta: 4.75463724136
speed: 14.1807947159
id: 1
t: 25

sim.py in the sim.py statecallback function, msg is

x: -3.50519013405
y: 18.3354187012
theta: 4.66763544083
speed: 13.9068889618
id: 1
t: 26

sim.py in the sim.py statecallback function, msg is

x: -3.41419887543
y: 18.0862922668
theta: 4.59531736374
speed: 14.0014715195
id: 1
t: 27

sim.py in the sim.py statecallback function, msg is

x: -3.72907543182
y: 17.7557697296
theta: 4.82638835907
speed: 13.8104419708
id: 1
t: 28

222 self.state_dicts[msg.id][msg.t] is (-3.7290754318237305, 17.755769729614258, 4.826388359069824, 13.810441970825195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: 3.36221265793
y: -17.9281024933
theta: 1.50366914272
speed: 12.3134307861
id: 0
t: 28
xxx after update is x: 3.08938241005
y: -17.391500473
theta: 1.61711108685
speed: 13.0183820724
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n time: -3.72907543182
y: 17.7557697296
theta: 4.82638835907
speed: 13.8104419708
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9061625425722105, 0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.36221265793
y: -17.9281024933
theta: 1.50366914272
speed: 12.3134307861
id: 0
t: 28

222 self.state_dicts[msg.id][msg.t] is (3.362212657928467, -17.928102493286133, 1.5036691427230835, 12.313430786132812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: -3.72907543182
y: 17.7557697296
theta: 4.82638835907
speed: 13.8104419708
id: 1
t: 28
xxx after update is x: -3.63624691963
y: 17.4983520508
theta: 4.83113288879
speed: 13.5910263062
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.63624691963
y: 17.4983520508
theta: 4.83113288879
speed: 13.5910263062
id: 1
t: 29
xxx after update is x: -3.29739069939
y: 15.936003685
theta: 4.57951211929
speed: 13.8171672821
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9574071082108059, 0.9999999999999996]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.08938241005
y: -17.391500473
theta: 1.61711108685
speed: 13.0183820724
id: 0
t: 29

sim.py in the sim.py statecallback function, msg is

x: 2.8625767231
y: -16.2593040466
theta: 1.47069358826
speed: 13.5064897537
id: 0
t: 30

222 self.state_dicts[msg.id][msg.t] is (2.862576723098755, -16.25930404663086, 1.470693588256836, 13.506489753723145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -3.29739069939
y: 15.936003685
theta: 4.57951211929
speed: 13.8171672821
id: 1
t: 30
xxx after update is x: -3.47553467751
y: 15.9666194916
theta: 4.6705493927
speed: 13.8161916733
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.47553467751
y: 15.9666194916
theta: 4.6705493927
speed: 13.8161916733
id: 1
t: 31
xxx after update is x: -2.80833745003
y: 15.4223480225
theta: 4.72986984253
speed: 13.688325882
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9378730426848193, 0.9999999999999998]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.39762306213
y: -16.1001167297
theta: 1.50516319275
speed: 13.6007986069
id: 0
t: 31

sim.py in the sim.py statecallback function, msg is

x: 3.09857344627
y: -16.0792427063
theta: 1.52664077282
speed: 14.0100164413
id: 0
t: 32

222 self.state_dicts[msg.id][msg.t] is (3.0985734462738037, -16.079242706298828, 1.526640772819519, 14.010016441345215)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.80833745003
y: 15.4223480225
theta: 4.72986984253s spin:30xxx before update is x: 3.08938241005
y: -17.391500473
theta: 1.61711108685
speed: 13.0183820724
id: 0
t: 29
xxx after update is x: 2.8625767231
y: -16.2593040466
theta: 1.47069358826
speed: 13.5064897537
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 2.8625767231
y: -16.2593040466
theta: 1.47069358826
speed: 13.5064897537
id: 0
t: 30
xxx after update is x: 3.39762306213
y: -16.1001167297
theta: 1.50516319275
speed: 13.6007986069
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0241387353570182, 0.9829903454525739]
sim.py in the sim.py statecallback function, msg is

x: -3.63624691963
y: 17.4983520508
theta: 4.83113288879
speed: 13.5910263062
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -3.29739069939
y: 15.936003685
theta: 4.57951211929
speed: 13.8171672821
id: 1
t: 30

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 3.39762306213
y: -16.1001167297
theta: 1.50516319275
speed: 13.6007986069
id: 0
t: 31
xxx after update is x: 3.09857344627
y: -16.0792427063
theta: 1.52664077282
speed: 14.0100164413
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.09857344627
y: -16.0792427063
theta: 1.52664077282
speed: 14.0100164413
id: 0
t: 32
current clock is 1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -3.47553467751
y: 15.9666194916
theta: 4.6705493927
speed: 13.8161916733
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -2.80833745003
y: 15.4223480225
theta: 4.72986984253
speed: 13.688325882
id: 1
t: 32

222 self.state_dicts[msg.id][msg.t] is (-2.808337450027466, 15.422348022460938, 4.729869842529297, 13.688325881958008)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.09857344627
y: -16.0792427063
theta: 1.52664077282
speed: 14.0100164413
id: 0
t: 32
xxx after update is x: 3.23330259323
y: -15.2612876892
theta: 1.50637865067
speed: 13.8409729004
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: 3.23330259323
y: -15.2612876892
theta: 1.50637865067
speed: 13.8409729004
id: 0
t: 33
xxx after update is x: 3.49104094505
y: -14.3145418167
theta: 1.66612613201
speed: 13.8251428604
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.49104094505
y: -14.3145418167
theta: 1.66612613201
speed: 13.8251428604
id: 0
t: 34
xxx after update is x: 3.27941799164
y: -13.9033136368
theta: 1.61525535583
speed: 13.8491735458
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:35
aaaaaa
risk is [
speed: 13.688325882
id: 1
t: 32
current clock is 1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: -2.80833745003
y: 15.4223480225
theta: 4.72986984253
speed: 13.688325882
id: 1
t: 32
xxx after update is x: -3.55064415932
y: 14.7213125229
theta: 4.84041595459
speed: 13.5019302368
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.55064415932
y: 14.7213125229
theta: 4.84041595459
speed: 13.5019302368
id: 1
t: 33
xxx after update is x: -2.98619294167
y: 14.4390926361
theta: 4.73447036743
speed: 13.8000707626
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999948054520097, 0.9999999999999999]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.23330259323
y: -15.2612876892
theta: 1.50637865067
speed: 13.8409729004
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 3.49104094505
y: -14.3145418167
theta: 1.66612613201
speed: 13.8251428604
id: 0
t: 34

222 self.state_dicts[msg.id][msg.t] is (3.4910409450531006, -14.314541816711426, 1.6661261320114136, 13.825142860412598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -2.98619294167
y: 14.4390926361
theta: 4.73447036743
speed: 13.8000707626
id: 1
t: 34
xxx after update is x: -3.54949855804
y: 13.8531513214
theta: 4.74942922592
speed: 13.630903244
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9506247622317011, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.27941799164
y: -13.9033136368
theta: 1.61525535583
speed: 13.8491735458
id: 0
t: 35

222 self.state_dicts[msg.id][msg.t] is (3.2794179916381836, -13.903313636779785, 1.615255355834961, 13.849173545837402)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -3.54949855804
y: 13.8531513214
theta: 4.74942922592
speed: 13.630903244
id: 1
t: 35
xxx after update is x: -3.3268456459
y: 13.3420572281
theta: 4.73066282272
speed: 12.6995735168
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.3268456459
y: 13.3420572281
theta: 4.73066282272
speed: 12.6995735168
id: 1
t: 36
xxx after update is x: -3.32753610611
y: 12.3236284256
theta: 4.680560112
speed: 13.6814670563
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9833470307975387, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.62305879593
y: -13.5347042084
theta: 1.51126134396
speed: 13.5753164291
id: 0
t: 36

sim.py in the sim.py statecallback function, msg is

x: 3.33342504501
y: -12.7055263519
theta: 1.71550869942
speed: 14.1142759323
id: 0
t: 37

222 self.state_dicts[m4.2064911304005526e-08, 0.9912946685507923]
sim.py in the sim.py statecallback function, msg is

x: -3.55064415932
y: 14.7213125229
theta: 4.84041595459
speed: 13.5019302368
id: 1
t: 33

sim.py in the sim.py statecallback function, msg is

x: -2.98619294167
y: 14.4390926361
theta: 4.73447036743
speed: 13.8000707626
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -3.54949855804
y: 13.8531513214
theta: 4.74942922592
speed: 13.630903244
id: 1
t: 35

222 self.state_dicts[msg.id][msg.t] is (-3.5494985580444336, 13.853151321411133, 4.749429225921631, 13.630903244018555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: 3.27941799164
y: -13.9033136368
theta: 1.61525535583
speed: 13.8491735458
id: 0
t: 35
xxx after update is x: 3.62305879593
y: -13.5347042084
theta: 1.51126134396
speed: 13.5753164291
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 3.62305879593
y: -13.5347042084
theta: 1.51126134396
speed: 13.5753164291
id: 0
t: 36
xxx after update is x: 3.33342504501
y: -12.7055263519
theta: 1.71550869942
speed: 14.1142759323
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: 3.33342504501
y: -12.7055263519
theta: 1.71550869942
speed: 14.1142759323
id: 0
t: 37
xxx after update is x: 3.40325117111
y: -11.8741140366
theta: 1.72275555134
speed: 13.7618055344
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0008126289724701589, 0.9754337625208424]
sim.py in the sim.py statecallback function, msg is

x: -3.3268456459
y: 13.3420572281
theta: 4.73066282272
speed: 12.6995735168
id: 1
t: 36

sim.py in the sim.py statecallback function, msg is

x: -3.32753610611
y: 12.3236284256
theta: 4.680560112
speed: 13.6814670563
id: 1
t: 37

sim.py in the sim.py statecallback function, msg is

x: -3.00832891464
y: 11.1553230286
theta: 4.60916852951
speed: 13.5596446991
id: 1
t: 38

222 self.state_dicts[msg.id][msg.t] is (-3.008328914642334, 11.155323028564453, 4.609168529510498, 13.55964469909668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 3.40325117111
y: -11.8741140366
theta: 1.72275555134
speed: 13.7618055344
id: 0
t: 38
xxx after update is x: 3.40139651299
y: -11.817773819
theta: 1.68379449844
speed: 13.5877456665
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.40139651299
y: -11.817773819
theta: 1.68379449844
speed: 13.5877456665
id: 0
t: 39
current clock is 1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40
xxx before updatesg.id][msg.t] is (3.3334250450134277, -12.705526351928711, 1.7155086994171143, 14.114275932312012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: -3.32753610611
y: 12.3236284256
theta: 4.680560112
speed: 13.6814670563
id: 1
t: 37
xxx after update is x: -3.00832891464
y: 11.1553230286
theta: 4.60916852951
speed: 13.5596446991
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -3.00832891464
y: 11.1553230286
theta: 4.60916852951
speed: 13.5596446991
id: 1
t: 38
xxx after update is x: -2.94188904762
y: 10.8650283813
theta: 4.63783168793
speed: 13.7259759903
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9582362971456161, 0.9999999999999999]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.40325117111
y: -11.8741140366
theta: 1.72275555134
speed: 13.7618055344
id: 0
t: 38

sim.py in the sim.py statecallback function, msg is

x: 3.40139651299
y: -11.817773819
theta: 1.68379449844
speed: 13.5877456665
id: 0
t: 39

222 self.state_dicts[msg.id][msg.t] is (3.4013965129852295, -11.817773818969727, 1.6837944984436035, 13.587745666503906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.94188904762
y: 10.8650283813
theta: 4.63783168793
speed: 13.7259759903
id: 1
t: 39
current clock is 1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: -2.94188904762
y: 10.8650283813
theta: 4.63783168793
speed: 13.7259759903
id: 1
t: 39
xxx after update is x: -3.59983325005
y: 10.8266363144
theta: 4.67484807968
speed: 13.5016527176
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.59983325005
y: 10.8266363144
theta: 4.67484807968
speed: 13.5016527176
id: 1
t: 40
xxx after update is x: -3.49577307701
y: 10.0652580261
theta: 4.64943361282
speed: 13.6765890121
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9647703275926792, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.33091759682
y: -11.0641212463
theta: 1.60587096214
speed: 13.8150758743
id: 0
t: 40

sim.py in the sim.py statecallback function, msg is

x: 3.48793172836
y: -10.1744823456
theta: 1.49858009815
speed: 13.9815912247
id: 0
t: 41

222 self.state_dicts[msg.id][msg.t] is (3.487931728363037, -10.174482345581055, 1.4985800981521606, 13.98159122467041)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish is x: 3.40139651299
y: -11.817773819
theta: 1.68379449844
speed: 13.5877456665
id: 0
t: 39
xxx after update is x: 3.33091759682
y: -11.0641212463
theta: 1.60587096214
speed: 13.8150758743
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 3.33091759682
y: -11.0641212463
theta: 1.60587096214
speed: 13.8150758743
id: 0
t: 40
xxx after update is x: 3.48793172836
y: -10.1744823456
theta: 1.49858009815
speed: 13.9815912247
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: 3.48793172836
y: -10.1744823456
theta: 1.49858009815
speed: 13.9815912247
id: 0
t: 41
xxx after update is x: 3.33801221848
y: -9.84163284302
theta: 1.38205218315
speed: 14.2860298157
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 3.33801221848
y: -9.84163284302
theta: 1.38205218315
speed: 14.2860298157
id: 0
t: 42
xxx after update is x: 3.07942080498
y: -8.65825366974
theta: 1.64539647102
speed: 13.8552188873
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.2204126803990044e-05, 0.9442100043722959]
sim.py in the sim.py statecallback function, msg is

x: -2.94188904762
y: 10.8650283813
theta: 4.63783168793
speed: 13.7259759903
id: 1
t: 39

sim.py in the sim.py statecallback function, msg is

x: -3.59983325005
y: 10.8266363144
theta: 4.67484807968
speed: 13.5016527176
id: 1
t: 40

sim.py in the sim.py statecallback function, msg is

x: -3.49577307701
y: 10.0652580261
theta: 4.64943361282
speed: 13.6765890121
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -3.51052069664
y: 9.13540554047
theta: 4.4943819046
speed: 13.3600187302
id: 1
t: 42

sim.py in the sim.py statecallback function, msg is

x: -3.20754981041
y: 8.49581241608
theta: 4.64995479584
speed: 13.4609012604
id: 1
t: 43

222 self.state_dicts[msg.id][msg.t] is (-3.207549810409546, 8.49581241607666, 4.649954795837402, 13.460901260375977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 3.07942080498
y: -8.65825366974
theta: 1.64539647102
speed: 13.8552188873
id: 0
t: 43
xxx after update is x: 2.99069666862
y: -8.39158248901
theta: 1.75378167629
speed: 14.1237983704
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 2.99069666862
y: -8.39158248901
theta: 1.75378167629
speed: 14.1237983704
id: 0
t: 44
xxx after update is x: 3.26112174988
y: -7.54678726196
theta: 1.5451900959
speed: 13.8501024246
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: 3.26112174988
y: -7.54678726196
theta: 1.5451900959
speed: 13.8501024246
id: 0
t: 45
xxx after update is x: 3.17370557785
y: -6.96488714218
theta: 1.48094546795
speed: 13.6852493286
id: 0
t:  the n times spin:42xxx before update is x: -3.49577307701
y: 10.0652580261
theta: 4.64943361282
speed: 13.6765890121
id: 1
t: 41
xxx after update is x: -3.51052069664
y: 9.13540554047
theta: 4.4943819046
speed: 13.3600187302
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -3.51052069664
y: 9.13540554047
theta: 4.4943819046
speed: 13.3600187302
id: 1
t: 42
xxx after update is x: -3.20754981041
y: 8.49581241608
theta: 4.64995479584
speed: 13.4609012604
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9797835308247274, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.33801221848
y: -9.84163284302
theta: 1.38205218315
speed: 14.2860298157
id: 0
t: 42

sim.py in the sim.py statecallback function, msg is

x: 3.07942080498
y: -8.65825366974
theta: 1.64539647102
speed: 13.8552188873
id: 0
t: 43

222 self.state_dicts[msg.id][msg.t] is (3.079420804977417, -8.65825366973877, 1.6453964710235596, 13.855218887329102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -3.20754981041
y: 8.49581241608
theta: 4.64995479584
speed: 13.4609012604
id: 1
t: 43
xxx after update is x: -3.05297279358
y: 7.79858350754
theta: 4.65690469742
speed: 13.5738296509
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.05297279358
y: 7.79858350754
theta: 4.65690469742
speed: 13.5738296509
id: 1
t: 44
xxx after update is x: -2.92221355438
y: 7.42816638947
theta: 4.74897956848
speed: 13.6148576736
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9971044083117024, 0.9999999999999999]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.99069666862
y: -8.39158248901
theta: 1.75378167629
speed: 14.1237983704
id: 0
t: 44

sim.py in the sim.py statecallback function, msg is

x: 3.26112174988
y: -7.54678726196
theta: 1.5451900959
speed: 13.8501024246
id: 0
t: 45

222 self.state_dicts[msg.id][msg.t] is (3.2611217498779297, -7.546787261962891, 1.5451900959014893, 13.850102424621582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: -2.92221355438
y: 7.42816638947
theta: 4.74897956848
speed: 13.6148576736
id: 1
t: 45
xxx after update is x: -3.4364862442
y: 6.58152866364
theta: 4.79715299606
speed: 13.7277374268
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9946000523886546, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.17370557785
y: -6.96488714218
theta: 1.48094546795
speed: 13.6852493286
id: 0
t: 46

222 self.state_dicts[msg.id][msg.t] is (3.173705577850342, -6.9648871421813965, 1.4809454679489136, 13.685249328613281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver fun46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.0495285319802204e-05, 0.9645403716017814]
sim.py in the sim.py statecallback function, msg is

x: -3.05297279358
y: 7.79858350754
theta: 4.65690469742
speed: 13.5738296509
id: 1
t: 44

sim.py in the sim.py statecallback function, msg is

x: -2.92221355438
y: 7.42816638947
theta: 4.74897956848
speed: 13.6148576736
id: 1
t: 45

sim.py in the sim.py statecallback function, msg is

x: -3.4364862442
y: 6.58152866364
theta: 4.79715299606
speed: 13.7277374268
id: 1
t: 46

222 self.state_dicts[msg.id][msg.t] is (-3.43648624420166, 6.581528663635254, 4.797152996063232, 13.727737426757812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: 3.17370557785
y: -6.96488714218
theta: 1.48094546795
speed: 13.6852493286
id: 0
t: 46
xxx after update is x: 3.24366283417
y: -7.06121301651
theta: 1.4705145359
speed: 13.8548202515
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.24366283417
y: -7.06121301651
theta: 1.4705145359
speed: 13.8548202515
id: 0
t: 47
current clock is 2.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: 3.24366283417
y: -7.06121301651
theta: 1.4705145359
speed: 13.8548202515
id: 0
t: 47
xxx after update is x: 3.65484380722
y: -6.06472492218
theta: 1.45243310928
speed: 14.0924758911
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: 3.65484380722
y: -6.06472492218
theta: 1.45243310928
speed: 14.0924758911
id: 0
t: 48
xxx after update is x: 3.4042634964
y: -4.89578199387
theta: 1.64884114265
speed: 13.8799991608
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: 3.4042634964
y: -4.89578199387
theta: 1.64884114265
speed: 13.8799991608
id: 0
t: 49
xxx after update is x: 3.66732406616
y: -4.39575242996
theta: 1.42894911766
speed: 13.9035787582
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.00015169573826503673, 0.9980890167532626]
sim.py in the sim.py statecallback function, msg is

x: -3.49745702744
y: 6.13246202469
theta: 4.83037233353
speed: 13.2924518585
id: 1
t: 47

sim.py in the sim.py statecallback function, msg is

x: -2.83001804352
y: 5.7660150528
theta: 4.76558113098
speed: 14.0454559326
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.59516167641
y: 5.09823846817
theta: 4.50121355057
speed: 13.8417835236
id: 1
t: 49

sim.py in the sim.py statecallback function, msg is

x: -3.56858420372
y: 4.15114164352
theta: 4.87229633331
speed: 13.496714592
id: 1
t: 50

222 self.state_dicts[msg.id][msg.t] is (-3.5685842037200928, 4.15114164352417, 4.872296333312988, 13.49671459197998)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call upction update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4364862442
y: 6.58152866364
theta: 4.79715299606
speed: 13.7277374268
id: 1
t: 46
current clock is 2.04444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: -3.4364862442
y: 6.58152866364
theta: 4.79715299606
speed: 13.7277374268
id: 1
t: 46
xxx after update is x: -3.49745702744
y: 6.13246202469
theta: 4.83037233353
speed: 13.2924518585
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.49745702744
y: 6.13246202469
theta: 4.83037233353
speed: 13.2924518585
id: 1
t: 47
xxx after update is x: -2.83001804352
y: 5.7660150528
theta: 4.76558113098
speed: 14.0454559326
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.9997483190140132, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.24366283417
y: -7.06121301651
theta: 1.4705145359
speed: 13.8548202515
id: 0
t: 47

sim.py in the sim.py statecallback function, msg is

x: 3.65484380722
y: -6.06472492218
theta: 1.45243310928
speed: 14.0924758911
id: 0
t: 48

222 self.state_dicts[msg.id][msg.t] is (3.654843807220459, -6.064724922180176, 1.4524331092834473, 14.092475891113281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: -2.83001804352
y: 5.7660150528
theta: 4.76558113098
speed: 14.0454559326
id: 1
t: 48
xxx after update is x: -3.59516167641
y: 5.09823846817
theta: 4.50121355057
speed: 13.8417835236
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.59516167641
y: 5.09823846817
theta: 4.50121355057
speed: 13.8417835236
id: 1
t: 49
xxx after update is x: -3.56858420372
y: 4.15114164352
theta: 4.87229633331
speed: 13.496714592
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9993735845098146, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.4042634964
y: -4.89578199387
theta: 1.64884114265
speed: 13.8799991608
id: 0
t: 49

sim.py in the sim.py statecallback function, msg is

x: 3.66732406616
y: -4.39575242996
theta: 1.42894911766
speed: 13.9035787582
id: 0
t: 50

222 self.state_dicts[msg.id][msg.t] is (3.6673240661621094, -4.395752429962158, 1.4289491176605225, 13.903578758239746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: -3.56858420372
y: 4.15114164352
theta: 4.87229633331
speed: 13.496714592
id: 1
t: 50
xxx after update is x: -2.96675753593
y: 4.12367343903
theta: 4.940497398date_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: 3.66732406616
y: -4.39575242996
theta: 1.42894911766
speed: 13.9035787582
id: 0
t: 50
xxx after update is x: 3.17754912376
y: -4.06351661682
theta: 1.57785975933
speed: 13.6065282822
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.17754912376
y: -4.06351661682
theta: 1.57785975933
speed: 13.6065282822
id: 0
t: 51
xxx after update is x: 3.19848489761
y: -3.10397934914
theta: 1.63236224651
speed: 13.4856100082
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:52
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: 3.19848489761
y: -3.10397934914
theta: 1.63236224651
speed: 13.4856100082
id: 0
t: 52
xxx after update is x: 2.99713230133
y: -2.77556848526
theta: 1.63847482204
speed: 13.4129247665
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 1.0000000000000002]
sim.py in the sim.py statecallback function, msg is

x: -2.96675753593
y: 4.12367343903
theta: 4.94049739838
speed: 14.0919094086
id: 1
t: 51

sim.py in the sim.py statecallback function, msg is

x: -3.92240285873
y: 3.67379522324
theta: 4.69851350784
speed: 13.9086847305
id: 1
t: 52

sim.py in the sim.py statecallback function, msg is

x: -3.17557549477
y: 2.4551460743
theta: 4.82951498032
speed: 13.5459766388
id: 1
t: 53

222 self.state_dicts[msg.id][msg.t] is (-3.1755754947662354, 2.455146074295044, 4.829514980316162, 13.545976638793945)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: 2.99713230133
y: -2.77556848526
theta: 1.63847482204
speed: 13.4129247665
id: 0
t: 53
xxx after update is x: 3.46149396896
y: -1.93755054474
theta: 1.63181805611
speed: 13.7971525192
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.46149396896
y: -1.93755054474
theta: 1.63181805611
speed: 13.7971525192
id: 0
t: 54
current clock is 2.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: 3.46149396896
y: -1.93755054474
theta: 1.63181805611
speed: 13.7971525192
id: 0
t: 54
xxx after update is x: 3.5042757988
y: -1.44931614399
theta: 1.49379265308
speed: 13.8174676895
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: 3.5042757988
y: -1.44931614399
theta: 1.49379265308
speed: 13.8174676895
id: 0
t: 55
xxx after update is x: 3.37675619125
y: -0.960053920746
theta: 1.57704293728
speed: 13.8744182587
id: 0
t: 56
maneuver_negotiatir.py finish the update agent sta38
speed: 14.0919094086
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.96675753593
y: 4.12367343903
theta: 4.94049739838
speed: 14.0919094086
id: 1
t: 51
xxx after update is x: -3.92240285873
y: 3.67379522324
theta: 4.69851350784
speed: 13.9086847305
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999999999999998, 1.0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.17754912376
y: -4.06351661682
theta: 1.57785975933
speed: 13.6065282822
id: 0
t: 51

sim.py in the sim.py statecallback function, msg is

x: 3.19848489761
y: -3.10397934914
theta: 1.63236224651
speed: 13.4856100082
id: 0
t: 52

222 self.state_dicts[msg.id][msg.t] is (3.1984848976135254, -3.1039793491363525, 1.6323622465133667, 13.485610008239746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: -3.92240285873
y: 3.67379522324
theta: 4.69851350784
speed: 13.9086847305
id: 1
t: 52
xxx after update is x: -3.17557549477
y: 2.4551460743
theta: 4.82951498032
speed: 13.5459766388
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999999309351156, 0.5007999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.99713230133
y: -2.77556848526
theta: 1.63847482204
speed: 13.4129247665
id: 0
t: 53

222 self.state_dicts[msg.id][msg.t] is (2.9971323013305664, -2.7755684852600098, 1.6384748220443726, 13.412924766540527)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: -3.17557549477
y: 2.4551460743
theta: 4.82951498032
speed: 13.5459766388
id: 1
t: 53
xxx after update is x: -3.04696798325
y: 1.98922169209
theta: 4.64965724945
speed: 13.3966007233
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.04696798325
y: 1.98922169209
theta: 4.64965724945
speed: 13.3966007233
id: 1
t: 54
xxx after update is x: -3.29078674316
y: 0.631826996803
theta: 4.71745491028
speed: 13.6284780502
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.29078674316
y: 0.631826996803
theta: 4.71745491028
speed: 13.6284780502
id: 1
t: 55
xxx after update is x: -3.09941577911
y: 1.32928323746
theta: 4.60366821289
speed: 13.8806877136
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999999999999999, 0.48319999999999796]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.46149396896
y: -1.93755054474
theta: 1.63181805611
speed: 13.7971525192
id: 0
t: 54

sim.py in the sim.py statecallback function, msg is

x: 3.5042757988
y: -1.44931614399
theta: 1.49379265308
speed: 13.8174676895
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.37675619125
y: -0.960053920746
theta: 1.57704293728
speed: 13.8744182587
id: 0
t: 56

222 self.state_dicts[msg.id][msg.t] is (3.376756191253662, -0.9600539207458496, 1.5770429372787476, 13.874418258666992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.09941577911
y: 1.32928323746
theta: 4.60366821289
speed: 13.8806877136
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
xxx before update is x: -3.09941577911
y: 1.32928323746
theta: 4.60366821289
speed: 13.8806877136
id: 1
t: 56
xxx after update is x: -3.64113712311
y: 0.467468589544
theta: 4.68391227722
speed: 13.5906229019
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:57
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.64113712311
y: 0.467468589544
theta: 4.68391227722
speed: 13.5906229019
id: 1
t: 57
xxx after update is x: -3.41873431206
y: -0.565966486931
theta: 4.68687152863
speed: 14.0653247833
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:58
aaaaaa
aaaaaabbbbb
risk is [0.9967369503622999, 0.48639999999999795]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.26184606552
y: -0.684709429741
theta: 1.52879297733
speed: 14.03926754
id: 0
t: 57

sim.py in the sim.py statecallback function, msg is

x: 3.16731739044
y: 0.0677949488163
theta: 1.54396259785
speed: 14.0747232437
id: 0
t: 58

222 self.state_dicts[msg.id][msg.t] is (3.1673173904418945, 0.06779494881629944, 1.5439625978469849, 14.074723243713379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: -3.41873431206
y: -0.565966486931
theta: 4.68687152863
speed: 14.0653247833
id: 1
t: 58
xxx after update is x: -2.89262700081
y: -1.09061193466
theta: 4.74023914337
speed: 13.5870838165
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999588192936054, 0.4927999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.92004156113
y: 0.679045498371
theta: 1.82345080376
speed: 13.9155378342
id: 0
t: 59

222 self.state_dicts[msg.id][msg.t] is (2.920041561126709, 0.6790454983711243, 1.8234508037567139, 13.91553783416748)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: -2.89262700081
y: -1.09061193466
theta: 4.74023914337
speed: 13.5870838165
id: 1
t: 59
xxx after update is x: -3.27935743332
y: -1.52362048626
theta: 4.85315179825
speed: 13.0049829483
id: 1
t: 60
maneuver_negotiatir.py finish the update agent te from ros funtion
aaaaaa
risk is [0.0, 1.0000000000000007]
sim.py in the sim.py statecallback function, msg is

x: -3.04696798325
y: 1.98922169209
theta: 4.64965724945
speed: 13.3966007233
id: 1
t: 54

sim.py in the sim.py statecallback function, msg is

x: -3.29078674316
y: 0.631826996803
theta: 4.71745491028
speed: 13.6284780502
id: 1
t: 55

sim.py in the sim.py statecallback function, msg is

x: -3.09941577911
y: 1.32928323746
theta: 4.60366821289
speed: 13.8806877136
id: 1
t: 56

222 self.state_dicts[msg.id][msg.t] is (-3.0994157791137695, 1.3292832374572754, 4.603668212890625, 13.880687713623047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: 3.37675619125
y: -0.960053920746
theta: 1.57704293728
speed: 13.8744182587
id: 0
t: 56
xxx after update is x: 3.26184606552
y: -0.684709429741
theta: 1.52879297733
speed: 14.03926754
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:58
xxx before update is x: 3.26184606552
y: -0.684709429741
theta: 1.52879297733
speed: 14.03926754
id: 0
t: 57
xxx after update is x: 3.16731739044
y: 0.0677949488163
theta: 1.54396259785
speed: 14.0747232437
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: 3.16731739044
y: 0.0677949488163
theta: 1.54396259785
speed: 14.0747232437
id: 0
t: 58
xxx after update is x: 2.92004156113
y: 0.679045498371
theta: 1.82345080376
speed: 13.9155378342
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.9992711967887883]
sim.py in the sim.py statecallback function, msg is

x: -3.64113712311
y: 0.467468589544
theta: 4.68391227722
speed: 13.5906229019
id: 1
t: 57

sim.py in the sim.py statecallback function, msg is

x: -3.41873431206
y: -0.565966486931
theta: 4.68687152863
speed: 14.0653247833
id: 1
t: 58

sim.py in the sim.py statecallback function, msg is

x: -2.89262700081
y: -1.09061193466
theta: 4.74023914337
speed: 13.5870838165
id: 1
t: 59

222 self.state_dicts[msg.id][msg.t] is (-2.892627000808716, -1.0906119346618652, 4.740239143371582, 13.58708381652832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: 2.92004156113
y: 0.679045498371
theta: 1.82345080376
speed: 13.9155378342
id: 0
t: 59
xxx after update is x: 3.14448261261
y: 2.03677535057
theta: 1.5442340374
speed: 13.3957910538
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: 3.14448261261
y: 2.03677535057
theta: 1.5442340374
speed: 13.3957910538
id: 0
t: 60
xxx after update is x: 2.85249996185
y: 2.21901512146
theta: 1.65016376972
speed: 14.1428518295
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.9657598824318543]
sim.py in the sim.py statecallback function, msg is

x: -3.27935743332
y: -1.52362048626
theta: 4.85315179825
speed: 13.0049829483
id: 1
t: 60

sim.py in the sim.py statecallback function, mstate from ros funtion
xxx before update is x: -3.27935743332
y: -1.52362048626
theta: 4.85315179825
speed: 13.0049829483
id: 1
t: 60
xxx after update is x: -3.3588848114
y: -2.54762005806
theta: 4.8048210144
speed: 13.6173601151
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5097978806331902, 0.4959999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.14448261261
y: 2.03677535057
theta: 1.5442340374
speed: 13.3957910538
id: 0
t: 60

sim.py in the sim.py statecallback function, msg is

x: 2.85249996185
y: 2.21901512146
theta: 1.65016376972
speed: 14.1428518295
id: 0
t: 61

222 self.state_dicts[msg.id][msg.t] is (2.8524999618530273, 2.219015121459961, 1.6501637697219849, 14.142851829528809)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588848114
y: -2.54762005806
theta: 4.8048210144
speed: 13.6173601151
id: 1
t: 61
current clock is 2.71111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx xxx before update is x: -3.3588848114
y: -2.54762005806
theta: 4.8048210144
speed: 13.6173601151
id: 1
t: 61
xxx after update is x: -3.69003558159
y: -2.51333737373
theta: 4.82896375656
speed: 13.6441707611
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.69003558159
y: -2.51333737373
theta: 4.82896375656
speed: 13.6441707611
id: 1
t: 62
xxx after update is x: -3.3570458889
y: -4.23386240005
theta: 4.62037944794
speed: 14.3459014893
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat

 self.man_init:
(self.id == 1):
xxx before update is x: -3.3570458889
y: -4.23386240005
theta: 4.62037944794
speed: 14.3459014893
id: 1
t: 63
xxx after update is x: -3.1187312603
y: -4.57746505737
theta: 4.60769176483
speed: 13.8377456665
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:64
aaaaaa
aaaaaabbbbb
risk is [0.6595409888392838, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.13580703735
y: 2.41034817696
theta: 1.57374942303
speed: 13.498837471
id: 0
t: 62

sim.py in the sim.py statecallback function, msg is

x: 3.16065812111
y: 2.96715664864
theta: 1.48750460148
speed: 13.6883926392
id: 0
t: 63

sim.py in the sim.py statecallback function, msg is

x: 2.78783774376
y: 3.6079826355
theta: 1.62786304951
speed: 13.4839992523
id: 0
t: 64

222 self.state_dicts[msg.id][msg.t] is (2.7878377437591553, 3.607982635498047, 1.6278630495071411, 13.483999252319336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: -3.1187312603
y: -sg is

x: -3.3588848114
y: -2.54762005806
theta: 4.8048210144
speed: 13.6173601151
id: 1
t: 61

222 self.state_dicts[msg.id][msg.t] is (-3.358884811401367, -2.5476200580596924, 4.804821014404297, 13.61736011505127)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: 2.85249996185
y: 2.21901512146
theta: 1.65016376972
speed: 14.1428518295
id: 0
t: 61
xxx after update is x: 3.13580703735
y: 2.41034817696
theta: 1.57374942303
speed: 13.498837471
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.13580703735
y: 2.41034817696
theta: 1.57374942303
speed: 13.498837471
id: 0
t: 62
current clock is 2.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: 3.13580703735
y: 2.41034817696
theta: 1.57374942303
speed: 13.498837471
id: 0
t: 62
xxx after update is x: 3.16065812111
y: 2.96715664864
theta: 1.48750460148
speed: 13.6883926392
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: 3.16065812111
y: 2.96715664864
theta: 1.48750460148
speed: 13.6883926392
id: 0
t: 63
xxx after update is x: 2.78783774376
y: 3.6079826355
theta: 1.62786304951
speed: 13.4839992523
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 1.0000000000000004]
sim.py in the sim.py statecallback function, msg is

x: -3.69003558159
y: -2.51333737373
theta: 4.82896375656
speed: 13.6441707611
id: 1
t: 62

sim.py in the sim.py statecallback function, msg is

x: -3.3570458889
y: -4.23386240005
theta: 4.62037944794
speed: 14.3459014893
id: 1
t: 63

sim.py in the sim.py statecallback function, msg is

x: -3.1187312603
y: -4.57746505737
theta: 4.60769176483
speed: 13.8377456665
id: 1
t: 64

222 self.state_dicts[msg.id][msg.t] is (-3.1187312602996826, -4.577465057373047, 4.607691764831543, 13.837745666503906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: 2.78783774376
y: 3.6079826355
theta: 1.62786304951
speed: 13.4839992523
id: 0
t: 64
xxx after update is x: 2.97067451477
y: 4.24433469772
theta: 1.66750144958
speed: 13.9495820999
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: 2.97067451477
y: 4.24433469772
theta: 1.66750144958
speed: 13.9495820999
id: 0
t: 65
xxx after update is x: 3.11539292336
y: 4.92322587967
theta: 1.56405591965
speed: 13.8502550125
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.9999999999999999]
sim.py in the sim.py statecallback function, msg is

x: -3.33049201965
y: -4.64169645309
t4.57746505737
theta: 4.60769176483
speed: 13.8377456665
id: 1
t: 64
xxx after update is x: -3.33049201965
y: -4.64169645309
theta: 4.80473709106
speed: 14.2026662827
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.33049201965
y: -4.64169645309
theta: 4.80473709106
speed: 14.2026662827
id: 1
t: 65
xxx after update is x: -3.19120669365
y: -5.89732217789
theta: 4.74485778809
speed: 13.8209943771
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.0000000000000002, 0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.97067451477
y: 4.24433469772
theta: 1.66750144958
speed: 13.9495820999
id: 0
t: 65

sim.py in the sim.py statecallback function, msg is

x: 3.11539292336
y: 4.92322587967
theta: 1.56405591965
speed: 13.8502550125
id: 0
t: 66

222 self.state_dicts[msg.id][msg.t] is (3.1153929233551025, 4.9232258796691895, 1.5640559196472168, 13.850255012512207)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: -3.19120669365
y: -5.89732217789
theta: 4.74485778809
speed: 13.8209943771
id: 1
t: 66
xxx after update is x: -3.4702963829
y: -5.86532688141
theta: 4.685090065
speed: 13.3996763229
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.4702963829
y: -5.86532688141
theta: 4.685090065
speed: 13.3996763229
id: 1
t: 67
xxx after update is x: -3.18748307228
y: -6.62207460403
theta: 4.68900632858
speed: 13.6860980988
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9999999999999996, 0.5311999999999988]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.46949028969
y: 5.53439617157
theta: 1.41875767708
speed: 13.8975419998
id: 0
t: 67

sim.py in the sim.py statecallback function, msg is

x: 3.25019526482
y: 6.94080209732
theta: 1.48056709766
speed: 13.7905807495
id: 0
t: 68

222 self.state_dicts[msg.id][msg.t] is (3.250195264816284, 6.940802097320557, 1.4805670976638794, 13.790580749511719)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: -3.18748307228
y: -6.62207460403
theta: 4.68900632858
speed: 13.6860980988
id: 1
t: 68
xxx after update is x: -2.90033102036
y: -7.35342073441
theta: 4.75949192047
speed: 13.440574646
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.04666813767311314, 0.505599999999998]
sim.py in the sim.py statecallback function, msg is

x: 2.74706196785
y: 6.92246866226
theta: 1.51366841793
speed: 13.8641691208
id: 0
t: 69

222 self.state_dicts[msg.id][msg.t] is (2.7470619678497314, 6.922468662261963, 1.513668417930603, 13.864169120788574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
going to the update function
sim.py in the sim.py update funheta: 4.80473709106
speed: 14.2026662827
id: 1
t: 65

sim.py in the sim.py statecallback function, msg is

x: -3.19120669365
y: -5.89732217789
theta: 4.74485778809
speed: 13.8209943771
id: 1
t: 66

222 self.state_dicts[msg.id][msg.t] is (-3.191206693649292, -5.897322177886963, 4.7448577880859375, 13.82099437713623)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: 3.11539292336
y: 4.92322587967
theta: 1.56405591965
speed: 13.8502550125
id: 0
t: 66
xxx after update is x: 3.46949028969
y: 5.53439617157
theta: 1.41875767708
speed: 13.8975419998
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: 3.46949028969
y: 5.53439617157
theta: 1.41875767708
speed: 13.8975419998
id: 0
t: 67
xxx after update is x: 3.25019526482
y: 6.94080209732
theta: 1.48056709766
speed: 13.7905807495
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: 3.25019526482
y: 6.94080209732
theta: 1.48056709766
speed: 13.7905807495
id: 0
t: 68
xxx after update is x: 2.74706196785
y: 6.92246866226
theta: 1.51366841793
speed: 13.8641691208
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 1.0]
sim.py in the sim.py statecallback function, msg is

x: -3.4702963829
y: -5.86532688141
theta: 4.685090065
speed: 13.3996763229
id: 1
t: 67

sim.py in the sim.py statecallback function, msg is

x: -3.18748307228
y: -6.62207460403
theta: 4.68900632858
speed: 13.6860980988
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -2.90033102036
y: -7.35342073441
theta: 4.75949192047
speed: 13.440574646
id: 1
t: 69

222 self.state_dicts[msg.id][msg.t] is (-2.9003310203552246, -7.353420734405518, 4.759491920471191, 13.440574645996094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: 2.74706196785
y: 6.92246866226
theta: 1.51366841793
speed: 13.8641691208
id: 0
t: 69
xxx after update is x: 3.29459190369
y: 7.35326385498
theta: 1.60831773281
speed: 14.3984746933
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29459190369
y: 7.35326385498
theta: 1.60831773281
speed: 14.3984746933
id: 0
t: 70
current clock is 3.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.29459190369
y: 7.35326385498
theta: 1.60831773281
speed: 14.3984746933
id: 0
t: 70
xxx after update is x: 3.117623806
y: 7.97964477539
theta: 1.54928040504
speed: 13.9882249832
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:71
going to the update function
sim.py in the ction xxx before update is x: -2.90033102036
y: -7.35342073441
theta: 4.75949192047
speed: 13.440574646
id: 1
t: 69
xxx after update is x: -3.36054682732
y: -8.14856433868
theta: 4.88633155823
speed: 14.2542572021
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion

targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: -3.36054682732
y: -8.14856433868
theta: 4.88633155823
speed: 14.2542572021
id: 1
t: 70
xxx after update is x: -3.02036452293
y: -8.84735012054
theta: 4.51772546768
speed: 13.8544168472
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5135999999999983]
sim.py in the sim.py statecallback function, msg is

x: 3.29459190369
y: 7.35326385498
theta: 1.60831773281
speed: 14.3984746933
id: 0
t: 70

sim.py in the sim.py statecallback function, msg is

x: 3.117623806
y: 7.97964477539
theta: 1.54928040504
speed: 13.9882249832
id: 0
t: 71

222 self.state_dicts[msg.id][msg.t] is (3.117623805999756, 7.979644775390625, 1.5492804050445557, 13.988224983215332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.02036452293
y: -8.84735012054
theta: 4.51772546768
speed: 13.8544168472
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: -3.02036452293
y: -8.84735012054
theta: 4.51772546768
speed: 13.8544168472
id: 1
t: 71
xxx after update is x: -3.06530618668
y: -9.23996639252
theta: 4.64409399033
speed: 13.9411754608
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.06530618668
y: -9.23996639252
theta: 4.64409399033
speed: 13.9411754608
id: 1
t: 72
xxx after update is x: -3.19448256493
y: -9.61983966827
theta: 4.71688127518
speed: 13.5866727829
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.5595304966
y: 8.74898719788
theta: 1.56330609322
speed: 13.8767910004
id: 0
t: 72

sim.py in the sim.py statecallback function, msg is

x: 3.29138493538
y: 9.71414661407
theta: 1.53555095196
speed: 13.8226385117
id: 0
t: 73

222 self.state_dicts[msg.id][msg.t] is (3.2913849353790283, 9.714146614074707, 1.5355509519577026, 13.822638511657715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: -3.19448256493
y: -9.61983966827
theta: 4.71688127518
speed: 13.5866727829
id: 1
t: 73
xxx after update is x: -3.36455106735
y: -10.2075614929
theta: 4.87117815018
speed: 13.8180885315
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: 3.117623806
y: 7.97964477539
theta: 1.54928040504
speed: 13.9882249832
id: 0
t: 71
xxx after update is x: 3.5595304966
y: 8.74898719788
theta: 1.56330609322
speed: 13.8767910004
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.36054682732
y: -8.14856433868
theta: 4.88633155823
speed: 14.2542572021
id: 1
t: 70

sim.py in the sim.py statecallback function, msg is

x: -3.02036452293
y: -8.84735012054
theta: 4.51772546768
speed: 13.8544168472
id: 1
t: 71

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: 3.5595304966
y: 8.74898719788
theta: 1.56330609322
speed: 13.8767910004
id: 0
t: 72
xxx after update is x: 3.29138493538
y: 9.71414661407
theta: 1.53555095196
speed: 13.8226385117
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.06530618668
y: -9.23996639252
theta: 4.64409399033
speed: 13.9411754608
id: 1
t: 72

sim.py in the sim.py statecallback function, msg is

x: -3.19448256493
y: -9.61983966827
theta: 4.71688127518
speed: 13.5866727829
id: 1
t: 73

222 self.state_dicts[msg.id][msg.t] is (-3.1944825649261475, -9.619839668273926, 4.716881275177002, 13.58667278289795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: 3.29138493538
y: 9.71414661407
theta: 1.53555095196
speed: 13.8226385117
id: 0
t: 73
xxx after update is x: 3.29277873039
y: 9.95422458649
theta: 1.35822784901
speed: 13.8043375015
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: 3.29277873039
y: 9.95422458649
theta: 1.35822784901
speed: 13.8043375015
id: 0
t: 74
xxx after update is x: 3.19767475128
y: 10.6808595657
theta: 1.55071556568
speed: 13.9049825668
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.36455106735
y: -10.2075614929
theta: 4.87117815018
speed: 13.8180885315
id: 1
t: 74

sim.py in the sim.py statecallback function, msg is

x: -3.35262989998
y: -11.1164093018
theta: 4.73749256134
speed: 13.8486719131
id: 1
t: 75

222 self.state_dicts[msg.id][msg.t] is (-3.3526298999786377, -11.116409301757812, 4.737492561340332, 13.848671913146973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: 3.19767475128
y: 10.6808595657
theta: 1.55071556568
speed: 13.9049825668
id: 0
t: 75
xxx after update is x: 3.44418907166
y: 11.4083890915
theta: 1.45980107784
speed: 13.7262649536
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: 3.44418907166
y: 11.4083890915
theta: 1.45980107784
speed: 13.7262649536
id: 0
t: 76
xxx after update is x: 2.97239065xxx before update is x: -3.36455106735
y: -10.2075614929
theta: 4.87117815018
speed: 13.8180885315
id: 1
t: 74
xxx after update is x: -3.35262989998
y: -11.1164093018
theta: 4.73749256134
speed: 13.8486719131
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.29277873039
y: 9.95422458649
theta: 1.35822784901
speed: 13.8043375015
id: 0
t: 74

sim.py in the sim.py statecallback function, msg is

x: 3.19767475128
y: 10.6808595657
theta: 1.55071556568
speed: 13.9049825668
id: 0
t: 75

222 self.state_dicts[msg.id][msg.t] is (3.1976747512817383, 10.680859565734863, 1.5507155656814575, 13.904982566833496)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: -3.35262989998
y: -11.1164093018
theta: 4.73749256134
speed: 13.8486719131
id: 1
t: 75
xxx after update is x: -3.71816444397
y: -11.9469747543
theta: 4.73604154587
speed: 13.6832971573
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.71816444397
y: -11.9469747543
theta: 4.73604154587
speed: 13.6832971573
id: 1
t: 76
xxx after update is x: -2.924223423
y: -12.3862638474
theta: 4.90694713593
speed: 13.9574260712
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.44418907166
y: 11.4083890915
theta: 1.45980107784
speed: 13.7262649536
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 2.9723906517
y: 11.5067529678
theta: 1.69542586803
speed: 13.6538667679
id: 0
t: 77

222 self.state_dicts[msg.id][msg.t] is (2.972390651702881, 11.506752967834473, 1.6954258680343628, 13.6538667678833)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: -2.924223423
y: -12.3862638474
theta: 4.90694713593
speed: 13.9574260712
id: 1
t: 77
xxx after update is x: -3.44133782387
y: -12.6821575165
theta: 4.79901075363
speed: 13.7493925095
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.44133782387
y: -12.6821575165
theta: 4.79901075363
speed: 13.7493925095
id: 1
t: 78
xxx after update is x: -3.91673493385
y: -13.5975866318
theta: 4.72241640091
speed: 13.759013176
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.91673493385
y: -13.5975866318
theta: 4.72241640091
speed: 13.759013176
id: 1
t: 79
current clock is 3.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.30389761925
y: 12.2422981262
theta: 1.49015939236
speed: 13.5433254242
id: 0
t: 78

sim.py in the sim.py statecallback function, msg is

x: 17
y: 11.5067529678
theta: 1.69542586803
speed: 13.6538667679
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.9723906517
y: 11.5067529678
theta: 1.69542586803
speed: 13.6538667679
id: 0
t: 77
current clock is 3.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: 2.9723906517
y: 11.5067529678
theta: 1.69542586803
speed: 13.6538667679
id: 0
t: 77
xxx after update is x: 3.30389761925
y: 12.2422981262
theta: 1.49015939236
speed: 13.5433254242
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.71816444397
y: -11.9469747543
theta: 4.73604154587
speed: 13.6832971573
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -2.924223423
y: -12.3862638474
theta: 4.90694713593
speed: 13.9574260712
id: 1
t: 77

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.30389761925
y: 12.2422981262
theta: 1.49015939236
speed: 13.5433254242
id: 0
t: 78
xxx after update is x: 2.48001670837
y: 12.9654769897
theta: 1.55447208881
speed: 13.9477491379
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:79
sim.py in the sim.py statecallback function, msg is

x: -3.44133782387
y: -12.6821575165
theta: 4.79901075363
speed: 13.7493925095
id: 1
t: 78

sim.py in the sim.py statecallback function, msg is

x: -3.91673493385
y: -13.5975866318
theta: 4.72241640091
speed: 13.759013176
id: 1
t: 79

222 self.state_dicts[msg.id][msg.t] is (-3.9167349338531494, -13.597586631774902, 4.722416400909424, 13.759013175964355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: 2.48001670837
y: 12.9654769897
theta: 1.55447208881
speed: 13.9477491379
id: 0
t: 79
xxx after update is x: 3.54543471336
y: 14.000120163
theta: 1.64689171314
speed: 14.041885376
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: 3.54543471336
y: 14.000120163
theta: 1.64689171314
speed: 14.041885376
id: 0
t: 80
xxx after update is x: 3.04724311829
y: 14.8824234009
theta: 1.59483981133
speed: 13.8964557648
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: 3.04724311829
y: 14.8824234009
theta: 1.59483981133
speed: 13.8964557648
id: 0
t: 81
xxx after update is x: 3.52553415298
y: 15.4283905029
theta: 1.52160048485
speed: 13.9779977798
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.2227230072
y: -14.5023298264
theta: 4.71278810501
speed: 13.89747715
id: 1
t: 80

sim.py in the sim.py statecallback functio2.48001670837
y: 12.9654769897
theta: 1.55447208881
speed: 13.9477491379
id: 0
t: 79

222 self.state_dicts[msg.id][msg.t] is (2.4800167083740234, 12.965476989746094, 1.5544720888137817, 13.947749137878418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: -3.91673493385
y: -13.5975866318
theta: 4.72241640091
speed: 13.759013176
id: 1
t: 79
xxx after update is x: -3.2227230072
y: -14.5023298264
theta: 4.71278810501
speed: 13.89747715
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.2227230072
y: -14.5023298264
theta: 4.71278810501
speed: 13.89747715
id: 1
t: 80
xxx after update is x: -3.33488893509
y: -14.8874130249
theta: 4.8135061264
speed: 13.7789554596
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.54543471336
y: 14.000120163
theta: 1.64689171314
speed: 14.041885376
id: 0
t: 80

sim.py in the sim.py statecallback function, msg is

x: 3.04724311829
y: 14.8824234009
theta: 1.59483981133
speed: 13.8964557648
id: 0
t: 81

222 self.state_dicts[msg.id][msg.t] is (3.047243118286133, 14.882423400878906, 1.5948398113250732, 13.896455764770508)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: -3.33488893509
y: -14.8874130249
theta: 4.8135061264
speed: 13.7789554596
id: 1
t: 81
xxx after update is x: -3.14485931396
y: -14.3467235565
theta: 4.48113822937
speed: 13.6584177017
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: -3.14485931396
y: -14.3467235565
theta: 4.48113822937
speed: 13.6584177017
id: 1
t: 82
xxx after update is x: -3.03397583961
y: -15.7940864563
theta: 4.83734130859
speed: 13.6145887375
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.52553415298
y: 15.4283905029
theta: 1.52160048485
speed: 13.9779977798
id: 0
t: 82

sim.py in the sim.py statecallback function, msg is

x: 3.56582593918
y: 16.0193157196
theta: 1.62296748161
speed: 13.7086105347
id: 0
t: 83

222 self.state_dicts[msg.id][msg.t] is (3.565825939178467, 16.019315719604492, 1.6229674816131592, 13.708610534667969)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: -3.03397583961
y: -15.7940864563
theta: 4.83734130859
speed: 13.6145887375
id: 1
t: 83
xxx after update is x: -3.24537277222
y: -16.7259120941
theta: 4.61511850357
speed: 14.2549057007
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecaln, msg is

x: -3.33488893509
y: -14.8874130249
theta: 4.8135061264
speed: 13.7789554596
id: 1
t: 81

sim.py in the sim.py statecallback function, msg is

x: -3.14485931396
y: -14.3467235565
theta: 4.48113822937
speed: 13.6584177017
id: 1
t: 82

222 self.state_dicts[msg.id][msg.t] is (-3.1448593139648438, -14.346723556518555, 4.481138229370117, 13.658417701721191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: 3.52553415298
y: 15.4283905029
theta: 1.52160048485
speed: 13.9779977798
id: 0
t: 82
xxx after update is x: 3.56582593918
y: 16.0193157196
theta: 1.62296748161
speed: 13.7086105347
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: 3.56582593918
y: 16.0193157196
theta: 1.62296748161
speed: 13.7086105347
id: 0
t: 83
xxx after update is x: 2.84478449821
y: 16.3690414429
theta: 1.59680736065
speed: 13.8398790359
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: 2.84478449821
y: 16.3690414429
theta: 1.59680736065
speed: 13.8398790359
id: 0
t: 84
xxx after update is x: 2.88404583931
y: 16.8744087219
theta: 1.47819340229
speed: 13.9080314636
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.03397583961
y: -15.7940864563
theta: 4.83734130859
speed: 13.6145887375
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.24537277222
y: -16.7259120941
theta: 4.61511850357
speed: 14.2549057007
id: 1
t: 84

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.88404583931
y: 16.8744087219
theta: 1.47819340229
speed: 13.9080314636
id: 0
t: 85
current clock is 3.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: 2.88404583931
y: 16.8744087219
theta: 1.47819340229
speed: 13.9080314636
id: 0
t: 85
xxx after update is x: 3.57258462906
y: 17.4057636261
theta: 1.55287861824
speed: 13.7020702362
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.19214034081
y: -16.6491680145
theta: 4.59024858475
speed: 13.8713741302
id: 1
t: 85

sim.py in the sim.py statecallback function, msg is

x: -3.22699737549
y: -17.8382587433
theta: 4.79019117355
speed: 13.9672679901
id: 1
t: 86

222 self.state_dicts[msg.id][msg.t] is (-3.2269973754882812, -17.838258743286133, 4.790191173553467, 13.967267990112305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: 3.57258462906
y: 17.4057636261
theta: 1.55287861824
speed: 13.7020702362
id: 0
t: 86
xxx after update is xlback function, msg is

x: 2.84478449821
y: 16.3690414429
theta: 1.59680736065
speed: 13.8398790359
id: 0
t: 84

222 self.state_dicts[msg.id][msg.t] is (2.8447844982147217, 16.369041442871094, 1.5968073606491089, 13.839879035949707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: -3.24537277222
y: -16.7259120941
theta: 4.61511850357
speed: 14.2549057007
id: 1
t: 84
xxx after update is x: -3.19214034081
y: -16.6491680145
theta: 4.59024858475
speed: 13.8713741302
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.19214034081
y: -16.6491680145
theta: 4.59024858475
speed: 13.8713741302
id: 1
t: 85
xxx after update is x: -3.22699737549
y: -17.8382587433
theta: 4.79019117355
speed: 13.9672679901
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.88404583931
y: 16.8744087219
theta: 1.47819340229
speed: 13.9080314636
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: 3.57258462906
y: 17.4057636261
theta: 1.55287861824
speed: 13.7020702362
id: 0
t: 86

222 self.state_dicts[msg.id][msg.t] is (3.572584629058838, 17.405763626098633, 1.5528786182403564, 13.702070236206055)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.22699737549
y: -17.8382587433
theta: 4.79019117355
speed: 13.9672679901
id: 1
t: 86
current clock is 3.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -3.22699737549
y: -17.8382587433
theta: 4.79019117355
speed: 13.9672679901
id: 1
t: 86
xxx after update is x: -3.54899740219
y: -18.0606803894
theta: 4.80714178085
speed: 14.1127872467
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.54899740219
y: -18.0606803894
theta: 4.80714178085
speed: 14.1127872467
id: 1
t: 87
xxx after update is x: -3.4955842495
y: -19.5716228485
theta: 4.76192474365
speed: 13.9423904419
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.68523740768
y: 17.8854026794
theta: 1.59406125546
speed: 14.205573082
id: 0
t: 87

sim.py in the sim.py statecallback function, msg is

x: 3.10402560234
y: 19.1119689941
theta: 1.53452646732
speed: 13.9592733383
id: 0
t: 88

222 self.state_dicts[msg.id][msg.t] is (3.1040256023406982, 19.111968994140625, 1.5345264673233032, 13.959273338317871)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < s: 3.68523740768
y: 17.8854026794
theta: 1.59406125546
speed: 14.205573082
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: 3.68523740768
y: 17.8854026794
theta: 1.59406125546
speed: 14.205573082
id: 0
t: 87
xxx after update is x: 3.10402560234
y: 19.1119689941
theta: 1.53452646732
speed: 13.9592733383
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.54899740219
y: -18.0606803894
theta: 4.80714178085
speed: 14.1127872467
id: 1
t: 87

sim.py in the sim.py statecallback function, msg is

x: -3.4955842495
y: -19.5716228485
theta: 4.76192474365
speed: 13.9423904419
id: 1
t: 88

222 self.state_dicts[msg.id][msg.t] is (-3.49558424949646, -19.571622848510742, 4.761924743652344, 13.942390441894531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: 3.10402560234
y: 19.1119689941
theta: 1.53452646732
speed: 13.9592733383
id: 0
t: 88
xxx after update is x: 3.14004087448
y: 19.0868835449
theta: 1.49876713753
speed: 13.7220964432
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: 3.14004087448
y: 19.0868835449
theta: 1.49876713753
speed: 13.7220964432
id: 0
t: 89
xxx after update is x: 3.40180802345
y: 20.2379932404
theta: 1.5719575882
speed: 14.0891046524
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: 3.40180802345
y: 20.2379932404
theta: 1.5719575882
speed: 14.0891046524
id: 0
t: 90
xxx after update is x: 3.34700155258
y: 20.9383163452
theta: 1.65639913082
speed: 13.9777326584
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.55270385742
y: -19.808423996
theta: 4.73812580109
speed: 14.1717319489
id: 1
t: 89

sim.py in the sim.py statecallback function, msg is

x: -3.01899003983
y: -20.885723114
theta: 4.85835790634
speed: 13.9371061325
id: 1
t: 90

sim.py in the sim.py statecallback function, msg is

x: -3.66324329376
y: -21.1539230347
theta: 4.57048559189
speed: 13.7369337082
id: 1
t: 91

222 self.state_dicts[msg.id][msg.t] is (-3.663243293762207, -21.15392303466797, 4.570485591888428, 13.736933708190918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: 3.34700155258
y: 20.9383163452
theta: 1.65639913082
speed: 13.9777326584
id: 0
t: 91
xxx after update is x: 3.26184558868
y: 21.1947231293
theta: 1.67495214939
speed: 13.7886333466
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.26184558868
y: 21.1947231293
theta: 1.67495214939
speed: 13.7886333466
id: 0
t: 92
xxx after update is x: 3.27474761009
y: 21.9196376801
elf.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: -3.4955842495
y: -19.5716228485
theta: 4.76192474365
speed: 13.9423904419
id: 1
t: 88
xxx after update is x: -3.55270385742
y: -19.808423996
theta: 4.73812580109
speed: 14.1717319489
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.55270385742
y: -19.808423996
theta: 4.73812580109
speed: 14.1717319489
id: 1
t: 89
xxx after update is x: -3.01899003983
y: -20.885723114
theta: 4.85835790634
speed: 13.9371061325
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.01899003983
y: -20.885723114
theta: 4.85835790634
speed: 13.9371061325
id: 1
t: 90
xxx after update is x: -3.66324329376
y: -21.1539230347
theta: 4.57048559189
speed: 13.7369337082
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.14004087448
y: 19.0868835449
theta: 1.49876713753
speed: 13.7220964432
id: 0
t: 89

sim.py in the sim.py statecallback function, msg is

x: 3.40180802345
y: 20.2379932404
theta: 1.5719575882
speed: 14.0891046524
id: 0
t: 90

sim.py in the sim.py statecallback function, msg is

x: 3.34700155258
y: 20.9383163452
theta: 1.65639913082
speed: 13.9777326584
id: 0
t: 91

222 self.state_dicts[msg.id][msg.t] is (3.347001552581787, 20.938316345214844, 1.656399130821228, 13.97773265838623)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: -3.66324329376
y: -21.1539230347
theta: 4.57048559189
speed: 13.7369337082
id: 1
t: 91
xxx after update is x: -3.36746478081
y: -21.2550010681
theta: 4.6707868576
speed: 14.3706207275
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.36746478081
y: -21.2550010681
theta: 4.6707868576
speed: 14.3706207275
id: 1
t: 92
xxx after update is x: -3.6366341114
y: -21.8494663239
theta: 4.72052907944
speed: 14.0760726929
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.6366341114
y: -21.8494663239
theta: 4.72052907944
speed: 14.0760726929
id: 1
t: 93
xxx after update is x: -3.40729427338
y: -22.1382713318
theta: 4.71435403824
speed: 13.594127655
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.26184558868
y: 21.1947231293
theta: 1.67495214939
speed: 13.7886333466
id: 0
t: 92

sim.py in the sim.py statecallback function, msg is

x: 3.27474761009
y: 21.9196376801
theta: 1.43923580647
speed: 13.9153900146
id: 0
t: 93

sim.py in the sim.py statecallback function, msg is

x: 3.29076933861
y: 21.9122180939
theta: 1.7062857151
speed: 14.0048027039
id: 0
t: 94

222 self.state_dicts[msg.id][msgtheta: 1.43923580647
speed: 13.9153900146
id: 0
t: 93maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.27474761009
y: 21.9196376801
theta: 1.43923580647
speed: 13.9153900146
id: 0
t: 93
current clock is 4.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: 3.27474761009
y: 21.9196376801
theta: 1.43923580647
speed: 13.9153900146
id: 0
t: 93
xxx after update is x: 3.29076933861
y: 21.9122180939
theta: 1.7062857151
speed: 14.0048027039
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: 3.29076933861
y: 21.9122180939
theta: 1.7062857151
speed: 14.0048027039
id: 0
t: 94
xxx after update is x: 2.92951321602
y: 23.5744743347
theta: 1.4591370821
speed: 14.1643886566
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.36746478081
y: -21.2550010681
theta: 4.6707868576
speed: 14.3706207275
id: 1
t: 92

sim.py in the sim.py statecallback function, msg is

x: -3.6366341114
y: -21.8494663239
theta: 4.72052907944
speed: 14.0760726929
id: 1
t: 93

sim.py in the sim.py statecallback function, msg is

x: -3.40729427338
y: -22.1382713318
theta: 4.71435403824
speed: 13.594127655
id: 1
t: 94

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.92951321602
y: 23.5744743347
theta: 1.4591370821
speed: 14.1643886566
id: 0
t: 95
xxx after update is x: 3.34281754494
y: 23.6856498718
theta: 1.53599762917
speed: 13.8119468689
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:96
sim.py in the sim.py statecallback function, msg is

x: -3.66572070122
y: -23.6828174591
theta: 4.56739759445
speed: 13.9035615921
id: 1
t: 95

sim.py in the sim.py statecallback function, msg is

x: -3.6563873291
y: -24.1380329132
theta: 4.8004655838
speed: 13.7984790802
id: 1
t: 96

222 self.state_dicts[msg.id][msg.t] is (-3.6563873291015625, -24.138032913208008, 4.8004655838012695, 13.798479080200195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: 3.34281754494
y: 23.6856498718
theta: 1.53599762917
speed: 13.8119468689
id: 0
t: 96
xxx after update is x: 2.95280194283
y: 25.0676174164
theta: 1.72803640366
speed: 13.7027044296
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: 2.95280194283
y: 25.0676174164
theta: 1.72803640366
speed: 13.7027044296
id: 0
t: 97
xxx after update is x: 3.25765109062
y: 24.7625637054
theta: 1.59811842442
speed: 13.959312439
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the .t] is (3.290769338607788, 21.91221809387207, 1.7062857151031494, 14.004802703857422)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.40729427338
y: -22.1382713318
theta: 4.71435403824
speed: 13.594127655
id: 1
t: 94
current clock is 4.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95
going to the update function
sim.py in the sim.py update function 
xxx before update is x: -3.40729427338
y: -22.1382713318
theta: 4.71435403824
speed: 13.594127655
id: 1
t: 94
xxx after update is x: -3.66572070122
y: -23.6828174591
theta: 4.56739759445
speed: 13.9035615921
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.66572070122
y: -23.6828174591
theta: 4.56739759445
speed: 13.9035615921
id: 1
t: 95
xxx after update is x: -3.6563873291
y: -24.1380329132
theta: 4.8004655838
speed: 13.7984790802
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:96
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.92951321602
y: 23.5744743347
theta: 1.4591370821
speed: 14.1643886566
id: 0
t: 95

sim.py in the sim.py statecallback function, msg is

x: 3.34281754494
y: 23.6856498718
theta: 1.53599762917
speed: 13.8119468689
id: 0
t: 96

222 self.state_dicts[msg.id][msg.t] is (3.342817544937134, 23.685649871826172, 1.5359976291656494, 13.811946868896484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: -3.6563873291
y: -24.1380329132
theta: 4.8004655838
speed: 13.7984790802
id: 1
t: 96
xxx after update is x: -2.93927812576
y: -24.9413471222
theta: 4.72518873215
speed: 13.8512563705
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.93927812576
y: -24.9413471222
theta: 4.72518873215
speed: 13.8512563705
id: 1
t: 97
xxx after update is x: -2.69035768509
y: -25.6419429779
theta: 4.81176185608
speed: 13.9030666351
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.95280194283
y: 25.0676174164
theta: 1.72803640366
speed: 13.7027044296
id: 0
t: 97

sim.py in the sim.py statecallback function, msg is

x: 3.25765109062
y: 24.7625637054
theta: 1.59811842442
speed: 13.959312439
id: 0
t: 98

222 self.state_dicts[msg.id][msg.t] is (3.2576510906219482, 24.762563705444336, 1.5981184244155884, 13.959312438964844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
removed car with id 1 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
!!!update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: 3.25765109062
y: 24.7625637054
theta: 1.59811842442
speed: 13.959312439
id: 0
t: 98
xxx after update is x: 2.9462018013
y: 25.121881485
theta: 1.45172119141
speed: 13.8199529648
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.93927812576
y: -24.9413471222
theta: 4.72518873215
speed: 13.8512563705
id: 1
t: 97

sim.py in the sim.py statecallback function, msg is

x: -2.69035768509
y: -25.6419429779
theta: 4.81176185608
speed: 13.9030666351
id: 1
t: 98

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: 2.9462018013
y: 25.121881485
theta: 1.45172119141
speed: 13.8199529648
id: 0
t: 99
xxx after update is x: 3.0603954792
y: 26.0599193573
theta: 1.57057487965
speed: 13.7977323532
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
!!!!finish and change statu to normal
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.0603954792
y: 26.0599193573
theta: 1.57057487965
speed: 13.7977323532
id: 0
t: 100
current clock is 4.44444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: 3.0603954792
y: 26.0599193573
theta: 1.57057487965
speed: 13.7977323532
id: 0
t: 100
xxx after update is x: 3.40257072449
y: 27.1519241333
theta: 1.48261427879
speed: 13.840590477
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.11486577988
y: -25.6521053314
theta: 4.63062143326
speed: 13.7658462524
id: 1
t: 99

sim.py in the sim.py statecallback function, msg is

x: -3.65959906578
y: -26.9537830353
theta: 4.55110692978
speed: 13.8035373688
id: 1
t: 100

sim.py in the sim.py statecallback function, msg is

x: -3.17281150818
y: -27.0779876709
theta: 4.7878742218
speed: 14.2154588699
id: 1
t: 101

222 self.state_dicts[msg.id][msg.t] is (-3.172811508178711, -27.077987670898438, 4.787874221801758, 14.215458869934082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: 3.40257072449
y: 27.1519241333
theta: 1.48261427879
speed: 13.840590477
id: 0
t: 101
xxx after update is x: 2.54272484779
y: 27.4731788635
theta: 1.50411832333
speed: 13.7147550583
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: 2.54272484779
y: 27.4731788635
theta: 1.50411832333
speed: 13.7147550583
id: 0
t: 102
xxx after update is x: 3.30011963844
y: 27.8659076691
theta: 1.47497069836
speed: 14.1382741928
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in !finish and change statu to normal
finish try maneuver
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: -2.69035768509
y: -25.6419429779
theta: 4.81176185608
speed: 13.9030666351
id: 1
t: 98
xxx after update is x: -3.11486577988
y: -25.6521053314
theta: 4.63062143326
speed: 13.7658462524
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.11486577988
y: -25.6521053314
theta: 4.63062143326
speed: 13.7658462524
id: 1
t: 99
xxx after update is x: -3.65959906578
y: -26.9537830353
theta: 4.55110692978
speed: 13.8035373688
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.65959906578
y: -26.9537830353
theta: 4.55110692978
speed: 13.8035373688
id: 1
t: 100
xxx after update is x: -3.17281150818
y: -27.0779876709
theta: 4.7878742218
speed: 14.2154588699
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.9462018013
y: 25.121881485
theta: 1.45172119141
speed: 13.8199529648
id: 0
t: 99

sim.py in the sim.py statecallback function, msg is

x: 3.0603954792
y: 26.0599193573
theta: 1.57057487965
speed: 13.7977323532
id: 0
t: 100

sim.py in the sim.py statecallback function, msg is

x: 3.40257072449
y: 27.1519241333
theta: 1.48261427879
speed: 13.840590477
id: 0
t: 101

222 self.state_dicts[msg.id][msg.t] is (3.4025707244873047, 27.15192413330078, 1.482614278793335, 13.840590476989746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.17281150818
y: -27.0779876709
theta: 4.7878742218
speed: 14.2154588699
id: 1
t: 101
current clock is 4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
xxx before update is x: -3.17281150818
y: -27.0779876709
theta: 4.7878742218
speed: 14.2154588699
id: 1
t: 101
xxx after update is x: -3.25185322762
y: -27.8309936523
theta: 4.51339960098
speed: 13.7468442917
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:102
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.25185322762
y: -27.8309936523
theta: 4.51339960098
speed: 13.7468442917
id: 1
t: 102
xxx after update is x: -3.02483415604
y: -28.960319519
theta: 4.70818567276
speed: 13.7886638641
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:103
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.02483415604
y: -28.960319519
theta: 4.70818567276
speed: 13.7886638641
id: 1
t: 103
xxx after update is x: -2.76304984093
y: -28.9190101624
theta: 4.74836015701
speed: 13.7472267151
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the updatethe sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: 3.30011963844
y: 27.8659076691
theta: 1.47497069836
speed: 14.1382741928
id: 0
t: 103
xxx after update is x: 3.31862044334
y: 28.042427063
theta: 1.67194998264
speed: 14.1454896927
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.25185322762
y: -27.8309936523
theta: 4.51339960098
speed: 13.7468442917
id: 1
t: 102

sim.py in the sim.py statecallback function, msg is

x: -3.02483415604
y: -28.960319519
theta: 4.70818567276
speed: 13.7886638641
id: 1
t: 103

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105
xxx before update is x: 3.31862044334
y: 28.042427063
theta: 1.67194998264
speed: 14.1454896927
id: 0
t: 104
xxx after update is x: 2.99519705772
y: 29.1968593597
theta: 1.49053657055
speed: 13.8864898682
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -2.76304984093
y: -28.9190101624
theta: 4.74836015701
speed: 13.7472267151
id: 1
t: 104

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.99519705772
y: 29.1968593597
theta: 1.49053657055
speed: 13.8864898682
id: 0
t: 105
xxx after update is x: 2.73731088638
y: 29.1662654877
theta: 1.5028822422
speed: 13.6374902725
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106
sim.py in the sim.py statecallback function, msg is

x: -3.47186112404
y: -29.1476192474
theta: 4.53990697861
speed: 13.9377975464
id: 1
t: 105

sim.py in the sim.py statecallback function, msg is

x: -3.40632772446
y: -29.7111873627
theta: 4.71980047226
speed: 13.6440343857
id: 1
t: 106

222 self.state_dicts[msg.id][msg.t] is (-3.406327724456787, -29.7111873626709, 4.7198004722595215, 13.644034385681152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107
xxx before update is x: 2.73731088638
y: 29.1662654877
theta: 1.5028822422
speed: 13.6374902725
id: 0
t: 106
xxx after update is x: 3.4225590229
y: 30.3530807495
theta: 1.62149131298
speed: 13.9553852081
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108
xxx before update is x: 3.4225590229
y: 30.3530807495
theta: 1.62149131298
speed: 13.9553852081
id: 0
t: 107
xxx after update is x: 3.10823869705
y: 30.7848300934
theta: 1.59134292603
speed: 13.896727562
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.10823869705
y: 30.7848300934
theta: 1.59134292603
speed: 13.896727562
id: 0
t: 108
current clock is 4.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109
xxx before update is x: 3.10823869705
y: 30.7848 function 
in spin function, finish the n times spin:104
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.54272484779
y: 27.4731788635
theta: 1.50411832333
speed: 13.7147550583
id: 0
t: 102

sim.py in the sim.py statecallback function, msg is

x: 3.30011963844
y: 27.8659076691
theta: 1.47497069836
speed: 14.1382741928
id: 0
t: 103

sim.py in the sim.py statecallback function, msg is

x: 3.31862044334
y: 28.042427063
theta: 1.67194998264
speed: 14.1454896927
id: 0
t: 104

222 self.state_dicts[msg.id][msg.t] is (3.318620443344116, 28.04242706298828, 1.6719499826431274, 14.145489692687988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106
xxx before update is x: -2.76304984093
y: -28.9190101624
theta: 4.74836015701
speed: 13.7472267151
id: 1
t: 104
xxx after update is x: -3.47186112404
y: -29.1476192474
theta: 4.53990697861
speed: 13.9377975464
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.47186112404
y: -29.1476192474
theta: 4.53990697861
speed: 13.9377975464
id: 1
t: 105
xxx after update is x: -3.40632772446
y: -29.7111873627
theta: 4.71980047226
speed: 13.6440343857
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.99519705772
y: 29.1968593597
theta: 1.49053657055
speed: 13.8864898682
id: 0
t: 105

sim.py in the sim.py statecallback function, msg is

x: 2.73731088638
y: 29.1662654877
theta: 1.5028822422
speed: 13.6374902725
id: 0
t: 106

222 self.state_dicts[msg.id][msg.t] is (2.7373108863830566, 29.1662654876709, 1.5028822422027588, 13.637490272521973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108
xxx before update is x: -3.40632772446
y: -29.7111873627
theta: 4.71980047226
speed: 13.6440343857
id: 1
t: 106
xxx after update is x: -3.2768740654
y: -30.8007087708
theta: 4.79714441299
speed: 13.7864408493
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.2768740654
y: -30.8007087708
theta: 4.79714441299
speed: 13.7864408493
id: 1
t: 107
xxx after update is x: -4.29966163635
y: -31.151348114
theta: 4.78565454483
speed: 13.6537494659
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.4225590229
y: 30.3530807495
theta: 1.62149131298
speed: 13.9553852081
id: 0
t: 107

sim.py in the sim.py statecallback function, msg is

x: 3.10823869705
y: 30.7848300934
theta: 1.59134292603
speed: 13.896727562
id: 0
t: 108

222 self.state_dicts[msg.id][msg.t] is (3.108238697052002, 30.78483009338379, 1.5913429260253906, 13.896727561950684)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -300934
theta: 1.59134292603
speed: 13.896727562
id: 0
t: 108
xxx after update is x: 3.52770519257
y: 32.056930542
theta: 1.56368136406
speed: 13.7296209335
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.2768740654
y: -30.8007087708
theta: 4.79714441299
speed: 13.7864408493
id: 1
t: 107

sim.py in the sim.py statecallback function, msg is

x: -4.29966163635
y: -31.151348114
theta: 4.78565454483
speed: 13.6537494659
id: 1
t: 108

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: 3.52770519257
y: 32.056930542
theta: 1.56368136406
speed: 13.7296209335
id: 0
t: 109
xxx after update is x: 3.34994649887
y: 32.5142288208
theta: 1.58442699909
speed: 13.7917613983
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.50547003746
y: -32.1092376709
theta: 4.62415122986
speed: 14.0118656158
id: 1
t: 109

sim.py in the sim.py statecallback function, msg is

x: -2.91558265686
y: -32.4804000854
theta: 4.78094768524
speed: 13.9321537018
id: 1
t: 110

222 self.state_dicts[msg.id][msg.t] is (-2.9155826568603516, -32.48040008544922, 4.780947685241699, 13.932153701782227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111
xxx before update is x: 3.34994649887
y: 32.5142288208
theta: 1.58442699909
speed: 13.7917613983
id: 0
t: 110
xxx after update is x: 3.21705293655
y: 32.8574523926
theta: 1.60644876957
speed: 13.5878458023
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: 3.21705293655
y: 32.8574523926
theta: 1.60644876957
speed: 13.5878458023
id: 0
t: 111
xxx after update is x: 3.00807261467
y: 32.815864563
theta: 1.66201305389
speed: 13.6413669586
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.80039715767
y: -33.5550613403
theta: 4.68139839172
speed: 14.1831960678
id: 1
t: 111

sim.py in the sim.py statecallback function, msg is

x: -3.16268229485
y: -33.648399353
theta: 4.62492609024
speed: 13.7903785706
id: 1
t: 112

222 self.state_dicts[msg.id][msg.t] is (-3.162682294845581, -33.648399353027344, 4.6249260902404785, 13.79037857055664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: 3.00807261467
y: 32.815864563
theta: 1.66201305389
speed: 13.6413669586
id: 0
t: 112
xxx after update is x: 3.51545929909
y: 34.2036056519
theta: 1.64063894749
speed: 13.433889389
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: 3.51545929909
y: 34.2036056519
theta: 1.64063894749
speed: 13.433889389
id: 0
t: 113
xxx after update is x: 3.34736275673
y: 35.3342094421
theta: 1.51283490658
speed: 13.9266357422
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -4.29966163635
y: -31.151348114
theta: 4.78565454483
speed: 13.6537494659
id: 1
t: 108
current clock is 4.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: -4.29966163635
y: -31.151348114
theta: 4.78565454483
speed: 13.6537494659
id: 1
t: 108
xxx after update is x: -3.50547003746
y: -32.1092376709
theta: 4.62415122986
speed: 14.0118656158
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.50547003746
y: -32.1092376709
theta: 4.62415122986
speed: 14.0118656158
id: 1
t: 109
xxx after update is x: -2.91558265686
y: -32.4804000854
theta: 4.78094768524
speed: 13.9321537018
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.52770519257
y: 32.056930542
theta: 1.56368136406
speed: 13.7296209335
id: 0
t: 109

sim.py in the sim.py statecallback function, msg is

x: 3.34994649887
y: 32.5142288208
theta: 1.58442699909
speed: 13.7917613983
id: 0
t: 110

222 self.state_dicts[msg.id][msg.t] is (3.3499464988708496, 32.51422882080078, 1.584426999092102, 13.79176139831543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: -2.91558265686
y: -32.4804000854
theta: 4.78094768524
speed: 13.9321537018
id: 1
t: 110
xxx after update is x: -3.80039715767
y: -33.5550613403
theta: 4.68139839172
speed: 14.1831960678
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.80039715767
y: -33.5550613403
theta: 4.68139839172
speed: 14.1831960678
id: 1
t: 111
xxx after update is x: -3.16268229485
y: -33.648399353
theta: 4.62492609024
speed: 13.7903785706
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.21705293655
y: 32.8574523926
theta: 1.60644876957
speed: 13.5878458023
id: 0
t: 111

sim.py in the sim.py statecallback function, msg is

x: 3.00807261467
y: 32.815864563
theta: 1.66201305389
speed: 13.6413669586
id: 0
t: 112

222 self.state_dicts[msg.id][msg.t] is (3.0080726146698, 32.81586456298828, 1.662013053894043, 13.641366958618164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: -3.16268229485
y: -33.648399353
theta: 4.62492609024
speed: 13.7903785706
id: 1
t: 112
xxx after update is x: -3.20394062996
y: -34.0324325562
theta: 4.58831310272
speed: 14.0280628204
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.20394062996
y: -34.0324325562
theta: 4.58831310272
speed: 14.0280628204
id: 1
t: 113
xxx after update is x: -3.27715921402
y: -35.5472640991
theta: 4.86423969269
speed: 13.7799797058
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.27715921402
y: -35.5472640991
theta: 4.86423969269
speed: 13.7799797058
id: 1
t: 114
xxx after update is x: -2.70317077637
y: -35.6118164062
theta: 4.65286493301
speed: 13.9175786972
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.51545929909
y: 34.2036056519
theta: 1.64063894749
speed: 13.433889389
id: 0
t: 113

sim.py in the sim.py statecallback function, msg is

x: 3.34736275673
y: 35.3342094421
theta: 1.51283490658
speed: 13.9266357422
id: 0
t: 114

sim.py in the sim.py statecallback function, msg is

x: 3.44453573227
y: 35.3258590698
theta: 1.48985278606
speed: 14.0439634323
id: 0
t: 115

222 self.state_dicts[msg.id][msg.t] is (3.444535732269287, 35.32585906982422, 1.489852786064148, 14.043963432312012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117
xxx before update is x: -2.70317077637
y: -35.6118164062
theta: 4.65286493301
speed: 13.9175786972
id: 1
t: 115
xxx after update is x: -3.19990181923
y: -35.7216796875
theta: 4.85020446777
speed: 14.120595932
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.19990181923
y: -35.7216796875
theta: 4.85020446777
speed: 14.120595932
id: 1
t: 116
xxx after update is x: -3.46755933762
y: -37.1321372986
theta: 4.62810516357
speed: 13.8965520859
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.45508551598
y: 36.1728210449
theta: 1.68937671185
speed: 13.6828775406
id: 0
t: 116

sim.py in the sim.py statecallback function, msg is

x: 3.4614367485
y: 36.1399307251
theta: 1.46671414375
speed: 13.7786569595
id: 0
t: 117

222 self.state_dicts[msg.id][msg.t] is (3.4614367485046387, 36.139930725097656, 1.4667141437530518, 13.778656959533691)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.46755933762
y: -37.1321372986
theta: 4.62810516357
speed: 13.8965520859
id: 1
t: 117
current clock is 5.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:118
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119
xxx before update is xpy in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: 3.34736275673
y: 35.3342094421
theta: 1.51283490658
speed: 13.9266357422
id: 0
t: 114
xxx after update is x: 3.44453573227
y: 35.3258590698
theta: 1.48985278606
speed: 14.0439634323
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116
xxx before update is x: 3.44453573227
y: 35.3258590698
theta: 1.48985278606
speed: 14.0439634323
id: 0
t: 115
xxx after update is x: 3.45508551598
y: 36.1728210449
theta: 1.68937671185
speed: 13.6828775406
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.45508551598
y: 36.1728210449
theta: 1.68937671185
speed: 13.6828775406
id: 0
t: 116
current clock is 5.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117
xxx before update is x: 3.45508551598
y: 36.1728210449
theta: 1.68937671185
speed: 13.6828775406
id: 0
t: 116
xxx after update is x: 3.4614367485
y: 36.1399307251
theta: 1.46671414375
speed: 13.7786569595
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.20394062996
y: -34.0324325562
theta: 4.58831310272
speed: 14.0280628204
id: 1
t: 113

sim.py in the sim.py statecallback function, msg is

x: -3.27715921402
y: -35.5472640991
theta: 4.86423969269
speed: 13.7799797058
id: 1
t: 114

sim.py in the sim.py statecallback function, msg is

x: -2.70317077637
y: -35.6118164062
theta: 4.65286493301
speed: 13.9175786972
id: 1
t: 115

sim.py in the sim.py statecallback function, msg is

x: -3.19990181923
y: -35.7216796875
theta: 4.85020446777
speed: 14.120595932
id: 1
t: 116

sim.py in the sim.py statecallback function, msg is

x: -3.46755933762
y: -37.1321372986
theta: 4.62810516357
speed: 13.8965520859
id: 1
t: 117

222 self.state_dicts[msg.id][msg.t] is (-3.467559337615967, -37.132137298583984, 4.628105163574219, 13.896552085876465)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118
xxx before update is x: 3.4614367485
y: 36.1399307251
theta: 1.46671414375
speed: 13.7786569595
id: 0
t: 117
xxx after update is x: 3.28517270088
y: 37.4284286499
theta: 1.64712429047
speed: 13.8844738007
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119
xxx before update is x: 3.28517270088
y: 37.4284286499
theta: 1.64712429047
speed: 13.8844738007
id: 0
t: 118
xxx after update is x: 3.97062253952
y: 37.8806762695
theta: 1.6644961834
speed: 13.837387085
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120
xxx before update is x: 3.97062253952
y: 37.8806762695
theta: 1.6644961834
speed: 13.837387085
id: 0
t: 119
xxx after update is x: 3.4929227829
y: 39.0085678101
theta: 1.59563457966
speed: 13.8306436539
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.4929227829
y: 39.0085678101
theta: 1.59563457966
speed: 13.8306436539
id: 0
t: 120
current clock is 5.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
: -3.46755933762
y: -37.1321372986
theta: 4.62810516357
speed: 13.8965520859
id: 1
t: 117
xxx after update is x: -3.5795776844
y: -37.2935523987
theta: 4.65215158463
speed: 13.6656398773
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.5795776844
y: -37.2935523987
theta: 4.65215158463
speed: 13.6656398773
id: 1
t: 118
xxx after update is x: -2.95928406715
y: -38.2433204651
theta: 4.87893104553
speed: 14.0522480011
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.28517270088
y: 37.4284286499
theta: 1.64712429047
speed: 13.8844738007
id: 0
t: 118

sim.py in the sim.py statecallback function, msg is

x: 3.97062253952
y: 37.8806762695
theta: 1.6644961834
speed: 13.837387085
id: 0
t: 119

222 self.state_dicts[msg.id][msg.t] is (3.9706225395202637, 37.88067626953125, 1.6644961833953857, 13.837387084960938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.95928406715
y: -38.2433204651
theta: 4.87893104553
speed: 14.0522480011
id: 1
t: 119
current clock is 5.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
... logging to /home/lu/.ros/log/2b778e28-fc5b-11e8-a4c6-000c291801fc/roslaunch-ubuntu-3837.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:36437/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [3847][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 2b778e28-fc5b-11e8-a4c6-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [3860][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [3872][0m
[1mprocess[rviz-3]: started with pid [3879][0m
[1mprocess[car0-4]: started with pid [3880][0m
[1mprocess[car1-5]: started with pid [3882][0m
[1mprocess[cloud-6]: started with pid [3884][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
