sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.5099709034
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: 2.69730639458
y: -34.3788909912
theta: 1.62897562981
speed: 13.8935050964
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (2.6973063945770264, -34.37889099121094, 1.6289756298065186, 13.893505096435547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f122b9c9e18>
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f122b9ea248>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
sim.py in the sim.py statecallback function, msg is

x: 3.51100087166
y: -33.8156356812
theta: 1.45252883434
speed: 14.1613578796
id: 0
t: 2

sim.py in the sim.py statecallback function, msg is

x: 3.27816510201
y: -33.0363540649
theta: 1.47865068913
speed: 13.7244052887
id: 0
t: 3

222 self.state_dicts[msg.id][msg.t] is (3.278165102005005, -33.036354064941406, 1.478650689125061, 13.724405288696289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin functionsim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.84923791885
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
sim.py in the sim.py statecallback function, msg is

x: -3.66125273705
y: 34.5386123657
theta: 4.57154989243
speed: 14.006603241
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-3.661252737045288, 34.538612365722656, 4.571549892425537, 14.006603240966797)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f76c40df9e0>
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f76c40fc8c0>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
sim.py in the sim.py statecallback function, msg is

x: -2.95464229584
y: 33.6052932739
theta: 4.5386800766
speed: 13.8619232178
id: 1
t: 2

sim.py in the sim.py statecallback function, msg is

x: -3.49488377571
y: 33.0289764404
theta: 4.77325725555
speed: 14.1225366592
id: 1
t: 3

222 self.state_dicts[msg.id][msg.t] is (-3.4948837757110596, 33.02897644042969, 4.773257255554199, 14.122536659240723)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
tar, finish the n times spin:6
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3999798811100027, 0.3004865143002791]
sim.py in the sim.py statecallback function, msg is

x: 3.57398557663
y: -32.8713645935
theta: 1.6947722435
speed: 14.0255079269
id: 0
t: 4

sim.py in the sim.py statecallback function, msg is

x: 3.52754616737
y: -31.9334564209
theta: 1.62089693546
speed: 13.870513916
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 3.50371980667
y: -31.9094371796
theta: 1.5252777338
speed: 13.7814769745
id: 0
t: 6

sim.py in the sim.py statecallback function, msg is

x: 3.05681085587
y: -30.1934490204
theta: 1.72401428223
speed: 13.8598432541
id: 0
t: 7

sim.py in the sim.py statecallback function, msg is

x: 3.59064054489
y: -30.3076076508
theta: 1.43073821068
speed: 14.1990966797
id: 0
t: 8

222 self.state_dicts[msg.id][msg.t] is (3.5906405448913574, -30.307607650756836, 1.4307382106781006, 14.1990966796875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.37331843376
y: 28.5575084686
theta: 4.63596725464
speed: 13.8361530304
id: 1
t: 10
current clock is .t / rate/slowdown
0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3761757849321995, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.50771141052
y: -29.3548278809
theta: 1.66817641258
speed: 14.0008573532
id: 0
t: 9

sim.py in the sim.py statecallback function, msg is

x: 2.92014741898
y: -28.7910404205
theta: 1.47960674763
speed: 13.7566337585
id: 0
t: 10

sim.py in the sim.py statecallback function, msg is

x: 3.06053256989
y: -27.7066287994
theta: 1.61099052429
speed: 13.6728086472
id: 0
t: 11getspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4044492883659933, 0.2557082606622397]
sim.py in the sim.py statecallback function, msg is

x: -3.57496094704
y: 32.5051460266
theta: 4.59082889557
speed: 13.993188858
id: 1
t: 4

sim.py in the sim.py statecallback function, msg is

x: -3.00931668282
y: 31.5997524261
theta: 4.62944984436
speed: 13.9980049133
id: 1
t: 5

sim.py in the sim.py statecallback function, msg is

x: -3.14611744881
y: 31.0301017761
theta: 4.92724752426
speed: 13.7489404678
id: 1
t: 6

sim.py in the sim.py statecallback function, msg is

x: -3.03171753883
y: 31.0630435944
theta: 4.65763139725
speed: 14.2252483368
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.38847875595
y: 29.8576507568
theta: 4.78168535233
speed: 13.8894786835
id: 1
t: 8

sim.py in the sim.py statecallback function, msg is

x: -3.2718129158
y: 29.7359542847
theta: 4.69189739227
speed: 14.2335062027
id: 1
t: 9

222 self.state_dicts[msg.id][msg.t] is (-3.271812915802002, 29.73595428466797, 4.691897392272949, 14.233506202697754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.92014741898
y: -28.7910404205
theta: 1.47960674763
speed: 13.7566337585
id: 0
t: 10
current clock is .t / rate/slowdown
0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:14
maneuver_negotiatir.py start the update agent state

sim.py in the sim.py statecallback function, msg is

x: 3.37924838066
y: -27.7863559723
theta: 1.71984267235
speed: 13.7100067139
id: 0
t: 12

222 self.state_dicts[msg.id][msg.t] is (3.3792483806610107, -27.78635597229004, 1.7198426723480225, 13.710006713867188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.36881923676
y: 24.1876029968
theta: 4.55854034424
speed: 13.9269037247
id: 1
t: 17
current clock is .t / rate/slowdown
0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.3857575697935599, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.81921291351
y: -27.1284713745
theta: 1.65823757648
speed: 13.5256175995
id: 0
t: 13

sim.py in the sim.py statecallback function, msg is

x: 3.09937238693
y: -26.6059474945
theta: 1.60253167152
speed: 13.584651947
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 3.17722463608
y: -25.674161911
theta: 1.63559305668
speed: 13.7809114456
id: 0
t: 15

sim.py in the sim.py statecallback function, msg is

x: 3.78556013107
y: -25.0752792358
theta: 1.60436069965
speed: 12.9926719666
id: 0
t: 16

sim.py in the sim.py statecallback function, msg is

x: 3.40618753433
y: -24.7499980927
theta: 1.62901711464
speed: 13.4164934158
id: 0
t: 17

sim.py in the sim.py statecallback function, msg is

x: 3.48812890053
y: -24.2092151642
theta: 1.5674790144
speed: 12.8538923264
id: 0
t: 18

222 self.state_dicts[msg.id][msg.t] is (3.488128900527954, -24.20921516418457, 1.5674790143966675, 12.85389232635498)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:Fal from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:15
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.33412273538865167, 0.33424435387836937]
sim.py in the sim.py statecallback function, msg is

x: -3.37331843376
y: 28.5575084686
theta: 4.63596725464
speed: 13.8361530304
id: 1
t: 10

sim.py in the sim.py statecallback function, msg is

x: -3.11194396019
y: 28.2730350494
theta: 4.54171609879
speed: 13.8282842636
id: 1
t: 11

sim.py in the sim.py statecallback function, msg is

x: -2.63828611374
y: 27.7116394043
theta: 4.71414470673
speed: 13.9375867844
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -3.67538189888
y: 26.3523426056
theta: 4.79369735718
speed: 13.617937088
id: 1
t: 13

sim.py in the sim.py statecallback function, msg is

x: -3.33159852028
y: 26.2437801361
theta: 4.66453075409
speed: 13.6748352051
id: 1
t: 14

sim.py in the sim.py statecallback function, msg is

x: -3.33361244202
y: 25.7810993195
theta: 4.71636724472
speed: 13.8384428024
id: 1
t: 15

222 self.state_dicts[msg.id][msg.t] is (-3.3336124420166016, 25.781099319458008, 4.716367244720459, 13.8384428024292)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:16
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:17
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.40618753433
y: -24.7499980927
theta: 1.62901711464
speed: 13.4164934158
id: 0
t: 17
current clock is .t / rate/slowdown
0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:18
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:22
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:24
aaaaaa
risk is [0.3035747879948907, 0.3458295317565346]
sim.py in the sim.py statecallback function, msg is

x: -3.63293647766
y: 24.4751224518
theta: 4.77742433548
speed: 14.1026535034
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.36881923676
y: 24.1876029968
theta: 4.55854034424
speed: 13.9269037247
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -4.03436660767
y: 24.0103759766
theta: 4.7739033699
speed: 13.6429109573
id: 1
t: 18

sim.py in the sim.py statecallback function, msg is

x: -3.52510881424
y: 22.7424259186
theta: 4.83908462524
speed: 14.2039728165
id: 1
t: 19

sim.py in the sim.py statecallback function, msg is

x: -2.96437191963
y: 22.4544773102
theta: 4.74922657013
speed: 13.6153507233
id: 1
t: 20

sim.py in the sim.py statecallback function, msg is

x: -3.23460149765
y: 21.8030548096
theta: 4.70020294189
speed: 13.8823709488
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.15913677216
y: 21.0879058838
theta: 4.63509273529
speed: 13.7178325653
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -3.3662071228
y: 20.5952529907
theta: 4.89704370499
speed: 14.0160293579
id: 1
t: 23

sim.py in the sim.py statecallback function, msg is

x: -3.18653416634
y: 19.8977050781
theta: 4.73472070694
speed: 13.879570961
id: 1
t: 24

222 self.state_dicts[msg.id][msg.t] is (-3.1865341663360596, 19.897705078125, 4.734720706939697, 13.879570960998535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:25
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:

---------------------------------------------------------------------------------------------------------------------
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 1
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.97515130043
y: -19.736661911
theta: 1.645591259
speed: 11.2760944366
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
!!!!after check statue the self.tag is [1.1555555555555554, 0]
2.self.status is 1


change normal to tryget(for the case tryget, it doesn't need to chcnge)


maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.97515130043
y: -19.736661911
theta: 1.645591259
speed: 11.2760944366
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556


maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's locatise
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 


in spin function, finish the n times spin:19


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


aaaaaa
aaaaaabbbbb

risk is [0.41179922267462205, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.93971657753
y: -22.9448604584
theta: 1.44241929054
speed: 12.5120668411
id: 0
t: 19

sim.py in the sim.py statecallback function, msg is

x: 2.77201151848
y: -22.7284736633
theta: 1.58127486706
speed: 12.5774555206
id: 0
t: 20

sim.py in the sim.py statecallback function, msg is

x: 3.84761762619
y: -22.2893600464
theta: 1.59713184834
speed: 12.1783742905
id: 0
t: 21

sim.py in the sim.py statecallback function, msg is

x: 3.58372235298
y: -21.7953472137
theta: 1.53012669086
speed: 11.5334177017
id: 0
t: 22

sim.py in the sim.py statecallback function, msg is

x: 2.45666456223
y: -21.4326896667
theta: 1.68477261066
speed: 12.127281189
id: 0
t: 23

sim.py in the sim.py statecallback function, msg is

x: 2.7302107811
y: -20.924200058
theta: 1.58622705936
speed: 11.7276363373
id: 0
t: 24

222 self.state_dicts[msg.id][msg.t] is (2.730210781097412, -20.9242000579834, 1.5862270593643188, 11.727636337280273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.97521138191
y: 18.5534000397
theta: 4.75790691376
speed: 13.6307792664
id: 1
t: 26
current clock is .t / ron
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration






maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish


self.agent_state[0] is 1.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.11111111111
self.TMan is 5



( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1


self.agents_to_ask is ['1']



message is :GET,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get




GET,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.97515130043
y: -19.736661911
theta: 1.645591259
speed: 11.2760944366
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
self.communication_details == 0
sending GET,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.97515130043
y: -19.736661911
theta: 1.645591259
speed: 11.2760944366
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:28

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

finish try maneuver







maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.20575904846
y: -18.8615760803
theta: 1.55701506138
speed: 10.5453958511
id: 0
t: 28
current clock is .t / rate/slowdown
1.24444444444







maneuver_negotiatir.py message_processing, it's a long code, start...






maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.20575904846
y: -18.8615760803
theta: 1.55701506138
speed: 10.5453958511
id: 0
t: 28
current clock is .t / rate/slowdown
1.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True






maneuver_negotiatir.py message_processing, self.communication_details != 1



maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.24444444444', 'Position': ['(-2.9752113819122314', ' 18.55340003967285', ' 4.757906913757324)'], 'Type': 'DENY'}


car 0 received DENY,1,1.24444444444,(-2.9752113819122314, 18.55340003967285, 4.757906913757324),13,1,0,0 from  car1


status: 2



maneuver_negotiatir.py get membership, in the get_MR function, start


maneuver_negotiatir.py intended_course


left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish



mate/slowdownmaneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.97521138191
y: 18.5534000397
theta: 4.75790691376
speed: 13.6307792664
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556

maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


1.24444444444





maneuver_negotiatir.py message_processing, it's a long code, start...






maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.87729549408
y: 17.4070510864
theta: 4.69312953949
speed: 13.7300195694
id: 1
t: 28
current clock is .t / rate/slowdown
1.24444444444





maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True


maneuver_negotiatir.py message_processing, self.communication_details != 1



maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.15555555556', 'IntendedCourse': 'left', 'Position': ['2.975151300430298', ' -19.736661911010742', ' 1.6455912590026855'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}


car 1 received GET,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0,left from  car0


status: 1



maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)



maneuver_negotiatir.py in no conflict funtion , start


current time is  0.0513580246916
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.70819139616
sender last entering time is:  1.70819139616
sender last leaving time is:  4.08082112456
my entering time is:  0.76822125847
my leaving time is:  2.56508449225
i have left the intersection:  False
finish not_conflicted




maneuver_negotiatir.py message_processing, no conflict

maneuver_negotiatir.py message_processing, woshishui wozainali



maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.87729549408
y: 17.4070510864
theta: 4.69312953949
speed: 13.7300195694
id: 1
t: 28
current clock is .t / rate/slowdown
1.24444444444
self.communication_details == 0
sending DENY,1,1.24444444444,(-2.9752113819122314, 18.55340003967285, 4.757906913757324),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message





maneuver_negotiatir.py in the message processing function, it's a long code, finish






maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.87729549408
y: 17.4070510864
theta: 4.69312953949
speed: 13.7300195694
id: 1
t: 28
current clock is .t / rate/slowdown
1.24444444444





maneuver_negotiatir.py message_processing, it's a long code, start...







maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.87729549408
y: 17.4070510864
theta: 4.69312953949
speed: 13.7300195694
id: 1
t: 28maneuver_negotiatir.py in the try maneuver function update -. strat










current clock is .t / rate/slowdown
1.24444444444


maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True


maneuver_negotiatir.py message_processing, self.communication_details != 1



message type is RELEASE, meaasge dict is {'TagTime': '11', 'Sender': '0', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(2.975151300430298', ' -19.736661911010742', ' 1.6455912590026855)'], 'Type': 'RELEASE'}


car 1 received RELEASE,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0 from  car0


status: 1


maneuver_negotiatir.py in the message processing function, it's a long code, finish






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32983002819861845, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.25906968117
y: -19.7857227325
theta: 1.61004090309
speed: 11.0657672882
id: 0
t: 25

sim.py in the sim.py statecallback function, msg is

x: 2.97515130043
y: -19.736661911
theta: 1.645591259
speed: 11.2760944366
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.17681694031
y: -18.1965961456
theta: 1.61903500557
speed: 10.8703365326
id: 0
t: 27

sim.py in the sim.py statecallback function, msg is

x: 3.20575904846
y: -18.8615760803
theta: 1.55701506138
speed: 10.5453958511
id: 0
t: 28

sim.py in the sim.py statecallback function, msg is

x: 3.30376386642
y: -18.4934673309
theta: 1.55611121655
speed: 10.3074131012
id: 0
t: 29

sim.py in the sim.py statecallback function, msg is

x: 3.02778172493
y: -18.2054252625
theta: 1.61747050285
speed: 10.3312149048
id: 0
t: 30

sim.py in the sim.py statecallback function, msg is

x: 3.02979564667
y: -17.7671451569
theta: 1.62369966507
speed: 9.94369792938
id: 0
t: 31

222 self.state_dicts[msg.id][msg.t] is (3.0297956466674805, -17.76714515686035, 1.62369966506958, 9.943697929382324)



if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:32



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 



targetspeed < self.speed:xaneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 



maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.1111111111111112, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py message_processing,Received a grant or deny and status == get




maneuver_negotiatir.py in the lat function

0

maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1

last


stopped retry timer


maneuver_negotiatir.py message_processing, self.last()




maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET




RELEASE,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.20575904846
y: -18.8615760803
theta: 1.55701506138
speed: 10.5453958511
id: 0
t: 28
current clock is .t / rate/slowdown
1.24444444444
self.communication_details == 0
sending RELEASE,0,1.15555555556,(2.975151300430298, -19.736661911010742, 1.6455912590026855),11,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat






maneuver_negotiatir.py in the message processing function, it's a long code, finish










going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:30


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36


maneuver_negotiatir.py in the try manexxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.36824093514874573, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.86194443703
y: -16.6043014526
theta: 1.49019706249
speed: 9.56210231781
id: 0
t: 32

sim.py in the sim.py statecallback function, msg is

x: 3.47930192947
y: -16.2791557312
theta: 1.5357363224
speed: 9.67766952515
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 2.83807873726
y: -15.7168645859
theta: 1.61955678463
speed: 9.10643005371
id: 0
t: 34

sim.py in the sim.py statecallback function, msg is

x: 2.72488570213
y: -15.575674057
theta: 1.53799581528
speed: 8.98725509644
id: 0
t: 35

222 self.state_dicts[msg.id][msg.t] is (2.7248857021331787, -15.575674057006836, 1.5379958152770996, 8.987255096435547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6













maneuver_negotiatir.py message_processing, it's a long code, start...












maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6





maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True



maneuver_negotiatir.py message_processing, self.communication_details != 1



maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.6', 'IntendedCourse': 'left', 'Position': ['3.350015640258789', ' -15.170108795166016', ' 1.5934587717056274'], 'TagID': '0', 'Type': 'GET', 'Velocity': '9'}


car 1 received GET,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0,left from  car0


status: 1



maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)



maneuver_negotiatir.py in no conflict funtion , start


current time is  0.0711111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.26713870176
sender last entering time is:  1.37377849674
sender last leaving time is:  3.39224223931
my entering time is:  0.454184633891
my leaving time is:  1.91725815667
i have left the intersection:  False
finish not_conflicted


maneuver_negotiatir.py message_processing, no conflict


maneuver_negotiatir.py message_processing, woshishui wozainali


maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17uver function update -. stratmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver







maneuver_negotiatir.py in the trymaneuver function - start







1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration





maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.5555555555555556, True, ['1']]
1.55555555556
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish





self.agent_state[0] is 1.6
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.55555555556
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0


!!!!change state to get


GET,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0,left



maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6
self.communication_details == 0
sending GET,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0,left to car 1 from car 0



maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6









maneuver_negotiatir.py message_processing, it's a long code, start...









maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6


maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True


maneuver_negotiatir.py message_processing, self.communication_details != 1


maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.6', 'Position': ['(-3.1700310707092285', ' 12.771082878112793', ' 4.562159538269043)'], 'Type': 'DENY'}


car 0 received DENY,1,1.6,(-3.1700310707092285, 12.771082878112793, 4.562159538269043),13,1,0,0 from  car1


status: 2


maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.5555555555555556, True, ['1']]
1.55555555556
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish


maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.5555555555555556, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])

maneuver_negotiatir.py message_processing,Received a grant or deny and status == get

maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer

maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET


RELEASE,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0


maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36
current clock is .t / rate/slowdown
1.6
self.communication_details == 0

sending RELEASE,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion




maneuver_negotiatir.py in the message processing function, it's a long code, finish






aaaaaa
risk is [0.48971695394680126, 0.15836341052681943]
sim.py in the sim.py statecallback function, msg is

x: -3.87729549408
y: 17.4070510864
theta: 4.69312953949
speed: 13.7300195694
id: 1
t: 28

sim.py in the sim.py statecallback function, msg is

x: -2.69173717499
y: 17.0535430908
theta: 4.66388320923
speed: 13.7831220627
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -2.78793978691
y: 16.2323265076
theta: 4.73687124252
speed: 13.5846633911
id: 1
t: 30

sim.py in the sim.py statecallback function, msg is

x: -3.06523013115
y: 15.5884857178
theta: 4.666015625
speed: 13.9989461899
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -2.60512065887
y: 15.278427124
theta: 4.72167778015
speed: 14.2085847855
id: 1
t: 32

sim.py in the sim.py statecallback function, msg is

x: -3.23886632919
y: 14.0402479172
theta: 4.75494527817
speed: 14.4145746231
id: 1
t: 33

sim.py in the sim.py statecallback function, msg is

x: -3.04618287086
y: 14.5432653427
theta: 4.68439865112
speed: 13.7613897324
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -3.74663734436
y: 13.1323509216
theta: 4.85802793503
speed: 14.0953159332
id: 1
t: 35

sim.py in the sim.py statecallback function, msg is

x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36

sim.py in the sim.py statecallback function, msg is

x: -3.17782378197
y: 12.1639614105
theta: 4.87030315399
speed: 13.6015930176
id: 1
t: 37

222 self.state_dicts[msg.id][msg.t] is (-3.177823781967163, 12.163961410522461, 4.870303153991699, 13.601593017578125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:38
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py i003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6
self.communication_details == 0
sending DENY,1,1.6,(-3.1700310707092285, 12.771082878112793, 4.562159538269043),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message





maneuver_negotiatir.py in the message processing function, it's a long code, finish






maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17003107071
y: 12.7710828781
theta: 4.56215953827
speed: 13.549779892
id: 1
t: 36
current clock is .t / rate/slowdown
1.6
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '1.6', 'Position': ['(3.350015640258789', ' -15.170108795166016', ' 1.5934587717056274)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.6,(3.350015640258789, -15.170108795166016, 1.5934587717056274),9,1,1.15555555556,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish





maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2640461707199719, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.35001564026
y: -15.1701087952
theta: 1.59345877171
speed: 9.19395160675
id: 0
t: 36

sim.py in the sim.py statecallback function, msg is

x: 3.26510739326
y: -14.7850074768
theta: 1.45445644855
speed: 8.48668956757
id: 0
t: 37

sim.py in the sim.py statecallback function, msg is

x: 3.55236649513
y: -14.5449171066
theta: 1.7784268856
speed: 8.07538509369
id: 0
t: 38

sim.py in the sim.py statecallback function, msg is

x: 3.3974802494
y: -14.2391338348
theta: 1.57434344292
speed: 7.96924734116
id: 0
t: 39

sim.py in the sim.py statecallback function, msg is

x: 3.39371728897
y: -13.4992704391
theta: 1.61713588238
speed: 8.32944583893
id: 0
t: 40


222 self.state_dicts[msg.id][msg.t] is (3.3937172889709473, -13.49927043914795, 1.6171358823776245, 8.329445838928223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id =n the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6111591339218101, 0.014598585739975849]
sim.py in the sim.py statecallback function, msg is

x: -2.86512494087
y: 11.677526474
theta: 4.84012842178
speed: 13.5277767181
id: 1
t: 38

sim.py in the sim.py statecallback function, msg is

x: -3.27877092361
y: 10.9350366592
theta: 4.72688913345
speed: 14.3304700851
id: 1
t: 39

sim.py in the sim.py statecallback function, msg is

x: -3.32690477371
y: 10.3713502884
theta: 4.63460493088
speed: 13.8032884598
id: 1
t: 40

sim.py in the sim.py statecallback function, msg is

x: -3.12321376801
y: 9.55958938599
theta: 4.66679954529
speed: 13.9501800537
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -3.6333220005
y: 9.26782131195
theta: 4.68323850632
speed: 13.9512434006
id: 1
t: 42

222 self.state_dicts[msg.id][msg.t] is (-3.63332200050354, 9.267821311950684, 4.683238506317139, 13.95124340057373)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:44


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached







reached retry trymaneuver

maneuver_negotiatir.py in the trymaneuver function - start

1.self.status is 6
2.self.status is 6


change normal to tryget(for the case tryget, it doesn't need to chcnge)


maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.9111111111111112, True, ['1']]
1.91111111111
True
1
maneuver_negotiatir.py = 1):
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.28950784461901335, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.07510113716
y: -13.3034915924
theta: 1.48618483543
speed: 7.62215614319
id: 0
t: 41

sim.py in the sim.py statecallback function, msg is

x: 3.59907412529
y: -12.6669721603
theta: 1.53113651276
speed: 7.3779706955
id: 0
t: 42

sim.py in the sim.py statecallback function, msg is

x: 3.08884620667
y: -13.083612442
theta: 1.49023771286
speed: 7.30634260178
id: 0
t: 43

222 self.state_dicts[msg.id][msg.t] is (3.088846206665039, -13.083612442016602, 1.4902377128601074, 7.306342601776123)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44



maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556












maneuver_negotiatir.py message_processing, it's a long code, start...










maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1


maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.95555555556', 'IntendedCourse': 'left', 'Position': ['3.1195857524871826', ' -12.284646034240723', ' 1.6336971521377563'], 'TagID': '0', 'Type': 'GET', 'Velocity': '6'}

car 1 received GET,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0,left from  car0

status: 1


maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)


maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0869135802471
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.9206550get membership, in the get_MR function, finish

self.agent_state[0] is 1.95555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.91111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']

message is :GET,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function

1

maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0

!!!!change state to get


GET,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556
self.communication_details == 0
sending GET,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556






maneuver_negotiatir.py message_processing, it's a long code, start...


maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556


maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True

maneuver_negotiatir.py message_processing, self.communication_details != 1

maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.95555555556', 'Position': ['(-3.1384880542755127', ' 7.859310626983643', ' 4.703817367553711)'], 'Type': 'DENY'}

car 0 received DENY,1,1.95555555556,(-3.1384880542755127, 7.859310626983643, 4.703817367553711),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.9111111111111112, True, ['1']]
1.91111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.9111111111111112, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])

maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET

RELEASE,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44
current clock is .t / rate/slowdown
1.95555555556
self.communication_details == 0
sending RELEASE,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message




finish try maneuver



maneuver_negotiatir.py in the message processing func81382
sender last entering time is:  1.24368340681
sender last leaving time is:  3.34686011896
my entering time is:  0.114321718918
my leaving time is:  1.22374763962
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict

maneuver_negotiatir.py message_processing, woshishui wozainali

maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556
self.communication_details == 0


sending DENY,1,1.95555555556,(-3.1384880542755127, 7.859310626983643, 4.703817367553711),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish





maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44
current clock is .t / rate/slowdown
1.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '6', 'Sender': '0', 'TagID': '1', 'Time': '1.95555555556', 'Position': ['(3.1195857524871826', ' -12.284646034240723', ' 1.6336971521377563)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.95555555556,(3.1195857524871826, -12.284646034240723, 1.6336971521377563),6,1,1.15555555556,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5929346451150279, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.11958575249
y: -12.2846460342
theta: 1.63369715214
speed: 6.63961362839
id: 0
t: 44

sim.py in the sim.py statecallback function, msg is

x: 4.11980390549
y: -11.9041385651
theta: 1.54908645153
speed: 6.55345964432
id: 0
t: 45

sim.py in the sim.py statecallback function, msg is

x: 3.15082716942
y: -11.8920288086
theta: 1.64851653576
speed: 6.13954877853
id: 0
t: 46

sim.py in the sim.py statecallback function, msg is

x: 3.13106203079
y: -11.2396364212
theta: 1.35244238377
speed: 6.207426548
id: 0
t: 47

222 self.state_dicts[msg.id][msg.t] is (3.1310620307922363, -11.239636421203613, 1.3524423837661743, 6.20742654800415)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = Fation, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.5819462291833103, 2.4765433646292416e-05]
sim.py in the sim.py statecallback function, msg is

x: -3.3680973053
y: 8.70005321503
theta: 4.77564430237
speed: 13.6550626755
id: 1
t: 43

sim.py in the sim.py statecallback function, msg is

x: -3.13848805428
y: 7.85931062698
theta: 4.70381736755
speed: 13.9833164215
id: 1
t: 44

sim.py in the sim.py statecallback function, msg is

x: -3.63644361496
y: 6.26653432846
theta: 4.8394613266
speed: 13.9389839172
id: 1
t: 45

222 self.state_dicts[msg.id][msg.t] is (-3.636443614959717, 6.266534328460693, 4.839461326599121, 13.938983917236328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:48
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6193494842985655, 0.003577563285334541]
sim.py in the sim.py statecallback function, msg is

x: -3.41687321663
y: 6.30114793777
theta: 4.85936021805
speed: 14.2143507004
id: 1
t: 46

sim.py in the sim.py statecallback function, msg is

x: -3.04274606705
y: 5.93335294724
theta: 4.79132938385
speed: 14.082906723
id: 1
t: 47

sim.py in the sim.py statecallback function, msg is

x: -2.84195685387
y: 5.44085121155
theta: 4.76629400253
speed: 13.9453601837
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.46876764297
y: 5.09047651291
theta: 4.63015508652
speed: 13.6239309311
id: 1
t: 49

sim.py in the sim.py statecallback function, msg is

x: -3.28129529953
y: 3.72380423546
theta: 4.48457050323
speed: 13.8633470535
id: 1
t: 50

222 self.state_dicts[msg.id][msg.t] is (-3.2812952995300293, 3.723804235458374, 4.484570503234863, 13.863347053527832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function lse
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.45034946854004215, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.96351456642
y: -11.201965332
theta: 1.57483422756
speed: 6.19088172913
id: 0
t: 48

sim.py in the sim.py statecallback function, msg is

x: 3.37166666985
y: -11.1529369354
theta: 1.66181886196
speed: 5.76760673523
id: 0
t: 49

sim.py in the sim.py statecallback function, msg is

x: 3.27214598656
y: -10.2891550064
theta: 1.64449465275
speed: 5.63176822662
id: 0
t: 50

222 self.state_dicts[msg.id][msg.t] is (3.272145986557007, -10.289155006408691, 1.644494652748108, 5.631768226623535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.31111111111', 'IntendedCourse': 'left', 'Position': ['3.2362494468688965', ' -9.468904495239258', ' 1.445910096168518'], 'TagID': '0', 'Type': 'GET', 'Velocity': '4'}
car 1 received GET,0,2.31111111111,(3.23624944686889
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.2222222222222223, True, ['1']]
2.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.31111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']


message is :GET,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get

GET,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
self.communication_details == 0
sending GET,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '2.31111111111', 'Position': ['(-3.5313262939453125', ' 2.74697208404541', ' 4.735240936279297)'], 'Type': 'DENY'}

car 0 received DENY,1,2.31111111111,(-3.5313262939453125, 2.74697208404541, 4.735240936279297),14,1,0,0 from  car1
sta65, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0,left from  car0
status: 1

maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.102716049383
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.477744363069
sender last entering time is:  1.10271604938
sender last leaving time is:  3.47601430581
my entering time is:  0.102716049383
my leaving time is:  0.840498039434
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
self.communication_details == 0
sending DENY,1,2.31111111111,(-3.5313262939453125, 2.74697208404541, 4.735240936279297),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish




maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52
current clock is .t / rate/slowdown
2.31111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '4', 'Sender': '0', 'TagID': '1', 'Time': '2.31111111111', 'Position': ['(3.2362494468688965', ' -9.468904495239258', ' 1.445910096168518)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0 from  car0
status: 1



maneuver_negotiatir.py in the message processing function, it's a long code, finish




maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5054522398529909, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.93868136406
y: -10.5601968765
theta: 1.64089953899
speed: 5.13977718353
id: 0
t: 51

sim.py in the sim.py statecallback function, msg is

x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52

sim.py in the sim.py statecallback function, msg is

x: 3.14833879471
y: -10.399023056
theta: 1.32796514034
speed: 5.08611488342
id: 0
t: 53

222 self.state_dicts[msg.id][msg.t] is (3.148338794708252, -10.399023056030273, 1.3279651403427124, 5.086114883422852)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state frtus: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.2222222222222223, True, ['1']]
2.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish





maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.2222222222222223, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET



RELEASE,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0



maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23624944687
y: -9.46890449524
theta: 1.44591009617
speed: 4.705950737
id: 0
t: 52
current clock is .t / rate/slowdown
2.31111111111
self.communication_details == 0
sending RELEASE,0,2.31111111111,(3.2362494468688965, -9.468904495239258, 1.445910096168518),4,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
finish try maneuver




maneuver_negotiatir.py in the message processing function, it's a long code, finish



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.24192182866834228, 0.01383686388109863]
sim.py in the sim.py statecallback function, msg is

x: -3.50176286697
y: 4.19426679611
theta: 4.57760334015
speed: 14.072394371
id: 1
t: 51

sim.py in the sim.py statecallback function, msg is

x: -3.53132629395
y: 2.74697208405
theta: 4.73524093628
speed: 14.069943428
id: 1
t: 52

sim.py in the sim.py statecallback function, msg is

x: -3.09465003014
y: 2.30487728119
theta: 4.70143556595
speed: 13.8698272705
id: 1
t: 53

sim.py in the sim.py statecallback function, msg is

x: -3.16558408737
y: 1.47841727734
theta: 4.73939418793
speed: 13.7924861908
id: 1
t: 54

222 self.state_dicts[msg.id][msg.t] is (-3.165584087371826, 1.4784172773361206, 4.739394187927246, 13.792486190795898)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:56
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:57
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:58
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.684109507438299, 0.00013296455532283856]
sim.py in the sim.py statecallback function, msg is

x: -3.59020256996
y: 1.26865780354
theta: 4.59421491623
speed: 13.7556438446
id: 1
t: 55

sim.py in the sim.py statecallback function, msg is

x: -3.15578889847
y: 0.26230353117
theta: 4.63066339493
speed: 14.1635808945
id: 1
t: 56

sim.py in the sim.py statecallback function, msg is

x: -3.10743355751
y: -0.128999575973
theta: 4.5702881813
speed: 14.2457561493
id: 1
t: 57

sim.py in the sim.py statecallback function, msg is

x: -3.04530906677
y: -1.14969372749
theta: 4.83826303482
speed: 13.9303779602
id: 1
t: 58

222 self.state_dicts[msg.id][msg.t] is (-3.045309066772461, -1.1496937274932861, 4.838263034820557, 13.930377960205078)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:60
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60
current clock is .t / rate/slowdown
2.66666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60
current clock is .t / rate/slowdown
2.66666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.6222222222222222, True, ['1']]
2.62222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.66666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.62222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.66666666667,(2.807332754135132, -8.194235801696777, 1.6205525398254395),3,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,2.66666666667,(2.807332754135132, -8.194235801696777, 1.620552539om ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3799984083193165, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.0850610733
y: -9.28898143768
theta: 1.59597051144
speed: 4.72247505188
id: 0
t: 54

sim.py in the sim.py statecallback function, msg is

x: 3.26448369026
y: -9.20022964478
theta: 1.45836126804
speed: 4.44212341309
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.38063573837
y: -9.5765581131
theta: 1.48449456692
speed: 4.36761140823
id: 0
t: 56

sim.py in the sim.py statecallback function, msg is

x: 3.54846763611
y: -9.36569499969
theta: 1.71194183826
speed: 4.19366121292
id: 0
t: 57

222 self.state_dicts[msg.id][msg.t] is (3.5484676361083984, -9.365694999694824, 1.7119418382644653, 4.193661212921143)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2457257559696047, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.27458047867
y: -9.42646980286
theta: 1.57319688797
speed: 3.80777311325
id: 0
t: 58

sim.py in the sim.py statecallback function, msg is

x: 3.52411103249
y: -8.67261505127
theta: 1.5081397295
speed: 3.67428874969
id: 0
t: 59

222 self.state_dicts[msg.id][msg.t] is (3.524111032485962, -8.672615051269531, 1.508139729499817, 3.674288749694824)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.36216521263
y: -1.9449532032
theta: 4.74751377106
speed: 13.596031189
id: 1
t: 60
current clock is .t / rate/slowdown
2.66666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.36216521263
y: -1.9449532032
theta: 4.74751377106
speed: 13.596031189
id: 1
t: 60
current clock is .t / rate/slowdown
2.66666666667


























maneuver_negotiatir.py message_processing, it's a long code, start...
















maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.36216521263
y: -1.9449532032
theta: 4.74751377106
speed: 13.596031189
id: 1
t: 60
current clock is .t / rate/slowdown
2.66666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True

maneuver_negotiatir.py message_processing, self.communication_details != 1

maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.66666666667', 'IntendedCourse': 'left', 'Position': ['2.807332754135132', ' -8.194235801696777', ' 1.6205525398254395'], 'TagID': '0', 'Type': 'GET', 'Velocity': '3'}

car 1 received GET,0,2.66666666667,(2.807332754135132, -8.194235801696777, 1.6205525398254395),3,1,1.15555555556,0,left from  car0

status: 1


maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.118518518519
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.333714536621
sender last entering time is:  1.11851851852
sender last leaving time is:  3.49181677494
my entering time is:  0.118518518519
my leaving time is:  0.522037443444
i have left the intersection:  False
sender enters just im about to leave
time is  -0.188322906823
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted


maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT


self.grantID is 0
GRANT,1,2.66666666667,(-3.3621652126312256, -1.944953203201294, 4.747513771057129),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [7.533333333333333, 'left']}
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.36216521263
y: -1.9449532032
theta: 4.74751377106
speed: 13.596031189
id: 1
t: 60
current clock is .t / rate/slowdown
2.66666666667
self.communication_details == 0
sending GRANT,1,2.66666666667,(-3.3621652126312256, -1.944953203201294, 4.747513771057129),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat



maneuver_negotiatir.py in the message processing function, it's a long code, finish




going to the update function



sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5522954320964321, 0.9975783621926059]
sim.py in the sim.py statecallback function, msg is

x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60

sim.py in the sim.py state8254395),3,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60
current clock is .t / rate/slowdown
2.66666666667
self.communication_details == 0
sending GET,0,2.66666666667,(2.807332754135132, -8.194235801696777, 1.6205525398254395),3,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
finish try maneuver
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60
current clock is .t / rate/slowdown
2.66666666667





















maneuver_negotiatir.py message_processing, it's a long code, start...









maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.80733275414
y: -8.1942358017
theta: 1.62055253983
speed: 3.4999434948
id: 0
t: 60
current clock is .t / rate/slowdown
2.66666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1

maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.66666666667', 'Position': ['(-3.3621652126312256', ' -1.944953203201294', ' 4.747513771057129)'], 'Type': 'GRANT'}


car 0 received GRANT,1,2.66666666667,(-3.3621652126312256, -1.944953203201294, 4.747513771057129),13,1,0,0 from  car1


status: 2


maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.6222222222222222, True, ['1']]
2.62222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish


maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.6222222222222222, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1

last

stopped retry timer

maneuver_negotiatir.py message_processing, self.last()

!!WW change status to execute

maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [7.4, 'left']}
Doing maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5886600726265362, 1.0000000000000004]
sim.py in the sim.py statecallback function, msg is

x: -3.42706513405
y: -1.70837450027
theta: 4.73513460159
speed: 13.9556322098
id: 1
t: 59

sim.py in the sim.py statecallback function, msg is

x: -3.36216521263
y: -1.9449532032
theta: 4.74751377106
speed: 13.596031189
id: 1
t: 60

sim.py in the sim.py statecallback function, msg is

x: -3.24441671371
y: -2.82907676697
theta: 4.63074064255
speed: 13.4838151932
id: 1
t: 61

sim.py in the sim.py statecallback function, msg is

x: -3.12859487534
y: -3.34804224968
theta: 4.61997699738
speed: 13.9094238281
id: 1
t: 62

sim.py in the sim.py statecallback function, msg is

x: -2.99369120598
y: -3.92581176758
theta: 4.79306507111
speed: 14.1326675415
id: 1
t: 63

222 self.state_dicts[msg.id][msg.t] is (-2.9936912059783936, -3.925811767578125, 4.793065071105957, 14.132667541503906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.004985985876629905, 0.9999999999999996]
sim.py in the sim.py statecallback function, msg is

x: -3.28534960747
y: -4.80790042877
theta: 4.64789247513
speed: 13.8589639664
id: 1
t: 64

sim.py in the sim.py statecallback function, msg is

x: -3.11414241791
y: -5.29133081436
theta: 4.67514562607
speed: 14.1802825928
id: 1
t: 65

sim.py in the sim.py statecallback function, msg is

x: -2.94333815575
y: -6.10822582245
theta: 4.61916637421
speed: 13.8175668716
id: 1
t: 66

222 self.state_dicts[msg.id][msg.t] is (-2.94333815574646, -6.1082258224487305, 4.619166374206543, 13.817566871643066)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.00163817406
y: -7.00266170502
theta: 1.56594872475
speed: 4.72602510452
id: 0
t: 67
current clock is .t / rate/slowdown
2.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from callback function, msg is

x: 2.76018166542
y: -8.37003231049
theta: 1.56308794022
speed: 3.29209971428
id: 0
t: 61

sim.py in the sim.py statecallback function, msg is

x: 3.10761356354
y: -8.2176733017
theta: 1.48146986961
speed: 3.33558225632
id: 0
t: 62

sim.py in the sim.py statecallback function, msg is

x: 3.33907628059
y: -8.27342510223
theta: 1.5994297266
speed: 4.06174516678
id: 0
t: 63

222 self.state_dicts[msg.id][msg.t] is (3.339076280593872, -8.273425102233887, 1.599429726600647, 4.0617451667785645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.00032705252549094875, 1.0000000000000007]
sim.py in the sim.py statecallback function, msg is

x: 2.9939968586
y: -7.70702314377
theta: 1.69009697437
speed: 4.04490566254
id: 0
t: 64

sim.py in the sim.py statecallback function, msg is

x: 3.3258638382
y: -7.53544855118
theta: 1.78368937969
speed: 3.72779130936
id: 0
t: 65

sim.py in the sim.py statecallback function, msg is

x: 3.12763094902
y: -7.4984536171
theta: 1.38338708878
speed: 4.35578393936
id: 0
t: 66

222 self.state_dicts[msg.id][msg.t] is (3.1276309490203857, -7.498453617095947, 1.3833870887756348, 4.355783939361572)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.84178495407
y: -6.51560211182
theta: 4.63489294052
speed: 13.9542675018
id: 1
t: 67
current clock is .t / rate/slowdown
2.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69
aaaaaa
aaaaaabbbbb
risk is [0.021001196186481948, 0.99447264107078]
sim.py in the sim.py statecallback funros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.901932995417756e-16, 1.000000000000001]
sim.py in the sim.py statecallback function, msg is

x: -2.84178495407
y: -6.51560211182
theta: 4.63489294052
speed: 13.9542675018
id: 1
t: 67

sim.py in the sim.py statecallback function, msg is

x: -3.42829346657
y: -7.72044277191
theta: 4.68484258652
speed: 14.0431613922
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -3.03063440323
y: -7.94531059265
theta: 4.75002098083
speed: 13.7967271805
id: 1
t: 69

sim.py in the sim.py statecallback function, msg is

x: -3.16781520844
y: -8.13563251495
theta: 4.5309381485
speed: 14.0014886856
id: 1
t: 70

222 self.state_dicts[msg.id][msg.t] is (-3.1678152084350586, -8.135632514953613, 4.530938148498535, 14.00148868560791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:71
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.540002495660946e-34, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.32713103294
y: -8.85546588898
theta: 4.66008663177
speed: 14.0775489807
id: 1
t: 71

sim.py in the sim.py statecallback function, msg is

x: -3.21564078331
y: -9.65330696106
theta: 4.79048776627
speed: 13.6621255875
id: 1
t: 72

sim.py in the sim.py statecallback function, msg is

x: -3.63466119766
y: -10.2859382629
theta: 4.67708730698
speed: 13.7420024872
id: 1
t: 73

222 self.state_dicts[msg.id][msg.t] is (-3.6346611976623535, -10.285938262939453, 4.677087306976318, 13.742002487182617)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:75
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.82690191269
y: -5.5081281662
theta: 1.63484096527
speed: 6.67089080811
id: 0
t: 75
current clock is .t / rate/slowdown
3.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the veloction, msg is

x: 3.00163817406
y: -7.00266170502
theta: 1.56594872475
speed: 4.72602510452
id: 0
t: 67

sim.py in the sim.py statecallback function, msg is

x: 3.59796619415
y: -6.96432638168
theta: 1.47953927517
speed: 4.80683469772
id: 0
t: 68

sim.py in the sim.py statecallback function, msg is

x: 2.79152274132
y: -6.39864301682
theta: 1.43647134304
speed: 5.53367567062
id: 0
t: 69

222 self.state_dicts[msg.id][msg.t] is (2.791522741317749, -6.3986430168151855, 1.4364713430404663, 5.533675670623779)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.030295312799897e-81, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.63061857224
y: -6.70502138138
theta: 1.70502233505
speed: 5.35820007324
id: 0
t: 70

sim.py in the sim.py statecallback function, msg is

x: 3.33275485039
y: -6.26601696014
theta: 1.62547051907
speed: 5.6715555191
id: 0
t: 71

sim.py in the sim.py statecallback function, msg is

x: 3.15068101883
y: -5.73743581772
theta: 1.60279119015
speed: 5.96923542023
id: 0
t: 72

222 self.state_dicts[msg.id][msg.t] is (3.1506810188293457, -5.737435817718506, 1.6027911901474, 5.969235420227051)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.6716117715928738e-200, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.25441527367
y: -6.39368534088
theta: 1.57251369953
speed: 6.38615083694
id: 0
t: 73

sim.py in the sim.py statecallback function, msg is

x: 3.44639110565
y: -5.45596027374
theta: 1.59604752064
speed: 6.5299706459
id: 0
t: 74

222 self.state_dicts[msg.id][msg.t] is (3.4463911056518555, -5.455960273742676, 1.5960475206375122, 6.529970645904541)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in scity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.493427657289552e-223, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.12728238106
y: -11.1725091934
theta: 4.72986888885
speed: 13.9442148209
id: 1
t: 74

sim.py in the sim.py statecallback function, msg is

x: -3.30747437477
y: -11.6022043228
theta: 4.78166055679
speed: 14.0704803467
id: 1
t: 75

sim.py in the sim.py statecallback function, msg is

x: -2.92471170425
y: -12.1865587234
theta: 4.79706335068
speed: 14.0447025299
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -3.28028225899
y: -12.2872409821
theta: 4.85274171829
speed: 14.1165542603
id: 1
t: 77

222 self.state_dicts[msg.id][msg.t] is (-3.2802822589874268, -12.287240982055664, 4.852741718292236, 14.116554260253906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:80
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.628817658427e-312, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.12789988518
y: -12.9581375122
theta: 4.53904676437
speed: 14.0829048157
id: 1
t: 78

sim.py in the sim.py statecallback function, msg is

x: -3.55147123337
y: -13.4202613831
theta: 4.84741735458
speed: 13.7572526932
id: 1
t: 79

sim.py in the sim.py statecallback function, msg is

x: -3.32042717934
y: -14.4465522766
theta: 4.79984521866
speed: 13.9239149094
id: 1
t: 80

sim.py in the sim.py statecallback function, msg is

x: -3.62678647041
y: -14.6512241364
theta: 4.58833932877
speed: 14.1787481308
id: 1
t: 81

222 self.state_dicts[msg.id][msg.t] is (-3.626786470413208, -14.651224136352539, 4.588339328765869, 14.17874813079834)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtionpin function, finish the n times spin:76maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.92471170425
y: -12.1865587234
theta: 4.79706335068
speed: 14.0447025299
id: 1
t: 76
current clock is .t / rate/slowdown
3.37777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [6.233639710203375e-241, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.82690191269
y: -5.5081281662
theta: 1.63484096527
speed: 6.67089080811
id: 0
t: 75

sim.py in the sim.py statecallback function, msg is

x: 2.96185064316
y: -4.68690109253
theta: 1.51414144039
speed: 7.69538879395
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 2.79625988007
y: -5.35693120956
theta: 1.71296787262
speed: 7.45503330231
id: 0
t: 77

sim.py in the sim.py statecallback function, msg is

x: 2.92114210129
y: -4.49223899841
theta: 1.67116713524
speed: 7.95454359055
id: 0
t: 78

222 self.state_dicts[msg.id][msg.t] is (2.921142101287842, -4.492238998413086, 1.6711671352386475, 7.954543590545654)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:80
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:82
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.20995378494
y: -4.09554433823
theta: 1.82958495617
speed: 7.83695173264
id: 0
t: 79

sim.py in the sim.py statecallback function, msg is

x: 2.87418794632
y: -3.70507884026
theta: 1.79692184925
speed: 8.084025383
id: 0
t: 80

sim.py in the sim.py statecallback function, msg is

x: 2.37381720543
y: -3.062469244
theta: 2.00406002998
speed: 8.33058547974
id: 0
t: 81

sim.py in the sim.py statecallback function, msg is

x: 2.98146438599
y: -3.02732825279
theta: 2.03124022484
speed: 8.54845714569
id: 0
t: 82

222 self.state_dicts[msg.id][msg.t] is (2.981464385986328, -3.0273282527923584, 2.031240224838257, 8.548457145690918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.04043340683
y: -16.8168315887
theta: 4.8253030777
speed: 13.5867538452
id: 1
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.04240918159
y: -2.52116775513
theta: 2.08023500443
speed: 8.70344352722
id: 0
t: 83

sim.py in the sim.py statecallback function, msg is

x: 2.36319041252
y: -2.29093837738
theta: 2.14384436607
speed: 9.46617698669
id: 0
t: 84

222 self.state_dicts[msg.id][msg.t] is (2.3631904125213623, -2.290938377380371, 2.1438443660736084, 9.466176986694336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.57223391533
y: -2.21817374229
theta: 2.1902282238
speed: 9.55115127563
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: 1.71338033676
y: -1.2964502573
theta: 2.2528014183
speed: 9.13753509521
id: 0
t: 86

sim.py in the sim.py statecallback function, msg is

x: 1.43940317631
y: -1.6177803278
theta: 2.06040620804
speed: 9.73230075836
id: 0
t: 87

222 self.state_dicts[msg.id][msg.t] is (1.4394031763076782, -1.617780327796936, 2.06040620803833, 9.732300758361816)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in s
leave the update function 
in spin function, finish the n times spin:82
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.36319041252
y: -2.29093837738
theta: 2.14384436607
speed: 9.46617698669
id: 0
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.90806746483
y: -15.2330665588
theta: 4.78360414505
speed: 13.6737594604
id: 1
t: 82

sim.py in the sim.py statecallback function, msg is

x: -3.11834478378
y: -16.1031246185
theta: 4.76745128632
speed: 13.8643217087
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.04043340683
y: -16.8168315887
theta: 4.8253030777
speed: 13.5867538452
id: 1
t: 84

222 self.state_dicts[msg.id][msg.t] is (-3.040433406829834, -16.816831588745117, 4.825303077697754, 13.586753845214844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.70068264008
y: -17.3643703461
theta: 4.56189393997
speed: 14.0918426514
id: 1
t: 85

sim.py in the sim.py statecallback function, msg is

x: -3.3114798069
y: -17.6167125702
theta: 4.72230625153
speed: 14.1214103699
id: 1
t: 86

sim.py in the sim.py statecallback function, msg is

x: -3.3903400898
y: -18.7046127319
theta: 4.75337219238
speed: 13.6591997147
id: 1
t: 87

222 self.state_dicts[msg.id][msg.t] is (-3.3903400897979736, -18.704612731933594, 4.7533721923828125, 13.659199714660645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.52692365646
y: -19.6333866119
theta: 4.66403055191
speed: 13.7547092438
id: 1
t: 88

sim.py in the sim.py statecallback function, msg is

x: -3.61185336113
y: -20.1355247498
theta: 4.91940307617
speed: 14.1916894913
id: 1
t: 89

sim.py in the sim.py statecallback function, msg is

x: -3.57861876488
y: -20.4057350159
theta: 4.83620452881
speed: 14.1177148819
id: 1
t: 90

222 self.state_dicts[msg.id][msg.t] is (-3.5786187648773193, -20.40573501586914, 4.836204528808594, 14.117714881896973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -0.102959029377
y: 0.130300521851
theta: 2.55052542686
speed: 10.5095710754
id: 0
t: 92
current clock is .t / rate/slowdown
4.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.3512942791
y: -21.604183197
theta: 4.68706083298
speed: 14.0071601868
id: 1
t: 91

sim.py in the sim.py statecallback function, msg is

x: -3.18123102188
y: -21.7801208496
theta: 4.72103118896
speed: 13.6264743805
id: 1
t: 92

sim.py in the sim.py statecallback function, msg is

x: -3.51404428482
y: -22.4065303802
theta: 4.66851806641
speed: 14.0759096146
id: 1
t: 93

sim.py in the sim.py statecallback function, msg is

x: -3.29017472267
y: -23.0084896088
theta: 4.71153640747
speed: 13.9531049728
id: 1
t: 94

222 self.state_dicts[msg.id][msg.t] is (-3.290174722671509, -23.00848960876465, 4.711536407470703, 13.953104972839355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 sepin function, finish the n times spin:88maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 1.2294754982
y: -0.90109026432
theta: 2.35735154152
speed: 9.9435005188
id: 0
t: 88

222 self.state_dicts[msg.id][msg.t] is (1.229475498199463, -0.9010902643203735, 2.357351541519165, 9.943500518798828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 0.979473471642
y: -0.660342395306
theta: 2.31076669693
speed: 10.0489292145
id: 0
t: 89

sim.py in the sim.py statecallback function, msg is

x: 0.88918197155
y: -0.438918173313
theta: 2.40289068222
speed: 10.3774061203
id: 0
t: 90

sim.py in the sim.py statecallback function, msg is

x: 0.839808046818
y: -0.386448919773
theta: 2.25443887711
speed: 10.5117053986
id: 0
t: 91

222 self.state_dicts[msg.id][msg.t] is (0.8398080468177795, -0.3864489197731018, 2.254438877105713, 10.51170539855957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.18123102188
y: -21.7801208496
theta: 4.72103118896
speed: 13.6264743805
id: 1
t: 92
current clock is .t / rate/slowdown
4.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -0.102959029377
y: 0.130300521851
theta: 2.55052542686
speed: 10.5095710754
id: 0
t: 92

sim.py in the sim.py statecallback function, msg is

x: -0.155052423477
y: 0.672126233578
theta: 2.57189798355
speed: 10.9254713058
id: 0
t: 93

sim.py in the sim.py statecallback function, msg is

x: -1.26827406883
y: 0.327439874411
theta: 2.51925802231
speed: 11.056804657
id: 0
t: 94

222 self.state_dicts[msg.id][msg.t] is (-1.2682740688323975, 0.3274398744106293, 2.5192580223083496, 11.056804656982422)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -0.555103957653
y: 1.41332411766
theta: 2.63276124001
speed: 11.4134559631
id: 0
t: 95

sim.py in the sim.py statecallback function, msg is

x: -1.36721420288
y: 1.37544763088
theta: 2.76150989532
speed: 11.9644584656
id: 0
t: 96

sim.py in the sim.py statecallback function, msg is

x: -1.67501008511
y: 1.348954916
theta: 2.75094342232
speed: 11.9314460754
id: 0
t: 97

222 self.state_dicts[msg.id][msg.t] is (-1.675010085105896, 1.3489549160003662, 2.750943422317505, 11.931446075439453)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -2.39524936676
y: 1.74128675461
theta: 2.53047943115
speed: 11.9802951813
id: 0
t: 98

sim.py in the sim.py statecallback function, msg is

x: -2.74584293365
y: 2.49967908859
theta: 2.66538071632
speed: 12.0604705811
id: 0
t: 99

222 self.state_dicts[msg.id][msg.t] is (-2.745842933654785, 2.4996790885925293, 2.6653807163238525, 12.060470581054688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.84886336327
y: -26.6438789368
theta: 4.83284759521
speed: 13.8442049026
id: 1
t: 99
current clock is .t / rate/slowdown
4.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to lf.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.1372897625
y: -23.766960144
theta: 4.65096187592
speed: 13.7216320038
id: 1
t: 95

sim.py in the sim.py statecallback function, msg is

x: -3.58833909035
y: -24.9096336365
theta: 4.6321554184
speed: 13.8645582199
id: 1
t: 96

sim.py in the sim.py statecallback function, msg is

x: -3.19814300537
y: -24.9288482666
theta: 4.75671243668
speed: 13.9158334732
id: 1
t: 97

222 self.state_dicts[msg.id][msg.t] is (-3.1981430053710938, -24.928848266601562, 4.756712436676025, 13.915833473205566)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.74584293365
y: 2.49967908859
theta: 2.66538071632
speed: 12.0604705811
id: 0
t: 99
current clock is .t / rate/slowdown
4.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.19629693031
y: -25.5058555603
theta: 4.8615489006
speed: 14.1412000656
id: 1
t: 98

sim.py in the sim.py statecallback function, msg is

x: -3.84886336327
y: -26.6438789368
theta: 4.83284759521
speed: 13.8442049026
id: 1
t: 99

sim.py in the sim.py statecallback function, msg is

x: -3.00838708878
y: -25.7509403229
theta: 4.94706726074
speed: 13.9327974the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -3.97894406319
y: 2.677536726
theta: 2.63399481773
speed: 12.4305562973
id: 0
t: 100

sim.py in the sim.py statecallback function, msg is

x: -3.71504497528
y: 3.26676535606
theta: 2.91131234169
speed: 12.7752084732
id: 0
t: 101

222 self.state_dicts[msg.id][msg.t] is (-3.7150449752807617, 3.2667653560638428, 2.9113123416900635, 12.775208473205566)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:104
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -4.69112110138
y: 3.28759789467
theta: 3.04186344147
speed: 13.0412664413
id: 0
t: 102

sim.py in the sim.py statecallback function, msg is

x: -4.88871955872
y: 2.8148932457
theta: 2.93894696236
speed: 13.3748006821
id: 0
t: 103

sim.py in the sim.py statecallback function, msg is

x: -5.64366006851
y: 3.02961444855
theta: 2.98927974701
speed: 13.5217132568
id: 0
t: 104

222 self.state_dicts[msg.id][msg.t] is (-5.643660068511963, 3.0296144485473633, 2.9892797470092773, 13.521713256835938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotia319
id: 1
t: 100

sim.py in the sim.py statecallback function, msg is

x: -3.15143918991
y: -27.4577121735
theta: 4.65037298203
speed: 13.8420591354
id: 1
t: 101

222 self.state_dicts[msg.id][msg.t] is (-3.1514391899108887, -27.457712173461914, 4.6503729820251465, 13.842059135437012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.56458902359
y: -27.7173614502
theta: 4.81132555008
speed: 14.2705497742
id: 1
t: 102

sim.py in the sim.py statecallback function, msg is

x: -3.07781863213
y: -28.4979763031
theta: 4.48183917999
speed: 13.9806461334
id: 1
t: 103

sim.py in the sim.py statecallback function, msg is

x: -3.15420174599
y: -29.1409244537
theta: 4.74135446548
speed: 14.0450296402
id: 1
t: 104

222 self.state_dicts[msg.id][msg.t] is (-3.1542017459869385, -29.14092445373535, 4.741354465484619, 14.045029640197754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -7.29717731476
y: 3.68913984299
theta: 3.14448785782
speed: 14.1135730743
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in ttir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.78440237045
y: -30.8268852234
theta: 4.61802816391
speed: 13.7188358307
id: 1
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
sim.py in the sim.py statecallback function, msg is

x: -6.39090490341
y: 3.96510267258
theta: 2.97560095787
speed: 13.6344118118
id: 0
t: 105

sim.py in the sim.py statecallback function, msg is

x: -6.9599108696
y: 3.84895443916
theta: 2.87261462212
speed: 13.9979877472
id: 0
t: 106

sim.py in the sim.py statecallback function, msg is

x: -7.29717731476
y: 3.68913984299
theta: 3.14448785782
speed: 14.1135730743
id: 0
t: 107

222 self.state_dicts[msg.id][msg.t] is (-7.297177314758301, 3.6891398429870605, 3.1444878578186035, 14.11357307434082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -7.50736284256
y: 3.36170434952
theta: 3.19782614708
speed: 13.8950824738
id: 0
t: 108

sim.py in the sim.py statecallback function, msg is

x: -8.61692523956
y: 3.73588514328
theta: 3.0718998909
speed: 14.0649824142
id: 0
t: 109

sim.py in the sim.py statecallback function, msg is

x: -9.0752325058
y: 3.55589795113
theta: 3.23683691025
speed: 14.0763282776
id: 0
t: 110

sim.py in the sim.py statecallback function, msg is

x: -9.68297290802
y: 3.17867827415
theta: 3.07884836197
speed: 13.6068992615
id: 0
t: 111

222 self.state_dicts[msg.id][msg.t] is (-9.68297290802002, 3.178678274154663, 3.078848361968994, 13.60689926147461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.sphe sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.08080887794
y: -30.060382843
theta: 4.58894729614
speed: 13.6136264801
id: 1
t: 105

sim.py in the sim.py statecallback function, msg is

x: -2.97374176979
y: -30.7356338501
theta: 4.61230564117
speed: 14.3098964691
id: 1
t: 106

sim.py in the sim.py statecallback function, msg is

x: -2.78440237045
y: -30.8268852234
theta: 4.61802816391
speed: 13.7188358307
id: 1
t: 107

sim.py in the sim.py statecallback function, msg is

x: -3.19139456749
y: -31.8368225098
theta: 4.85601472855
speed: 14.0882577896
id: 1
t: 108

sim.py in the sim.py statecallback function, msg is

x: -3.51809573174
y: -32.4363136292
theta: 4.81332206726
speed: 14.5368432999
id: 1
t: 109

sim.py in the sim.py statecallback function, msg is

x: -3.29356884956
y: -32.9426002502
theta: 4.69123125076
speed: 14.1161031723
id: 1
t: 110

222 self.state_dicts[msg.id][msg.t] is (-3.2935688495635986, -32.94260025024414, 4.6912312507629395, 14.116103172302246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.91265892982
y: -33.5624847412
theta: 4.64508295059
speed: 13.6896810532
id: 1
t: 111

sim.py in the sim.py statecallback function, msg is

x: -3.33280467987
y: -34.4890365601
theta: 4.70104265213
speed: 13.928109169
id: 1
t: 112

sim.py in the sim.py statecallback function, msg is

x: -3.5087723732
y: -35.1610832214
theta: 4.6420674324
speed: 13.7429227829
id: 1
t: 113

222 self.state_dicts[msg.id][msg.t] is (-3.508772373199463, -35.16108322143555, 4.6420674324035645, 13.74292278289795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin feed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -10.3440380096
y: 3.69206857681
theta: 3.08515572548
speed: 13.8712406158
id: 0
t: 112

sim.py in the sim.py statecallback function, msg is

x: -11.1737375259
y: 3.28334164619
theta: 3.13223338127
speed: 13.9889602661
id: 0
t: 113

sim.py in the sim.py statecallback function, msg is

x: -11.3701972961
y: 3.53846168518
theta: 3.12595510483
speed: 13.6719856262
id: 0
t: 114

222 self.state_dicts[msg.id][msg.t] is (-11.370197296142578, 3.538461685180664, 3.125955104827881, 13.671985626220703)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.63770961761
y: -36.1356086731
theta: 4.70291376114
speed: 13.8200874329
id: 1
t: 115
current clock is .t / rate/slowdown
5.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:116
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:119
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -12.5546827316
y: 3.91946578026
theta: 3.09589958191
speed: 13.5283784866
id: 0
t: 115

sim.py in the sim.py statecallback function, msg is

x: -13.0435142517
y: 3.27479362488
theta: 3.02818417549
speed: 14.3583431244
id: 0
t: 116

sim.py in the sim.py statecallback function, msg is

x: -13.8398666382
y: 3.24760508537
theta: 3.20566487312
speed: 14.1606302261
id: 0
t: 117

sim.py in the sim.py statecallback function, msg is

x: -14.4285888672
y: 3.35416722298
theta: 3.35997247696
speed: 13.9872426987
id: 0
t: 118

sim.py in the sim.py statecallback function, msg is

x: -14.9669981003
y: 3.64773726463
theta: 3.21333146095
speed: 14.2377567291
id: 0
t: 119

222 self.state_dicts[msg.id][msg.t] is (-14.966998100280762, 3.6477372646331787, 3.213331460952759, 14.237756729125unction, finish the n times spin:115
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -12.5546827316
y: 3.91946578026
theta: 3.09589958191
speed: 13.5283784866
id: 0
t: 115
current clock is .t / rate/slowdown
5.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:116
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.65298724174
y: -35.0950508118
theta: 4.60608673096
speed: 13.9674015045
id: 1
t: 114

sim.py in the sim.py statecallback function, msg is

x: -3.63770961761
y: -36.1356086731
theta: 4.70291376114
speed: 13.8200874329
id: 1
t: 115

sim.py in the sim.py statecallback function, msg is

x: -3.36737537384
y: -36.3456420898
theta: 4.73528385162
speed: 13.6629362106
id: 1
t: 116

sim.py in the sim.py statecallback function, msg is

x: -3.25808525085
y: -37.0707740784
theta: 4.66718864441
speed: 14.0156135559
id: 1
t: 117

sim.py in the sim.py statecallback function, msg is

x: -3.55681347847
y: -37.5064697266
theta: 4.65795469284
speed: 13.7735528946
id: 1
t: 118

sim.py in the sim.py statecallback function, msg is

x: -3.28891515732
y: -39.0429420471
theta: 4.78861093521
speed: 13.8160886765
id: 1
t: 119

222 self.state_dicts[msg.id][msg.t] is (-3.2889151573181152, -39.04294204711914, 4.788610935211182, 13.816088676452637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from 977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33667826653
y: -40.010345459
theta: 4.59247207642
speed: 13.8946218491
id: 1
t: 122
current clock is .t / rate/slowdown
5.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -15.4106855392
y: 3.39668250084
theta: 3.18236613274
speed: 13.9509162903
id: 0
t: 120

sim.py in the sim.py statecallback function, msg is

x: -15.7632741928
y: 3.69548177719
theta: 3.03852105141
speed: 13.830406189
id: 0
t: 121

sim.py in the sim.py statecallback function, msg is

x: -16.822063446
y: 3.80056738853
theta: 3.20237851143
speed: 13.9130620956
id: 0
t: 122

sim.py in the sim.py statecallback function, msg is

x: -17.1115703583
y: 2.82266020775
theta: 3.23814916611
speed: 13.9362039566
id: 0
t: 123

222 self.state_dicts[msg.id][msg.t] is (-17.111570358276367, 2.822660207748413, 3.2381491661071777, 13.936203956604004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:125
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish tros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:123
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -17.1115703583
y: 2.82266020775
theta: 3.23814916611
speed: 13.9362039566
id: 0
t: 123
current clock is .t / rate/slowdown
5.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
x: -2.84449267387
y: -39.7959594727
theta: 4.80021953583
speed: 13.9834747314
id: 1
t: 120

sim.py in the sim.py statecallback function, msg is

x: -3.8704226017
y: -39.3747825623
theta: 4.75852441788
speed: 14.1342983246
id: 1
t: 121

sim.py in the sim.py statecallback function, msg is

x: -3.33667826653
y: -40.010345459
theta: 4.59247207642
speed: 13.8946218491
id: 1
t: 122

sim.py in the sim.py statecallback function, msg is

x: -3.13490986824
y: -40.9757385254
theta: 4.73018980026
speed: 14.0316228867
id: 1
t: 123

sim.py in the sim.py statecallback function, msg is

x: -3.51240873337
y: -42.1000709534
theta: 4.8937497139
speed: 13.8247871399
id: 1
t: 124

sim.py in the sim.py statecallback function, msg is

x: -3.04200696945
y: -41.5228042603
theta: 4.79184913635
speed: 13.87733078
id: 1
t: 125

sim.py in the sim.py statecallback function, msg is

x: -3.49225330353
y: -42.8911933899
theta: 5.04293060303
speed: 14.0916156769
id: 1
t: 126

222 self.state_dicts[msg.id][msg.t] is (-3.492253303527832, -42.89119338989258, 5.042930603027344, 14.091615676879883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129
maneuver_negohe n times spin:127maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -18.5553359985
y: 3.26230764389
theta: 3.03963589668
speed: 13.7251272202
id: 0
t: 124

sim.py in the sim.py statecallback function, msg is

x: -18.6303882599
y: 3.38996171951
theta: 3.11585950851
speed: 14.1539392471
id: 0
t: 125

sim.py in the sim.py statecallback function, msg is

x: -19.091960907
y: 2.77482914925
theta: 2.95778465271
speed: 14.0846862793
id: 0
t: 126

sim.py in the sim.py statecallback function, msg is

x: -19.5411624908
y: 3.76492500305
theta: 3.10347270966
speed: 13.8987045288
id: 0
t: 127

sim.py in the sim.py statecallback function, msg is

x: -20.1090755463
y: 3.21681165695
theta: 3.12200522423
speed: 14.3185110092
id: 0
t: 128

222 self.state_dicts[msg.id][msg.t] is (-20.10907554626465, 3.2168116569519043, 3.1220052242279053, 14.318511009216309)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.2438352108
y: -45.4076919556
theta: 4.58802080154
speed: 14.0943727493
id: 1
t: 130
current clock is .t / rate/slowdown
5.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -21.4709377289
y: 3.07885098457
theta: 3.17330098152
speed: 13.6532392502
id: 0
t: 129

sim.py in the sim.py statecallback function, msg is

x: -21.4332294464
y: 2.73107886314
theta: 2.95342159271
speed: 14.0692100525
id: 0
t: 130

sim.py in the sim.py statecallback function, msg is

x: -22.6178874969
y: 3.66429042816
theta: 3.06239104271
speed: 13.6482315063
id: 0
t: 131

sim.py in the sim.py statecallback function, msg is

x: -22.3975124359
y: 3.1296069622
theta: 3.14002609253
speed: 14.1953754425
id: 0
t: 132

222 self.state_dicts[msg.id][msg.t] is (-22.397512435913tiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:131
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.20373821259
y: -43.7407341003
theta: 4.68368387222
speed: 13.5843009949
id: 1
t: 127

sim.py in the sim.py statecallback function, msg is

x: -3.12763166428
y: -44.5330200195
theta: 4.72292804718
speed: 13.8548908234
id: 1
t: 128

sim.py in the sim.py statecallback function, msg is

x: -3.1630179882
y: -44.7969169617
theta: 4.68370866776
speed: 13.9411029816
id: 1
t: 129

sim.py in the sim.py statecallback function, msg is

x: -3.2438352108
y: -45.4076919556
theta: 4.58802080154
speed: 14.0943727493
id: 1
t: 130

sim.py in the sim.py statecallback function, msg is

x: -2.92218255997
y: -46.834980011
theta: 4.64367246628
speed: 13.9418096542
id: 1
t: 131

sim.py in the sim.py statecallback function, msg is

x: -2.87969136238
y: -46.5464782715
theta: 4.66445732117
speed: 13.9376583099
id: 1
t: 132

222 self.state_dicts[msg.id][msg.t] is (-2.8796913623809814, -46.546478271484375, 4.664457321166992, 13.937658309936523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -22.9977054596
y: 3.39730811119
theta: 3.01423406601
speed: 13.9280471802
id: 0
t: 133
current clock is .t / rate/slowdown
5.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py message_processing,!!dwd change status to NORMAL
maneuver_negotiatir.py in the message process086, 3.1296069622039795, 3.140026092529297, 14.195375442504883)going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:137
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -22.9977054596
y: 3.39730811119
theta: 3.01423406601
speed: 13.9280471802
id: 0
t: 133

sim.py in the sim.py statecallback function, msg is

x: -24.1532917023
y: 2.70926117897
theta: 3.20973134041
speed: 13.7497406006
id: 0
t: 134

sim.py in the sim.py statecallback function, msg is

x: -24.5417346954
y: 2.77800130844
theta: 2.96560525894
speed: 13.5735368729
id: 0
t: 135

sim.py in the sim.py statecallback function, msg is

x: -24.6024990082
y: 3.39327216148
theta: 3.28315329552
speed: 13.9804620743
id: 0
t: 136

sim.py in the sim.py statecallback function, msg is

x: -25.865858078
y: 3.17861032486
theta: 3.2115418911
speed: 13.8805913925
id: 0
t: 137

222 self.state_dicts[msg.id][msg.t] is (-25.86585807800293, 3.178610324859619, 3.2115418910980225, 13.88059139251709)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.70887732506
y: -51.0116348267
theta: 4.66812229156
speed: 13.8240451813
id: 1
t: 139
current clock is .t / rate/slowdown
6.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.pying function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18644928932
y: -47.7379798889
theta: 4.73028945923
speed: 14.1155881882
id: 1
t: 133

sim.py in the sim.py statecallback function, msg is

x: -3.38796782494
y: -48.1383934021
theta: 4.65164279938
speed: 13.5457668304
id: 1
t: 134

sim.py in the sim.py statecallback function, msg is

x: -3.32115745544
y: -48.5268173218
theta: 4.73518371582
speed: 14.3255844116
id: 1
t: 135

sim.py in the sim.py statecallback function, msg is

x: -3.29628777504
y: -49.7102127075
theta: 4.64930915833
speed: 13.9325084686
id: 1
t: 136

222 self.state_dicts[msg.id][msg.t] is (-3.296287775039673, -49.71021270751953, 4.649309158325195, 13.93250846862793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.87433671951
y: -49.5639610291
theta: 4.59849596024
speed: 13.9609766006
id: 1
t: 137

sim.py in the sim.py statecallback function, msg is

x: -2.7889919281
y: -49.8965034485
theta: 4.68345212936
speed: 14.2311649323
id: 1
t: 138

sim.py in the sim.py statecallback function, msg is

x: -3.70887732506
y: -51.0116348267
theta: 4.66812229156
speed: 13.8240451813
id: 1
t: 139

sim.py in the sim.py statecallback function, msg is

x: -2.81192421913
y: -51.1169776917
theta: 4.84283161163
speed: 14.0268440247
id: 1
t: 140

222 self.state_dicts[msg.id][msg.t] is (-2.8119242191314697, -51.11697769165039, 4.842831611633301, 14.026844024658203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -27.5606079102
y: 3.50094270706
theta: 3.10389018059
speed: 13.9768333435
id: 0
t: 140
current clock is .t / rate/slowdown
6.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
i get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -26.0398254395
y: 2.65309405327
theta: 3.17835760117
speed: 13.9196224213
id: 0
t: 138

sim.py in the sim.py statecallback function, msg is

x: -26.8037414551
y: 4.01538991928
theta: 3.1828186512
speed: 13.8811435699
id: 0
t: 139

sim.py in the sim.py statecallback function, msg is

x: -27.5606079102
y: 3.50094270706
theta: 3.10389018059
speed: 13.9768333435
id: 0
t: 140

222 self.state_dicts[msg.id][msg.t] is (-27.56060791015625, 3.5009427070617676, 3.1038901805877686, 13.97683334350586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -28.3070964813
y: 3.27700519562
theta: 3.03692936897
speed: 13.7845983505
id: 0
t: 141

sim.py in the sim.py statecallback function, msg is

x: -28.719493866
y: 3.3291118145
theta: 3.1237514019
speed: 13.6496753693
id: 0
t: 142

sim.py in the sim.py statecallback function, msg is

x: -29.6379451752
y: 3.41941952705
theta: 3.16129159927
speed: 13.9180688858
id: 0
t: 143

222 self.state_dicts[msg.id][msg.t] is (-29.6379451751709, 3.419419527053833, 3.1612915992736816, 13.918068885803223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -30.0512886047
y: 3.02442884445
theta: 3.33557677269
speed: 13.7569971085
id: 0
t: 144

sim.py in the sim.py statecallback function, msg is

x: -30.6230602264
y: 3.1n spin function, finish the n times spin:141maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.83634877205
y: -52.1682472229
theta: 4.81005239487
speed: 13.8703231812
id: 1
t: 141

sim.py in the sim.py statecallback function, msg is

x: -2.70087337494
y: -52.7662963867
theta: 4.76475000381
speed: 14.1515054703
id: 1
t: 142

sim.py in the sim.py statecallback function, msg is

x: -2.97944927216
y: -52.958656311
theta: 4.67568969727
speed: 13.9621658325
id: 1
t: 143

sim.py in the sim.py statecallback function, msg is

x: -3.52144122124
y: -53.9084625244
theta: 4.65588474274
speed: 13.8677167892
id: 1
t: 144

222 self.state_dicts[msg.id][msg.t] is (-3.5214412212371826, -53.90846252441406, 4.655884742736816, 13.867716789245605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:148
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.21850252151
y: -54.4608421326
theta: 4.61488056183
speed: 13.6310071945
id: 1
t: 145

sim.py in the sim.py statecallback function, msg is

x: -3.32002997398
y: -55.0723838806
theta: 4.82883691788
speed: 13.7356748581
id: 1
t: 146

sim.py in the sim.py statecallback function, msg is

x: -3.60359883308
y: -55.4895210266
theta: 4.59010124207
speed: 14.142616272
id: 1
t: 147

sim.py in the sim.py statecallback function, msg is

x: -3.01849389076
y: -56.608341217
theta: 4.85782051086
speed: 13.5237035751
id: 1
t: 148

222 self.state_dicts[msg.id][msg.t] is (-3.018493890762329, -56.6083414049863815
theta: 3.14530086517
speed: 13.8583698273
id: 0
t: 145

sim.py in the sim.py statecallback function, msg is

x: -31.7699241638
y: 3.18828105927
theta: 3.17780971527
speed: 13.8952274323
id: 0
t: 146

222 self.state_dicts[msg.id][msg.t] is (-31.76992416381836, 3.1882810592651367, 3.177809715270996, 13.895227432250977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.32002997398
y: -55.0723838806
theta: 4.82883691788
speed: 13.7356748581
id: 1
t: 146
current clock is .t / rate/slowdown
6.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:151
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -31.5627613068
y: 3.69759964943
theta: 3.18366193771
speed: 14.2511940002
id: 0
t: 147

sim.py in the sim.py statecallback function, msg is

x: -32.6153640747
y: 2.6224770546
theta: 3.15685582161
speed: 14.0227212906
id: 0
t: 148

sim.py in the sim.py statecallback function, msg is

x: -33.2352714539
y: 3.25284576416
theta: 3.02658104897
speed: 13.4883356094
id: 0
t: 149

sim.py in the sim.py statecallback function, msg is

x: -33.3931007385
y: 3.49556422234
theta: 3.03082537651
speed: 14.1017837524
id: 0
t: 150

sim.py in the sim.py statecallback function, msg is

x: -34.3356933594
y: 3.01708030701
theta: 3.18841457367
speed: 13.9349584579
id: 0
t: 151

222 self.state_dicts[msg.id][msg.t] is (-34.335693359375, 3.017080307006836, 3.1884145736694336, 13.934958457946777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152
maneuver_negotiatir.py start the update agent s217041016, 4.857820510864258, 13.523703575134277)maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -32.6153640747
y: 2.6224770546
theta: 3.15685582161
speed: 14.0227212906
id: 0
t: 148
current clock is .t / rate/slowdown
6.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:152
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:154
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.09197402
y: -57.2296142578
theta: 4.82955694199
speed: 14.0711755753
id: 1
t: 149

sim.py in the sim.py statecallback function, msg is

x: -3.4943561554
y: -57.8900260925
theta: 4.82015562057
speed: 14.1321363449
id: 1
t: 150

sim.py in the sim.py statecallback function, msg is

x: -3.34138703346
y: -58.1799278259
theta: 4.67824649811
speed: 14.1340856552
id: 1
t: 151

sim.py in the sim.py statecallback function, msg is

x: -3.38760232925
y: -58.6824150085
theta: 4.71963500977
speed: 14.034538269
id: 1
t: 152

sim.py in the sim.py statecallback function, msg is

x: -3.44807529449
y: -59.6248245239
theta: 4.74476385117
speed: 13.8665084839
id: 1
t: 153

sim.py in the sim.py statecallback function, msg is

x: -2.87147021294
y: -59.9627189636
theta: 4.88849306107
speed: 13.707365036
id: 1
t: 154

222 self.state_dicts[msg.id][msg.t] is (-2.8714702129364014, -59.96271896362305, 4.888493061065674, 13.707365036010742)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from rotate from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -35.4562454224
y: 2.91214632988
theta: 3.11261701584
speed: 13.9591875076
id: 0
t: 152

sim.py in the sim.py statecallback function, msg is

x: -35.888710022
y: 2.92831349373
theta: 3.2074739933
speed: 13.7572364807
id: 0
t: 153

sim.py in the sim.py statecallback function, msg is

x: -36.8714065552
y: 3.54094290733
theta: 3.07251477242
speed: 13.8828392029
id: 0
t: 154

222 self.state_dicts[msg.id][msg.t] is (-36.87140655517578, 3.540942907333374, 3.072514772415161, 13.88283920288086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.87147021294
y: -59.9627189636
theta: 4.88849306107
speed: 13.707365036
id: 1
t: 154
current clock is .t / rate/slowdown
6.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -36.7880058289
y: 2.79729533195
theta: 3.24019026756
speed: 14.0466499329
id: 0
t: 155

sim.py in the sim.py statecallback function, msg is

x: -37.5084266663
y: 3.63440656662
theta: 3.10571908951
speed: 13.6113872528
id: 0
t: 156

sim.py in the sim.py statecallback function, msg is

x: -38.7434158325
y: 3.09238553047
theta: 3.02266192436
speed: 13.5575475693
id: 0
t: 157

sim.py in the sim.py statecallback function, msg is

x: -38.8708610535
y: 3.68812131882
theta: 2.99442005157
speed: 13.6914234161
id: 0
t: 158

222 self.state_dicts[msg.id][msg.t] is (-38.8708610534668, 3.6881213188171387, 2.994s funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -37.5084266663
y: 3.63440656662
theta: 3.10571908951
speed: 13.6113872528
id: 0
t: 156
current clock is .t / rate/slowdown
6.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18527078629
y: -60.8117446899
theta: 4.7959485054
speed: 14.1467142105
id: 1
t: 155

sim.py in the sim.py statecallback function, msg is

x: -3.99471640587
y: -61.1496620178
theta: 4.85173797607
speed: 13.8367404938
id: 1
t: 156

sim.py in the sim.py statecallback function, msg is

x: -3.24438333511
y: -62.0395736694
theta: 4.75971698761
speed: 13.993885994
id: 1
t: 157

sim.py in the sim.py statecallback function, msg is

x: -3.35957717896
y: -62.6000061035
theta: 4.71276187897
speed: 13.7073554993
id: 1
t: 158

sim.py in the sim.py statecallback function, msg is

x: -2.80237913132
y: -63.4283065796
theta: 4.71526622772
speed: 14.1399440765
id: 1
t: 159

222 self.state_dicts[msg.id][msg.t] is (-2.8023791313171387, -63.428306579589844, 4.715266227722168, 14.139944076538086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:162
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the updat420051574707, 13.691423416137695)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.45288825035
y: -65.4559631348
theta: 4.77529859543
speed: 13.8123159409
id: 1
t: 162
current clock is .t / rate/slowdown
7.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -39.0321311951
y: 3.71751642227
theta: 3.11616706848
speed: 14.1534519196
id: 0
t: 159

sim.py in the sim.py statecallback function, msg is

x: -40.0927200317
y: 3.3221616745
theta: 3.18456363678
speed: 14.1350193024
id: 0
t: 160

sim.py in the sim.py statecallback function, msg is

x: -40.5438232422
y: 3.25862216949
theta: 2.99957942963
speed: 13.9686450958
id: 0
t: 161

sim.py in the sim.py statecallback function, msg is

x: -41.5232620239
y: 3.02898454666
theta: 3.30615615845
speed: 13.6724357605
id: 0
t: 162

222 self.state_dicts[msg.id][msg.t] is (-41.52326202392578, 3.028984546661377, 3.3061561584472656, 13.672435760498047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the e function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.41334009171
y: -64.0549163818
theta: 4.87301111221
speed: 14.1523952484
id: 1
t: 160

sim.py in the sim.py statecallback function, msg is

x: -3.51747059822
y: -64.6745147705
theta: 4.73936653137
speed: 13.8940153122
id: 1
t: 161

sim.py in the sim.py statecallback function, msg is

x: -3.45288825035
y: -65.4559631348
theta: 4.77529859543
speed: 13.8123159409
id: 1
t: 162

sim.py in the sim.py statecallback function, msg is

x: -3.2585132122
y: -65.4752960205
theta: 4.65039730072
speed: 13.8958024979
id: 1
t: 163

222 self.state_dicts[msg.id][msg.t] is (-3.2585132122039795, -65.47529602050781, 4.650397300720215, 13.89580249786377)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -42.3960227966
y: 3.55682730675
theta: 3.05394864082
speed: 14.3237638474
id: 0
t: 164
current clock is .t / rate/slowdown
7.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.94445443153
y: -66.2954940796
theta: 4.89075613022
speed: 13.7992610931
id: 1
t: 164

sim.py in the sim.py statecallback function, msg is

x: -2.91726756096
y: -66.6533813477
theta: 4.76493787766
speed: 13.9453382492
id: 1
t: 165

sim.py in the sim.py statecallback function, msg is

x: -3.12302303314
y: -66.9071578979
theta: 4.68823194504
speed: 13.8302364349
id: 1
t: 166

sim.py in the sim.py statecallback function, msg is

x: -3.30082988739
y: -68.4696350098
theta: 4.64874076843
speed: 13.8165283203
id: 1
t: 167

222 self.state_dicts[msg.id][msg.t] is (-3.3008298873901367, -68.46963500976562, 4.648740768432617, 13.8165283203125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update fupdate agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -41.6456947327
y: 3.23463535309
theta: 3.03460240364
speed: 14.1272697449
id: 0
t: 163

sim.py in the sim.py statecallback function, msg is

x: -42.3960227966
y: 3.55682730675
theta: 3.05394864082
speed: 14.3237638474
id: 0
t: 164

sim.py in the sim.py statecallback function, msg is

x: -42.9131202698
y: 3.40518188477
theta: 3.19980835915
speed: 13.8504705429
id: 0
t: 165

sim.py in the sim.py statecallback function, msg is

x: -43.5150756836
y: 3.09070086479
theta: 2.9737033844
speed: 13.9950046539
id: 0
t: 166

222 self.state_dicts[msg.id][msg.t] is (-43.51507568359375, 3.09070086479187, 2.973703384399414, 13.995004653930664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.87556838989
y: -69.6712036133
theta: 4.69646120071
speed: 13.8858213425
id: 1
t: 169
current clock is .t / rate/slowdown
7.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -44.5949172974
y: 3.13121557236
theta: 3.11784148216
speed: 13.9660148621
id: 0
t: 167

sim.py in the sim.py statecallback function, msg is

x: -44.8295783997
y: 3.25245165825
theta: 3.12886142731
speed: 13.5407037735
id: 0
t: 168

sim.py in the sim.py statecallback function, msg is

x: -45.4295730591
y: 3.26180100441
theta: 3.01823091507
speed: 13.7448043823
id: 0
t: 169

sim.py in the sim.py statecallback function, msg is

x: -46.3370933533
y: 2.75038933754
theta: 3.20614624023
speed: 13.4618701935
id: 0
t: 170

222 self.state_dicts[msg.id][msg.t] is (-46.337093353271484, 2.750389337539673, 3.206146240234375, 13.461870193481445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171
maneuver_negotiatir.py start the update agent state from ros funtiunction maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:168
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:171
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.06399655342
y: -68.6170120239
theta: 4.5823802948
speed: 13.6993741989
id: 1
t: 168

sim.py in the sim.py statecallback function, msg is

x: -2.87556838989
y: -69.6712036133
theta: 4.69646120071
speed: 13.8858213425
id: 1
t: 169

sim.py in the sim.py statecallback function, msg is

x: -3.49915337563
y: -70.2069091797
theta: 4.86286497116
speed: 13.4798135757
id: 1
t: 170

sim.py in the sim.py statecallback function, msg is

x: -3.0188395977
y: -70.501373291
theta: 4.8385052681
speed: 13.8936491013
id: 1
t: 171

sim.py in the sim.py statecallback function, msg is

x: -2.88069629669
y: -71.6050262451
theta: 4.68266105652
speed: 14.0745105743
id: 1
t: 172

222 self.state_dicts[msg.id][msg.t] is (-2.8806962966918945, -71.60502624511719, 4.682661056518555, 14.07451057434082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -47.1358642578
y: 3.52454924583
theta: 3.27815246582
speed: 13.6740312576
id: 0
t: 172
current clock is .t / rate/slowdown
7.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent staton
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -46.4996147156
y: 3.59615254402
theta: 3.2524728775
speed: 14.0250530243
id: 0
t: 171

sim.py in the sim.py statecallback function, msg is

x: -47.1358642578
y: 3.52454924583
theta: 3.27815246582
speed: 13.6740312576
id: 0
t: 172

222 self.state_dicts[msg.id][msg.t] is (-47.1358642578125, 3.5245492458343506, 3.2781524658203125, 13.674031257629395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -48.0954055786
y: 3.86467599869
theta: 3.04681396484
speed: 14.179142952
id: 0
t: 173

sim.py in the sim.py statecallback function, msg is

x: -48.8484687805
y: 3.52764725685
theta: 3.18988013268
speed: 14.0564918518
id: 0
t: 174

sim.py in the sim.py statecallback function, msg is

x: -49.1577758789
y: 3.29442119598
theta: 3.06807518005
speed: 14.1597146988
id: 0
t: 175

222 self.state_dicts[msg.id][msg.t] is (-49.15777587890625, 3.2944211959838867, 3.068075180053711, 14.159714698791504)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -49.6486930847
y: 3.23779368401
theta: 3.1503713131
speed: 13.5587568283
id: 0
t: 176

sim.py in the sim.py statecallback function, msg is

x: -50.7794532776
y: 3.19703531265
theta: 3.01144003868
speed: 13.9089813232
id: 0
t: 177

222 self.state_dicts[msg.id][msg.t] is (-50.77945327758789, 3.197035312652588, 3.0114400386810303, 13.908981323242188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_me from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.30523705482
y: -72.3298873901
theta: 4.67900753021
speed: 13.8320827484
id: 1
t: 173

sim.py in the sim.py statecallback function, msg is

x: -3.56587100029
y: -72.4112167358
theta: 4.71986341476
speed: 13.7844867706
id: 1
t: 174

sim.py in the sim.py statecallback function, msg is

x: -3.67855286598
y: -72.7577590942
theta: 4.73257732391
speed: 13.8414525986
id: 1
t: 175

222 self.state_dicts[msg.id][msg.t] is (-3.6785528659820557, -72.75775909423828, 4.732577323913574, 13.841452598571777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.71256971359
y: -73.8400650024
theta: 4.66132211685
speed: 13.9244585037
id: 1
t: 176

sim.py in the sim.py statecallback function, msg is

x: -3.34559941292
y: -74.044380188
theta: 4.62579536438
speed: 14.0417289734
id: 1
t: 177

sim.py in the sim.py statecallback function, msg is

x: -3.31867289543
y: -74.9705200195
theta: 4.56156158447
speed: 14.2180252075
id: 1
t: 178

sim.py in the sim.py statecallback function, msg is

x: -3.30638837814
y: -75.5537109375
theta: 4.79986524582
speed: 13.7776069641
id: 1
t: 179

222 self.state_dicts[msg.id][msg.t] is (-3.3063883781433105, -75.5537109375, 4.799865245819092, 13.777606964111328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -52.058795929
y: 3.26427507401
theta: 3.10084748268
speed: 13.8324317932
id: 0
t: 180
current clock is .t / rate/slowdown
8.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtioneasurements has x, y, theta, speed, id and t
x: -3.34559941292
y: -74.044380188
theta: 4.62579536438
speed: 14.0417289734
id: 1
t: 177
current clock is .t / rate/slowdown
7.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:179
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -51.3361167908
y: 3.0333147049
theta: 3.15050792694
speed: 13.8854656219
id: 0
t: 178

sim.py in the sim.py statecallback function, msg is

x: -51.3982505798
y: 3.35353183746
theta: 3.13236188889
speed: 13.7816200256
id: 0
t: 179

sim.py in the sim.py statecallback function, msg is

x: -52.058795929
y: 3.26427507401
theta: 3.10084748268
speed: 13.8324317932
id: 0
t: 180

222 self.state_dicts[msg.id][msg.t] is (-52.05879592895508, 3.264275074005127, 3.1008474826812744, 13.83243179321289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:184
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:185
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.04765129089
y: -79.2516479492
theta: 4.73296165466
speed: 13.7805461884
id: 
leave the update function 
in spin function, finish the n times spin:181
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:182
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.87076306343
y: -75.8608856201
theta: 4.71322536469
speed: 13.9801778793
id: 1
t: 180

sim.py in the sim.py statecallback function, msg is

x: -3.75304913521
y: -76.3471755981
theta: 4.53625917435
speed: 14.0125999451
id: 1
t: 181

sim.py in the sim.py statecallback function, msg is

x: -3.96358275414
y: -77.4390487671
theta: 4.70900297165
speed: 13.6771631241
id: 1
t: 182

sim.py in the sim.py statecallback function, msg is

x: -2.77875256538
y: -77.5775299072
theta: 4.64402627945
speed: 13.8849716187
id: 1
t: 183

222 self.state_dicts[msg.id][msg.t] is (-2.778752565383911, -77.57752990722656, 4.644026279449463, 13.884971618652344)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -57.1010704041
y: 3.38511037827
theta: 3.23809599876
speed: 13.8925771713
id: 0
t: 187
current clock is .t / rate/slowdown
8.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189
maneuver_negotiatir.py start the update agent state1
t: 185
current clock is .t / rate/slowdown
8.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -53.4579429626
y: 2.71879529953
theta: 3.23315882683
speed: 13.8271398544
id: 0
t: 181

sim.py in the sim.py statecallback function, msg is

x: -53.1739730835
y: 2.91374278069
theta: 3.16773748398
speed: 13.6625595093
id: 0
t: 182

sim.py in the sim.py statecallback function, msg is

x: -53.8742523193
y: 3.54486393929
theta: 3.11016798019
speed: 13.9591941833
id: 0
t: 183

sim.py in the sim.py statecallback function, msg is

x: -55.3042106628
y: 3.21140003204
theta: 3.12442541122
speed: 14.246969223
id: 0
t: 184

sim.py in the sim.py statecallback function, msg is

x: -55.7135009766
y: 2.93559288979
theta: 3.15002679825
speed: 13.6745262146
id: 0
t: 185

222 self.state_dicts[msg.id][msg.t] is (-55.7135009765625, 2.9355928897857666, 3.150026798248291, 13.67452621459961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -56.0377120972
y: 3.61730384827
theta: 3.09380340576
speed: 13.4783620834
id: 0
t: 186

sim.py in the sim.py statecallback function, msg is

x: -57.1010704041
y: 3.38511037827
theta: 3.23809599876
speed: 13.8925771713
id: 0
t: 187

sim.py in the sim.py statecallback function, msg is

x: -57.22423172
y: 2.97335553169
theta: 3.22596549988
speed: 13.9243011475
id: 0
t: 188

sim.py in the sim.py statecallback function, msg is

x: -57.735710144
y: 3.31845831871
theta: 3.13168263435
speed: 13.7405290604
id: 0
t: 189

sim.py in the sim.py statecallback function, msg is

x: -58.5690078735
y: 3.40586400032
theta: 3.11785435677
speed: 13.7779722214
id: 0
t: 190

222 self.state_dicts[msg.id][msg.t] is (-58.569007873535156, 3.4058640003204346, 3.117854356765747, 13.777972221374512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1 from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18497443199
y: -79.1480712891
theta: 4.62062120438
speed: 13.7900800705
id: 1
t: 184

sim.py in the sim.py statecallback function, msg is

x: -3.04765129089
y: -79.2516479492
theta: 4.73296165466
speed: 13.7805461884
id: 1
t: 185

sim.py in the sim.py statecallback function, msg is

x: -3.16978287697
y: -80.3406143188
theta: 4.66011857986
speed: 14.0607147217
id: 1
t: 186

sim.py in the sim.py statecallback function, msg is

x: -2.73049926758
y: -81.0455322266
theta: 4.89945030212
speed: 13.9682235718
id: 1
t: 187

sim.py in the sim.py statecallback function, msg is

x: -3.09101819992
y: -80.8772354126
theta: 4.33424568176
speed: 13.3924674988
id: 1
t: 188

sim.py in the sim.py statecallback function, msg is

x: -2.77479195595
y: -82.0500946045
theta: 4.85770559311
speed: 13.9529285431
id: 1
t: 189

222 self.state_dicts[msg.id][msg.t] is (-2.774791955947876, -82.05009460449219, 4.857705593109131, 13.95292854309082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:192
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.91923904419
y: -82.2570037842
theta: 4.74858283997
speed: 14.1362819672
id: 1
t: 190

sim.py in the sim.py statecallback function, msg is

x: -3.50136899948
y: -82.8361053467
theta: 4.61571407318
speed: 14.0669631958
id: 1
t: 191

sim.py in the sim.py statecallback function, msg is

x: -2.99779343605
y: -83.0932846069
theta: 4.58969116211
speed: 13.6639051437
id: 1
t: 192

sim.py in the sim.py statecallback function, msg is

x: -2.99104428291
y: -84.3330688477
theta: 4.73152303696
speed: 13.9990673065
id: 1
t: 193

sim.py in the sim.py statecallback function, msg is

x: -3.57398986816
y: -85.4957809448
theta: 4.81757974625
speed: 14.0745630264
id: 1
t: 194

222 self.state_dicts[msg.id][msg.t] is (-3.5739898681640625, -85.49578094482422, 4.817579746246338, 14.074563026428223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195
maneuver_neg):
leave the update function 
in spin function, finish the n times spin:191
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.99104428291
y: -84.3330688477
theta: 4.73152303696
speed: 13.9990673065
id: 1
t: 193
current clock is .t / rate/slowdown
8.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:194
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -59.2239875793
y: 2.97622299194
theta: 3.1127448082
speed: 13.882610321
id: 0
t: 191

sim.py in the sim.py statecallback function, msg is

x: -59.6436195374
y: 3.48435688019
theta: 3.10667967796
speed: 13.8515071869
id: 0
t: 192

sim.py in the sim.py statecallback function, msg is

x: -60.3808670044
y: 3.48062682152
theta: 3.25676465034
speed: 14.1275043488
id: 0
t: 193

sim.py in the sim.py statecallback function, msg is

x: -61.4536476135
y: 3.61980938911
theta: 3.19291830063
speed: 14.1581344604
id: 0
t: 194

222 self.state_dicts[msg.id][msg.t] is (-61.45364761352539, 3.61980938911438, 3.192918300628662, 14.158134460449219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -61.6738204956
y: 3.18964099884
theta: 3.21025633812
speed: 14.039185524
id: 0
t: 195

sim.py in the sim.py statecallback function, msg is

x: -62.5396766663
y: 3.0248670578
theta: 3.06536102295
speed: 13.6218490601
id: 0
t: 196

sim.py in the sim.py statecallback function, msg is

x: -62.8675346375
y: 2.84193229675
theta: 3.141974210otiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -61.6738204956
y: 3.18964099884
theta: 3.21025633812
speed: 14.039185524
id: 0
t: 195
current clock is .t / rate/slowdown
8.66666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:197
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.17026972771
y: -85.8325119019
theta: 4.72121334076
speed: 13.9451169968
id: 1
t: 195

sim.py in the sim.py statecallback function, msg is

x: -2.5177090168
y: -85.9944229126
theta: 4.72304296494
speed: 13.497376442
id: 1
t: 196

sim.py in the sim.py statecallback function, msg is

x: -3.50199961662
y: -86.3533554077
theta: 4.62665987015
speed: 14.0130634308
id: 1
t: 197

sim.py in the sim.py statecallback function, msg is

x: -2.90122961998
y: -87.207901001
theta: 4.78158807755
speed: 13.8117961884
id: 1
t: 198

222 self.state_dicts[msg.id][msg.t] is (-2.9012296199798584, -87.20790100097656, 4.781588077545166, 13.811796188354492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:199
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:200
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:201
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.88913655281
y: -88.1669692993
theta: 4.64493846893
speed: 13.707942009
id: 1
t: 199

sim.py in the sim.py statecallback function, msg is

x: -3.1966958046
y: -88.6460800171
theta: 4.66857481003
speed: 14.3147001266
id: 1
t: 200

sim.py in the sim.py statecallback function, msg is

x: -3.32545375824
y: -89.2413253784
theta: 4.6759595871
speed: 13.6344013214
id: 1
t: 201

222 self.state_dicts[msg.id][msg.t] is (-3.325453758239746, -89.74
speed: 13.9150266647
id: 0
t: 197

222 self.state_dicts[msg.id][msg.t] is (-62.86753463745117, 2.8419322967529297, 3.1419742107391357, 13.915026664733887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.1966958046
y: -88.6460800171
theta: 4.66857481003
speed: 14.3147001266
id: 1
t: 200
current clock is .t / rate/slowdown
8.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:201
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -63.1608161926
y: 3.62979483604
theta: 3.17215037346
speed: 14.0193004608
id: 0
t: 198

sim.py in the sim.py statecallback function, msg is

x: -64.3124771118
y: 3.1736369133
theta: 3.04623794556
speed: 13.8204421997
id: 0
t: 199

sim.py in the sim.py statecallback function, msg is

x: -64.4720687866
y: 3.41883206367
theta: 3.17887830734
speed: 14.1507587433
id: 0
t: 200

sim.py in the sim.py statecallback function, msg is

x: -65.8386688232
y: 3.28956127167
theta: 3.16054868698
speed: 13.7945394516
id: 0
t: 201

222 self.state_dicts[msg.id][msg.t] is (-65.83866882324219, 3.2895612716674805, 3.160548686981201, 13.794539451599121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:202
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the updat24132537841797, 4.675959587097168, 13.634401321411133)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -65.4850692749
y: 3.24423837662
theta: 3.20639276505
speed: 14.0241880417
id: 0
t: 202
current clock is .t / rate/slowdown
8.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:204
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:205
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.05080986023
y: -89.0152893066
theta: 4.68111038208
speed: 14.2061672211
id: 1
t: 202

sim.py in the sim.py statecallback function, msg is

x: -3.15234303474
y: -90.2517852783
theta: 4.63756847382
speed: 14.3141736984
id: 1
t: 203

sim.py in the sim.py statecallback function, msg is

x: -2.6047513485
y: -91.1655426025
theta: 4.68410396576
speed: 13.9944152832
id: 1
t: 204

sim.py in the sim.py statecallback function, msg is

x: -2.81668782234
y: -92.1181869507
theta: 4.75380373001
speed: 14.1095190048
id: 1
t: 205

sim.py in the sim.py statecallback function, msg is

x: -3.02654933929
y: -92.5267181396
theta: 4.64147758484
speed: 14.0204992294
id: 1
t: 206

222 self.state_dicts[msg.id][msg.t] is (-3.0265493392944336, -92.52671813964844, 4.641477584838867, 14.020499229431152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -65.4850692749
y: 3.24423837662
theta: 3.20639276505
speed: 14.0241880417
id: 0
t: 202

sim.py in the sim.py statecallback function, msg is

x: -66.5336914062
y: 3.40988397598
theta: 3.16566586494
speed: 13.8617477417
id: 0
t: 203

sim.py in the sim.py statecallback function, msg is

x: -66.9994125366
y: 3.67061090469
theta: 3.20689558983
speed: 13.7149591446
id: 0
t: 204

sim.py in the sim.py statecallback function, msg is

x: -67.3586883545
y: 3.12989115715
theta: 3.17340564728
speed: 13.3554725647
id: 0
t: 205

222 self.state_dicts[msg.id][msg.t] is (-67.35868835449219, 3.1298911571502686, 3.173405647277832, 13.355472564697266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:208
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:209
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -68.1253662109
y: 3.33341741562
theta: 3.29828214645
speed: 13.781993866
id: 0
t: 206

sim.py in the sim.py statecallback function, msg is

x: -69.0107955933
y: 4.03595018387
theta: 3.06299138069
speed: 13.7714128494
id: 0
t: 207

sim.py in the sim.py statecallback function, msg is

x: -69.9603347778
y: 3.35998606682
theta: 3.24828147888
speed: 13.9079914093
id: 0
t: 208

maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.32363390923
y: -93.9476089478
theta: 4.8965845108
speed: 13.9913606644
id: 1
t: 209
current clock is .t / rate/slowdown
9.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -70.7350387573
y: 3.94810771942
theta: 3.12390017509
speed: 13.6718940735
id: 0
t: 209

222 self.state_dicts[msg.id][msg.t] is (-70.73503875732422, 3.9481077194213867, 3.1239001750946045, 13.671894073486328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -70.9638061523
y: 3.63946270943
theta: 3.15345716476
speed: 13.8514041901
id: 0
t: 210
current clock is .t / rate/slowdown
9.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:212
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:213
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.13563156128
y: -92.8183517456
theta: 4.79553794861
speed: 13.8426036835
id: 1
t: 207

sim.py in the sim.py statecallback function, msg is

x: -2.97374558449
y: -93.6155548096
theta: 4.59558343887
speed: 13.8367795944
id: 1
t: 208

sim.py in the sim.py statecallback function, msg is

x: -3.32363390923
y: -93.9476089478
theta: 4.8965845108
speed: 13.9913606644
id: 1
t: 209

sim.py in the sim.py statecallback function, msg is

x: -3.67664074898
y: -94.8035202026
theta: 4.54803085327
speed: 13.8814601898
id: 1
t: 210

sim.py in the sim.py statecallback function, msg is

x: -3.25713992119
y: -95.084487915
theta: 4.61135625839
speed: 14.3100414276
id: 1
t: 211

sim.py in the sim.py statecallback function, msg is

x: -2.87822628021
y: -96.3363342285
theta: 4.68213415146
speed: 13.7604703903
id: 1
t: 212

sim.py in the sim.py statecallback function, msg is

x: -4.09785699844
y: -96.5121688843
theta: 4.70899963379
speed: 13.8627471924
id: 1
t: 213

222 self.state_dicts[msg.id][msg.t] is (-4.0978569984436035, -96.51216888427734, 4.7089996337890625, 13.862747192382812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:214
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215
me the update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:210
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -70.9638061523
y: 3.63946270943
theta: 3.15345716476
speed: 13.8514041901
id: 0
t: 210

sim.py in the sim.py statecallback function, msg is

x: -72.2235488892
y: 3.49860572815
theta: 2.97551870346
speed: 13.9125671387
id: 0
t: 211

sim.py in the sim.py statecallback function, msg is

x: -72.5005950928
y: 3.1220164299
theta: 3.0492067337
speed: 13.8647203445
id: 0
t: 212

sim.py in the sim.py statecallback function, msg is

x: -72.4269866943
y: 2.61814618111
theta: 3.0717830658
speed: 13.9506416321
id: 0
t: 213

222 self.state_dicts[msg.id][msg.t] is (-72.42698669433594, 2.6181461811065674, 3.0717830657958984, 13.950641632080078)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:214
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:216
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: -73.1372528076
y: 2.92442011833
theta: 3.08197307587
speed: 13.791100502
id: 0
t: 214

sim.py in the sim.py statecallback function, msg is

x: -73.8603973389
y: 3.24126076698
theta: 2.97502279282
speed: 13.9226865768
id: 0
t: 215

sim.py in the sim.py statecallback function, msg is

x: -74.8810272217
y: 3.54666137695
theta: 3.18280100822
speed: 13.4567775726
id: 0
t: 216

222 self.state_dicts[msg.id][msg.t] is (-74.88102722167969, 3.546661376953125, 3.1828010082244873, 13.456777572631836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatiraneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -75.8246536255
y: 3.61838650703
theta: 3.16954612732
speed: 13.9512748718
id: 0
t: 218
current clock is .t / rate/slowdown
9.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:219
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.51934981346
y: -97.2583007812
theta: 4.80316305161
speed: 13.9323444366
id: 1
t: 214

sim.py in the sim.py statecallback function, msg is

x: -2.62350416183
y: -97.3357315063
theta: 4.61271095276
speed: 13.6960763931
id: 1
t: 215

sim.py in the sim.py statecallback function, msg is

x: -3.18602752686
y: -98.423210144
theta: 4.5785369873
speed: 13.9983606339
id: 1
t: 216

sim.py in the sim.py statecallback function, msg is

x: -3.42213225365
y: -99.3167114258
theta: 4.62258577347
speed: 13.7819128036
id: 1
t: 217

sim.py in the sim.py statecallback function, msg is

x: -3.74092292786
y: -99.8862304688
theta: 4.68397521973
speed: 13.9763851166
id: 1
t: 218

sim.py in the sim.py statecallback function, msg is

x: -2.73814511299
y: -99.8043670654
theta: 4.67760038376
speed: 13.8214941025
id: 1
t: 219

222 self.state_dicts[msg.id][msg.t] is (-2.738145112991333, -99.80436706542969, 4.677600383758545, 13.821494102478027)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -77.3779830933
y: 3.26661300659
theta: 3.08719825745
speed: 14.0138626099
id: 0
t: 220
current clock is .t / rate/slowdown
9.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver.py in the clock function  the ros_measurements has x, y, theta, speed, id and tmaneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

x: -3.42213225365
y: -99.3167114258
theta: 4.62258577347
speed: 13.7819128036
id: 1
t: 217
current clock is .t / rate/slowdown
9.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:219
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:220
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.11821174622
y: -101.851089478
theta: 4.80135202408
speed: 14.1654281616
id: 1
t: 220
current clock is .t / rate/slowdown
9.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221
_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221
... logging to /home/lu/.ros/log/c071a842-fedb-11e8-af00-000c291801fc/roslaunch-ubuntu-3381.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:45725/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [3391][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to c071a842-fedb-11e8-af00-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [3412][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [3415][0m
[1mprocess[rviz-3]: started with pid [3430][0m
[1mprocess[car0-4]: started with pid [3431][0m
[1mprocess[car1-5]: started with pid [3432][0m
[1mprocess[cloud-6]: started with pid [3433][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
