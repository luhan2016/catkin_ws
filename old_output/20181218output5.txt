sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.685920000076
222 self.state_dicts[msg.id][msg.t] is (3.595409870147705, -64.33463287353516, 1.641564130783081, 13.910567283630371)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (3.3595082759857178, -63.90671157836914, 1.595475435256958, 13.59902286529541)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fee65bae1b8>


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fee65bc93f8>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (3.2105071544647217, -61.915096282958984, 1.7052583694458008, 13.8517484664917)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.35636782646
y: 59.8578834534
theta: 4.80215644836
speed: 14.0523509979
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: -3.35636782646
y: 59.8578834534
thesim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.726402997971


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (-3.4074490070343018, 64.3359375, 4.833729267120361, 13.780522346496582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f37ce26d170>


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f37ce287d88>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (-3.226346492767334, 61.685855865478516, 4.7806315422058105, 13.884260177612305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 2.91353464127
y: -60.2082023621
theta: 1.61012709141
speed: 13.971288681
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:8




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: 2.91353464127
y: -60.2082023621
theta: 1.61012709141
speed: 13.971288681
id: 0
t: 8
xxx after update is x: 3.41820931435
y: -59.7192420959
theta: 1.52966117859
speed: 14.0110416412
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in ta: 4.80215644836
speed: 14.0523509979
id: 1
t: 8
xxx after update is x: -3.51895260811
y: 59.346534729
theta: 4.78861427307
speed: 13.9894046783
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.51895260811
y: 59.346534729
theta: 4.78861427307
speed: 13.9894046783
id: 1
t: 9
xxx after update is x: -3.28125691414
y: 58.6425933838
theta: 4.66229200363
speed: 14.2976398468
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.444444444444






self.maneuver_requested None
xxx before update is x: -3.28125691414
y: 58.6425933838
theta: 4.66229200363
speed: 14.2976398468
id: 1
t: 10
xxx after update is x: -2.96606421471
y: 57.6382408142
theta: 4.56194353104
speed: 13.9178647995
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: -2.96606421471
y: 57.6382408142
theta: 4.56194353104
speed: 13.9178647995
id: 1
t: 11
xxx after update is x: -3.31766438484
y: 57.5869560242
theta: 4.49570560455
speed: 13.6045427322
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: -3.31766438484
y: 57.5869560242
theta: 4.49570560455
speed: 13.6045427322
id: 1
t: 12
xxx after update is x: -3.30301594734
y: 57.2047119141
theta: 4.7540435791
speed: 13.7920331955
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.30301594734
y: 57.2047119141
theta: 4.7540435791
speed: 13.7920331955
id: 1
t: 13
xxx after update is x: -3.16732549667
y: 56.6011199951
theta: 4.54486751556
speed: 13.5853586197
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:14




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16732549667
y: 56.6011199951
theta: 4.54486751556
speed: 13.5853586197
id: 1
t: 14
xxx after update is x: -4.09300088882
y: 55.5773200989
theta: 4.71797657013
speed: 13.933134079
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:15




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -4.09300088882
y: 55.5773200989
theta: 4.71797657013
speed: 13.933134079
id: 1
t: 15
xxx after update is x: -3.33751893044
y: 55.5715293884
theta: 4.6323723793
speed: 14.2705764771
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:16




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: -3.33751893044
y: 55.5715293884
theta: 4.6323723793
speed: 14.2705764771the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.41820931435
y: -59.7192420959
theta: 1.52966117859
speed: 14.0110416412
id: 0
t: 9
xxx after update is x: 3.27655482292
y: -58.7939682007
theta: 1.68305242062
speed: 13.6281547546
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.444444444444






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: 3.27655482292
y: -58.7939682007
theta: 1.68305242062
speed: 13.6281547546
id: 0
t: 10
xxx after update is x: 3.39007163048
y: -58.4114990234
theta: 1.63411879539
speed: 14.1239213943
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: 3.39007163048
y: -58.4114990234
theta: 1.63411879539
speed: 14.1239213943
id: 0
t: 11
xxx after update is x: 2.94725751877
y: -57.0353851318
theta: 1.76015257835
speed: 13.8514213562
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: 2.94725751877
y: -57.0353851318
theta: 1.76015257835
speed: 13.8514213562
id: 0
t: 12
xxx after update is x: 3.28180241585
y: -57.2367858887
theta: 1.57161903381
speed: 13.6453514099
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: 3.28180241585
y: -57.2367858887
theta: 1.57161903381
speed: 13.6453514099
id: 0
t: 13
xxx after update is x: 3.31978583336
y: -56.9331245422
theta: 1.60541200638
speed: 13.8351373672
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.31978583336
y: -56.9331245422
theta: 1.60541200638
speed: 13.8351373672
id: 0
t: 14
xxx after update is x: 3.23975372314
y: -55.3671112061
theta: 1.54764282703
speed: 13.9187688828
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.23975372314
y: -55.3671112061
theta: 1.54764282703
speed: 13.9187688828
id: 0
t: 15
xxx after update is x: 3.03521227837
y: -54.9940338135
theta: 1.46668767929
speed: 13.9396686554
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:16




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: 3.03521227837
y: -54.9940338135
theta: 1.46668767929
speed: 13.9396686554
id: 0
t: 16
xxx after update is x: 3.28650856018
y: -54.6754112244
theta: 1.47659122944
speed: 13.808257103
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18


xxx before update is
id: 1
t: 16
xxx after update is x: -3.46903562546
y: 53.9573135376
theta: 4.87864208221
speed: 14.0528240204
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: -3.46903562546
y: 53.9573135376
theta: 4.87864208221
speed: 14.0528240204
id: 1
t: 17
xxx after update is x: -3.45359826088
y: 53.879032135
theta: 4.67832326889
speed: 13.8397169113
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: -3.45359826088
y: 53.879032135
theta: 4.67832326889
speed: 13.8397169113
id: 1
t: 18
xxx after update is x: -3.1591334343
y: 53.0826301575
theta: 4.6342997551
speed: 13.8859643936
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.844444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: -3.1591334343
y: 53.0826301575
theta: 4.6342997551
speed: 13.8859643936
id: 1
t: 19
xxx after update is x: -3.15912604332
y: 52.5119819641
theta: 4.70066595078
speed: 14.1034288406
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.36763577234078054, 0.305185751497169]
222 self.state_dicts[msg.id][msg.t] is (3.499413013458252, -52.66475296020508, 1.5325266122817993, 13.489582061767578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: -3.15912604332
y: 52.5119819641
theta: 4.70066595078
speed: 14.1034288406
id: 1
t: 20
xxx after update is x: -3.88648152351
y: 52.2470436096
theta: 4.59337997437
speed: 14.2196884155
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: -3.88648152351
y: 52.2470436096
theta: 4.59337997437
speed: 14.2196884155
id: 1
t: 21
xxx after update is x: -3.54061222076
y: 51.3439102173
theta: 4.76391458511
speed: 13.675368309
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.54061222076
y: 51.3439102173
theta: 4.76391458511
speed: 13.675368309
id: 1
t: 22
xxx after update is x: -3.36220836639
y: 51.4477119446
theta: 4.5442070961
speed: 13.903424263
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: -3.36220836639
y: 51.4477119446
theta: 4.5442070961
speed: 13.903424263
id: 1
t: 23
xxx after update is x: -2.82979154587
y: 50.5604782104
theta: 4.84283018112
speed: 13.9948596954
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update funct x: 3.28650856018
y: -54.6754112244
theta: 1.47659122944
speed: 13.808257103
id: 0
t: 17
xxx after update is x: 3.07703208923
y: -54.1428642273
theta: 1.37079143524
speed: 13.7783527374
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.8






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: 3.07703208923
y: -54.1428642273
theta: 1.37079143524
speed: 13.7783527374
id: 0
t: 18
xxx after update is x: 3.51408195496
y: -53.1239204407
theta: 1.68327629566
speed: 14.1284809113
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: 3.51408195496
y: -53.1239204407
theta: 1.68327629566
speed: 14.1284809113
id: 0
t: 19
xxx after update is x: 3.49941301346
y: -52.6647529602
theta: 1.53252661228
speed: 13.4895820618
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4221478052465185, 0.342840458694479]
222 self.state_dicts[msg.id][msg.t] is (-3.159126043319702, 52.51198196411133, 4.7006659507751465, 14.103428840637207)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.49941301346
y: -52.6647529602
theta: 1.53252661228
speed: 13.4895820618
id: 0
t: 20
xxx after update is x: 3.24631977081
y: -52.3800086975
theta: 1.61557114124
speed: 13.8290119171
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:21




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: 3.24631977081
y: -52.3800086975
theta: 1.61557114124
speed: 13.8290119171
id: 0
t: 21
xxx after update is x: 3.25809645653
y: -51.0574188232
theta: 1.41975200176
speed: 13.852640152
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.25809645653
y: -51.0574188232
theta: 1.41975200176
speed: 13.852640152
id: 0
t: 22
xxx after update is x: 3.61831021309
y: -50.6673812866
theta: 1.65172934532
speed: 13.6644916534
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.61831021309
y: -50.6673812866
theta: 1.65172934532
speed: 13.6644916534
id: 0
t: 23
xxx after update is x: 3.09859800339
y: -50.1921463013
theta: 1.59603798389
speed: 13.7872447968
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:24




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: 3.09859800339
y: -50.1921463013
theta: 1.59603798389
speed: 13.7872447968
id: 0
t: 24
xxx after update is x: 3.66860342026
y: -49.3704795837
theta: 1.64266729355
speed: 13.7456846237
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update functiion
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: -2.82979154587
y: 50.5604782104
theta: 4.84283018112
speed: 13.9948596954
id: 1
t: 24
xxx after update is x: -3.2860429287
y: 49.4775466919
theta: 4.8653087616
speed: 13.6941833496
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: -3.2860429287
y: 49.4775466919
theta: 4.8653087616
speed: 13.6941833496
id: 1
t: 25
xxx after update is x: -3.58025503159
y: 49.1635818481
theta: 4.68044185638
speed: 13.7981500626
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: -3.58025503159
y: 49.1635818481
theta: 4.68044185638
speed: 13.7981500626
id: 1
t: 26
xxx after update is x: -3.26913309097
y: 48.2008361816
theta: 4.86472320557
speed: 13.7572317123
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.2






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: -3.26913309097
y: 48.2008361816
theta: 4.86472320557
speed: 13.7572317123
id: 1
t: 27
xxx after update is x: -3.13878297806
y: 47.5813980103
theta: 4.88486814499
speed: 14.0015163422
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.13878297806
y: 47.5813980103
theta: 4.88486814499
speed: 14.0015163422
id: 1
t: 28
xxx after update is x: -3.53340339661
y: 47.1362342834
theta: 4.76697874069
speed: 13.6471986771
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: -3.53340339661
y: 47.1362342834
theta: 4.76697874069
speed: 13.6471986771
id: 1
t: 29
xxx after update is x: -3.34412026405
y: 46.5951957703
theta: 4.62527513504
speed: 13.7570724487
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: -3.34412026405
y: 46.5951957703
theta: 4.62527513504
speed: 13.7570724487
id: 1
t: 30
xxx after update is x: -3.03727269173
y: 45.9032821655
theta: 4.61411333084
speed: 13.5895051956
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.03727269173
y: 45.9032821655
theta: 4.61411333084
speed: 13.5895051956
id: 1
t: 31
xxx after update is x: -3.8765707016
y: 45.4642105103
theta: 4.56196975708
speed: 13.6270151138
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:32




going to the update function
sim.py in the sim.py update function 
ton 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.66860342026
y: -49.3704795837
theta: 1.64266729355
speed: 13.7456846237
id: 0
t: 25
xxx after update is x: 2.78802990913
y: -48.6018791199
theta: 1.66097009182
speed: 13.570438385
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.15555555556






self.maneuver_requested None
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: 2.78802990913
y: -48.6018791199
theta: 1.66097009182
speed: 13.570438385
id: 0
t: 26
xxx after update is x: 3.2944355011
y: -48.3968734741
theta: 1.80715191364
speed: 13.9531526566
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.2944355011
y: -48.3968734741
theta: 1.80715191364
speed: 13.9531526566
id: 0
t: 27
xxx after update is x: 3.82985448837
y: -47.6889419556
theta: 1.53685879707
speed: 13.4437332153
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:28




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.82985448837
y: -47.6889419556
theta: 1.53685879707
speed: 13.4437332153
id: 0
t: 28
xxx after update is x: 3.1777536869
y: -47.1056404114
theta: 1.47742295265
speed: 13.5167379379
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.1777536869
y: -47.1056404114
theta: 1.47742295265
speed: 13.5167379379
id: 0
t: 29
xxx after update is x: 3.45325541496
y: -46.6715316772
theta: 1.58000826836
speed: 13.8865270615
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: 3.45325541496
y: -46.6715316772
theta: 1.58000826836
speed: 13.8865270615
id: 0
t: 30
xxx after update is x: 3.32839155197
y: -45.9553413391
theta: 1.52631866932
speed: 14.1887779236
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.32839155197
y: -45.9553413391
theta: 1.52631866932
speed: 14.1887779236
id: 0
t: 31
xxx after update is x: 3.3522799015
y: -45.5455322266
theta: 1.45820617676
speed: 13.9056081772
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:32




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.3522799015
y: -45.5455322266
theta: 1.45820617676
speed: 13.9056081772
id: 0
t: 32
xxx after update is x: 3.36210656166
y: -44.2685508728
theta: 1.61569869518
speed: 13.9121980667
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: 3.36210656166
y: -44.268550argetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33


xxx before update is x: -3.8765707016
y: 45.4642105103
theta: 4.56196975708
speed: 13.6270151138
id: 1
t: 32
xxx after update is x: -3.10920357704
y: 44.3962059021
theta: 4.78354215622
speed: 14.0655269623
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3294152846449762, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3621065616607666, -44.268550872802734, 1.6156986951828003, 13.912198066711426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: -3.10920357704
y: 44.3962059021
theta: 4.78354215622
speed: 14.0655269623
id: 1
t: 33
xxx after update is x: -3.7932407856
y: 43.5466194153
theta: 4.68835926056
speed: 13.9047851562
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.51111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: -3.7932407856
y: 43.5466194153
theta: 4.68835926056
speed: 13.9047851562
id: 1
t: 34
xxx after update is x: -2.96705031395
y: 43.2570381165
theta: 4.75513648987
speed: 13.6361970901
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


xxx before update is x: -2.96705031395
y: 43.2570381165
theta: 4.75513648987
speed: 13.6361970901
id: 1
t: 35
xxx after update is x: -3.57795572281
y: 42.7840576172
theta: 4.64926671982
speed: 14.2033672333
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: -3.57795572281
y: 42.7840576172
theta: 4.64926671982
speed: 14.2033672333
id: 1
t: 36
xxx after update is x: -2.90416955948
y: 42.5384101868
theta: 4.78210878372
speed: 13.7733201981
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: -2.90416955948
y: 42.5384101868
theta: 4.78210878372
speed: 13.7733201981
id: 1
t: 37
xxx after update is x: -3.15675139427
y: 41.3579406738
theta: 4.51534891129
speed: 14.0904684067
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: -3.15675139427
y: 41.3579406738
theta: 4.51534891129
speed: 14.0904684067
id: 1
t: 38
xxx after update is x: -2.90483570099
y: 40.3638572693
theta: 4.83354234695
speed: 13.6374616623
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: -2.90483570099
y: 40.3638572693
theta: 4.83354234695
speed:8728
theta: 1.61569869518
speed: 13.9121980667
id: 0
t: 33
xxx after update is x: 3.6930141449
y: -43.9840393066
theta: 1.6143014431
speed: 13.7955589294
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.51111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: 3.6930141449
y: -43.9840393066
theta: 1.6143014431
speed: 13.7955589294
id: 0
t: 34
xxx after update is x: 3.12692070007
y: -43.7678565979
theta: 1.60882282257
speed: 13.6669826508
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.12692070007
y: -43.7678565979
theta: 1.60882282257
speed: 13.6669826508
id: 0
t: 35
xxx after update is x: 2.853921175
y: -42.3226051331
theta: 1.46868252754
speed: 13.6224632263
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36


risk is [0.4579425250643004, 0.34688688491647296]
222 self.state_dicts[msg.id][msg.t] is (-3.577955722808838, 42.7840576171875, 4.649266719818115, 14.203367233276367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: 2.853921175
y: -42.3226051331
theta: 1.46868252754
speed: 13.6224632263
id: 0
t: 36
xxx after update is x: 3.60515141487
y: -41.5437278748
theta: 1.71294987202
speed: 14.0415725708
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: 3.60515141487
y: -41.5437278748
theta: 1.71294987202
speed: 14.0415725708
id: 0
t: 37
xxx after update is x: 3.29769659042
y: -41.2900466919
theta: 1.63466918468
speed: 13.774810791
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: 3.29769659042
y: -41.2900466919
theta: 1.63466918468
speed: 13.774810791
id: 0
t: 38
xxx after update is x: 3.06367278099
y: -40.8002548218
theta: 1.49825704098
speed: 13.6585245132
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: 3.06367278099
y: -40.8002548218
theta: 1.49825704098
speed: 13.6585245132
id: 0
t: 39
xxx after update is x: 3.00382590294
y: -39.9509315491
theta: 1.52495312691
speed: 14.2565345764
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: 3.00382590294
y: -39.9509315491
theta: 1.52495312691
speed: 14.2565345764
id: 0
t: 40
xxx after update is x: 3.21300530434
y: -39.9842300415
theta: 1.63172590733
speed: 13.9404973984
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed 13.6374616623
id: 1
t: 39
xxx after update is x: -3.08658599854
y: 40.3245887756
theta: 4.74108886719
speed: 14.0669221878
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: -3.08658599854
y: 40.3245887756
theta: 4.74108886719
speed: 14.0669221878
id: 1
t: 40
xxx after update is x: -3.29221391678
y: 39.9924430847
theta: 4.57230567932
speed: 13.8556280136
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29221391678
y: 39.9924430847
theta: 4.57230567932
speed: 13.8556280136
id: 1
t: 41
xxx after update is x: -2.58840203285
y: 38.7572059631
theta: 4.77608919144
speed: 13.7660970688
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42


aaaaaa
aaaaaabbbbb
risk is [0.3962007693329182, 0]
222 self.state_dicts[msg.id][msg.t] is (3.238675355911255, -38.932708740234375, 1.4508428573608398, 14.216662406921387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.86666666667






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.58840203285
y: 38.7572059631
theta: 4.77608919144
speed: 13.7660970688
id: 1
t: 42
xxx after update is x: -3.23787093163
y: 37.8056030273
theta: 4.63474225998
speed: 13.677532196
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23787093163
y: 37.8056030273
theta: 4.63474225998
speed: 13.677532196
id: 1
t: 43
xxx after update is x: -3.22188162804
y: 37.7475204468
theta: 4.61152076721
speed: 13.4672842026
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:44




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.22188162804
y: 37.7475204468
theta: 4.61152076721
speed: 13.4672842026
id: 1
t: 44
xxx after update is x: -3.3019824028
y: 36.9479026794
theta: 4.68958330154
speed: 13.7820291519
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:45




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: -3.3019824028
y: 36.9479026794
theta: 4.68958330154
speed: 13.7820291519
id: 1
t: 45
xxx after update is x: -3.20276498795
y: 36.5592689514
theta: 4.85781860352
speed: 13.7188310623
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: -3.20276498795
y: 36.5592689514
theta: 4.85781860352
speed: 13.7188310623
id: 1
t: 46
xxx after update is x: -3.89762639999
y: 36.1519012451
theta: 4.7094078064
speed: 13.983039856
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


goi:xxxxxxxxx
xxx before update is x: 3.21300530434
y: -39.9842300415
theta: 1.63172590733
speed: 13.9404973984
id: 0
t: 41
xxx after update is x: 3.23867535591
y: -38.9327087402
theta: 1.45084285736
speed: 14.2166624069
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.86666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: 3.23867535591
y: -38.9327087402
theta: 1.45084285736
speed: 14.2166624069
id: 0
t: 42
xxx after update is x: 3.26043319702
y: -38.3354759216
theta: 1.45813417435
speed: 13.7578992844
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: 3.26043319702
y: -38.3354759216
theta: 1.45813417435
speed: 13.7578992844
id: 0
t: 43
xxx after update is x: 3.59090638161
y: -38.1308860779
theta: 1.52133285999
speed: 13.8373250961
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: 3.59090638161
y: -38.1308860779
theta: 1.52133285999
speed: 13.8373250961
id: 0
t: 44
xxx after update is x: 3.43458032608
y: -37.0248985291
theta: 1.47219741344
speed: 13.7581920624
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: 3.43458032608
y: -37.0248985291
theta: 1.47219741344
speed: 13.7581920624
id: 0
t: 45
xxx after update is x: 3.24383997917
y: -36.6696128845
theta: 1.63330626488
speed: 14.0227022171
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: 3.24383997917
y: -36.6696128845
theta: 1.63330626488
speed: 14.0227022171
id: 0
t: 46
xxx after update is x: 3.69320487976
y: -36.0438919067
theta: 1.7115200758
speed: 13.9035701752
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: 3.69320487976
y: -36.0438919067
theta: 1.7115200758
speed: 13.9035701752
id: 0
t: 47
xxx after update is x: 3.17935180664
y: -35.2390480042
theta: 1.68511557579
speed: 14.0647983551
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.17935180664
y: -35.2390480042
theta: 1.68511557579
speed: 14.0647983551
id: 0
t: 48
xxx after update is x: 3.71101045609
y: -34.9101104736
theta: 1.68621253967
speed: 13.7261962891
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: 3.71101045609
y: -34.9101104736
theta: 1.68621253ng to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.89762639999
y: 36.1519012451
theta: 4.7094078064
speed: 13.983039856
id: 1
t: 47
xxx after update is x: -3.25110888481
y: 35.5679931641
theta: 4.70907020569
speed: 13.6789093018
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.25110888481
y: 35.5679931641
theta: 4.70907020569
speed: 13.6789093018
id: 1
t: 48
xxx after update is x: -3.08925580978
y: 34.0832138062
theta: 4.65127182007
speed: 14.0706043243
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08925580978
y: 34.0832138062
theta: 4.65127182007
speed: 14.0706043243
id: 1
t: 49
xxx after update is x: -3.44376087189
y: 33.9203033447
theta: 4.84509897232
speed: 13.8248624802
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:50




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: -3.44376087189
y: 33.9203033447
theta: 4.84509897232
speed: 13.8248624802
id: 1
t: 50
xxx after update is x: -3.37007522583
y: 33.583114624
theta: 4.59200239182
speed: 13.8468551636
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.26666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: -3.37007522583
y: 33.583114624
theta: 4.59200239182
speed: 13.8468551636
id: 1
t: 51
xxx after update is x: -3.07911324501
y: 32.6864089966
theta: 4.66365528107
speed: 14.224316597
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.07911324501
y: 32.6864089966
theta: 4.66365528107
speed: 14.224316597
id: 1
t: 52
xxx after update is x: -3.28994750977
y: 32.6909675598
theta: 4.74576377869
speed: 13.6900491714
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:53


aaaaaa
aaaaaabbbbb
risk is [0.3532150067065276, 0]
222 self.state_dicts[msg.id][msg.t] is (3.7899067401885986, -32.2906379699707, 1.5388634204864502, 13.881734848022461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: -3.28994750977
y: 32.6909675598
theta: 4.74576377869
speed: 13.6900491714
id: 1
t: 53
xxx after update is x: -2.91825938225
y: 31.6127948761
theta: 4.7335934639
speed: 13.6580524445
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.91825938225
y: 31.6127948761
theta: 4.7335934639
speed: 13.6580524445
i967
speed: 13.7261962891
id: 0
t: 49
xxx after update is x: 2.74167561531
y: -34.0403060913
theta: 1.53945636749
speed: 14.2558879852
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.22222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: 2.74167561531
y: -34.0403060913
theta: 1.53945636749
speed: 14.2558879852
id: 0
t: 50
xxx after update is x: 4.19213199615
y: -33.1799125671
theta: 1.37060916424
speed: 13.7582998276
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: 4.19213199615
y: -33.1799125671
theta: 1.37060916424
speed: 13.7582998276
id: 0
t: 51
xxx after update is x: 3.41666865349
y: -33.1934394836
theta: 1.39895141125
speed: 14.1321411133
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.30425865234028043, 0.3443415587895949]
222 self.state_dicts[msg.id][msg.t] is (-3.079113245010376, 32.68640899658203, 4.6636552810668945, 14.224316596984863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: 3.41666865349
y: -33.1934394836
theta: 1.39895141125
speed: 14.1321411133
id: 0
t: 52
xxx after update is x: 3.78990674019
y: -32.29063797
theta: 1.53886342049
speed: 13.881734848
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.78990674019
y: -32.29063797
theta: 1.53886342049
speed: 13.881734848
id: 0
t: 53
xxx after update is x: 3.18385744095
y: -31.2848453522
theta: 1.75682580471
speed: 13.6221065521
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:54




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: 3.18385744095
y: -31.2848453522
theta: 1.75682580471
speed: 13.6221065521
id: 0
t: 54
xxx after update is x: 3.23714566231
y: -31.2362327576
theta: 1.43116474152
speed: 13.6818695068
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: 3.23714566231
y: -31.2362327576
theta: 1.43116474152
speed: 13.6818695068
id: 0
t: 55
xxx after update is x: 3.19466423988
y: -30.58061409
theta: 1.62587678432
speed: 13.785574913
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: 3.19466423988
y: -30.58061409
theta: 1.62587678432
speed: 13.785574913
id: 0
t: 56
xxx after update is x: 2.80928087234
y: -29.7500324249
theta: 1.536023736
speed: 13.8997001648
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave d: 1
t: 54
xxx after update is x: -2.93439865112
y: 31.6155548096
theta: 4.86729049683
speed: 14.2470035553
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:55




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.93439865112
y: 31.6155548096
theta: 4.86729049683
speed: 14.2470035553
id: 1
t: 55
xxx after update is x: -3.13192224503
y: 30.1895065308
theta: 4.86301422119
speed: 14.4307756424
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:56




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: -3.13192224503
y: 30.1895065308
theta: 4.86301422119
speed: 14.4307756424
id: 1
t: 56
xxx after update is x: -3.34293818474
y: 29.9090061188
theta: 4.66686725616
speed: 14.0184907913
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: -3.34293818474
y: 29.9090061188
theta: 4.66686725616
speed: 14.0184907913
id: 1
t: 57
xxx after update is x: -3.16278457642
y: 29.0963230133
theta: 4.61962747574
speed: 14.0048122406
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: -3.16278457642
y: 29.0963230133
theta: 4.61962747574
speed: 14.0048122406
id: 1
t: 58
xxx after update is x: -3.45165133476
y: 28.3846588135
theta: 4.68251132965
speed: 13.8003892899
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.62222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: -3.45165133476
y: 28.3846588135
theta: 4.68251132965
speed: 13.8003892899
id: 1
t: 59
xxx after update is x: -3.08113050461
y: 27.8613452911
theta: 4.98230695724
speed: 13.6533288956
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: -3.08113050461
y: 27.8613452911
theta: 4.98230695724
speed: 13.6533288956
id: 1
t: 60
xxx after update is x: -3.13703465462
y: 27.2009391785
theta: 4.75021314621
speed: 13.9309215546
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.13703465462
y: 27.2009391785
theta: 4.75021314621
speed: 13.9309215546
id: 1
t: 61
xxx after update is x: -3.18264222145
y: 26.7340888977
theta: 4.71053600311
speed: 13.8347902298
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:62




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: -3.18264222145
y: 26.73408889the update function xxx before update is x: 2.80928087234
y: -29.7500324249
theta: 1.536023736
speed: 13.8997001648
id: 0
t: 57
xxx after update is x: 3.10978984833
y: -29.6245479584
theta: 1.75094377995
speed: 13.7883777618
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.57777777778






self.maneuver_requested None

in spin function, finish the n times spin:58


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: 3.10978984833
y: -29.6245479584
theta: 1.75094377995
speed: 13.7883777618
id: 0
t: 58
xxx after update is x: 3.44715738297
y: -28.3476524353
theta: 1.47394633293
speed: 14.3083744049
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: 3.44715738297
y: -28.3476524353
theta: 1.47394633293
speed: 14.3083744049
id: 0
t: 59
xxx after update is x: 3.51147818565
y: -27.9884433746
theta: 1.6117067337
speed: 13.9230175018
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: 3.51147818565
y: -27.9884433746
theta: 1.6117067337
speed: 13.9230175018
id: 0
t: 60
xxx after update is x: 3.15420031548
y: -27.1519412994
theta: 1.60680544376
speed: 13.9542388916
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.15420031548
y: -27.1519412994
theta: 1.60680544376
speed: 13.9542388916
id: 0
t: 61
xxx after update is x: 3.22857737541
y: -26.8592338562
theta: 1.42325305939
speed: 14.0481462479
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:62




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: 3.22857737541
y: -26.8592338562
theta: 1.42325305939
speed: 14.0481462479
id: 0
t: 62
xxx after update is x: 3.89066767693
y: -26.0664253235
theta: 1.59929227829
speed: 13.6381731033
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: 3.89066767693
y: -26.0664253235
theta: 1.59929227829
speed: 13.6381731033
id: 0
t: 63
xxx after update is x: 3.53084445
y: -25.6014099121
theta: 1.65760588646
speed: 12.9689064026
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.35949836383880795, 0.3997197573419835]
222 self.state_dicts[msg.id][msg.t] is (-3.6406679153442383, 25.404958724975586, 4.535471439361572, 14.25007152557373)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.53084445
y: -25.6014099121
theta: 1.65760588646
speed: 12.9689064026
id: 0
t: 64
xxx after update is x: 3.03598237038
y: -24.8620281219
theta: 1.43815815449
speed: 13.3382577896
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65



77
theta: 4.71053600311
speed: 13.8347902298
id: 1
t: 62
xxx after update is x: -3.19378137589
y: 26.449338913
theta: 4.86987400055
speed: 13.959485054
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3787000995525031, 0]
222 self.state_dicts[msg.id][msg.t] is (3.890667676925659, -26.066425323486328, 1.599292278289795, 13.63817310333252)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19378137589
y: 26.449338913
theta: 4.86987400055
speed: 13.959485054
id: 1
t: 63
xxx after update is x: -3.64066791534
y: 25.404958725
theta: 4.53547143936
speed: 14.2500715256
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:64




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.64066791534
y: 25.404958725
theta: 4.53547143936
speed: 14.2500715256
id: 1
t: 64
xxx after update is x: -3.75538945198
y: 24.8837127686
theta: 4.57076644897
speed: 13.7221813202
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: -3.75538945198
y: 24.8837127686
theta: 4.57076644897
speed: 13.7221813202
id: 1
t: 65
xxx after update is x: -3.05162882805
y: 24.6267681122
theta: 4.73702478409
speed: 13.580406189
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.93333333333






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.05162882805
y: 24.6267681122
theta: 4.73702478409
speed: 13.580406189
id: 1
t: 66
xxx after update is x: -3.55634903908
y: 23.3504886627
theta: 4.5168261528
speed: 14.1490497589
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:67


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: -3.55634903908
y: 23.3504886627
theta: 4.5168261528
speed: 14.1490497589
id: 1
t: 67
xxx after update is x: -3.3386297226
y: 22.9271907806
theta: 4.70885419846
speed: 14.3367156982
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69


xxx before update is x: -3.3386297226
y: 22.9271907806
theta: 4.70885419846
speed: 14.3367156982
id: 1
t: 68
xxx after update is x: -2.77374172211
y: 22.8468399048
theta: 4.79022407532
speed: 13.7338685989
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: -2.77374172211
y: 22.8468399048
theta: 4.79022407532
speed: 13.7338685989
id: 1
t: 69
xxx after update is x: -2.9016866684
y: 22.0643444061
theta: 4.56919145584
speed: 13.5169210434
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state f
going to the update functionmaneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.88888888889






self.maneuver_requested None

sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: 3.03598237038
y: -24.8620281219
theta: 1.43815815449
speed: 13.3382577896
id: 0
t: 65
xxx after update is x: 3.16095948219
y: -24.1438407898
theta: 1.72992777824
speed: 12.7296972275
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.16095948219
y: -24.1438407898
theta: 1.72992777824
speed: 12.7296972275
id: 0
t: 66
xxx after update is x: 3.19031977654
y: -23.9591178894
theta: 1.56432044506
speed: 12.7771930695
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:67




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: 3.19031977654
y: -23.9591178894
theta: 1.56432044506
speed: 12.7771930695
id: 0
t: 67
xxx after update is x: 3.33821725845
y: -22.9518871307
theta: 1.7068772316
speed: 12.6141328812
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.33821725845
y: -22.9518871307
theta: 1.7068772316
speed: 12.6141328812
id: 0
t: 68
xxx after update is x: 3.41029429436
y: -22.2500743866
theta: 1.58658599854
speed: 12.5154266357
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.41029429436
y: -22.2500743866
theta: 1.58658599854
speed: 12.5154266357
id: 0
t: 69
xxx after update is x: 2.96202898026
y: -22.1414699554
theta: 1.60636520386
speed: 11.7548599243
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:70




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: 2.96202898026
y: -22.1414699554
theta: 1.60636520386
speed: 11.7548599243
id: 0
t: 70
xxx after update is x: 3.40454983711
y: -21.3311290741
theta: 1.4147810936
speed: 12.0787773132
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.40454983711
y: -21.3311290741
theta: 1.4147810936
speed: 12.0787773132
id: 0
t: 71
xxx after update is x: 2.54457449913
y: -20.9084815979
theta: 1.51335608959
speed: 11.4564085007
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:72




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:73


xxx before update is x: 2.54457449913
y: -20.9084815979
theta: 1.51335608959
speed: 11.4564085007
id: 0
t: 72
xxx after update is x: 3.72728657722
y: -20.2138214111
theta: 1.4349603653
speed: 11.6782522202
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication betrom ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: -2.9016866684
y: 22.0643444061
theta: 4.56919145584
speed: 13.5169210434
id: 1
t: 70
xxx after update is x: -3.67193388939
y: 21.3466300964
theta: 4.65758800507
speed: 14.1384210587
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.67193388939
y: 21.3466300964
theta: 4.65758800507
speed: 14.1384210587
id: 1
t: 71
xxx after update is x: -3.37505292892
y: 20.4995365143
theta: 4.76059627533
speed: 13.7717237473
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:72




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.37505292892
y: 20.4995365143
theta: 4.76059627533
speed: 13.7717237473
id: 1
t: 72
xxx after update is x: -3.72446084023
y: 19.3763561249
theta: 4.65004968643
speed: 14.3321676254
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:73


aaaaaa
aaaaaabbbbb
risk is [0.29507021386145244, 0]
222 self.state_dicts[msg.id][msg.t] is (3.7272865772247314, -20.213821411132812, 1.4349603652954102, 11.678252220153809)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.72446084023
y: 19.3763561249
theta: 4.65004968643
speed: 14.3321676254
id: 1
t: 73
xxx after update is x: -2.96216511726
y: 19.2111911774
theta: 4.88393831253
speed: 13.5830974579
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:74


Received -->>: 
current clock is 3.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.28888888889', 'Sender': '0', 'Time': '3.28888888889', 'IntendedCourse': 'left', 'Position': ['3.117314577102661', ' -19.8702392578125', ' 1.6714481115341187'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,3.28888888889,(3.117314577102661, -19.8702392578125, 1.6714481115341187),11,1,3.28888888889,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.146172839506
sender travel direction is:  north
sender earliest entering time is:  1.81504883001
sender last entering time is:  2.23655136652
sender last leaving time is:  4.44011771655
my entering time is:  0.992934159832
my leaving time is:  2.91969548016
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.28888888889
self.communication_details == 0
sending DENY,1,3.28888888889,(-3.051628828048706, 24.626768112182617, 4.737024784088135),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave thween the two cars $$$$$$$$$$$$$$$$$$$$$$$


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.24444444444






self.maneuver_requested None
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: 3.72728657722
y: -20.2138214111
theta: 1.4349603653
speed: 11.6782522202
id: 0
t: 73
xxx after update is x: 3.1173145771
y: -19.8702392578
theta: 1.67144811153
speed: 11.1455984116
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 3.28888888889
!!!!after check statue the self.tag is [3.2888888888888888, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.28888888889

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.28888888889,(3.117314577102661, -19.8702392578125, 1.6714481115341187),11,1,3.28888888889,0,left
!!!!change state to get
GET,0,3.28888888889,(3.117314577102661, -19.8702392578125, 1.6714481115341187),11,1,3.28888888889,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.28888888889
self.communication_details == 0
sending GET,0,3.28888888889,(3.117314577102661, -19.8702392578125, 1.6714481115341187),11,1,3.28888888889,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 3.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.28888888889', 'Position': ['(-3.051628828048706', ' 24.626768112182617', ' 4.737024784088135)'], 'Type': 'DENY'}
car 0 received DENY,1,3.28888888889,(-3.051628828048706, 24.626768112182617, 4.737024784088135),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.1173145771
y: -19.8702392578
theta: 1.67144811153
speed: 11.1455984116
id: 0
t: 74
xxx after update is x: 3.12680673599
y: -20.0213623047
theta: 1.57649362087
speed: 10.9040021896
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
membership is [3.2888888888888888, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.2888888888888888, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




leave the update function 
in spin function, finish the n times spin:75




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: 3.12680673599
y: -20.0213623047
theta: 1.57649362087
speed: 10.9040021896
id: 0
t: 75
xxx after update is x: 2.98712992668
y: -19.2507801056
theta: 1.81428158283
speed: 10.66547966
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: 2.98712992668
y: -19.2507801056
theta: 1.81428158283
speed: 10.66547966
id: 0
t: 76
xxx after update is x: 3.65607261658
y: -18.4686355591
theta: 1.60318553448
speed: 10.5991983414
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: 3.65607261658
y: -18.4686355591
theta: 1.60318553448
speed: 10.5991983414
id: 0
t: 77
xxx after update is x: 2.81277871132
y: -17.2474212646
theta: 1.63291728497
speed: 10.3551845551
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: 2.81277871132
y: -17.2474212646
theta: 1.63291728497
speed: 10.3551845551
id: 0
t: 78
xxx after update is x: 3.05523467064
y: -17.9801902771
theta: 1.71105110645
speed: 9.86557579041
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.05523467064
y: -17.9801902771
theta: 1.71105110645
speed: 9.86557579041
id: 0
t: 79
xxx after update is x: 3.34984993935
y: -17.5209465027
theta: 1.49980294704
speed: 9.67734909058
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:80


aaaaaa
risk is [0.46681782937861604, 0.3127145784734106]
222 self.state_dicts[msg.id][msg.t] is (-3.91117525100708, 15.50939655303955, 4.630491733551025, 13.803958892822266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.34984993935
y: -17.5209465027
theta: 1.49980294704
speed: 9.67734909058
id: 0
t: 80
xxx after update is x: 3.27858400345
y: -16.6937141418
theta: 1.57488894463
speed: 9.53682613373
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:81




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: 3.27858400345
y: -16.6937141418
theta: 1.57488894463
speed: 9.53682613373
id: 0
t: 81
xxx after update is x: 3.18760585785
y: -16.0952472687
theta: 1.58569669724
speed: 9.15409660339
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.64444444444






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.6444444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.64444444444
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.64444444444
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.64444444444,(3.187605857849121, -16.095247268676758, 1.5856966972351074),9,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.64444444444
self.communication_details == 0
sending RELEASE,0,3.64444444444,(3.187605857849121, -16.095247268676758, 1.5856966972351074),9,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatie update function xxx before update is x: -2.96216511726
y: 19.2111911774
theta: 4.88393831253
speed: 13.5830974579
id: 1
t: 74
xxx after update is x: -3.32577776909
y: 18.37682724
theta: 4.70969009399
speed: 13.893787384
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:75


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.33333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32577776909
y: 18.37682724
theta: 4.70969009399
speed: 13.893787384
id: 1
t: 75
xxx after update is x: -2.62166261673
y: 18.0877628326
theta: 4.71869945526
speed: 14.1171550751
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:76




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: -2.62166261673
y: 18.0877628326
theta: 4.71869945526
speed: 14.1171550751
id: 1
t: 76
xxx after update is x: -3.15210771561
y: 16.9293041229
theta: 4.71802425385
speed: 13.8055763245
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.15210771561
y: 16.9293041229
theta: 4.71802425385
speed: 13.8055763245
id: 1
t: 77
xxx after update is x: -3.31210207939
y: 16.985458374
theta: 4.57549619675
speed: 14.0550451279
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:78




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: -3.31210207939
y: 16.985458374
theta: 4.57549619675
speed: 14.0550451279
id: 1
t: 78
xxx after update is x: -3.57024860382
y: 15.7606048584
theta: 4.42385673523
speed: 13.5926361084
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: -3.57024860382
y: 15.7606048584
theta: 4.42385673523
speed: 13.5926361084
id: 1
t: 79
xxx after update is x: -3.91117525101
y: 15.509396553
theta: 4.63049173355
speed: 13.8039588928
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: -3.91117525101
y: 15.509396553
theta: 4.63049173355
speed: 13.8039588928
id: 1
t: 80
xxx after update is x: -3.35546588898
y: 14.7776470184
theta: 4.90980625153
speed: 13.8973827362
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: -3.35546588898
y: 14.7776470184
theta: 4.90980625153
speed: 13.8973827362
id: 1
t: 81
xxx after update is x: -3.58930397034
y: 14.4655170441
theta: 4.64696931839
speed: 13.7677459717
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 3.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '3.64444444444', 'Position': ['(3.187605857849121', ' -16.095247268676758', ' 1.5856966972351074)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.64444444444,(3.187605857849121, -16.095247268676758, 1.5856966972351074),9,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: -3.58930397034
y: 14.4655170441
theta: 4.64696931839
speed: 13.7677459717
id: 1
t: 82
xxx after update is x: -3.04118657112
y: 13.5980129242
theta: 4.59270238876
speed: 13.8025445938
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.68888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.04118657112
y: 13.5980129242
theta: 4.59270238876
speed: 13.8025445938
id: 1
t: 83
xxx after update is x: -2.92410802841
y: 13.4346389771
theta: 4.71182966232
speed: 13.8127040863
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84


aaaaaa
aaaaaabbbbb
risk is [0.5566645574554264, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2146191596984863, -15.578105926513672, 1.458599328994751, 8.827733039855957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.92410802841
y: 13.4346389771
theta: 4.71182966232
speed: 13.8127040863
id: 1
t: 84
xxx after update is x: -2.80922532082
y: 12.6333417892
theta: 4.86927986145
speed: 13.5031862259
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: -2.80922532082
y: 12.6333417892
theta: 4.86927986145
speed: 13.5031862259
id: 1
t: 85
xxx after update is x: -3.05193376541
y: 11.3934345245
theta: 4.66255950928
speed: 13.6339082718
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: -3.05193376541
y: 11.3934345245
theta: 4.66255950928
speed: 13.6339082718
id: 1
t: 86
xxx after update is x: -3.13778734207
y: 11.5874605179
theta: 4.53116464615
speed: 13.9841480255
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: -3.13778734207
y: 11.5874605179
theta: 4.53116464615
speed: 13.9841480255
id: 1
t: 87
xxx after update is x: -3.53145885468
y: 10.7238063812
theta: 4.54979085922
speed: 13.7519006729
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxxr.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.18760585785
y: -16.0952472687
theta: 1.58569669724
speed: 9.15409660339
id: 0
t: 82
xxx after update is x: 3.32372379303
y: -15.7992887497
theta: 1.66514086723
speed: 9.24204158783
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:83


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.32372379303
y: -15.7992887497
theta: 1.66514086723
speed: 9.24204158783
id: 0
t: 83
xxx after update is x: 3.2146191597
y: -15.5781059265
theta: 1.45859932899
speed: 8.82773303986
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85


xxx before update is x: 3.2146191597
y: -15.5781059265
theta: 1.45859932899
speed: 8.82773303986
id: 0
t: 84
xxx after update is x: 3.67305088043
y: -15.3377256393
theta: 1.5345916748
speed: 8.72715473175
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: 3.67305088043
y: -15.3377256393
theta: 1.5345916748
speed: 8.72715473175
id: 0
t: 85
xxx after update is x: 3.31898498535
y: -14.1169166565
theta: 1.57153916359
speed: 8.59249782562
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: 3.31898498535
y: -14.1169166565
theta: 1.57153916359
speed: 8.59249782562
id: 0
t: 86
xxx after update is x: 3.16737723351
y: -14.0454311371
theta: 1.4168459177
speed: 8.43794536591
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.16737723351
y: -14.0454311371
theta: 1.4168459177
speed: 8.43794536591
id: 0
t: 87
xxx after update is x: 3.33970165253
y: -14.3595933914
theta: 1.65700376034
speed: 7.72540283203
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:88




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: 3.33970165253
y: -14.3595933914
theta: 1.65700376034
speed: 7.72540283203
id: 0
t: 88
xxx after update is x: 3.31078934669
y: -13.5224533081
theta: 1.5838098526
speed: 7.88351964951
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: 3.31078934669
y: -13.5224533081
theta: 1.5838098526
speed: 7.88351964951
id: 0
t: 89
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.0

maneuver_negotiatir.py get membership, in the 
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: -3.53145885468
y: 10.7238063812
theta: 4.54979085922
speed: 13.7519006729
id: 1
t: 88
xxx after update is x: -2.63068985939
y: 10.278260231
theta: 4.61944484711
speed: 14.0146865845
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: -2.63068985939
y: 10.278260231
theta: 4.61944484711
speed: 14.0146865845
id: 1
t: 89
xxx after update is x: -3.22055721283
y: 9.60576534271
theta: 4.59775543213
speed: 13.727353096
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6984184550056491, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5002756118774414, -13.13801097869873, 1.4870643615722656, 7.186376094818115)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 4.0




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.28888888889', 'Sender': '0', 'Time': '4.0', 'IntendedCourse': 'left', 'Position': ['3.5002756118774414', ' -13.13801097869873', ' 1.4870643615722656'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.177777777778
sender travel direction is:  north
sender earliest entering time is:  1.12427746218
sender last entering time is:  2.17777777778
sender last leaving time is:  4.5510760342
my entering time is:  0.332948438009
my leaving time is:  1.56811909824
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.0
self.communication_details == 0
sending DENY,1,4.0,(-3.041186571121216, 13.598012924194336, 4.592702388763428),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 4.0




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '7', 'Sender': '0', 'TagID': '1', 'Time': '4.0', 'Position': ['(3.5002756118774414', ' -13.13801097869873', ' 1.4870643615722656)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.0






self.maneuver_requested None
xxx before update is x: -3.22055721283
y: 9.60576534271
theta: 4.59775543213
speed: 13.727353096
id: 1
t: 90
xxx after update is x: -3.43920922279
y: 8.51552200317
theta: 4.47689008713
speed: 14.3398189545
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spiget_MR function, start
membership is [3.9555555555555557, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0,left
!!!!change state to get
GET,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.0
self.communication_details == 0
sending GET,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0,left to car 1 from car 0
Received -->>: 
current clock is 4.0




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.0', 'Position': ['(-3.041186571121216', ' 13.598012924194336', ' 4.592702388763428)'], 'Type': 'DENY'}
car 0 received DENY,1,4.0,(-3.041186571121216, 13.598012924194336, 4.592702388763428),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.9555555555555557, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.9555555555555557, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




xxx after update is x: 3.50027561188
y: -13.1380109787
theta: 1.48706436157
speed: 7.18637609482
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.0






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.9555555555555557, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.95555555556
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.0
self.communication_details == 0
sending RELEASE,0,4.0,(3.5002756118774414, -13.13801097869873, 1.4870643615722656),7,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.50027561188
y: -13.1380109787
theta: 1.48706436157
speed: 7.18637609482
id: 0
t: 90
xxx after update is x: 3.71981167793
y: -12.4442033768
theta: 1.53179466724
speed: 7.41050767899
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: 3.71981167793
y: -12.4442033768
theta: 1.53179466724
speed: 7.41050767899
id: 0
t: 91
xxx after update is x: 3.26328587532
y: -12.4718093872
theta: 1.54299151897
speed: 6.92826223373
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.26328587532
y: -12.4718093872
theta: 1.54299151897
speed: 6.92826223373
id: 0
t: 92
xxx after update is x: 3.30552244186
y: -12.1571922302
theta: 1.5109732151
speed: 6.73388290405
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93


risk is [0.17461794683855722, 0.05389224095296718]
222 self.state_dicts[msg.id][msg.t] is (-3.0440001487731934, 7.116054058074951, 4.6660919189453125, 13.497685432434082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.30552244186
y: -12.1571922302
theta: 1.5109732151
speed: 6.73388290405
id: 0
t: 93
xxx after update is x: 3.08217954636
y: -11.9321346283
theta: 1.50227940083
speed: 6.32331085205
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.08217954636
y: -11.9321346283
theta: 1.50227940083
speed: 6.32331085205
id: 0
t: 94
xxx after update is x: 3.41325545311
y: -12.1481342316
theta: 1.52764415741
speed: 6.94535923004
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: 3.41325545311
y: -12.1481342316
theta: 1.52764415741
speed: 6.94535923004
id: 0
t: 95
xxx after update is x: 3.41081309319
y: -11.1376619339
theta: 1.52124297619
speed: 6.08325576782
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: 3.41081309319
y: -11.1376619339
theta: 1.52124297619
speed: 6.08325576782
id: 0
t: 96
xxx after update is x: 3.49555587769
y: -11.4817266464
theta: 1.64532971382
speed: 5.76287937164
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98


xxx before update is x: 3.49555587769
y: -11.4817266464
theta: 1.64532971382
speed: 5.76287937164
id: 0
t: 97
xxx after update is x: 2.94802355766
y: -10.6187620163
theta: 1.56945478916
speed: 5.74430894852
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.35555555556

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.355555555555555, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.35555555556,(2.948023557662964, -10.618762016296387, 1.5694547891616821),5,1,3.28888888889,0,left
!!!!change state to get
GET,0,4.35555555556,(2.948023557662964, -10.61876201629638n function, finish the n times spin:91


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.43920922279
y: 8.51552200317
theta: 4.47689008713
speed: 14.3398189545
id: 1
t: 91
xxx after update is x: -3.20625710487
y: 8.61522102356
theta: 4.81127786636
speed: 14.0646848679
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:92




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.20625710487
y: 8.61522102356
theta: 4.81127786636
speed: 14.0646848679
id: 1
t: 92
xxx after update is x: -3.04400014877
y: 7.11605405807
theta: 4.66609191895
speed: 13.4976854324
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94


xxx before update is x: -3.04400014877
y: 7.11605405807
theta: 4.66609191895
speed: 13.4976854324
id: 1
t: 93
xxx after update is x: -2.85299801826
y: 6.80553293228
theta: 4.7532324791
speed: 13.8898477554
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.85299801826
y: 6.80553293228
theta: 4.7532324791
speed: 13.8898477554
id: 1
t: 94
xxx after update is x: -3.32811784744
y: 6.72949647903
theta: 4.7432513237
speed: 13.8012638092
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: -3.32811784744
y: 6.72949647903
theta: 4.7432513237
speed: 13.8012638092
id: 1
t: 95
xxx after update is x: -3.4389333725
y: 5.70393276215
theta: 4.90385580063
speed: 13.8645076752
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.4389333725
y: 5.70393276215
theta: 4.90385580063
speed: 13.8645076752
id: 1
t: 96
xxx after update is x: -3.34512901306
y: 4.55640459061
theta: 4.78621530533
speed: 13.8904132843
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:97


aaaaaa
aaaaaabbbbb
risk is [0.6709422211124525, 0]
222 self.state_dicts[msg.id][msg.t] is (3.495555877685547, -11.48172664642334, 1.6453297138214111, 5.762879371643066)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34512901306
y: 4.55640459061
theta: 4.78621530533
speed: 13.8904132843
id: 1
t: 97
xxx after update is x: -2.69725060463
y: 4.39499998093
theta: 4.7134513855
speed: 14.04799366
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:98




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


Received -->>: 
current clock is 4.35555555556




maneuver_negotiatir.py message_processing, it's a long code, sta7, 1.5694547891616821),5,1,3.28888888889,0,left

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: 2.94802355766
y: -10.6187620163
theta: 1.56945478916
speed: 5.74430894852
id: 0
t: 98
xxx after update is x: 3.39786958694
y: -10.4522733688
theta: 1.4030328989
speed: 5.4513258934
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py start the update_agent_message
current clock is 4.4
self.communication_details == 0
sending GET,0,4.35555555556,(2.948023557662964, -10.618762016296387, 1.5694547891616821),5,1,3.28888888889,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.4






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
Received -->>: 
current clock is 4.4




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.4
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.4', 'Position': ['(-3.22055721282959', ' 9.605765342712402', ' 4.597755432128906)'], 'Type': 'DENY'}
car 0 received DENY,1,4.4,(-3.22055721282959, 9.605765342712402, 4.597755432128906),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.355555555555555, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.355555555555555, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. sfinish
risk is [0.2847904196649531, 0.04261649646302889]
222 self.state_dicts[msg.id][msg.t] is (-3.616118907928467, 3.4866178035736084, 4.758085250854492, 13.80970573425293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: 3.39786958694
y: -10.4522733688
theta: 1.4030328989
speed: 5.4513258934
id: 0
t: 99
xxx after update is x: 2.96112728119
y: -10.5628805161
theta: 1.56630933285
speed: 4.99187612534
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: 2.96112728119
y: -10.5628805161
theta: 1.56630933285
speed: 4.99187612534
id: 0
t: 100
xxx after update is x: 3.15841722488
y: -9.92451095581
theta: 1.25353252888
speed: 5.42586946487
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.15841722488
y: -9.92451095581
theta: 1.25353252888
speed: 5.42586946487
id: 0
t: 101
xxx after update is x: 3.12624788284
y: -10.4449920654
theta: 1.73480176926
speed: 5.21490621567
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n tirt...1



xxx before update is x: -2.69725060463
y: 4.39499998093
theta: 4.7134513855
speed: 14.04799366
id: 1
t: 98
xxx after update is x: -3.61611890793
y: 3.48661780357
theta: 4.75808525085
speed: 13.8097057343
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion

current clock is 4.4
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.28888888889', 'Sender': '0', 'Time': '4.35555555556', 'IntendedCourse': 'left', 'Position': ['2.948023557662964', ' -10.618762016296387', ' 1.5694547891616821'], 'TagID': '0', 'Type': 'GET', 'Velocity': '5'}
car 1 received GET,0,4.35555555556,(2.948023557662964, -10.618762016296387, 1.5694547891616821),5,1,3.28888888889,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.193580246914
sender travel direction is:  north
sender earliest entering time is:  0.759587039477
sender last entering time is:  2.19358024691
sender last leaving time is:  4.56687850334
my entering time is:  0.193580246914
my leaving time is:  0.988172284327
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.4
self.communication_details == 0
sending DENY,1,4.4,(-3.22055721282959, 9.605765342712402, 4.597755432128906),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.4






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: -3.61611890793
y: 3.48661780357
theta: 4.75808525085
speed: 13.8097057343
id: 1
t: 99
xxx after update is x: -3.47758078575
y: 3.29177331924
theta: 4.68694972992
speed: 13.7778167725
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: -3.47758078575
y: 3.29177331924
theta: 4.68694972992
speed: 13.7778167725
id: 1
t: 100
xxx after update is x: -3.33574485779
y: 2.39139342308
theta: 4.71930217743
speed: 13.890209198
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.33574485779
y: 2.39139342308
theta: 4.71930217743
speed: 13.890209198
id: 1
t: 101
xxx after update is x: -3.23889040947
y: 1.88238489628
theta: 4.78695583344
speed: 13.4637832642
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:102




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23889040947
y: 1.88238489628
theta: 4.78695583344
speed: 13.4637832642
id: 1
t: 102
xxx after update is x: -2.9966814518
y: 1.27914452553
theta: 4.66893482208
speed: 13.9387836456
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:103




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(smes spin:102




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.12624788284
y: -10.4449920654
theta: 1.73480176926
speed: 5.21490621567
id: 0
t: 102
xxx after update is x: 3.16051268578
y: -9.93243122101
theta: 1.75859880447
speed: 4.83285856247
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:103




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: 3.16051268578
y: -9.93243122101
theta: 1.75859880447
speed: 4.83285856247
id: 0
t: 103
xxx after update is x: 2.93132328987
y: -9.31485748291
theta: 1.40668511391
speed: 4.37573194504
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.93132328987
y: -9.31485748291
theta: 1.40668511391
speed: 4.37573194504
id: 0
t: 104
xxx after update is x: 3.30279374123
y: -9.11022567749
theta: 1.36862063408
speed: 4.35607337952
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.30279374123
y: -9.11022567749
theta: 1.36862063408
speed: 4.35607337952
id: 0
t: 105
xxx after update is x: 3.24879574776
y: -8.46244621277
theta: 1.63264596462
speed: 3.8087823391
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.71111111111






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.711111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.71111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.71111111111
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.71111111111,(3.248795747756958, -8.462446212768555, 1.6326459646224976),3,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.71111111111
self.communication_details == 0
sending RELEASE,0,4.71111111111,(3.248795747756958, -8.462446212768555, 1.6326459646224976),3,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: 3.24879574776
y: -8.46244621277
theta: 1.63264596462
speed: 3.8087823391
id: 0
t: 106
xxx after update is x: 3.33830928802
y: -8.94709873199
theta: 1.59573078156
speed: 3.55306220055
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.33830928802
y: -8.94709873199
theta: 1.59573078156
speed: 3.55306220055
id: 0
t: 107
xxx after update is x: 3.04931640625
y: -8.3560256958
theta: 1.64735090733
speed: 3.71265459061
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 seelf.id == 1):
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: -2.9966814518
y: 1.27914452553
theta: 4.66893482208
speed: 13.9387836456
id: 1
t: 103
xxx after update is x: -3.32086324692
y: 0.55194324255
theta: 4.69750070572
speed: 14.0211429596
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32086324692
y: 0.55194324255
theta: 4.69750070572
speed: 14.0211429596
id: 1
t: 104
xxx after update is x: -3.83191132545
y: 0.427163809538
theta: 4.6837515831
speed: 13.6588153839
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105


aaaaaa
aaaaaabbbbb
risk is [0.2611449256890198, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3027937412261963, -9.110225677490234, 1.3686206340789795, 4.356073379516602)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: -3.83191132545
y: 0.427163809538
theta: 4.6837515831
speed: 13.6588153839
id: 1
t: 105
xxx after update is x: -3.32114720345
y: -0.115981996059
theta: 4.61806249619
speed: 13.647351265
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
Received -->>: 
current clock is 4.71111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.71111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '3', 'Sender': '0', 'TagID': '1', 'Time': '4.71111111111', 'Position': ['(3.248795747756958', ' -8.462446212768555', ' 1.6326459646224976)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.71111111111,(3.248795747756958, -8.462446212768555, 1.6326459646224976),3,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -3.32114720345
y: -0.115981996059
theta: 4.61806249619
speed: 13.647351265
id: 1
t: 106
xxx after update is x: -3.58268666267
y: -1.02554273605
theta: 4.63992166519
speed: 13.5769557953
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.75555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.58268666267
y: -1.02554273605
theta: 4.63992166519
speed: 13.5769557953
id: 1
t: 107
xxx after update is x: -3.30944466591
y: -1.63146972656
theta: 4.89615011215
speed: 14.2504901886
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: -3.30944466591
y: -1.63146972656
theta: 4.89615011215
speed: 14.2504901886
id: 1
t: 108
xxx after update is x: -3.40083813667
y: -1.92135035992
theta: 4.35478401184
speed: 13.6551170349
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the updatelf.man_init:
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: 3.04931640625
y: -8.3560256958
theta: 1.64735090733
speed: 3.71265459061
id: 0
t: 108
xxx after update is x: 3.41758465767
y: -8.83311462402
theta: 1.41823768616
speed: 3.2329480648
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.8177426107043063, 8.942757416346889e-15]
222 self.state_dicts[msg.id][msg.t] is (-3.4008381366729736, -1.921350359916687, 4.35478401184082, 13.65511703491211)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110


xxx before update is x: 3.41758465767
y: -8.83311462402
theta: 1.41823768616
speed: 3.2329480648
id: 0
t: 109
xxx after update is x: 2.74940800667
y: -8.58534526825
theta: 1.65529286861
speed: 3.18871712685
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.74940800667
y: -8.58534526825
theta: 1.65529286861
speed: 3.18871712685
id: 0
t: 110
xxx after update is x: 2.8848195076
y: -8.33288955688
theta: 1.50532662868
speed: 2.93286442757
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:111




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: 2.8848195076
y: -8.33288955688
theta: 1.50532662868
speed: 2.93286442757
id: 0
t: 111
xxx after update is x: 3.67389178276
y: -8.37712287903
theta: 1.72424721718
speed: 2.58600068092
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.67389178276
y: -8.37712287903
theta: 1.72424721718
speed: 2.58600068092
id: 0
t: 112
xxx after update is x: 3.72180223465
y: -8.15058517456
theta: 1.3470736742
speed: 2.09987664223
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:113




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: 3.72180223465
y: -8.15058517456
theta: 1.3470736742
speed: 2.09987664223
id: 0
t: 113
xxx after update is x: 3.1683588028
y: -7.97589254379
theta: 1.68983018398
speed: 2.22339439392
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.06666666667

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.022222222222222, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.06666666667,(3.16835880279541, -7.975892543792725, 1.6898301839828491),2,1,3.28888888889,0,left
!!!!change state to get
GET,0,5.06666666667,(3.16835880279541, -7.975892543792725, 1.6898301839828491),2,1,3.28888888889,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 5.06666666667
self.communication_details == 0
sending GET,0,5.06666666667,(3.1683 function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.40083813667
y: -1.92135035992
theta: 4.35478401184
speed: 13.6551170349
id: 1
t: 109
xxx after update is x: -3.12440276146
y: -3.22115564346
theta: 4.7561712265
speed: 14.1209421158
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: -3.12440276146
y: -3.22115564346
theta: 4.7561712265
speed: 14.1209421158
id: 1
t: 110
xxx after update is x: -3.27174329758
y: -3.87096071243
theta: 4.47406768799
speed: 13.961938858
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: -3.27174329758
y: -3.87096071243
theta: 4.47406768799
speed: 13.961938858
id: 1
t: 111
xxx after update is x: -3.15977048874
y: -4.31775712967
theta: 4.79083251953
speed: 13.6441345215
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.15977048874
y: -4.31775712967
theta: 4.79083251953
speed: 13.6441345215
id: 1
t: 112
xxx after update is x: -3.79639530182
y: -4.38083410263
theta: 4.64672613144
speed: 13.5714702606
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:113


aaaaaa
aaaaaabbbbb
risk is [0.13686549512168428, 0]
222 self.state_dicts[msg.id][msg.t] is (3.721802234649658, -8.150585174560547, 1.3470736742019653, 2.099876642227173)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: -3.79639530182
y: -4.38083410263
theta: 4.64672613144
speed: 13.5714702606
id: 1
t: 113
xxx after update is x: -3.51395177841
y: -5.33809328079
theta: 4.76422929764
speed: 13.8303880692
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 5.06666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.06666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.28888888889', 'Sender': '0', 'Time': '5.06666666667', 'IntendedCourse': 'left', 'Position': ['3.16835880279541', ' -7.975892543792725', ' 1.6898301839828491'], 'TagID': '0', 'Type': 'GET', 'Velocity': '2'}
car 1 received GET,0,5.06666666667,(3.16835880279541, -7.975892543792725, 1.6898301839828491),2,1,3.28888888889,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.225185185185
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.06666666667,(-3.58268666267395, -1.0255427360534668, 4.63992166519165),13,1,0,0


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n5880279541, -7.975892543792725, 1.6898301839828491),2,1,3.28888888889,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.1683588028
y: -7.97589254379
theta: 1.68983018398
speed: 2.22339439392
id: 0
t: 114
xxx after update is x: 3.5600259304
y: -8.09916210175
theta: 1.4592744112
speed: 1.60521638393
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.11111111111
leave the update function 





self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0

in spin function, finish the n times spin:115


finish try maneuver
Received -->>: 
current clock is 5.11111111111




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.11111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '5.06666666667', 'Position': ['(-3.58268666267395', ' -1.0255427360534668', ' 4.63992166519165)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.06666666667,(-3.58268666267395, -1.0255427360534668, 4.63992166519165),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.066666666666666, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.066666666666666, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.5600259304
y: -8.09916210175
theta: 1.4592744112
speed: 1.60521638393
id: 0
t: 115
xxx after update is x: 3.5798842907
y: -8.13752937317
theta: 1.37112462521
speed: 1.63753473759
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:116




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: 3.5798842907
y: -8.13752937317
theta: 1.37112462521
speed: 1.63753473759
id: 0
t: 116
xxx after update is x: 3.1168487072
y: -8.19158172607
theta: 1.5240226984
speed: 1.29473137856
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.1168487072
y: -8.19158172607
theta: 1.5240226984
speed: 1.29473137856
id: 0
t: 117
xxx after update is x: 3.35395598412
y: -7.54044437408
theta: 1.46798396111
speed: 1.26123261452
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: 3.35395598412
y: -7.54044437408
theta: 1.46798396111
speed: 1.26123261452
id: 0
t: 118
xxx after update is x: 3.36775135994
y: -7.98691797256
theta: 1.63008701801
speed: 1.03457534313
id: 0
t: 119
maneuver_negotiatir.p times spin:115

maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.06666666667






self.maneuver_requested None
xxx before update is x: -3.51395177841
y: -5.33809328079
theta: 4.76422929764
speed: 13.8303880692
id: 1
t: 114
xxx after update is x: -3.58092856407
y: -5.59485197067
theta: 4.77665472031
speed: 13.6658296585
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
added car with id 0 to grantlist. current grantlist:  {0: [9.666666666666668, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 5.11111111111
self.communication_details == 0
sending GRANT,1,5.06666666667,(-3.58268666267395, -1.0255427360534668, 4.63992166519165),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 5.11111111111

maneuver_negotiatir.py in the try maneuver function update -. sfinish




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.58092856407
y: -5.59485197067
theta: 4.77665472031
speed: 13.6658296585
id: 1
t: 115
xxx after update is x: -2.53391265869
y: -6.38875436783
theta: 4.66263389587
speed: 13.7418479919
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:116




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: -2.53391265869
y: -6.38875436783
theta: 4.66263389587
speed: 13.7418479919
id: 1
t: 116
xxx after update is x: -2.9514169693
y: -7.39464426041
theta: 4.76404571533
speed: 14.1019945145
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.9514169693
y: -7.39464426041
theta: 4.76404571533
speed: 14.1019945145
id: 1
t: 117
xxx after update is x: -3.31646966934
y: -7.54794836044
theta: 4.8215045929
speed: 13.5905294418
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31646966934
y: -7.54794836044
theta: 4.8215045929
speed: 13.5905294418
id: 1
t: 118
xxx after update is x: -3.2827899456
y: -8.26042842865
theta: 4.53795814514
speed: 14.4168224335
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:119




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120


xxx before update is x: -3.2827899456
y: -8.26042842865
theta: 4.53795814514
speed: 14.4168224335
id: 1
t: 119
xxx after update is x: -3.31108140945
y: -9.99405097961
theta: 4.80491828918
speed: 13.9256410599
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31108140945
y: -9.99405097961
theta: 4.80491828918
speed: 13.9256410599
id: 1
t: 120
xxx after update is x: -3.83812880516
y: -10.2111959457
theta: 4.71658086777
speed: 13.4645662308
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:121




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.83812880516y finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.36775135994
y: -7.98691797256
theta: 1.63008701801
speed: 1.03457534313
id: 0
t: 119
xxx after update is x: 3.74086213112
y: -7.63762235641
theta: 1.53307878971
speed: 0.270960211754
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: 3.74086213112
y: -7.63762235641
theta: 1.53307878971
speed: 0.270960211754
id: 0
t: 120
xxx after update is x: 2.96395111084
y: -7.5975856781
theta: 1.65240943432
speed: 0.70051497221
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.7923113852106298, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.8381288051605225, -10.211195945739746, 4.716580867767334, 13.464566230773926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


xxx before update is x: 2.96395111084
y: -7.5975856781
theta: 1.65240943432
speed: 0.70051497221
id: 0
t: 121
xxx after update is x: 3.07520532608
y: -7.64733600616
theta: 1.69826221466
speed: -0.155868217349
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: 3.07520532608
y: -7.64733600616
theta: 1.69826221466
speed: -0.155868217349
id: 0
t: 122
xxx after update is x: 3.2264881134
y: -7.49934005737
theta: 1.38260793686
speed: 0.208410784602
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.46666666667






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.4222222222222225, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 5.46666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.42222222222
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
deny not in message
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [9.844444444444445, 'left']}
Doing maneuver
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: 3.2264881134
y: -7.49934005737
theta: 1.38260793686
speed: 0.208410784602
id: 0
t: 123
xxx after update is x: 3.21605205536
y: -7.22585964203
theta: 1.57286906242
speed: -0.154639422894
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: 3.21605205536
y: -7.22585964203
theta: 1.57286906242
speed: -0.154639422894
id: 0
t: 124
xxx after update is x: 3.46605300903
y: -7.37939214706
theta: 1.70249211788
speed: 0.166889235377
id: 0
t: 125
maneuver_nego
y: -10.2111959457
theta: 4.71658086777
speed: 13.4645662308
id: 1
t: 121
xxx after update is x: -2.97985935211
y: -10.9557514191
theta: 4.47117042542
speed: 13.9135684967
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:122


aaaaaa
aaaaaabbbbb
risk is [0.5529408948291903, 0.9999999999999848]
222 self.state_dicts[msg.id][msg.t] is (3.0752053260803223, -7.647336006164551, 1.6982622146606445, -0.15586821734905243)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: -2.97985935211
y: -10.9557514191
theta: 4.47117042542
speed: 13.9135684967
id: 1
t: 122
xxx after update is x: -3.29450345039
y: -10.6839313507
theta: 4.76973676682
speed: 13.7425956726
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.46666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: -3.29450345039
y: -10.6839313507
theta: 4.76973676682
speed: 13.7425956726
id: 1
t: 123
xxx after update is x: -2.92287802696
y: -11.6024227142
theta: 4.78645133972
speed: 13.9109010696
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: -2.92287802696
y: -11.6024227142
theta: 4.78645133972
speed: 13.9109010696
id: 1
t: 124
xxx after update is x: -2.83980488777
y: -11.9722099304
theta: 4.5881485939
speed: 13.9654054642
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: -2.83980488777
y: -11.9722099304
theta: 4.5881485939
speed: 13.9654054642
id: 1
t: 125
xxx after update is x: -3.25974917412
y: -12.6624355316
theta: 4.65831756592
speed: 13.832567215
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: -3.25974917412
y: -12.6624355316
theta: 4.65831756592
speed: 13.832567215
id: 1
t: 126
xxx after update is x: -3.28014063835
y: -13.1719579697
theta: 4.73148441315
speed: 13.823633194
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: -3.28014063835
y: -13.1719579697
theta: 4.73148441315
speed: 13.823633194
id: 1
t: 127
xxx after update is x: -3.65523123741
y: -14.848443985
theta: 4.6868262291
speed: 13.7129917145
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: -3.65523123741
y: -14.848443985
theta: 4.6868262291
speed: 13.7129917145
id: 1
t: 128
xxx after uptiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.46605300903
y: -7.37939214706
theta: 1.70249211788
speed: 0.166889235377
id: 0
t: 125
xxx after update is x: 3.49377441406
y: -7.47572851181
theta: 1.56458687782
speed: 0.274564146996
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:126




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: 3.49377441406
y: -7.47572851181
theta: 1.56458687782
speed: 0.274564146996
id: 0
t: 126
xxx after update is x: 3.20767712593
y: -7.28968286514
theta: 1.4282759428
speed: 0.711348950863
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.20767712593
y: -7.28968286514
theta: 1.4282759428
speed: 0.711348950863
id: 0
t: 127
xxx after update is x: 3.58978652954
y: -7.6725692749
theta: 1.47309815884
speed: 0.718465864658
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:128




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.58978652954
y: -7.6725692749
theta: 1.47309815884
speed: 0.718465864658
id: 0
t: 128
xxx after update is x: 2.84375309944
y: -6.92267894745
theta: 1.60399234295
speed: 1.62136459351
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:129




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: 2.84375309944
y: -6.92267894745
theta: 1.60399234295
speed: 1.62136459351
id: 0
t: 129
xxx after update is x: 2.9519546032
y: -7.38805246353
theta: 1.66222417355
speed: 1.8662571907
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.7090927313276086, 1.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1416945457458496, -15.200270652770996, 4.547884464263916, 13.922054290771484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.9519546032
y: -7.38805246353
theta: 1.66222417355
speed: 1.8662571907
id: 0
t: 130
xxx after update is x: 3.34333825111
y: -6.8604927063
theta: 1.50786983967
speed: 2.05074644089
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:131


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.82222222222






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: 3.34333825111
y: -6.8604927063
theta: 1.50786983967
speed: 2.05074644089
id: 0
t: 131
xxx after update is x: 2.8601500988
y: -7.68599367142
theta: 1.71973490715
speed: 2.6118042469
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update funcdate is x: -3.09105181694
y: -14.4543733597
theta: 4.59347057343
speed: 13.9513664246
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: -3.09105181694
y: -14.4543733597
theta: 4.59347057343
speed: 13.9513664246
id: 1
t: 129
xxx after update is x: -3.14169454575
y: -15.2002706528
theta: 4.54788446426
speed: 13.9220542908
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.9998097910486653, 0.8978549282019899]
Stops!
222 self.state_dicts[msg.id][msg.t] is (2.9519546031951904, -7.388052463531494, 1.6622241735458374, 1.8662571907043457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.77777777778






self.maneuver_requested None
xxx before update is x: -3.14169454575
y: -15.2002706528
theta: 4.54788446426
speed: 13.9220542908
id: 1
t: 130
xxx after update is x: -3.35411739349
y: -16.1436977386
theta: 4.77831888199
speed: 13.716468811
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: -3.35411739349
y: -16.1436977386
theta: 4.77831888199
speed: 13.716468811
id: 1
t: 131
xxx after update is x: -2.95519256592
y: -17.0639781952
theta: 4.60748291016
speed: 13.5619926453
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133


xxx before update is x: -2.95519256592
y: -17.0639781952
theta: 4.60748291016
speed: 13.5619926453
id: 1
t: 132
xxx after update is x: -2.82770252228
y: -17.1509017944
theta: 4.75829601288
speed: 14.396897316
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.82770252228
y: -17.1509017944
theta: 4.75829601288
speed: 14.396897316
id: 1
t: 133
xxx after update is x: -2.9948682785
y: -17.365858078
theta: 4.78141880035
speed: 13.9946603775
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: -2.9948682785
y: -17.365858078
theta: 4.78141880035
speed: 13.9946603775
id: 1
t: 134
xxx after update is x: -3.7108039856
y: -18.0177879333
theta: 4.70466852188
speed: 13.9394702911
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: -3.7108039856
y: -18.0177879333
theta: 4.70466852188
speed: 13.9394702911
id: 1
t: 135
xxx after update is x: -3.52059960365
y: -18.0705718994
theta: 4.7782292366
speed: 13.7194414139
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtition xxx before update is x: 2.8601500988
y: -7.68599367142
theta: 1.71973490715
speed: 2.6118042469
id: 0
t: 132
xxx after update is x: 3.56708097458
y: -7.40380620956
theta: 1.63149380684
speed: 2.58667993546
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:133




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.56708097458
y: -7.40380620956
theta: 1.63149380684
speed: 2.58667993546
id: 0
t: 133
xxx after update is x: 3.29129981995
y: -7.11736965179
theta: 1.47289168835
speed: 2.69553637505
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: 3.29129981995
y: -7.11736965179
theta: 1.47289168835
speed: 2.69553637505
id: 0
t: 134
xxx after update is x: 2.92043018341
y: -6.74898576736
theta: 1.67126619816
speed: 3.09324479103
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.92043018341
y: -6.74898576736
theta: 1.67126619816
speed: 3.09324479103
id: 0
t: 135
xxx after update is x: 2.88338303566
y: -6.84592056274
theta: 1.43308925629
speed: 2.90486264229
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:136




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: 2.88338303566
y: -6.84592056274
theta: 1.43308925629
speed: 2.90486264229
id: 0
t: 136
xxx after update is x: 3.32378530502
y: -6.11550712585
theta: 1.50961315632
speed: 3.56332707405
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.002890227575363124, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0865800380706787, -19.256086349487305, 4.915977954864502, 14.129443168640137)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138


xxx before update is x: 3.32378530502
y: -6.11550712585
theta: 1.50961315632
speed: 3.56332707405
id: 0
t: 137
xxx after update is x: 3.63891530037
y: -6.20311450958
theta: 1.52378499508
speed: 3.5560233593
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.13333333333






self.maneuver_requested left
xxx before update is x: 3.63891530037
y: -6.20311450958
theta: 1.52378499508
speed: 3.5560233593
id: 0
t: 138
xxx after update is x: 3.30777049065
y: -6.50681400299
theta: 1.44203007221
speed: 3.971316576
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: 3.30777049065
y: -6.50681400299
theta: 1.44203007221
speed: 3.971316576
id: 0
t: 139
xxx after update is x: 3.615084886on
************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: -3.52059960365
y: -18.0705718994
theta: 4.7782292366
speed: 13.7194414139
id: 1
t: 136
xxx after update is x: -3.08658003807
y: -19.2560863495
theta: 4.91597795486
speed: 14.1294431686
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.08983645115233381, 0.48479999999999795]
222 self.state_dicts[msg.id][msg.t] is (3.3237853050231934, -6.115507125854492, 1.5096131563186646, 3.5633270740509033)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08658003807
y: -19.2560863495
theta: 4.91597795486
speed: 14.1294431686
id: 1
t: 137
xxx after update is x: -3.14524459839
y: -20.1079921722
theta: 4.69048881531
speed: 13.9423046112
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.13333333333






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: -3.14524459839
y: -20.1079921722
theta: 4.69048881531
speed: 13.9423046112
id: 1
t: 138
xxx after update is x: -3.04608917236
y: -20.6366329193
theta: 4.66688203812
speed: 14.1767282486
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.04608917236
y: -20.6366329193
theta: 4.66688203812
speed: 14.1767282486
id: 1
t: 139
xxx after update is x: -3.14721941948
y: -21.4664020538
theta: 4.75721645355
speed: 14.1128234863
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:140




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: -3.14721941948
y: -21.4664020538
theta: 4.75721645355
speed: 14.1128234863
id: 1
t: 140
xxx after update is x: -3.22931003571
y: -22.0925979614
theta: 4.77567672729
speed: 13.9528875351
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: -3.22931003571
y: -22.0925979614
theta: 4.77567672729
speed: 13.9528875351
id: 1
t: 141
xxx after update is x: -2.98923635483
y: -22.9511814117
theta: 4.69691944122
speed: 13.7582273483
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.98923635483
y: -22.9511814117
theta: 4.69691944122
speed: 13.7582273483
id: 1
t: 142
xxx after update is x: -3.42762351036
y: -23.5946006775
theta: 4.72525215149
speed: 13.9154624939
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:143


aaaaaa
aaaaaabbbbb
risk is [1.3404246321959706e55
y: -5.97368955612
theta: 1.61842679977
speed: 4.36699867249
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: 3.61508488655
y: -5.97368955612
theta: 1.61842679977
speed: 4.36699867249
id: 0
t: 140
xxx after update is x: 3.35529994965
y: -5.60028934479
theta: 1.62242412567
speed: 4.6267080307
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: 3.35529994965
y: -5.60028934479
theta: 1.62242412567
speed: 4.6267080307
id: 0
t: 141
xxx after update is x: 2.72587561607
y: -5.78221940994
theta: 1.78627920151
speed: 5.30469322205
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.72587561607
y: -5.78221940994
theta: 1.78627920151
speed: 5.30469322205
id: 0
t: 142
xxx after update is x: 2.48228168488
y: -5.44527053833
theta: 1.52018678188
speed: 4.97131299973
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:143




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: 2.48228168488
y: -5.44527053833
theta: 1.52018678188
speed: 4.97131299973
id: 0
t: 143
xxx after update is x: 3.25505542755
y: -4.85083580017
theta: 1.92924356461
speed: 5.2610077858
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.9612685091429536e-43, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8428397178649902, -23.779417037963867, 4.670073986053467, 13.621118545532227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: 3.25505542755
y: -4.85083580017
theta: 1.92924356461
speed: 5.2610077858
id: 0
t: 144
xxx after update is x: 2.96810293198
y: -4.68539524078
theta: 1.75152420998
speed: 5.50612878799
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: 2.96810293198
y: -4.68539524078
theta: 1.75152420998
speed: 5.50612878799
id: 0
t: 145
xxx after update is x: 3.66756892204
y: -4.26338529587
theta: 1.77656042576
speed: 5.52427005768
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.48888888889






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: 3.66756892204
y: -4.26338529587
theta: 1.77656042576
speed: 5.52427005768
id: 0
t: 146
xxx after update is x: 2.83526682854
y: -4.23738908768
theta: 1.76831936836
speed: 6.24480104446
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the si-35, 0.46559999999999807]
222 self.state_dicts[msg.id][msg.t] is (2.4822816848754883, -5.445270538330078, 1.5201867818832397, 4.971312999725342)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 6.35555555556
xxx before update is x: -3.42762351036
y: -23.5946006775
theta: 4.72525215149
speed: 13.9154624939
id: 1
t: 143
xxx after update is x: -2.84283971786
y: -23.779417038
theta: 4.67007398605
speed: 13.6211185455
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
!!!threading.Timer
tgarnt done


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: -2.84283971786
y: -23.779417038
theta: 4.67007398605
speed: 13.6211185455
id: 1
t: 144
xxx after update is x: -3.14685130119
y: -24.3384437561
theta: 4.87978744507
speed: 13.7691354752
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: -3.14685130119
y: -24.3384437561
theta: 4.87978744507
speed: 13.7691354752
id: 1
t: 145
xxx after update is x: -3.35752296448
y: -25.377790451
theta: 4.76826810837
speed: 13.7469902039
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.48888888889






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: -3.35752296448
y: -25.377790451
theta: 4.76826810837
speed: 13.7469902039
id: 1
t: 146
xxx after update is x: -3.31069016457
y: -25.2907066345
theta: 4.62581348419
speed: 13.9445991516
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31069016457
y: -25.2907066345
theta: 4.62581348419
speed: 13.9445991516
id: 1
t: 147
xxx after update is x: -3.11954188347
y: -26.6210670471
theta: 4.86063432693
speed: 13.8767328262
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:148


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: -3.11954188347
y: -26.6210670471
theta: 4.86063432693
speed: 13.8767328262
id: 1
t: 148
xxx after update is x: -3.20423579216
y: -26.9078350067
theta: 4.73956823349
speed: 13.9751853943
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.7784793082861125e-144, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (2.71795916557312, -3.34735107421875, 1.7728676795959473, 6.333676815032959)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave tm.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.83526682854
y: -4.23738908768
theta: 1.76831936836
speed: 6.24480104446
id: 0
t: 147
xxx after update is x: 2.75393629074
y: -4.29187631607
theta: 1.86214482784
speed: 6.50996875763
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:148




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: 2.75393629074
y: -4.29187631607
theta: 1.86214482784
speed: 6.50996875763
id: 0
t: 148
xxx after update is x: 2.71795916557
y: -3.34735107422
theta: 1.7728676796
speed: 6.33367681503
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: 2.71795916557
y: -3.34735107422
theta: 1.7728676796
speed: 6.33367681503
id: 0
t: 149
xxx after update is x: 2.8705534935
y: -3.44116234779
theta: 1.73073577881
speed: 6.87673473358
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: 2.8705534935
y: -3.44116234779
theta: 1.73073577881
speed: 6.87673473358
id: 0
t: 150
xxx after update is x: 2.58624815941
y: -3.14811110497
theta: 1.93470180035
speed: 7.3898024559
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.58624815941
y: -3.14811110497
theta: 1.93470180035
speed: 7.3898024559
id: 0
t: 151
xxx after update is x: 2.59970927238
y: -3.24206614494
theta: 1.92748522758
speed: 7.98582935333
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:152


aaaaaa
risk is [1.1491375049974577e-168, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.475667953491211, -28.25714683532715, 4.736999034881592, 14.182337760925293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: 2.59970927238
y: -3.24206614494
theta: 1.92748522758
speed: 7.98582935333
id: 0
t: 152
xxx after update is x: 2.77765727043
y: -3.07809615135
theta: 1.97919309139
speed: 7.69723939896
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: 2.77765727043
y: -3.07809615135
theta: 1.97919309139
speed: 7.69723939896
id: 0
t: 153
xxx after update is x: 1.48497748375
y: -2.6003844738
theta: 2.05257701874
speed: 8.00197792053
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.84444444444






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: 1.48497748375
y: -2.6003844738
theta: 2.05257701874
speed: 8.00197792053
id: 0
t: 154
xxx after updahe update function xxx before update is x: -3.20423579216
y: -26.9078350067
theta: 4.73956823349
speed: 13.9751853943
id: 1
t: 149
xxx after update is x: -3.10025882721
y: -27.3929347992
theta: 4.60457611084
speed: 14.0607881546
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:150




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: -3.10025882721
y: -27.3929347992
theta: 4.60457611084
speed: 14.0607881546
id: 1
t: 150
xxx after update is x: -3.04643702507
y: -28.2861728668
theta: 4.57135915756
speed: 13.5651082993
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.04643702507
y: -28.2861728668
theta: 4.57135915756
speed: 13.5651082993
id: 1
t: 151
xxx after update is x: -3.47566795349
y: -28.2571468353
theta: 4.73699903488
speed: 14.1823377609
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:152




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.47566795349
y: -28.2571468353
theta: 4.73699903488
speed: 14.1823377609
id: 1
t: 152
xxx after update is x: -3.43659543991
y: -29.4784736633
theta: 4.85026359558
speed: 13.6508646011
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:153




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
xxx before update is x: -3.43659543991
y: -29.4784736633
theta: 4.85026359558
speed: 13.6508646011
id: 1
t: 153
xxx after update is x: -3.47543716431
y: -29.9555530548
theta: 4.70267295837
speed: 13.8415803909
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.84444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.47543716431
y: -29.9555530548
theta: 4.70267295837
speed: 13.8415803909
id: 1
t: 154
xxx after update is x: -2.88294506073
y: -31.0037822723
theta: 4.93309545517
speed: 13.8540620804
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.88294506073
y: -31.0037822723
theta: 4.93309545517
speed: 13.8540620804
id: 1
t: 155
xxx after update is x: -3.05480885506
y: -31.1414451599
theta: 4.63252258301
speed: 13.4866113663
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:156


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [3.290039573561822e-259, 0.49919999999999787]
222 self.state_dicts[msg.id][msg.t] is (2.256314992904663, -1.6426665782928467, 2.168874740600586, 8.609034538269043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx befote is x: 2.28112244606
y: -2.43454122543
theta: 2.21914553642
speed: 8.07563209534
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: 2.28112244606
y: -2.43454122543
theta: 2.21914553642
speed: 8.07563209534
id: 0
t: 155
xxx after update is x: 2.2563149929
y: -1.64266657829
theta: 2.1688747406
speed: 8.60903453827
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: 2.2563149929
y: -1.64266657829
theta: 2.1688747406
speed: 8.60903453827
id: 0
t: 156
xxx after update is x: 1.30970013142
y: -1.72336292267
theta: 2.23949432373
speed: 8.8572845459
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: 1.30970013142
y: -1.72336292267
theta: 2.23949432373
speed: 8.8572845459
id: 0
t: 157
xxx after update is x: 1.62636959553
y: -1.25008559227
theta: 2.0389316082
speed: 9.24582767487
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4087016582489014, -32.11433029174805, 4.757417678833008, 14.052260398864746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: 1.62636959553
y: -1.25008559227
theta: 2.0389316082
speed: 9.24582767487
id: 0
t: 158
xxx after update is x: 1.94573760033
y: -0.860527694225
theta: 2.10109496117
speed: 9.1391210556
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 1.94573760033
y: -0.860527694225
theta: 2.10109496117
speed: 9.1391210556
id: 0
t: 159
xxx after update is x: 1.07225108147
y: -0.677013635635
theta: 2.42740774155
speed: 9.65644931793
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:160




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: 1.07225108147
y: -0.677013635635
theta: 2.42740774155
speed: 9.65644931793
id: 0
t: 160
xxx after update is x: 1.14649999142
y: -0.401488095522
theta: 2.32573366165
speed: 9.65848350525
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: 1.14649999142
y: -0.401488095522
theta: 2.32573366165
speed: 9.65848350525
id: 0
t: 161
xxx after update is x: 1.03839290142
y: 0.459247648716
theta: 2.33579850197
speed: 9.91896343231
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.2






self.maneuver_requested left


going to the update function
sim.py in the sim.py re update is x: -3.05480885506
y: -31.1414451599
theta: 4.63252258301
speed: 13.4866113663
id: 1
t: 156
xxx after update is x: -2.98270463943
y: -31.6511573792
theta: 4.65182876587
speed: 14.0947446823
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: -2.98270463943
y: -31.6511573792
theta: 4.65182876587
speed: 14.0947446823
id: 1
t: 157
xxx after update is x: -3.40870165825
y: -32.1143302917
theta: 4.75741767883
speed: 14.0522603989
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: -3.40870165825
y: -32.1143302917
theta: 4.75741767883
speed: 14.0522603989
id: 1
t: 158
xxx after update is x: -3.25697875023
y: -32.7810401917
theta: 4.66894721985
speed: 13.6046028137
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.25697875023
y: -32.7810401917
theta: 4.66894721985
speed: 13.6046028137
id: 1
t: 159
xxx after update is x: -3.79383301735
y: -34.0007591248
theta: 4.68517017365
speed: 13.7746257782
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:160




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: -3.79383301735
y: -34.0007591248
theta: 4.68517017365
speed: 13.7746257782
id: 1
t: 160
xxx after update is x: -3.10214352608
y: -34.2232780457
theta: 4.68021154404
speed: 13.5574617386
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: -3.10214352608
y: -34.2232780457
theta: 4.68021154404
speed: 13.5574617386
id: 1
t: 161
xxx after update is x: -3.85658288002
y: -35.0529136658
theta: 4.73917770386
speed: 13.9183206558
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.2






self.maneuver_requested None
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5167999999999984]
222 self.state_dicts[msg.id][msg.t] is (1.0383929014205933, 0.4592476487159729, 2.335798501968384, 9.918963432312012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: -3.85658288002
y: -35.0529136658
theta: 4.73917770386
speed: 13.9183206558
id: 1
t: 162
xxx after update is x: -3.1993060112
y: -35.7569694519
theta: 4.57932949066
speed: 13.6252765656
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -3.1993060112
y: -35.7569694519
theta: update function maneuver_negotiatir.py in the try maneuver function update -. sfinish

targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: 1.03839290142
y: 0.459247648716
theta: 2.33579850197
speed: 9.91896343231
id: 0
t: 162
xxx after update is x: -0.0125729003921
y: 0.256820172071
theta: 2.6301343441
speed: 10.4797201157
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -0.0125729003921
y: 0.256820172071
theta: 2.6301343441
speed: 10.4797201157
id: 0
t: 163
xxx after update is x: -0.014615056105
y: 0.974083781242
theta: 2.49541783333
speed: 10.6058006287
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.012665271759033, -35.879905700683594, 4.533092975616455, 13.986159324645996)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -0.014615056105
y: 0.974083781242
theta: 2.49541783333
speed: 10.6058006287
id: 0
t: 164
xxx after update is x: -0.827264845371
y: 0.535928070545
theta: 2.44704270363
speed: 10.9925765991
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:165




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -0.827264845371
y: 0.535928070545
theta: 2.44704270363
speed: 10.9925765991
id: 0
t: 165
xxx after update is x: -0.834000408649
y: 1.17111897469
theta: 2.60840415955
speed: 11.1200294495
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -0.834000408649
y: 1.17111897469
theta: 2.60840415955
speed: 11.1200294495
id: 0
t: 166
xxx after update is x: -1.45203065872
y: 1.7780649662
theta: 2.62753725052
speed: 11.3306398392
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -1.45203065872
y: 1.7780649662
theta: 2.62753725052
speed: 11.3306398392
id: 0
t: 167
xxx after update is x: -1.83302295208
y: 2.12482881546
theta: 2.69318890572
speed: 12.0373830795
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -1.83302295208
y: 2.12482881546
theta: 2.69318890572
speed: 12.0373830795
id: 0
t: 168
xxx after update is x: -2.10011029243
y: 2.27131104469
theta: 2.69271588326
speed: 11.8431959152
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:169




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170


xxx before update is x: -2.10011029243
y: 2.27131104469
theta: 2.69271588326
speed: 11.8431959152
id: 0
t: 169
xxx after update is x: -2.67278504372
y: 2.38915634155
theta: 2.58901953697
s4.57932949066
speed: 13.6252765656
id: 1
t: 163
xxx after update is x: -3.01266527176
y: -35.8799057007
theta: 4.53309297562
speed: 13.9861593246
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: -3.01266527176
y: -35.8799057007
theta: 4.53309297562
speed: 13.9861593246
id: 1
t: 164
xxx after update is x: -3.67785620689
y: -36.9002685547
theta: 4.85869789124
speed: 13.7119970322
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -3.67785620689
y: -36.9002685547
theta: 4.85869789124
speed: 13.7119970322
id: 1
t: 165
xxx after update is x: -3.27071404457
y: -37.3904418945
theta: 4.60048484802
speed: 13.7635650635
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
************normalize weight**********************
xxx before update is x: -3.27071404457
y: -37.3904418945
theta: 4.60048484802
speed: 13.7635650635
id: 1
t: 166
xxx after update is x: -3.31157541275
y: -38.2431640625
theta: 4.60237693787
speed: 14.117058754
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -3.31157541275
y: -38.2431640625
theta: 4.60237693787
speed: 14.117058754
id: 1
t: 167
xxx after update is x: -3.53093552589
y: -38.668006897
theta: 4.73033237457
speed: 14.028588295
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5215999999999985]
222 self.state_dicts[msg.id][msg.t] is (-1.833022952079773, 2.124828815460205, 2.6931889057159424, 12.037383079528809)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.53093552589
y: -38.668006897
theta: 4.73033237457
speed: 14.028588295
id: 1
t: 168
xxx after update is x: -3.49075579643
y: -39.4303092957
theta: 4.78981399536
speed: 14.0429430008
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:169




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.51111111111






self.maneuver_requested None
xxx before update is x: -3.49075579643
y: -39.4303092957
theta: 4.78981399536
speed: 14.0429430008
id: 1
t: 169
xxx after update is x: -3.61283946037
y: -39.705242157
theta: 4.7999382019
speed: 13.6473226547
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:170


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: -3.61283946037
y: -39.705242157
theta: 4.7999382019
speed: 13.6473226547
id: 1
t: 170
xxx after update is x: -2.75680112839
y: -40.0829544067
theta: 4.68595409393
spepeed: 12.4858779907
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.55555555556






self.maneuver_requested left
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.612839460372925, -39.70524215698242, 4.799938201904297, 13.647322654724121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -2.67278504372
y: 2.38915634155
theta: 2.58901953697
speed: 12.4858779907
id: 0
t: 170
xxx after update is x: -2.96039199829
y: 2.40623164177
theta: 2.9305639267
speed: 12.6608457565
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:171




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -2.96039199829
y: 2.40623164177
theta: 2.9305639267
speed: 12.6608457565
id: 0
t: 171
xxx after update is x: -4.03790950775
y: 3.28581237793
theta: 2.70231699944
speed: 12.7496442795
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:172




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -4.03790950775
y: 3.28581237793
theta: 2.70231699944
speed: 12.7496442795
id: 0
t: 172
xxx after update is x: -3.76538181305
y: 2.43644475937
theta: 3.03481626511
speed: 12.8769674301
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: -3.76538181305
y: 2.43644475937
theta: 3.03481626511
speed: 12.8769674301
id: 0
t: 173
xxx after update is x: -5.3773651123
y: 3.69242429733
theta: 2.94964742661
speed: 12.6953783035
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -5.3773651123
y: 3.69242429733
theta: 2.94964742661
speed: 12.6953783035
id: 0
t: 174
xxx after update is x: -5.51024866104
y: 2.65612626076
theta: 3.09681916237
speed: 13.3621778488
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -5.51024866104
y: 2.65612626076
theta: 3.09681916237
speed: 13.3621778488
id: 0
t: 175
xxx after update is x: -6.00459480286
y: 2.98360180855
theta: 3.03370833397
speed: 13.346165657
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:176




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: -6.00459480286
y: 2.98360180855
theta: 3.03370833397
speed: 13.346165657
id: 0
t: 176
xxx after update is x: -6.77697706223
y: 2.90832328796
theta: 3.15354657173
speed: 13.8314418793
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3084278106689453, -44.33818817138672, 4.8541ed: 14.1370487213
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.75680112839
y: -40.0829544067
theta: 4.68595409393
speed: 14.1370487213
id: 1
t: 171
xxx after update is x: -3.05142045021
y: -41.0556602478
theta: 4.82023143768
speed: 14.1301774979
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:172




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.05142045021
y: -41.0556602478
theta: 4.82023143768
speed: 14.1301774979
id: 1
t: 172
xxx after update is x: -3.26707339287
y: -41.9246368408
theta: 4.86910200119
speed: 13.7627401352
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: -3.26707339287
y: -41.9246368408
theta: 4.86910200119
speed: 13.7627401352
id: 1
t: 173
xxx after update is x: -3.13505601883
y: -42.4681968689
theta: 4.61744213104
speed: 13.4108953476
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5263999999999986]
222 self.state_dicts[msg.id][msg.t] is (-5.3773651123046875, 3.6924242973327637, 2.9496474266052246, 12.695378303527832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -3.13505601883
y: -42.4681968689
theta: 4.61744213104
speed: 13.4108953476
id: 1
t: 174
xxx after update is x: -3.08940434456
y: -43.1514053345
theta: 4.60597276688
speed: 14.0518388748
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08940434456
y: -43.1514053345
theta: 4.60597276688
speed: 14.0518388748
id: 1
t: 175
xxx after update is x: -3.31691455841
y: -43.3850021362
theta: 4.66427278519
speed: 13.8938207626
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:176




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: -3.31691455841
y: -43.3850021362
theta: 4.66427278519
speed: 13.8938207626
id: 1
t: 176
xxx after update is x: -3.30842781067
y: -44.3381881714
theta: 4.85416173935
speed: 13.711151123
id: 1
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.86666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.30842781067
y: -44.3381881714
theta: 4.85416173935
speed: 13.711151123
id: 1
t: 177
xxx after update is x: -3.53721046448
y: -44.4653930664
theta: 4.82506990433
speed: 14.2357349396
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update funct61739349365, 13.711151123046875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178


xxx before update is x: -6.77697706223
y: 2.90832328796
theta: 3.15354657173
speed: 13.8314418793
id: 0
t: 177
xxx after update is x: -7.25337457657
y: 2.99282407761
theta: 2.95684885979
speed: 13.91518116
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.91111111111






self.maneuver_requested left
RELEASE,0,7.91111111111,(-7.2533745765686035, 2.992824077606201, 2.9568488597869873),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 7.91111111111
self.communication_details == 0
sending RELEASE,0,7.91111111111,(-7.2533745765686035, 2.992824077606201, 2.9568488597869873),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179


xxx before update is x: -7.25337457657
y: 2.99282407761
theta: 2.95684885979
speed: 13.91518116
id: 0
t: 178
xxx after update is x: -7.80769872665
y: 3.32502865791
theta: 3.17646050453
speed: 13.8981208801
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -7.80769872665
y: 3.32502865791
theta: 3.17646050453
speed: 13.8981208801
id: 0
t: 179
xxx after update is x: -8.36494255066
y: 3.74644684792
theta: 2.9341378212
speed: 13.6704559326
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -8.36494255066
y: 3.74644684792
theta: 2.9341378212
speed: 13.6704559326
id: 0
t: 180
xxx after update is x: -9.0420255661
y: 3.67935395241
theta: 3.22229647636
speed: 14.1195487976
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:181




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -9.0420255661
y: 3.67935395241
theta: 3.22229647636
speed: 14.1195487976
id: 0
t: 181
xxx after update is x: -9.90552711487
y: 3.16301727295
theta: 3.11634373665
speed: 14.2284402847
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:182




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -9.90552711487
y: 3.16301727295
theta: 3.11634373665
speed: 14.2284402847
id: 0
t: 182
xxx after update is x: -10.8908662796
y: 3.76548504829
theta: 3.19994163513
speed: 13.7648935318
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -10.8908662796
y: 3.76548504829
theta: 3.19994163513
speed: 13.7648935318
id: 0
t: 183
xxx after update is x: -10.575097084
y: 3.83170700073
theta: 3.25868678093
speed: 13.7986927032
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros fuion 
in spin function, finish the n times spin:178


risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-7.2533745765686035, 2.992824077606201, 2.9568488597869873, 13.915181159973145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 7.91111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '7.91111111111', 'Position': ['(-7.2533745765686035', ' 2.992824077606201', ' 2.9568488597869873)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,7.91111111111,(-7.2533745765686035, 2.992824077606201, 2.9568488597869873),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.53721046448
y: -44.4653930664
theta: 4.82506990433
speed: 14.2357349396
id: 1
t: 178
xxx after update is x: -3.11960577965
y: -45.8823814392
theta: 4.70209026337
speed: 14.0183992386
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:179




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11960577965
y: -45.8823814392
theta: 4.70209026337
speed: 14.0183992386
id: 1
t: 179
xxx after update is x: -3.36444687843
y: -46.2055931091
theta: 4.87551259995
speed: 13.8000135422
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:180




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181


xxx before update is x: -3.36444687843
y: -46.2055931091
theta: 4.87551259995
speed: 13.8000135422
id: 1
t: 180
xxx after update is x: -3.61314845085
y: -46.3980674744
theta: 4.72979307175
speed: 13.9438915253
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.61314845085
y: -46.3980674744
theta: 4.72979307175
speed: 13.9438915253
id: 1
t: 181
xxx after update is x: -3.10481476784
y: -47.5532226562
theta: 4.65598583221
speed: 13.7354421616
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:182




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -3.10481476784
y: -47.5532226562
theta: 4.65598583221
speed: 13.7354421616
id: 1
t: 182
xxx after update is x: -2.89809894562
y: -47.965385437
theta: 4.63062286377
speed: 13.9635410309
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.89809894562
y: -47.965385437
theta: 4.63062286377
speed: 13.9635410309
id: 1
t: 183
xxx after update is x: -3.28238916397
y: -48.7090034485
theta: 4.64593601227
speed: 13.9153413773
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:184


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (-10.57509708404541, 3.831707000732422, 3.2586867809295654, 13.79869270324707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28238916397
y: -48.7090034485
theta: 4.64593601227
speed: 13.9153413773
id: 1
t: 184
xxx after update is x: -3.01519083977
y: -49.6627693176
theta: 4.56432151794
speed: 13.9843444824
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.22222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -3.01519083977
y: -49.6627693176
theta: 4.56432151794
speed: 13.9843444824
id: 1
t: 185
xxx after update is x: -2.99041867256
y: -50.1411590576
theta: 4.94362401962
speed: 14.2243013382
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 8.26666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.26666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.26666666667', 'Position': ['(-12.071402549743652', ' 3.6246118545532227', ' 3.0970709323883057)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.26666666667,(-12.071402549743652, 3.6246118545532227, 3.0970709323883057),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -2.99041867256
y: -50.1411590576
theta: 4.94362401962
speed: 14.2243013382
id: 1
t: 186
xxx after update is x: -3.46800112724
y: -50.3757362366
theta: 4.83320379257
speed: 14.4159402847
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.46800112724
y: -50.3757362366
theta: 4.83320379257
speed: 14.4159402847
id: 1
t: 187
xxx after update is x: -3.19823813438
y: -50.9905014038
theta: 4.66819190979
speed: 13.6912555695
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:188




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19823813438
y: -50.9905014038
theta: 4.66819190979
speed: 13.6912555695
id: 1
t: 188
xxx after update is x: -3.19050216675
y: -51.4242019653
theta: 4.72580909729
speed: 13.7117414474
id: 1
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:189


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19050216675
y: -51.4242019653
theta: 4.72580909729
speed: 13.7117414474
id: 1
t: 189
xxx after update is x: -3.06686758995
y: -52.3461990356
theta: 4.7525100708
speed: 13.7043247223
id: 1
t: 190
maneuver_negotiatir.pntion
leave the update function 
in spin function, finish the n times spin:184




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185


xxx before update is x: -10.575097084
y: 3.83170700073
theta: 3.25868678093
speed: 13.7986927032
id: 0
t: 184
xxx after update is x: -11.4644451141
y: 3.4355442524
theta: 3.12075328827
speed: 13.8719186783
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -11.4644451141
y: 3.4355442524
theta: 3.12075328827
speed: 13.8719186783
id: 0
t: 185
xxx after update is x: -12.0714025497
y: 3.62461185455
theta: 3.09707093239
speed: 13.6748561859
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:186


risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9904186725616455, -50.14115905761719, 4.943624019622803, 14.2243013381958)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.26666666667






self.maneuver_requested left
RELEASE,0,8.26666666667,(-12.071402549743652, 3.6246118545532227, 3.0970709323883057),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.26666666667
self.communication_details == 0
sending RELEASE,0,8.26666666667,(-12.071402549743652, 3.6246118545532227, 3.0970709323883057),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -12.0714025497
y: 3.62461185455
theta: 3.09707093239
speed: 13.6748561859
id: 0
t: 186
xxx after update is x: -12.9206504822
y: 3.09082221985
theta: 3.27543902397
speed: 13.5881471634
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -12.9206504822
y: 3.09082221985
theta: 3.27543902397
speed: 13.5881471634
id: 0
t: 187
xxx after update is x: -13.8032169342
y: 3.22565484047
theta: 3.1330165863
speed: 13.6166057587
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -13.8032169342
y: 3.22565484047
theta: 3.1330165863
speed: 13.6166057587
id: 0
t: 188
xxx after update is x: -14.0158967972
y: 2.91575241089
theta: 3.1360065937
speed: 13.6514310837
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:189




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -14.0158967972
y: 2.91575241089
theta: 3.1360065937
speed: 13.6514310837
id: 0
t: 189
xxx after update is x: -14.6392965317
y: 3.31004714966
theta: 3.20150637627
speed: 13.8217763901
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -14.6392965317
y: 3.31004714966
theta: 3.20150637627
speed: 13.82y finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190


removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:191


xxx before update is x: -3.06686758995
y: -52.3461990356
theta: 4.7525100708
speed: 13.7043247223
id: 1
t: 190
xxx after update is x: -3.00358295441
y: -52.9414024353
theta: 4.61717891693
speed: 13.9673318863
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (-15.933570861816406, 3.1840384006500244, 3.200740098953247, 13.840250968933105)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -3.00358295441
y: -52.9414024353
theta: 4.61717891693
speed: 13.9673318863
id: 1
t: 191
xxx after update is x: -3.10275697708
y: -54.1082649231
theta: 4.51958322525
speed: 13.4763479233
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -3.10275697708
y: -54.1082649231
theta: 4.51958322525
speed: 13.4763479233
id: 1
t: 192
xxx after update is x: -2.92593073845
y: -55.0419921875
theta: 4.68052768707
speed: 13.9361515045
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.57777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194


xxx before update is x: -2.92593073845
y: -55.0419921875
theta: 4.68052768707
speed: 13.9361515045
id: 1
t: 193
xxx after update is x: -3.308573246
y: -54.9304428101
theta: 4.6388092041
speed: 14.0298471451
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 8.62222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.62222222222', 'Position': ['(-17.212709426879883', ' 3.7441325187683105', ' 3.171769618988037)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.62222222222,(-17.212709426879883, 3.7441325187683105, 3.171769618988037),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.308573246
y: -54.9304428101
theta: 4.6388092041
speed: 14.0298471451
id: 1
t: 194
xxx after update is x: -2.77656531334
y: -55.2255096436
theta: 4.94633865356
speed: 13.8741979599
id: 1
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:195




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196


xxx before update is17763901
id: 0
t: 190
xxx after update is x: -15.9335708618
y: 3.18403840065
theta: 3.20074009895
speed: 13.8402509689
id: 0
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -15.9335708618
y: 3.18403840065
theta: 3.20074009895
speed: 13.8402509689
id: 0
t: 191
xxx after update is x: -16.3977794647
y: 3.26635503769
theta: 3.21731352806
speed: 14.0372028351
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -16.3977794647
y: 3.26635503769
theta: 3.21731352806
speed: 14.0372028351
id: 0
t: 192
xxx after update is x: -16.5927886963
y: 3.32132434845
theta: 2.98567056656
speed: 13.9456949234
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194


xxx before update is x: -16.5927886963
y: 3.32132434845
theta: 2.98567056656
speed: 13.9456949234
id: 0
t: 193
xxx after update is x: -17.2127094269
y: 3.74413251877
theta: 3.17176961899
speed: 13.9314498901
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.62222222222






self.maneuver_requested left
RELEASE,0,8.62222222222,(-17.212709426879883, 3.7441325187683105, 3.171769618988037),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.62222222222
self.communication_details == 0
sending RELEASE,0,8.62222222222,(-17.212709426879883, 3.7441325187683105, 3.171769618988037),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -17.2127094269
y: 3.74413251877
theta: 3.17176961899
speed: 13.9314498901
id: 0
t: 194
xxx after update is x: -17.4433612823
y: 3.15202593803
theta: 3.409678936
speed: 14.1477813721
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -17.4433612823
y: 3.15202593803
theta: 3.409678936
speed: 14.1477813721
id: 0
t: 195
xxx after update is x: -18.2018070221
y: 3.6650865078
theta: 3.06802296638
speed: 13.9324789047
id: 0
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:196


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.8484930992126465, -55.414676666259766, 4.727499008178711, 13.860207557678223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -18.2018070221
y: 3.6650865078
theta: 3.06802296638
speed: 13.9324789047
id: 0
t: 196
xxx after update is x: -19.3400154114
y: 3.26835632324
theta: 3.22525310516
speed: 13.5513429642
id: 0
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197




going to  x: -2.77656531334
y: -55.2255096436
theta: 4.94633865356
speed: 13.8741979599
id: 1
t: 195
xxx after update is x: -3.84849309921
y: -55.4146766663
theta: 4.72749900818
speed: 13.8602075577
id: 1
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197


xxx before update is x: -3.84849309921
y: -55.4146766663
theta: 4.72749900818
speed: 13.8602075577
id: 1
t: 196
xxx after update is x: -3.49659347534
y: -57.0975265503
theta: 4.84050941467
speed: 13.9532871246
id: 1
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198


xxx before update is x: -3.49659347534
y: -57.0975265503
theta: 4.84050941467
speed: 13.9532871246
id: 1
t: 197
xxx after update is x: -3.396225214
y: -57.0538101196
theta: 4.71791410446
speed: 13.9586896896
id: 1
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199


xxx before update is x: -3.396225214
y: -57.0538101196
theta: 4.71791410446
speed: 13.9586896896
id: 1
t: 198
xxx after update is x: -2.85781145096
y: -57.7004890442
theta: 4.61194086075
speed: 13.78860569
id: 1
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-20.261314392089844, 2.9390974044799805, 3.247926712036133, 13.97586441040039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200


xxx before update is x: -2.85781145096
y: -57.7004890442
theta: 4.61194086075
speed: 13.78860569
id: 1
t: 199
xxx after update is x: -2.84042477608
y: -58.75730896
theta: 4.75716114044
speed: 13.9447879791
id: 1
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:201


xxx before update is x: -2.84042477608
y: -58.75730896
theta: 4.75716114044
speed: 13.9447879791
id: 1
t: 200
xxx after update is x: -3.31818509102
y: -59.3851852417
theta: 4.68685483932
speed: 13.9154024124
id: 1
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.93333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31818509102
y: -59.3851852417
theta: 4.68685483932
speed: 13.9154024124
id: 1
t: 201
xxx after update is x: -3.11086153984
y: -59.7596626282
theta: 4.60327529907
speed: 14.3359537125
id: 1
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202


Received -->>: 
current clock is 8.97777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.97777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198


xxx before update is x: -19.3400154114
y: 3.26835632324
theta: 3.22525310516
speed: 13.5513429642
id: 0
t: 197
xxx after update is x: -19.4926452637
y: 3.85148835182
theta: 3.161850214
speed: 13.7978105545
id: 0
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:199


xxx before update is x: -19.4926452637
y: 3.85148835182
theta: 3.161850214
speed: 13.7978105545
id: 0
t: 198
xxx after update is x: -20.2613143921
y: 2.93909740448
theta: 3.24792671204
speed: 13.9758644104
id: 0
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -20.2613143921
y: 2.93909740448
theta: 3.24792671204
speed: 13.9758644104
id: 0
t: 199
xxx after update is x: -21.1953411102
y: 2.66814780235
theta: 3.25044322014
speed: 13.9026041031
id: 0
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:200




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:201


xxx before update is x: -21.1953411102
y: 2.66814780235
theta: 3.25044322014
speed: 13.9026041031
id: 0
t: 200
xxx after update is x: -21.0291595459
y: 3.55098557472
theta: 3.27270197868
speed: 14.0914478302
id: 0
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202


xxx before update is x: -21.0291595459
y: 3.55098557472
theta: 3.27270197868
speed: 14.0914478302
id: 0
t: 201
xxx after update is x: -21.6939506531
y: 2.94388198853
theta: 3.05734634399
speed: 13.7158527374
id: 0
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.97777777778






self.maneuver_requested left
RELEASE,0,8.97777777778,(-21.693950653076172, 2.9438819885253906, 3.0573463439941406),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.97777777778
self.communication_details == 0
sending RELEASE,0,8.97777777778,(-21.693950653076172, 2.9438819885253906, 3.0573463439941406),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203


xxx before update is x: -21.6939506531
y: 2.94388198853
theta: 3.05734634399
speed: 13.7158527374
id: 0
t: 202
xxx after update is x: -22.6858882904
y: 3.64854073524
theta: 3.2009472847
speed: 14.1183433533
id: 0
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -22.6858882904
y: 3.64854073524
theta: 3.2009472847
speed: 14.1183433533
id: 0
t: 203
xxx after update is x: -23.3114509583
y: 3.14639687538
theta: 3.0971493721
speed: 14.2018241882
id: 0
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:204




going to the update function
sim.TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.97777777778', 'Position': ['(-21.693950653076172', ' 2.9438819885253906', ' 3.0573463439941406)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.97777777778,(-21.693950653076172, 2.9438819885253906, 3.0573463439941406),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203


xxx before update is x: -3.11086153984
y: -59.7596626282
theta: 4.60327529907
speed: 14.3359537125
id: 1
t: 202
xxx after update is x: -2.94002580643
y: -60.3420753479
theta: 4.78065538406
speed: 14.0904140472
id: 1
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204


xxx before update is x: -2.94002580643
y: -60.3420753479
theta: 4.78065538406
speed: 14.0904140472
id: 1
t: 203
xxx after update is x: -3.4675784111
y: -60.4466362
theta: 4.84384632111
speed: 14.039182663
id: 1
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205


xxx before update is x: -3.4675784111
y: -60.4466362
theta: 4.84384632111
speed: 14.039182663
id: 1
t: 204
xxx after update is x: -3.11311459541
y: -61.5555229187
theta: 4.6075592041
speed: 13.9210481644
id: 1
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11311459541
y: -61.5555229187
theta: 4.6075592041
speed: 13.9210481644
id: 1
t: 205
xxx after update is x: -3.45213937759
y: -62.0925827026
theta: 4.74099063873
speed: 14.0879402161
id: 1
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:206




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -3.45213937759
y: -62.0925827026
theta: 4.74099063873
speed: 14.0879402161
id: 1
t: 206
xxx after update is x: -3.07860469818
y: -62.8185043335
theta: 4.71076536179
speed: 13.8533153534
id: 1
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.07860469818
y: -62.8185043335
theta: 4.71076536179
speed: 13.8533153534
id: 1
t: 207
xxx after update is x: -3.54296469688
y: -63.578704834
theta: 4.66862010956
speed: 14.2664718628
id: 1
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:208




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.54296469688
y: -63.578704834
theta: 4.66862010956
speed: 14.2664718628
id: 1
t: 208
xxx after update is x: -3.88862109184
y: -63.2779922485
theta: 4.90475177765
speed: 13.7221879959
id: 1
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.28888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeedpy in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -23.3114509583
y: 3.14639687538
theta: 3.0971493721
speed: 14.2018241882
id: 0
t: 204
xxx after update is x: -24.0603523254
y: 3.64956068993
theta: 3.12991571426
speed: 13.8554096222
id: 0
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206


xxx before update is x: -24.0603523254
y: 3.64956068993
theta: 3.12991571426
speed: 13.8554096222
id: 0
t: 205
xxx after update is x: -24.8760910034
y: 3.23360729218
theta: 2.96344637871
speed: 14.0317134857
id: 0
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -24.8760910034
y: 3.23360729218
theta: 2.96344637871
speed: 14.0317134857
id: 0
t: 206
xxx after update is x: -24.9317016602
y: 3.31165885925
theta: 3.10226297379
speed: 13.7357807159
id: 0
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0786046981811523, -62.818504333496094, 4.710765361785889, 13.853315353393555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208


xxx before update is x: -24.9317016602
y: 3.31165885925
theta: 3.10226297379
speed: 13.7357807159
id: 0
t: 207
xxx after update is x: -26.166475296
y: 3.33235263824
theta: 3.21971797943
speed: 13.8891019821
id: 0
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209


xxx before update is x: -26.166475296
y: 3.33235263824
theta: 3.21971797943
speed: 13.8891019821
id: 0
t: 208
xxx after update is x: -25.8947944641
y: 3.3995051384
theta: 3.15014100075
speed: 14.0598049164
id: 0
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.28888888889






self.maneuver_requested left
RELEASE,0,9.28888888889,(-25.894794464111328, 3.399505138397217, 3.1501410007476807),14,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.28888888889
self.communication_details == 0
sending RELEASE,0,9.28888888889,(-25.894794464111328, 3.399505138397217, 3.1501410007476807),14,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: -25.8947944641
y: 3.3995051384
theta: 3.15014100075
speed: 14.0598049164
id: 0
t: 209
xxx after update is x: -26.7025794983
y: 3.60293221474
theta: 3.15925240517
speed: 13.8847322464
id: 0
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:210


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -26.7025794983
y: 3.60293221474
theta: 3.15925240517
speed: 13.8847322464
id: 0
t: 210
xxx after update is x: -27.72681427
y: 3.52184653282
theta: 3.19637322426
speed: 13.3684358 < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.88862109184
y: -63.2779922485
theta: 4.90475177765
speed: 13.7221879959
id: 1
t: 209
xxx after update is x: -3.06490397453
y: -64.6256408691
theta: 4.69278144836
speed: 13.7262535095
id: 1
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 9.33333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '9.28888888889', 'Position': ['(-25.894794464111328', ' 3.399505138397217', ' 3.1501410007476807)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.28888888889,(-25.894794464111328, 3.399505138397217, 3.1501410007476807),14,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




leave the update function 
in spin function, finish the n times spin:210




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06490397453
y: -64.6256408691
theta: 4.69278144836
speed: 13.7262535095
id: 1
t: 210
xxx after update is x: -2.78256464005
y: -65.6123123169
theta: 4.51619434357
speed: 13.7610349655
id: 1
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:211


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212


xxx before update is x: -2.78256464005
y: -65.6123123169
theta: 4.51619434357
speed: 13.7610349655
id: 1
t: 211
xxx after update is x: -3.03525805473
y: -66.1694793701
theta: 4.73509788513
speed: 14.0172166824
id: 1
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.03525805473
y: -66.1694793701
theta: 4.73509788513
speed: 14.0172166824
id: 1
t: 212
xxx after update is x: -3.39345026016
y: -66.7446899414
theta: 4.91435480118
speed: 13.6117658615
id: 1
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:213


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5263999999999986]
222 self.state_dicts[msg.id][msg.t] is (-29.083587646484375, 3.1435766220092773, 3.1851019859313965, 14.061967849731445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.39345026016
y: -66.7446899414
theta: 4.91435480118
speed: 13.6117658615
id: 1
t: 213
xxx after update is x: -3.36768841743
y: -67.4930725098
theta: 4.79285955429
speed: 13.8475866318
id: 1
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215


xxx before update is x: -3.36768841743
y: -67.4930725098
theta: 4.79285955429
speed: 13.8475866318
id: 1
t: 214
xxx after update is x: -3.52179026604
y: -67.227180481
theta: 4.80646800995
speed: 13.9223012924
id: 1
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the updat597
id: 0
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:211




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:212


xxx before update is x: -27.72681427
y: 3.52184653282
theta: 3.19637322426
speed: 13.3684358597
id: 0
t: 211
xxx after update is x: -28.6356258392
y: 3.27220797539
theta: 2.86156225204
speed: 14.3111791611
id: 0
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:213


xxx before update is x: -28.6356258392
y: 3.27220797539
theta: 2.86156225204
speed: 14.3111791611
id: 0
t: 212
xxx after update is x: -29.0835876465
y: 3.14357662201
theta: 3.18510198593
speed: 14.0619678497
id: 0
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -29.0835876465
y: 3.14357662201
theta: 3.18510198593
speed: 14.0619678497
id: 0
t: 213
xxx after update is x: -29.723197937
y: 2.81980872154
theta: 3.0272667408
speed: 13.6933898926
id: 0
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215


xxx before update is x: -29.723197937
y: 2.81980872154
theta: 3.0272667408
speed: 13.6933898926
id: 0
t: 214
xxx after update is x: -30.1551494598
y: 3.16934728622
theta: 3.20224785805
speed: 13.8390455246
id: 0
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216


xxx before update is x: -30.1551494598
y: 3.16934728622
theta: 3.20224785805
speed: 13.8390455246
id: 0
t: 215
xxx after update is x: -30.6811180115
y: 2.98025155067
theta: 3.09434866905
speed: 13.9871444702
id: 0
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -30.6811180115
y: 2.98025155067
theta: 3.09434866905
speed: 13.9871444702
id: 0
t: 216
xxx after update is x: -31.7153110504
y: 3.52635884285
theta: 3.17030262947
speed: 13.5418968201
id: 0
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:217




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218


xxx before update is x: -31.7153110504
y: 3.52635884285
theta: 3.17030262947
speed: 13.5418968201
id: 0
t: 217
xxx after update is x: -31.6852970123
y: 3.10252213478
theta: 3.15174365044
speed: 13.5239295959
id: 0
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.68888888889






self.maneuver_requested left
RELEASE,0,9.68888888889,(-31.6852970123291, 3.102522134780884, 3.1517436504364014),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.68888888889
self.communication_details == 0
sending RELEASE,0,9.68888888889,(-31.6852970123291, 3.102522134780884, 3.1517436504364014),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_messe function xxx before update is x: -3.52179026604
y: -67.227180481
theta: 4.80646800995
speed: 13.9223012924
id: 1
t: 215
xxx after update is x: -3.63426685333
y: -68.582572937
theta: 4.45858669281
speed: 13.7247047424
id: 1
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:216




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.6






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218


xxx before update is x: -3.63426685333
y: -68.582572937
theta: 4.45858669281
speed: 13.7247047424
id: 1
t: 216
xxx after update is x: -4.11362981796
y: -68.8287734985
theta: 4.77478599548
speed: 13.8132572174
id: 1
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -4.11362981796
y: -68.8287734985
theta: 4.77478599548
speed: 13.8132572174
id: 1
t: 217
xxx after update is x: -3.26379108429
y: -69.1302337646
theta: 4.65053701401
speed: 14.2119789124
id: 1
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 9.68888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.68888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '9.68888888889', 'Position': ['(-31.6852970123291', ' 3.102522134780884', ' 3.1517436504364014)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.68888888889,(-31.6852970123291, 3.102522134780884, 3.1517436504364014),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:219


xxx before update is x: -3.26379108429
y: -69.1302337646
theta: 4.65053701401
speed: 14.2119789124
id: 1
t: 218
xxx after update is x: -3.2373623848
y: -70.0707321167
theta: 4.73781251907
speed: 13.7120065689
id: 1
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:220


xxx before update is x: -3.2373623848
y: -70.0707321167
theta: 4.73781251907
speed: 13.7120065689
id: 1
t: 219
xxx after update is x: -3.37733435631
y: -71.1955947876
theta: 4.49160432816
speed: 13.9338340759
id: 1
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221


xxx before update is x: -3.37733435631
y: -71.1955947876
theta: 4.49160432816
speed: 13.9338340759
id: 1
t: 220
xxx after update is x: -3.09230875969
y: -71.4255905151
theta: 4.77978134155
speed: 13.8738498688
id: 1
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -3.09230875969
y: -71.4255905151
theta: 4.77978134155
speed: 13.8738498688
id: 1
t: 221
xxx afage
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:219


xxx before update is x: -31.6852970123
y: 3.10252213478
theta: 3.15174365044
speed: 13.5239295959
id: 0
t: 218
xxx after update is x: -32.6898231506
y: 3.05966663361
theta: 2.99566459656
speed: 13.5001506805
id: 0
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220


xxx before update is x: -32.6898231506
y: 3.05966663361
theta: 2.99566459656
speed: 13.5001506805
id: 0
t: 219
xxx after update is x: -32.6525993347
y: 2.90087985992
theta: 3.03564929962
speed: 13.8762226105
id: 0
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3773343563079834, -71.19559478759766, 4.491604328155518, 13.933834075927734)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221


xxx before update is x: -32.6525993347
y: 2.90087985992
theta: 3.03564929962
speed: 13.8762226105
id: 0
t: 220
xxx after update is x: -34.1577568054
y: 3.22424578667
theta: 3.08450746536
speed: 14.0889110565
id: 0
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -34.1577568054
y: 3.22424578667
theta: 3.08450746536
speed: 14.0889110565
id: 0
t: 221
xxx after update is x: -34.1486167908
y: 3.41125559807
theta: 3.18589901924
speed: 14.0331544876
id: 0
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223


xxx before update is x: -34.1486167908
y: 3.41125559807
theta: 3.18589901924
speed: 14.0331544876
id: 0
t: 222
xxx after update is x: -35.3030052185
y: 3.69830322266
theta: 3.16007590294
speed: 14.1485385895
id: 0
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -35.3030052185
y: 3.69830322266
theta: 3.16007590294
speed: 14.1485385895
id: 0
t: 223
xxx after update is x: -35.7127075195
y: 2.83602595329
theta: 3.09422492981
speed: 14.0837182999
id: 0
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:224




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -35.7127075195
y: 2.83602595329
theta: 3.09422492981
speed: 14.0837182999
id: 0
t: 224
xxx after update is x: -35.893409729
y: 3.40507102013
theta: 3.2335691452
speed: 13.7787828445
id: 0
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -35.893409729
y: 3.40507102013
theta: 3.2335691452
speed: 13.7787828445
id: 0
t: 225
xxx after update is x: -36.8811759949
y: 3.12805557251
theta: 3.09983563423
speed: 13.6013936996
id: 0
t: 226
mater update is x: -3.12919569016
y: -72.5237884521
theta: 4.81364059448
speed: 13.7610578537
id: 1
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-34.148616790771484, 3.4112555980682373, 3.185899019241333, 14.033154487609863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12919569016
y: -72.5237884521
theta: 4.81364059448
speed: 13.7610578537
id: 1
t: 222
xxx after update is x: -2.97387599945
y: -72.8815460205
theta: 4.57793235779
speed: 13.85779953
id: 1
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:223




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.97387599945
y: -72.8815460205
theta: 4.57793235779
speed: 13.85779953
id: 1
t: 223
xxx after update is x: -3.29139137268
y: -73.2586746216
theta: 4.71022415161
speed: 13.8398838043
id: 1
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:224




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -3.29139137268
y: -73.2586746216
theta: 4.71022415161
speed: 13.8398838043
id: 1
t: 224
xxx after update is x: -3.10529446602
y: -73.6421356201
theta: 4.68349790573
speed: 13.4418792725
id: 1
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.0






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:226


xxx before update is x: -3.10529446602
y: -73.6421356201
theta: 4.68349790573
speed: 13.4418792725
id: 1
t: 225
xxx after update is x: -3.67060995102
y: -74.5833053589
theta: 4.67912483215
speed: 13.8948192596
id: 1
t: 226
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 10.0444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.0444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.0444444444', 'Position': ['(-36.88117599487305', ' 3.1280555725097656', ' 3.0998356342315674)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.0444444444,(-36.88117599487305, 3.1280555725097656, 3.0998356342315674),13,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:227


xxx before update is x: -3.67060995102
y: -74.5833053589
theta: 4.67912483215
speed: 13.8948192596
id: 1
t: 226
xxx after update is x: -2.95526432991
y: -75.5610733032
theta: 4.68697738647
speed: 13.8482570648
id: 1
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:228


xxx before update is x: -2.9552643neuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:226


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.0444444444






self.maneuver_requested left
RELEASE,0,10.0444444444,(-36.88117599487305, 3.1280555725097656, 3.0998356342315674),13,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.0444444444
self.communication_details == 0
sending RELEASE,0,10.0444444444,(-36.88117599487305, 3.1280555725097656, 3.0998356342315674),13,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:227


xxx before update is x: -36.8811759949
y: 3.12805557251
theta: 3.09983563423
speed: 13.6013936996
id: 0
t: 226
xxx after update is x: -37.9275398254
y: 2.86661791801
theta: 3.17823410034
speed: 13.8105745316
id: 0
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -37.9275398254
y: 2.86661791801
theta: 3.17823410034
speed: 13.8105745316
id: 0
t: 227
xxx after update is x: -38.2073364258
y: 3.19705343246
theta: 2.90393853188
speed: 13.9401407242
id: 0
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:228




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -38.2073364258
y: 3.19705343246
theta: 2.90393853188
speed: 13.9401407242
id: 0
t: 228
xxx after update is x: -38.835559845
y: 3.16149973869
theta: 3.1365377903
speed: 13.8974885941
id: 0
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:229




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -38.835559845
y: 3.16149973869
theta: 3.1365377903
speed: 13.8974885941
id: 0
t: 229
xxx after update is x: -39.2148895264
y: 2.97004795074
theta: 3.30069422722
speed: 14.1159887314
id: 0
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -39.2148895264
y: 2.97004795074
theta: 3.30069422722
speed: 14.1159887314
id: 0
t: 230
xxx after update is x: -39.8446350098
y: 3.1372897625
theta: 3.207447052
speed: 14.1104841232
id: 0
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:231




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:232




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:233


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.2666666667






self.maneuver_requested left
RELEASE,0,10.2666666667,(-39.844635009765625, 3.1372897624969482, 3.207447052001953),14,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.2666666667
self.communication_details == 0
sending RELEASE,0,10.2666666667,(-39.844635009765625, 3.1372897624969482, 3.207447052001953),14,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_mess2991
y: -75.5610733032
theta: 4.68697738647
speed: 13.8482570648
id: 1
t: 227
xxx after update is x: -3.36227416992
y: -75.8406448364
theta: 4.78407287598
speed: 14.1372919083
id: 1
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:229


xxx before update is x: -3.36227416992
y: -75.8406448364
theta: 4.78407287598
speed: 14.1372919083
id: 1
t: 228
xxx after update is x: -3.4973692894
y: -76.4293365479
theta: 4.65660476685
speed: 13.7364635468
id: 1
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -3.4973692894
y: -76.4293365479
theta: 4.65660476685
speed: 13.7364635468
id: 1
t: 229
xxx after update is x: -3.35965275764
y: -77.12525177
theta: 4.62562513351
speed: 13.851149559
id: 1
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5007999999999979]
222 self.state_dicts[msg.id][msg.t] is (-39.21488952636719, 2.970047950744629, 3.300694227218628, 14.115988731384277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.35965275764
y: -77.12525177
theta: 4.62562513351
speed: 13.851149559
id: 1
t: 230
xxx after update is x: -2.82569789886
y: -77.6337738037
theta: 4.55985355377
speed: 13.8906946182
id: 1
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:231




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.2666666667






self.maneuver_requested None
xxx before update is x: -2.82569789886
y: -77.6337738037
theta: 4.55985355377
speed: 13.8906946182
id: 1
t: 231
xxx after update is x: -3.15419220924
y: -82.129119873
theta: 4.5600810051
speed: 14.0823717117
id: 1
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 10.3111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.3111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '10.2666666667', 'Position': ['(-39.844635009765625', ' 3.1372897624969482', ' 3.207447052001953)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.2666666667,(-39.844635009765625, 3.1372897624969482, 3.207447052001953),14,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish
leave the update function 
in spin function, finish the n times spin:232




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:233


xxx before update is x: -3.15419220924
y: -82.129119873
theta: 4.5600810051
speed: 14.0823717117
id: 1
t: 232
xxx after update is x: -3.31998109818
y: -82.7579727173
theta: 4.4420042038
speed: 13.8671092987
id: 1
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xage
xxx before update is x: -39.8446350098
y: 3.1372897625
theta: 3.207447052
speed: 14.1104841232
id: 0
t: 231
xxx after update is x: -44.2793884277
y: 3.39476394653
theta: 3.16442227364
speed: 12.5232429504
id: 0
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -44.2793884277
y: 3.39476394653
theta: 3.16442227364
speed: 12.5232429504
id: 0
t: 232
xxx after update is x: -43.9605712891
y: 3.32353496552
theta: 3.08373951912
speed: 12.3752965927
id: 0
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:234


xxx before update is x: -43.9605712891
y: 3.32353496552
theta: 3.08373951912
speed: 12.3752965927
id: 0
t: 233
xxx after update is x: -44.5541725159
y: 3.00333189964
theta: 2.99322152138
speed: 11.8192272186
id: 0
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:235


xxx before update is x: -44.5541725159
y: 3.00333189964
theta: 2.99322152138
speed: 11.8192272186
id: 0
t: 234
xxx after update is x: -45.0971107483
y: 3.11019515991
theta: 3.21140289307
speed: 11.575799942
id: 0
t: 235
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:236


xxx before update is x: -45.0971107483
y: 3.11019515991
theta: 3.21140289307
speed: 11.575799942
id: 0
t: 235
xxx after update is x: -46.5734825134
y: 3.39337706566
theta: 3.18303966522
speed: 11.4090862274
id: 0
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -46.5734825134
y: 3.39337706566
theta: 3.18303966522
speed: 11.4090862274
id: 0
t: 236
xxx after update is x: -47.0799407959
y: 2.92072582245
theta: 3.08220887184
speed: 10.8092002869
id: 0
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:237




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -47.0799407959
y: 2.92072582245
theta: 3.08220887184
speed: 10.8092002869
id: 0
t: 237
xxx after update is x: -47.063911438
y: 3.25900268555
theta: 3.22343707085
speed: 10.228354454
id: 0
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -47.063911438
y: 3.25900268555
theta: 3.22343707085
speed: 10.228354454
id: 0
t: 238
xxx after update is x: -46.787071228
y: 3.55613565445
theta: 3.00061392784
speed: 10.3953008652
id: 0
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -46.787071228
y: 3.55613565445
theta: 3.00061392784
speed: 10.3953008652
id: 0
t: 239
xxx after update is x: -47.5867767334
y: 3.05355143547
theta: 3.11996245384
speed: 10.5478582382
id: 0
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:240




going to the update function
sim.py in the sim.py update function 
targetspeed < selxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31998109818
y: -82.7579727173
theta: 4.4420042038
speed: 13.8671092987
id: 1
t: 233
xxx after update is x: -3.46389293671
y: -83.6151046753
theta: 4.74777078629
speed: 13.8884391785
id: 1
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:234




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.46389293671
y: -83.6151046753
theta: 4.74777078629
speed: 13.8884391785
id: 1
t: 234
xxx after update is x: -3.08186483383
y: -84.0090026855
theta: 4.63122081757
speed: 13.8977460861
id: 1
t: 235
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:235




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08186483383
y: -84.0090026855
theta: 4.63122081757
speed: 13.8977460861
id: 1
t: 235
xxx after update is x: -3.2454252243
y: -85.5325088501
theta: 4.75507164001
speed: 13.6551856995
id: 1
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:236




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:237


xxx before update is x: -3.2454252243
y: -85.5325088501
theta: 4.75507164001
speed: 13.6551856995
id: 1
t: 236
xxx after update is x: -3.11564230919
y: -85.4087600708
theta: 4.65190982819
speed: 14.060341835
id: 1
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11564230919
y: -85.4087600708
theta: 4.65190982819
speed: 14.060341835
id: 1
t: 237
xxx after update is x: -2.95461845398
y: -86.1804504395
theta: 4.75834560394
speed: 13.8588819504
id: 1
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.95461845398
y: -86.1804504395
theta: 4.75834560394
speed: 13.8588819504
id: 1
t: 238
xxx after update is x: -3.6410009861
y: -86.5324859619
theta: 4.73890972137
speed: 13.5792942047
id: 1
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -3.6410009861
y: -86.5324859619
theta: 4.73890972137
speed: 13.5792942047
id: 1
t: 239
xxx after update is x: -2.87576627731
y: -87.4139480591
theta: 4.54902219772
speed: 12.728925705
id: 1
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.6666666667






self.maneuver_requested None
leave the update function 
in spin function, finish the n times spin:240




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -2.87576627731
y: -87.4139480591
theta: 4.54902219772
speed: 12.728925705
id: 1
t: 240
xxx after update is x: -2.77019000053
y: -89.0755004883
theta: 4.60757112503
speed: 11.5081195831
id: 1
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:241


Received -->>: 
current clock is 10.7111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.7111111111
maneuver_negotiatir.py f.speed:
 self.man_init:
xxx before update is x: -47.5867767334
y: 3.05355143547
theta: 3.11996245384
speed: 10.5478582382
id: 0
t: 240
xxx after update is x: -48.2776107788
y: 2.96895337105
theta: 3.07790660858
speed: 9.71101379395
id: 0
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:241


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.7111111111






self.maneuver_requested left
RELEASE,0,10.7111111111,(-48.277610778808594, 2.9689533710479736, 3.077906608581543),9,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.7111111111
self.communication_details == 0
sending RELEASE,0,10.7111111111,(-48.277610778808594, 2.9689533710479736, 3.077906608581543),9,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
222 self.state_dicts[msg.id][msg.t] is (-2.7701900005340576, -89.07550048828125, 4.607571125030518, 11.508119583129883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -48.2776107788
y: 2.96895337105
theta: 3.07790660858
speed: 9.71101379395
id: 0
t: 241
xxx after update is x: -50.061252594
y: 3.15323758125
theta: 3.19191789627
speed: 11.0027275085
id: 0
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:242




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -50.061252594
y: 3.15323758125
theta: 3.19191789627
speed: 11.0027275085
id: 0
t: 242
xxx after update is x: -50.2303657532
y: 3.1404747963
theta: 2.90922689438
speed: 11.3583288193
id: 0
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:243




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:244


xxx before update is x: -50.2303657532
y: 3.1404747963
theta: 2.90922689438
speed: 11.3583288193
id: 0
t: 243
xxx after update is x: -51.1517829895
y: 2.7403626442
theta: 3.22497653961
speed: 11.8350973129
id: 0
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:245


xxx before update is x: -51.1517829895
y: 2.7403626442
theta: 3.22497653961
speed: 11.8350973129
id: 0
t: 244
xxx after update is x: -51.6892547607
y: 3.40703248978
theta: 3.00552201271
speed: 11.9324417114
id: 0
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:246


xxx before update is x: -51.6892547607
y: 3.40703248978
theta: 3.00552201271
speed: 11.9324417114
id: 0
t: 245
xxx after update is x: -51.8341636658
y: 3.31836867332
theta: 3.07382130623
speed: 12.2000722885
id: 0
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:247


xxx before update is x: -51.8341636658
y: 3.31836867332
theta: 3.07382130623
speed: 12.2000722885
id: 0
t: 246
xxx after update is x: -52.8166656494
y: 2.74491643906
theta: 3.11559319496
speed: 12.618227005
id: 0
t: 2message_processing, curtime-t <= self.TD) .Truemaneuver_negotiatir.py in the try maneuver function update -. sfinish

maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '10.7111111111', 'Position': ['(-48.277610778808594', ' 2.9689533710479736', ' 3.077906608581543)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.7111111111,(-48.277610778808594, 2.9689533710479736, 3.077906608581543),9,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:242


xxx before update is x: -2.77019000053
y: -89.0755004883
theta: 4.60757112503
speed: 11.5081195831
id: 1
t: 241
xxx after update is x: -3.24204611778
y: -90.070098877
theta: 4.7921538353
speed: 11.4575824738
id: 1
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:243


xxx before update is x: -3.24204611778
y: -90.070098877
theta: 4.7921538353
speed: 11.4575824738
id: 1
t: 242
xxx after update is x: -3.58021903038
y: -91.229637146
theta: 4.63038873672
speed: 11.1169052124
id: 1
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:244


xxx before update is x: -3.58021903038
y: -91.229637146
theta: 4.63038873672
speed: 11.1169052124
id: 1
t: 243
xxx after update is x: -2.56686282158
y: -91.0446090698
theta: 4.66536045074
speed: 10.499042511
id: 1
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (-51.15178298950195, 2.7403626441955566, 3.2249765396118164, 11.835097312927246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:245


xxx before update is x: -2.56686282158
y: -91.0446090698
theta: 4.66536045074
speed: 10.499042511
id: 1
t: 244
xxx after update is x: -3.22529220581
y: -90.996963501
theta: 4.75585269928
speed: 10.9300985336
id: 1
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:246


xxx before update is x: -3.22529220581
y: -90.996963501
theta: 4.75585269928
speed: 10.9300985336
id: 1
t: 245
xxx after update is x: -2.88589954376
y: -91.5580673218
theta: 4.74365901947
speed: 11.3635921478
id: 1
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:247


xxx before update is x: -2.88589954376
y: -91.5580673218
theta: 4.74365901947
speed: 11.3635921478
id: 1
t: 246
xxx after update is x: -2.9203555584
y: -92.1302185059
theta: 4.60873556137
speed: 11.6979503632
id: 1
t: 247
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:248




going to 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -52.8166656494
y: 2.74491643906
theta: 3.11559319496
speed: 12.618227005
id: 0
t: 247
xxx after update is x: -53.5159492493
y: 2.87059164047
theta: 3.00401592255
speed: 12.862402916
id: 0
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:248


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested left
RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.0222222222
self.communication_details == 0
sending RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested left
RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.0222222222
self.communication_details == 0
sending RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested left
RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.0222222222
self.communication_details == 0
sending RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:249


the update functionmaneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.9777777778






self.maneuver_requested None
Received -->>: 
current clock is 10.9777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.9777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '12', 'Sender': '0', 'TagID': '1', 'Time': '11.0222222222', 'Position': ['(-53.51594924926758', ' 2.870591640472412', ' 3.0040159225463867)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




 xxx before update is x: -2.9203555584
y: -92.1302185059
theta: 4.60873556137
speed: 11.6979503632
id: 1
t: 247
xxx after update is x: -3.5830245018
y: -93.4918365479
theta: 4.69677352905
speed: 12.749083519
id: 1
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested None
Received -->>: 
current clock is 11.0222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.0222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '12', 'Sender': '0', 'TagID': '1', 'Time': '11.0222222222', 'Position': ['(-53.51594924926758', ' 2.870591640472412', ' 3.0040159225463867)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested None
Received -->>: 
current clock is 11.0222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.0222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '12', 'Sender': '0', 'TagID': '1', 'Time': '11.0222222222', 'Position': ['(-53.51594924926758', ' 2.870591640472412', ' 3.0040159225463867)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.0222222222,(-53.51594924926758, 2.870591640472412, 3.0040159225463867),12,1,3.28888888889,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5423999999999991]

sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:249


... logging to /home/lu/.ros/log/e83e945a-02bb-11e9-ae37-000c291801fc/roslaunch-ubuntu-35681.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:34675/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [35691][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to e83e945a-02bb-11e9-ae37-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [35712][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [35721][0m
[1mprocess[rviz-3]: started with pid [35731][0m
[1mprocess[car0-4]: started with pid [35732][0m
[1mprocess[car1-5]: started with pid [35733][0m
[1mprocess[cloud-6]: started with pid [35734][0m
[cloud-6] killing on exit
[car0-4] killing on exit
[car1-5] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.07514595985


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (3.24843430519104, -64.63719177246094, 1.5316632986068726, 14.071894645690918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f39e60105a8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f39e602c7a0>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (3.054213047027588, -63.61505889892578, 1.5278704166412354, 13.63521957397461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.88616228104
y: 62.9217910767
theta: 4.9341583252
speed: 14.2856702805
id: 1
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4


xxx before update is x: -3.88616228104
y: 62.9217910767
theta: 4.9341583252
speed: 14.2856702805
id: 1
t: 3
xxx after update is x: -3.57343792915
y: 62.2698059082
theta: 4.65918874741
speed: 13.6922864914
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5301630171885346, 0.37100398167602877]
222 self.state_dicts[msg.id][msg.t] is (3.5185446739196777, -62.651729583740234, 1.85490882396698, 13.853730201721191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5


xxx before update is x: -3.57343792915
y: 62.2698059082
theta: 4.65918874741
speed: 13.6922864914
id: 1
t: 4
xxx after update is x: -3.41586661339
y: 61.480381012
theta: 4.66351032257
speed: 13.8667058945
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetssim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.08226203918


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (-3.572252035140991, 63.71245193481445, 4.7088942527771, 13.76867389678955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f3d00f7f290>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f3d00f97e18>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
222 self.state_dicts[msg.id][msg.t] is (-3.231621265411377, 63.64656448364258, 4.614072799682617, 13.730189323425293)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.16264510155
y: -62.994934082
theta: 1.47762799263
speed: 13.8806200027
id: 0
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.886162281036377, 62.921791076660156, 4.9341583251953125, 14.285670280456543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4


xxx before update is x: 3.16264510155
y: -62.994934082
theta: 1.47762799263
speed: 13.8806200027
id: 0
t: 3
xxx after update is x: 3.51854467392
y: -62.6517295837
theta: 1.85490882397
speed: 13.8537302017
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


xxx before update is x: 3.51854467392
y: -62.6517295837
theta: 1.85490882397
speed: 13.8537302017
id: 0
t: 4
xxx after update is x: 2.67349481583
y: -61.8756332397
theta: 1.40616357327
speed: 13.589225769
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


xxx before update is x: 2.67349481583
y: -61.8756332397
theta: 1.40616357327
speed: 13.589225769
id: 0
t: 5
xxx after update is x: 3.19824385643
y: -61.1990814209
thepeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6


xxx before update is x: -3.41586661339
y: 61.480381012
theta: 4.66351032257
speed: 13.8667058945
id: 1
t: 5
xxx after update is x: -3.05315613747
y: 60.7789459229
theta: 4.76878213882
speed: 13.9102725983
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7


xxx before update is x: -3.05315613747
y: 60.7789459229
theta: 4.76878213882
speed: 13.9102725983
id: 1
t: 6
xxx after update is x: -4.00996303558
y: 60.534286499
theta: 4.670317173
speed: 13.3790531158
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: -4.00996303558
y: 60.534286499
theta: 4.670317173
speed: 13.3790531158
id: 1
t: 7
xxx after update is x: -3.29950022697
y: 60.0988426208
theta: 4.70710325241
speed: 14.1328029633
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3423810155972617, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1956984996795654, -59.79946517944336, 1.5923101902008057, 13.816888809204102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: -3.29950022697
y: 60.0988426208
theta: 4.70710325241
speed: 14.1328029633
id: 1
t: 8
xxx after update is x: -3.62877392769
y: 59.2792739868
theta: 4.68156051636
speed: 13.9528923035
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.4






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: -3.62877392769
y: 59.2792739868
theta: 4.68156051636
speed: 13.9528923035
id: 1
t: 9
xxx after update is x: -2.83605003357
y: 58.5555534363
theta: 4.60609054565
speed: 13.6785316467
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: -2.83605003357
y: 58.5555534363
theta: 4.60609054565
speed: 13.6785316467
id: 1
t: 10
xxx after update is x: -3.17889165878
y: 58.167339325
theta: 4.76919984818
speed: 13.7230501175
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.33639743142294126, 0]
222 self.state_dicts[msg.id][msg.t] is (3.6415629386901855, -58.358375549316406, 1.519410490989685, 13.78695011138916)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: -3.17889165878
y: 58.167339325
theta: 4.76919984818
speed: 13.7230501175
id: 1
t: 11
xxx after update is x: -3.70094680786
y: 57.5369033813
theta: 4.79826927185
speed: 14.0998773575
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


goingta: 1.44607794285
speed: 13.7478046417
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.379825568333513, 0.4310791587434282]
222 self.state_dicts[msg.id][msg.t] is (-3.0531561374664307, 60.77894592285156, 4.768782138824463, 13.910272598266602)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


xxx before update is x: 3.19824385643
y: -61.1990814209
theta: 1.44607794285
speed: 13.7478046417
id: 0
t: 6
xxx after update is x: 3.40216803551
y: -60.7348480225
theta: 1.6707264185
speed: 13.8548736572
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: 3.40216803551
y: -60.7348480225
theta: 1.6707264185
speed: 13.8548736572
id: 0
t: 7
xxx after update is x: 3.19569849968
y: -59.7994651794
theta: 1.5923101902
speed: 13.8168888092
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: 3.19569849968
y: -59.7994651794
theta: 1.5923101902
speed: 13.8168888092
id: 0
t: 8
xxx after update is x: 3.64646267891
y: -59.6258087158
theta: 1.60275411606
speed: 13.9169511795
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.4






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
risk is [0.37047701979018527, 0.3204791319917072]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: 3.64646267891
y: -59.6258087158
theta: 1.60275411606
speed: 13.9169511795
id: 0
t: 9
xxx after update is x: 2.94164061546
y: -59.32421875
theta: 1.92201924324
speed: 13.9529514313
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-2.836050033569336, 58.5555534362793, 4.606090545654297, 13.678531646728516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: 2.94164061546
y: -59.32421875
theta: 1.92201924324
speed: 13.9529514313
id: 0
t: 10
xxx after update is x: 3.64156293869
y: -58.3583755493
theta: 1.51941049099
speed: 13.7869501114
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: 3.64156293869
y: -58.3583755493
theta: 1.51941049099
speed: 13.7869501114
id: 0
t: 11
xxx after update is x: 3.04376983643
y: -57.9208984375
theta: 1.64974856377
speed: 13.7609634399
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: 3.04376983643
y: -57.9208984375
theta: 1.64974856377
speed: 13.7609634399
id: 0
t: 12
xxx after update is x: 3.04414796829
y: -56.9101753235
theta: 1.57350301743
speed: 13.8825998306
id: 0
t:  to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: -3.70094680786
y: 57.5369033813
theta: 4.79826927185
speed: 14.0998773575
id: 1
t: 12
xxx after update is x: -3.99979948997
y: 57.4115180969
theta: 4.75840806961
speed: 13.8264713287
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3623577271349293, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0441479682922363, -56.91017532348633, 1.573503017425537, 13.882599830627441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14


xxx before update is x: -3.99979948997
y: 57.4115180969
theta: 4.75840806961
speed: 13.8264713287
id: 1
t: 13
xxx after update is x: -3.0181055069
y: 56.1238212585
theta: 4.70888996124
speed: 13.8825311661
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: -3.0181055069
y: 56.1238212585
theta: 4.70888996124
speed: 13.8825311661
id: 1
t: 14
xxx after update is x: -3.51393151283
y: 55.596321106
theta: 4.64926958084
speed: 14.0255765915
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.332015215581961, 0]
222 self.state_dicts[msg.id][msg.t] is (3.57157826423645, -55.96005630493164, 1.7892816066741943, 13.929563522338867)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: -3.51393151283
y: 55.596321106
theta: 4.64926958084
speed: 14.0255765915
id: 1
t: 15
xxx after update is x: -3.54681348801
y: 55.3566398621
theta: 4.60036849976
speed: 14.0030498505
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.711111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: -3.54681348801
y: 55.3566398621
theta: 4.60036849976
speed: 14.0030498505
id: 1
t: 16
xxx after update is x: -3.40502691269
y: 54.1175956726
theta: 4.58011245728
speed: 13.8427696228
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: -3.40502691269
y: 54.1175956726
theta: 4.58011245728
speed: 13.8427696228
id: 1
t: 17
xxx after update is x: -3.0513215065
y: 53.9291229248
theta: 4.5713596344
speed: 13.6519947052
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3122278807497351, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1885883808135986, -53.606834411621094, 1.5960776805877686, 13.812247276306152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.spe13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.32425445729302177, 0.3511280369716706]
222 self.state_dicts[msg.id][msg.t] is (-3.9997994899749756, 57.41151809692383, 4.758408069610596, 13.826471328735352)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14


xxx before update is x: 3.04414796829
y: -56.9101753235
theta: 1.57350301743
speed: 13.8825998306
id: 0
t: 13
xxx after update is x: 3.64386677742
y: -55.7357788086
theta: 1.53994452953
speed: 13.6458435059
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: 3.64386677742
y: -55.7357788086
theta: 1.53994452953
speed: 13.6458435059
id: 0
t: 14
xxx after update is x: 3.57157826424
y: -55.9600563049
theta: 1.78928160667
speed: 13.9295635223
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: 3.57157826424
y: -55.9600563049
theta: 1.78928160667
speed: 13.9295635223
id: 0
t: 15
xxx after update is x: 3.44177937508
y: -54.9221725464
theta: 1.6409265995
speed: 14.3168468475
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3594199803762412, 0.3403840082528148]
222 self.state_dicts[msg.id][msg.t] is (-3.546813488006592, 55.35663986206055, 4.600368499755859, 14.003049850463867)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.711111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: 3.44177937508
y: -54.9221725464
theta: 1.6409265995
speed: 14.3168468475
id: 0
t: 16
xxx after update is x: 2.95763731003
y: -54.3688545227
theta: 1.53585481644
speed: 13.9787454605
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: 2.95763731003
y: -54.3688545227
theta: 1.53585481644
speed: 13.9787454605
id: 0
t: 17
xxx after update is x: 3.18858838081
y: -53.6068344116
theta: 1.59607768059
speed: 13.8122472763
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.32946615750841085, 0.30245721068190834]
222 self.state_dicts[msg.id][msg.t] is (-3.051321506500244, 53.92912292480469, 4.571359634399414, 13.651994705200195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: 3.18858838081
y: -53.6068344116
theta: 1.59607768059
speed: 13.8122472763
id: 0
t: 18
xxx after update is x: 2.78090858459
y: -52.5631523132
theta: 1.63779163361
speed: 13.9808092117
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < selfed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: -3.0513215065
y: 53.9291229248
theta: 4.5713596344
speed: 13.6519947052
id: 1
t: 18
xxx after update is x: -3.21073508263
y: 53.4358444214
theta: 4.73079967499
speed: 13.8634300232
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: -3.21073508263
y: 53.4358444214
theta: 4.73079967499
speed: 13.8634300232
id: 1
t: 19
xxx after update is x: -3.28280448914
y: 53.0006790161
theta: 4.84915542603
speed: 14.0328073502
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4314552842898708, 0]
222 self.state_dicts[msg.id][msg.t] is (3.52241587638855, -52.439205169677734, 1.683318018913269, 14.392329216003418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: -3.28280448914
y: 53.0006790161
theta: 4.84915542603
speed: 14.0328073502
id: 1
t: 20
xxx after update is x: -3.18261909485
y: 51.8597564697
theta: 4.56074094772
speed: 13.7535219193
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: -3.18261909485
y: 51.8597564697
theta: 4.56074094772
speed: 13.7535219193
id: 1
t: 21
xxx after update is x: -3.08975100517
y: 51.3950767517
theta: 4.61830234528
speed: 13.6258945465
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32538501225515465, 0]
222 self.state_dicts[msg.id][msg.t] is (3.309422254562378, -51.782772064208984, 1.7029223442077637, 13.924818992614746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23


xxx before update is x: -3.08975100517
y: 51.3950767517
theta: 4.61830234528
speed: 13.6258945465
id: 1
t: 22
xxx after update is x: -3.59969377518
y: 51.0869865417
theta: 4.66078472137
speed: 14.0682649612
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: -3.59969377518
y: 51.0869865417
theta: 4.66078472137
speed: 14.0682649612
id: 1
t: 23
xxx after update is x: -3.12428355217
y: 49.8610229492
theta: 4.68632555008
speed: 13.6808290482
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.06666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12428355217
y: 49.8610229492
theta: 4.68632555008
speed: 13.6808290482
id: 1
t: 24
xxx after update is x: -3.40061736107
y: 49.9766082764
theta: 4.82617521286
speed: 13.9251289368
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spi.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: 2.78090858459
y: -52.5631523132
theta: 1.63779163361
speed: 13.9808092117
id: 0
t: 19
xxx after update is x: 3.52241587639
y: -52.4392051697
theta: 1.68331801891
speed: 14.392329216
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: 3.52241587639
y: -52.4392051697
theta: 1.68331801891
speed: 14.392329216
id: 0
t: 20
xxx after update is x: 3.27091097832
y: -51.8775672913
theta: 1.57641375065
speed: 13.9341993332
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3732323526317871, 0.386498878193639]
222 self.state_dicts[msg.id][msg.t] is (-3.182619094848633, 51.85975646972656, 4.560740947723389, 13.753521919250488)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: 3.27091097832
y: -51.8775672913
theta: 1.57641375065
speed: 13.9341993332
id: 0
t: 21
xxx after update is x: 3.30942225456
y: -51.7827720642
theta: 1.70292234421
speed: 13.9248189926
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:23


xxx before update is x: 3.30942225456
y: -51.7827720642
theta: 1.70292234421
speed: 13.9248189926
id: 0
t: 22
xxx after update is x: 3.41597986221
y: -50.436504364
theta: 1.66044700146
speed: 14.0318059921
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: 3.41597986221
y: -50.436504364
theta: 1.66044700146
speed: 14.0318059921
id: 0
t: 23
xxx after update is x: 2.93791460991
y: -49.6137504578
theta: 1.54948294163
speed: 13.8851728439
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.06666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: 2.93791460991
y: -49.6137504578
theta: 1.54948294163
speed: 13.8851728439
id: 0
t: 24
xxx after update is x: 3.36671376228
y: -49.0912895203
theta: 1.52670669556
speed: 13.8757152557
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: 3.36671376228
y: -49.0912895203
theta: 1.52670669556
speed: 13.8757152557
id: 0
t: 25
xxx after update is x: 3.05410051346
y: -48.7246017456
theta: 1.5529987812
speed: 13.6473617554
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3582406695592191, 0.317498067554721]
222 self.state_dicts[msg.id][msg.t] is (-3.1039280891418457, 48.726776123046875, 4.549072265625, 14.040938377380371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxn:25




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: -3.40061736107
y: 49.9766082764
theta: 4.82617521286
speed: 13.9251289368
id: 1
t: 25
xxx after update is x: -3.10392808914
y: 48.726776123
theta: 4.54907226562
speed: 14.0409383774
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3491241966950615, 0]
222 self.state_dicts[msg.id][msg.t] is (3.054100513458252, -48.72460174560547, 1.5529987812042236, 13.647361755371094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: -3.10392808914
y: 48.726776123
theta: 4.54907226562
speed: 14.0409383774
id: 1
t: 26
xxx after update is x: -3.15981936455
y: 48.6422309875
theta: 4.60735750198
speed: 13.5008926392
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: -3.15981936455
y: 48.6422309875
theta: 4.60735750198
speed: 13.5008926392
id: 1
t: 27
xxx after update is x: -2.88631105423
y: 47.4768295288
theta: 4.72173404694
speed: 13.9218587875
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3560785568244738, 0]
222 self.state_dicts[msg.id][msg.t] is (2.56697678565979, -47.65070724487305, 1.509903073310852, 13.637899398803711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29


xxx before update is x: -2.88631105423
y: 47.4768295288
theta: 4.72173404694
speed: 13.9218587875
id: 1
t: 28
xxx after update is x: -3.05208969116
y: 47.3977966309
theta: 4.71735286713
speed: 13.6597652435
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: -3.05208969116
y: 47.3977966309
theta: 4.71735286713
speed: 13.6597652435
id: 1
t: 29
xxx after update is x: -3.09239864349
y: 46.6280326843
theta: 4.63543748856
speed: 14.0148029327
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4112118938466216, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2741565704345703, -46.361854553222656, 1.582492709159851, 13.828472137451172)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: -3.09239864349
y: 46.6280326843
theta: 4.63543748856
speed: 14.0148029327
id: 1
t: 30
xxx after update is x: -3.83999109268
y: 46.752822876
theta: 4.63128328323
speed: 14.012802124
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: -3.83999109268
y: 46.752822876
theta: 4.63128328323
speed: 14.0xxx
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: 3.05410051346
y: -48.7246017456
theta: 1.5529987812
speed: 13.6473617554
id: 0
t: 26
xxx after update is x: 2.89840245247
y: -48.1536636353
theta: 1.57189130783
speed: 13.6504917145
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: 2.89840245247
y: -48.1536636353
theta: 1.57189130783
speed: 13.6504917145
id: 0
t: 27
xxx after update is x: 2.56697678566
y: -47.6507072449
theta: 1.50990307331
speed: 13.6378993988
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29


xxx before update is x: 2.56697678566
y: -47.6507072449
theta: 1.50990307331
speed: 13.6378993988
id: 0
t: 28
xxx after update is x: 3.14893484116
y: -46.8690795898
theta: 1.52887260914
speed: 14.2558555603
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4306553246930407, 0.3401503118065658]
222 self.state_dicts[msg.id][msg.t] is (-3.0520896911621094, 47.397796630859375, 4.717352867126465, 13.659765243530273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: 3.14893484116
y: -46.8690795898
theta: 1.52887260914
speed: 14.2558555603
id: 0
t: 29
xxx after update is x: 3.27415657043
y: -46.3618545532
theta: 1.58249270916
speed: 13.8284721375
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: 3.27415657043
y: -46.3618545532
theta: 1.58249270916
speed: 13.8284721375
id: 0
t: 30
xxx after update is x: 3.35208296776
y: -45.122215271
theta: 1.55093991756
speed: 14.0995359421
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: 3.35208296776
y: -45.122215271
theta: 1.55093991756
speed: 14.0995359421
id: 0
t: 31
xxx after update is x: 3.52612447739
y: -45.3830833435
theta: 1.60273456573
speed: 13.770904541
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.42222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: 3.52612447739
y: -45.3830833435
theta: 1.60273456573
speed: 13.770904541
id: 0
t: 32
xxx after update is x: 3.4140791893
y: -43.9059448242
theta: 1.42449593544
speed: 13.6755504608
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.4140791893
y: -43.9059448242
theta: 1.42449593544
speed: 13.6755504608
id: 0
t: 33
xxx after update is x: 2.9888510704
y: -43.6347465515
theta: 1.49049341679
speed: 14.2333612442
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py 12802124
id: 1
t: 31
xxx after update is x: -3.57684731483
y: 45.4414749146
theta: 4.47288751602
speed: 14.0039319992
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.42222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: -3.57684731483
y: 45.4414749146
theta: 4.47288751602
speed: 14.0039319992
id: 1
t: 32
xxx after update is x: -3.22877287865
y: 44.3497390747
theta: 4.76339626312
speed: 14.0135612488
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.22877287865
y: 44.3497390747
theta: 4.76339626312
speed: 14.0135612488
id: 1
t: 33
xxx after update is x: -2.95866513252
y: 43.1441612244
theta: 4.58101081848
speed: 13.9638986588
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: -2.95866513252
y: 43.1441612244
theta: 4.58101081848
speed: 13.9638986588
id: 1
t: 34
xxx after update is x: -3.74246668816
y: 43.6052474976
theta: 4.78087472916
speed: 13.8801860809
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3789530769176952, 0]
222 self.state_dicts[msg.id][msg.t] is (3.087156057357788, -43.58855056762695, 1.6366468667984009, 13.86935043334961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


xxx before update is x: -3.74246668816
y: 43.6052474976
theta: 4.78087472916
speed: 13.8801860809
id: 1
t: 35
xxx after update is x: -2.78333950043
y: 42.5600395203
theta: 4.65659999847
speed: 13.6583127975
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: -2.78333950043
y: 42.5600395203
theta: 4.65659999847
speed: 13.6583127975
id: 1
t: 36
xxx after update is x: -3.25477981567
y: 42.0306282043
theta: 4.81128644943
speed: 13.7499160767
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31895439434043926, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1860337257385254, -41.974544525146484, 1.683476448059082, 13.597999572753906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: -3.25477981567
y: 42.0306282043
theta: 4.81128644943
speed: 13.7499160767
id: 1
t: 37
xxx after update is x: -2.66217970848
y: 40.9443855286
theta: 4.70020627975
speed: 13.5432338715
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n timesin the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: 2.9888510704
y: -43.6347465515
theta: 1.49049341679
speed: 14.2333612442
id: 0
t: 34
xxx after update is x: 3.08715605736
y: -43.5885505676
theta: 1.6366468668
speed: 13.8693504333
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36


xxx before update is x: 3.08715605736
y: -43.5885505676
theta: 1.6366468668
speed: 13.8693504333
id: 0
t: 35
xxx after update is x: 3.25875616074
y: -43.0757904053
theta: 1.67034816742
speed: 13.562921524
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.41374777004452107, 0.4365770532497007]
222 self.state_dicts[msg.id][msg.t] is (-2.783339500427246, 42.56003952026367, 4.656599998474121, 13.658312797546387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: 3.25875616074
y: -43.0757904053
theta: 1.67034816742
speed: 13.562921524
id: 0
t: 36
xxx after update is x: 3.18603372574
y: -41.9745445251
theta: 1.68347644806
speed: 13.5979995728
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: 3.18603372574
y: -41.9745445251
theta: 1.68347644806
speed: 13.5979995728
id: 0
t: 37
xxx after update is x: 2.83782672882
y: -41.6065750122
theta: 1.55874729156
speed: 13.6401777267
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.46948109934842686, 0.3702799701323094]
222 self.state_dicts[msg.id][msg.t] is (-2.662179708480835, 40.94438552856445, 4.700206279754639, 13.543233871459961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: 2.83782672882
y: -41.6065750122
theta: 1.55874729156
speed: 13.6401777267
id: 0
t: 38
xxx after update is x: 2.75842738152
y: -40.8016166687
theta: 1.59302580357
speed: 14.3190307617
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: 2.75842738152
y: -40.8016166687
theta: 1.59302580357
speed: 14.3190307617
id: 0
t: 39
xxx after update is x: 3.29674363136
y: -40.1931915283
theta: 1.6157951355
speed: 13.8669519424
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: 3.29674363136
y: -40.1931915283
theta: 1.6157951355
speed: 13.8669519424
id: 0
t: 40
xxx after update is x: 2.95630645752
y: -39.6567459106
theta: 1.71072399616
speed: 14.1044578552
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.42965407524074156, 0.3968817334411388]
222 self.state_dicts[msg.id][msg.t] is (-3.2572906017303467, 39.68773651123047, 4.732997417449951, 14.02959060 spin:39

xxx before update is x: -2.66217970848
y: 40.9443855286
theta: 4.70020627975
speed: 13.5432338715
id: 1
t: 38
xxx after update is x: -3.58160495758
y: 40.8639259338
theta: 4.70431566238
speed: 13.8378801346
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
aaaaaabbbbb
risk is [0.4288468141443135, 0]
222 self.state_dicts[msg.id][msg.t] is (2.758427381515503, -40.80161666870117, 1.593025803565979, 14.31903076171875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: -3.58160495758
y: 40.8639259338
theta: 4.70431566238
speed: 13.8378801346
id: 1
t: 39
xxx after update is x: -2.94590616226
y: 40.0846290588
theta: 4.88245201111
speed: 14.1006345749
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: -2.94590616226
y: 40.0846290588
theta: 4.88245201111
speed: 14.1006345749
id: 1
t: 40
xxx after update is x: -3.25729060173
y: 39.6877365112
theta: 4.73299741745
speed: 14.0295906067
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.40518305811688254, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9563064575195312, -39.65674591064453, 1.7107239961624146, 14.10445785522461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.82222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


xxx before update is x: -3.25729060173
y: 39.6877365112
theta: 4.73299741745
speed: 14.0295906067
id: 1
t: 41
xxx after update is x: -2.95699858665
y: 38.8545417786
theta: 4.61361455917
speed: 13.6422796249
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: -2.95699858665
y: 38.8545417786
theta: 4.61361455917
speed: 13.6422796249
id: 1
t: 42
xxx after update is x: -3.07082653046
y: 39.1122131348
theta: 4.80035161972
speed: 13.7514858246
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.25960984455993497, 0]
222 self.state_dicts[msg.id][msg.t] is (2.5839996337890625, -38.402156829833984, 1.5361334085464478, 14.059484481811523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: -3.07082653046
y: 39.1122131348
theta: 4.80035161972
speed: 13.7514858246
id: 1
t: 43
xxx after update is x: -3.26209449768
y: 38.1423912048
theta: 4.63175392151
speed: 14.1198663712
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: -3.26209449768
y: 38.1423912048
theta: 4.66689453)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.82222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:42


xxx before update is x: 2.95630645752
y: -39.6567459106
theta: 1.71072399616
speed: 14.1044578552
id: 0
t: 41
xxx after update is x: 3.11123299599
y: -38.3493766785
theta: 1.4704669714
speed: 14.1268730164
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: 3.11123299599
y: -38.3493766785
theta: 1.4704669714
speed: 14.1268730164
id: 0
t: 42
xxx after update is x: 2.58399963379
y: -38.4021568298
theta: 1.53613340855
speed: 14.0594844818
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3631286117417069, 0.3527179943397034]
222 self.state_dicts[msg.id][msg.t] is (-3.070826530456543, 39.112213134765625, 4.800351619720459, 13.751485824584961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: 2.58399963379
y: -38.4021568298
theta: 1.53613340855
speed: 14.0594844818
id: 0
t: 43
xxx after update is x: 2.84960699081
y: -38.3088798523
theta: 1.71965384483
speed: 13.8618326187
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: 2.84960699081
y: -38.3088798523
theta: 1.71965384483
speed: 13.8618326187
id: 0
t: 44
xxx after update is x: 3.18724441528
y: -37.6623420715
theta: 1.50427007675
speed: 14.241944313
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: 3.18724441528
y: -37.6623420715
theta: 1.50427007675
speed: 14.241944313
id: 0
t: 45
xxx after update is x: 3.59968113899
y: -36.5004463196
theta: 1.57822978497
speed: 13.9325170517
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.35035285391675264, 0.3985709879392655]
222 self.state_dicts[msg.id][msg.t] is (-3.26617693901062, 36.67451477050781, 4.753146171569824, 14.178176879882812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: 3.59968113899
y: -36.5004463196
theta: 1.57822978497
speed: 13.9325170517
id: 0
t: 46
xxx after update is x: 3.67736005783
y: -35.9081382751
theta: 1.58240818977
speed: 13.7125177383
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: 3.67736005783
y: -35.9081382751
theta: 1.58240818977
speed: 13.7125177383
id: 0
t: 47
xxx after update is x: 3.39691662788
y: -353175392151
speed: 14.1198663712
id: 1
t: 44
xxx after update is x: -3.66934871674
y: 37.1654472351
theta: 4.6938328743
speed: 13.9063224792
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.29862301261097146, 0]
222 self.state_dicts[msg.id][msg.t] is (3.187244415283203, -37.6623420715332, 1.504270076751709, 14.241944313049316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: -3.66934871674
y: 37.1654472351
theta: 4.6938328743
speed: 13.9063224792
id: 1
t: 45
xxx after update is x: -3.26617693901
y: 36.6745147705
theta: 4.75314617157
speed: 14.1781768799
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: -3.26617693901
y: 36.6745147705
theta: 4.75314617157
speed: 14.1781768799
id: 1
t: 46
xxx after update is x: -2.66471409798
y: 35.8991355896
theta: 4.57913303375
speed: 13.9117765427
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.24069790747975683, 0]
222 self.state_dicts[msg.id][msg.t] is (3.6773600578308105, -35.908138275146484, 1.5824081897735596, 13.712517738342285)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: -2.66471409798
y: 35.8991355896
theta: 4.57913303375
speed: 13.9117765427
id: 1
t: 47
xxx after update is x: -3.15584921837
y: 35.0786590576
theta: 4.70141649246
speed: 13.4815454483
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49


xxx before update is x: -3.15584921837
y: 35.0786590576
theta: 4.70141649246
speed: 13.4815454483
id: 1
t: 48
xxx after update is x: -3.36804294586
y: 35.1273612976
theta: 4.69940376282
speed: 13.7590103149
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3965816145103046, 0]
222 self.state_dicts[msg.id][msg.t] is (2.5105578899383545, -34.87560272216797, 1.5364477634429932, 13.78471851348877)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.17777777778






self.maneuver_requested None
xxx before update is x: -3.36804294586
y: 35.1273612976
theta: 4.69940376282
speed: 13.7590103149
id: 1
t: 49
xxx after update is x: -3.13651204109
y: 33.4172210693
theta: 4.80361843109
speed: 13.8107023239
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: -3.13651204109
y: 33.4172210693
theta: 4.80361843109
speed: 13.8107023239
id: 1
t: 50
xxx after update is x: -3.01728987694
y: 33.1326446533
theta: 4.79134511948
speed: 13.5252790451
id: 1
t:.606048584
theta: 1.45358645916
speed: 13.9125995636
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:49


xxx before update is x: 3.39691662788
y: -35.606048584
theta: 1.45358645916
speed: 13.9125995636
id: 0
t: 48
xxx after update is x: 2.51055788994
y: -34.8756027222
theta: 1.53644776344
speed: 13.7847185135
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3447162653590153, 0.3902606308317966]
222 self.state_dicts[msg.id][msg.t] is (-3.3680429458618164, 35.12736129760742, 4.699403762817383, 13.759010314941406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.17777777778






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: 2.51055788994
y: -34.8756027222
theta: 1.53644776344
speed: 13.7847185135
id: 0
t: 49
xxx after update is x: 3.62646389008
y: -33.2821617126
theta: 1.5625191927
speed: 14.0951461792
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: 3.62646389008
y: -33.2821617126
theta: 1.5625191927
speed: 14.0951461792
id: 0
t: 50
xxx after update is x: 3.10142111778
y: -33.9059181213
theta: 1.51793897152
speed: 13.8137359619
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: 3.10142111778
y: -33.9059181213
theta: 1.51793897152
speed: 13.8137359619
id: 0
t: 51
xxx after update is x: 3.14729738235
y: -32.7704200745
theta: 1.5253225565
speed: 13.9437952042
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: 3.14729738235
y: -32.7704200745
theta: 1.5253225565
speed: 13.9437952042
id: 0
t: 52
xxx after update is x: 3.38115906715
y: -32.163734436
theta: 1.45134115219
speed: 13.8696479797
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.48207229632137066, 0.36738550410725457]
222 self.state_dicts[msg.id][msg.t] is (-2.8474507331848145, 32.61298751831055, 4.818966865539551, 13.626418113708496)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: 3.38115906715
y: -32.163734436
theta: 1.45134115219
speed: 13.8696479797
id: 0
t: 53
xxx after update is x: 3.34847855568
y: -31.8789348602
theta: 1.61029529572
speed: 13.7319927216
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: 3.34847855568
y: -31.8789348602
theta: 1.61029529572
speed: 13.7319927216
id: 0
t: 54
xxx after update is x: 3.19604849815
y: -31.29637718 51
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.01728987694
y: 33.1326446533
theta: 4.79134511948
speed: 13.5252790451
id: 1
t: 51
xxx after update is x: -3.2143611908
y: 32.0100708008
theta: 4.59517526627
speed: 13.9045200348
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:52


aaaaaa
aaaaaabbbbb
risk is [0.38758355271143086, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1472973823547363, -32.77042007446289, 1.5253225564956665, 13.943795204162598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: -3.2143611908
y: 32.0100708008
theta: 4.59517526627
speed: 13.9045200348
id: 1
t: 52
xxx after update is x: -2.84745073318
y: 32.6129875183
theta: 4.81896686554
speed: 13.6264181137
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: -2.84745073318
y: 32.6129875183
theta: 4.81896686554
speed: 13.6264181137
id: 1
t: 53
xxx after update is x: -3.37604928017
y: 31.8509197235
theta: 4.71216583252
speed: 13.7563991547
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.35281638718946956, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3484785556793213, -31.878934860229492, 1.610295295715332, 13.731992721557617)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: -3.37604928017
y: 31.8509197235
theta: 4.71216583252
speed: 13.7563991547
id: 1
t: 54
xxx after update is x: -2.89019155502
y: 31.4398002625
theta: 4.60457849503
speed: 13.7508220673
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4067618083097277, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1960484981536865, -31.296377182006836, 1.5483759641647339, 13.70211124420166)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: -2.89019155502
y: 31.4398002625
theta: 4.60457849503
speed: 13.7508220673
id: 1
t: 55
xxx after update is x: -2.66399931908
y: 30.5539569855
theta: 4.72487592697
speed: 13.9491567612
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: -2.66399931908
y: 30.5539569855
theta: 4.72487592697
speed: 13.9491567612
id: 1
t: 56
xxx after update is x: -2.69166445732
y: 29.6319065094
theta: 4.58792924881
speed: 13.9033641815
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update2
theta: 1.54837596416
speed: 13.7021112442
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4044501790136571, 0.3785715245555653]
222 self.state_dicts[msg.id][msg.t] is (-2.8901915550231934, 31.439800262451172, 4.604578495025635, 13.750822067260742)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: 3.19604849815
y: -31.296377182
theta: 1.54837596416
speed: 13.7021112442
id: 0
t: 55
xxx after update is x: 3.20404958725
y: -30.4169654846
theta: 1.52763271332
speed: 13.6370182037
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: 3.20404958725
y: -30.4169654846
theta: 1.52763271332
speed: 13.6370182037
id: 0
t: 56
xxx after update is x: 3.32746243477
y: -29.8368282318
theta: 1.73223185539
speed: 14.0962438583
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: 3.32746243477
y: -29.8368282318
theta: 1.73223185539
speed: 14.0962438583
id: 0
t: 57
xxx after update is x: 2.92690443993
y: -29.041973114
theta: 1.72653973103
speed: 13.8708019257
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.57777777778






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: 2.92690443993
y: -29.041973114
theta: 1.72653973103
speed: 13.8708019257
id: 0
t: 58
xxx after update is x: 3.1574473381
y: -27.568775177
theta: 1.65826237202
speed: 13.7280626297
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.1574473381
y: -27.568775177
theta: 1.65826237202
speed: 13.7280626297
id: 0
t: 59
xxx after update is x: 3.24582743645
y: -27.9085044861
theta: 1.70854353905
speed: 13.9622802734
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.24582743645
y: -27.9085044861
theta: 1.70854353905
speed: 13.9622802734
id: 0
t: 60
xxx after update is x: 3.5241792202
y: -27.3677825928
theta: 1.62783277035
speed: 14.1058397293
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: 3.5241792202
y: -27.3677825928
theta: 1.62783277035
speed: 14.1058397293
id: 0
t: 61
xxx after update is x: 3.12470126152
y: -27.1750411987
theta: 1.59760117531
speed: 13.7829189301
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: 3.124701261 function xxx before update is x: -2.69166445732
y: 29.6319065094
theta: 4.58792924881
speed: 13.9033641815
id: 1
t: 57
xxx after update is x: -3.09391689301
y: 29.0962085724
theta: 4.64408159256
speed: 13.922249794
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:58


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.57777777778






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: -3.09391689301
y: 29.0962085724
theta: 4.64408159256
speed: 13.922249794
id: 1
t: 58
xxx after update is x: -2.89935064316
y: 27.4868431091
theta: 5.03909778595
speed: 14.0465393066
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.89935064316
y: 27.4868431091
theta: 5.03909778595
speed: 14.0465393066
id: 1
t: 59
xxx after update is x: -3.44294977188
y: 27.1887340546
theta: 4.64464950562
speed: 13.7136640549
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.44294977188
y: 27.1887340546
theta: 4.64464950562
speed: 13.7136640549
id: 1
t: 60
xxx after update is x: -3.10225105286
y: 27.5193214417
theta: 4.84925603867
speed: 13.6381416321
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: -3.10225105286
y: 27.5193214417
theta: 4.84925603867
speed: 13.6381416321
id: 1
t: 61
xxx after update is x: -3.36015081406
y: 26.5695915222
theta: 4.72168588638
speed: 13.7946949005
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3655800076568318, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1247012615203857, -27.17504119873047, 1.5976011753082275, 13.782918930053711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: -3.36015081406
y: 26.5695915222
theta: 4.72168588638
speed: 13.7946949005
id: 1
t: 62
xxx after update is x: -2.66637849808
y: 26.2902488708
theta: 4.67802429199
speed: 14.0620517731
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: -2.66637849808
y: 26.2902488708
theta: 4.67802429199
speed: 14.0620517731
id: 1
t: 63
xxx after update is x: -3.54843640327
y: 25.3698234558
theta: 4.65403461456
speed: 13.867017746
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.48127985463588124, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7994184494018555, -25.621376037597656, 1.5326000452041626, 13.478453636169434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.p52
y: -27.1750411987
theta: 1.59760117531
speed: 13.7829189301
id: 0
t: 62
xxx after update is x: 2.89269852638
y: -25.9228591919
theta: 1.55511438847
speed: 13.700214386
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.328852140729675, 0.45176899315163377]
222 self.state_dicts[msg.id][msg.t] is (-2.6663784980773926, 26.29024887084961, 4.6780242919921875, 14.062051773071289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: 2.89269852638
y: -25.9228591919
theta: 1.55511438847
speed: 13.700214386
id: 0
t: 63
xxx after update is x: 2.7994184494
y: -25.6213760376
theta: 1.5326000452
speed: 13.4784536362
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:65


xxx before update is x: 2.7994184494
y: -25.6213760376
theta: 1.5326000452
speed: 13.4784536362
id: 0
t: 64
xxx after update is x: 3.30093598366
y: -24.610376358
theta: 1.35817670822
speed: 12.7508926392
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: 3.30093598366
y: -24.610376358
theta: 1.35817670822
speed: 12.7508926392
id: 0
t: 65
xxx after update is x: 3.58507609367
y: -24.2909870148
theta: 1.63358533382
speed: 13.2461395264
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.32224897423522597, 0.315450044048774]
222 self.state_dicts[msg.id][msg.t] is (-3.881685733795166, 24.058637619018555, 4.796988487243652, 13.826139450073242)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: 3.58507609367
y: -24.2909870148
theta: 1.63358533382
speed: 13.2461395264
id: 0
t: 66
xxx after update is x: 3.01092839241
y: -24.0411109924
theta: 1.52503061295
speed: 12.6718063354
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: 3.01092839241
y: -24.0411109924
theta: 1.52503061295
speed: 12.6718063354
id: 0
t: 67
xxx after update is x: 2.97986793518
y: -22.801153183
theta: 1.52965176105
speed: 12.3288402557
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.02222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:69


xxx before update is x: 2.97986793518
y: -22.801153183
theta: 1.52965176105
speed: 12.3288402557
id: 0
t: 68
xxx after update is x: 3.0037958622
y: -22.8917808533
theta: 1.6900998354
speed: 11.9205169678
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3844656566234052, 0.24100910489337804]
222 self.state_dicts[msg.id][msg.t] is (-3.064709424972534, 22.018232345581055, 4.594588756561279, 14.191065788269043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = Faly in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65


xxx before update is x: -3.54843640327
y: 25.3698234558
theta: 4.65403461456
speed: 13.867017746
id: 1
t: 64
xxx after update is x: -3.35325908661
y: 25.0564556122
theta: 4.66291618347
speed: 13.6723928452
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: -3.35325908661
y: 25.0564556122
theta: 4.66291618347
speed: 13.6723928452
id: 1
t: 65
xxx after update is x: -3.8816857338
y: 24.058637619
theta: 4.79698848724
speed: 13.8261394501
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4512072709378826, 0]
222 self.state_dicts[msg.id][msg.t] is (3.585076093673706, -24.290987014770508, 1.6335853338241577, 13.246139526367188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: -3.8816857338
y: 24.058637619
theta: 4.79698848724
speed: 13.8261394501
id: 1
t: 66
xxx after update is x: -3.47420859337
y: 23.6641178131
theta: 4.51673555374
speed: 13.7360868454
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: -3.47420859337
y: 23.6641178131
theta: 4.51673555374
speed: 13.7360868454
id: 1
t: 67
xxx after update is x: -3.36102318764
y: 22.8874168396
theta: 4.81915807724
speed: 13.9218740463
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.48163052122962563, 0]
222 self.state_dicts[msg.id][msg.t] is (2.979867935180664, -22.8011531829834, 1.5296517610549927, 12.328840255737305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69


xxx before update is x: -3.36102318764
y: 22.8874168396
theta: 4.81915807724
speed: 13.9218740463
id: 1
t: 68
xxx after update is x: -3.06470942497
y: 22.0182323456
theta: 4.59458875656
speed: 14.1910657883
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.06666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: -3.06470942497
y: 22.0182323456
theta: 4.59458875656
speed: 14.1910657883
id: 1
t: 69
xxx after update is x: -3.41698884964
y: 21.7898921967
theta: 4.51635360718
speed: 14.1430063248
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.28679457394122865, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2592384815216064, -22.17044448852539, 1.58464777469635, 12.166298866271973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):se
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: 3.0037958622
y: -22.8917808533
theta: 1.6900998354
speed: 11.9205169678
id: 0
t: 69
xxx after update is x: 3.25923848152
y: -22.1704444885
theta: 1.5846477747
speed: 12.1662988663
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.2038335736001934, 0.04857246149855552]
222 self.state_dicts[msg.id][msg.t] is (-3.4169888496398926, 21.789892196655273, 4.516353607177734, 14.143006324768066)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: 3.25923848152
y: -22.1704444885
theta: 1.5846477747
speed: 12.1662988663
id: 0
t: 70
xxx after update is x: 3.2861032486
y: -21.8084793091
theta: 1.48270773888
speed: 12.0620069504
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: 3.2861032486
y: -21.8084793091
theta: 1.48270773888
speed: 12.0620069504
id: 0
t: 71
xxx after update is x: 3.09550142288
y: -20.6619205475
theta: 1.68728137016
speed: 11.7881774902
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.36546123449572593, 0.1567050955836281]
222 self.state_dicts[msg.id][msg.t] is (-3.5063321590423584, 20.797931671142578, 4.939552307128906, 14.064067840576172)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:73


xxx before update is x: 3.09550142288
y: -20.6619205475
theta: 1.68728137016
speed: 11.7881774902
id: 0
t: 72
xxx after update is x: 3.11294031143
y: -20.522108078
theta: 1.66535842419
speed: 11.2121353149
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$


maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 3.24444444444
!!!!after check statue the self.tag is [3.2444444444444445, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.24444444444

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.24444444444,(3.1129403114318848, -20.52210807800293, 1.6653584241867065),11,1,3.24444444444,0,left
!!!!change state to get
GET,0,3.24444444444,(3.1129403114318848, -20.52210807800293, 1.6653584241867065),11,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.24444444444
self.communication_details == 0
sending GET,0,3.24444444444,(3.1129403114318848, -20.52210807800293, 1.6653584241867065),11,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: 3.11294031143
y: -20.522108078
theta: 1.66535842419
speed: 11.2121
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: -3.41698884964
y: 21.7898921967
theta: 4.51635360718
speed: 14.1430063248
id: 1
t: 70
xxx after update is x: -3.60254693031
y: 21.3097114563
theta: 4.71537637711
speed: 14.0866727829
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: -3.60254693031
y: 21.3097114563
theta: 4.71537637711
speed: 14.0866727829
id: 1
t: 71
xxx after update is x: -3.50633215904
y: 20.7979316711
theta: 4.93955230713
speed: 14.0640678406
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32095116997020884, 0]
222 self.state_dicts[msg.id][msg.t] is (3.09550142288208, -20.66192054748535, 1.6872813701629639, 11.788177490234375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$


maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 3.2
!!!!after check statue the self.tag is [3.2, 1, 'straight']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
Empty
self.agents_to_ask is []
message is :GET,1,3.2,(-3.5063321590423584, 20.797931671142578, 4.939552307128906),14,1,3.2,1,straight
!!!!change state to get
 self.man_init:
finish try maneuver
Received -->>: 
current clock is 3.2




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '3.24444444444', 'IntendedCourse': 'left', 'Position': ['3.1129403114318848', ' -20.52210807800293', ' 1.6653584241867065'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,3.24444444444,(3.1129403114318848, -20.52210807800293, 1.6653584241867065),11,1,3.24444444444,0,left from  car0
status: 2
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.144197530864
sender travel direction is:  north
sender earliest entering time is:  1.87093100854
sender last entering time is:  2.25787525337
sender last leaving time is:  4.4236164194
my entering time is:  1.10164861119
my leaving time is:  3.13909969151
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.2
self.communication_details == 0
sending DENY,1,3.2,(-3.5063321590423584, 20.797931671142578, 4.939552307128906),14,1,3.2,1 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update 353149
id: 0
t: 73
xxx after update is x: 3.00274062157
y: -19.7553825378
theta: 1.42087447643
speed: 11.1560087204
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
finish try maneuver
Received -->>: 
current clock is 3.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '3.2', 'Position': ['(-3.5063321590423584', ' 20.797931671142578', ' 4.939552307128906)'], 'Type': 'DENY'}
car 0 received DENY,1,3.2,(-3.5063321590423584, 20.797931671142578, 4.939552307128906),14,1,3.2,1 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.2, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75


xxx before update is x: 3.00274062157
y: -19.7553825378
theta: 1.42087447643
speed: 11.1560087204
id: 0
t: 74
xxx after update is x: 3.47113180161
y: -19.5875644684
theta: 1.50886166096
speed: 10.859793663
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4289505408847888, 0.16286458350594474]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: 3.47113180161
y: -19.5875644684
theta: 1.50886166096
speed: 10.859793663
id: 0
t: 75
xxx after update is x: 2.37800836563
y: -19.0891056061
theta: 1.46002399921
speed: 10.5398159027
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.460125207901001, 17.8455867767334, 4.661291599273682, 14.0781831741333)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.37777777778






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2888888888888888, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.37777777778
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.28888888889
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.37777777778,(2.3780083656311035, -19.0891056060791, 1.4600239992141724),10,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.37777777778
self.communication_details == 0
sending RELEASE,0,3.37777777778,(2.3780083656311035, -19.0891056060791, 1.4600239992141724),10,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: 2.37800836563
y: -19.0891056061
theta: 1.46002399921
speed: 10.539815function xxx before update is x: -3.50633215904
y: 20.7979316711
theta: 4.93955230713
speed: 14.0640678406
id: 1
t: 72
xxx after update is x: -3.0788500309
y: 19.435508728
theta: 4.73303365707
speed: 14.1716442108
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.0788500309
y: 19.435508728
theta: 4.73303365707
speed: 14.1716442108
id: 1
t: 73
xxx after update is x: -2.88782167435
y: 19.336101532
theta: 4.72397232056
speed: 13.5457935333
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:74


aaaaaa
aaaaaabbbbb
risk is [0.39163649902984654, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0027406215667725, -19.755382537841797, 1.4208744764328003, 11.15600872039795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: -2.88782167435
y: 19.336101532
theta: 4.72397232056
speed: 13.5457935333
id: 1
t: 74
xxx after update is x: -3.08302474022
y: 18.7666492462
theta: 4.84148979187
speed: 13.8953027725
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.08302474022
y: 18.7666492462
theta: 4.84148979187
speed: 13.8953027725
id: 1
t: 75
xxx after update is x: -3.4601252079
y: 17.8455867767
theta: 4.66129159927
speed: 14.0781831741
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3184676118789556, 0]
222 self.state_dicts[msg.id][msg.t] is (2.3780083656311035, -19.0891056060791, 1.4600239992141724, 10.539815902709961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 3.37777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.37777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '10', 'Sender': '0', 'TagID': '1', 'Time': '3.37777777778', 'Position': ['(2.3780083656311035', ' -19.0891056060791', ' 1.4600239992141724)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.37777777778,(2.3780083656311035, -19.0891056060791, 1.4600239992141724),10,1,3.24444444444,0 from  car0
status: 2




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.37777777778






self.maneuver_requested straight
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2888888888888888, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.37777777778
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.28888888889
self.TMan is 5
Empty
self.agents_to_ask is []
stopped retry timer
deny not in message
maneuver_negotiatir.py in the domaneuver function - start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
added car with id 1 to grantlist. current grantlist:  {1: [8.288888888888888, 'straight']}
Doing maneuver
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin fu9027
id: 0
t: 76
xxx after update is x: 2.884319067
y: -18.4018192291
theta: 1.62702310085
speed: 10.7185735703
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.23228857887911725, 0.04418691031564271]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: 2.884319067
y: -18.4018192291
theta: 1.62702310085
speed: 10.7185735703
id: 0
t: 77
xxx after update is x: 3.21983289719
y: -17.7774410248
theta: 1.67686378956
speed: 10.2812204361
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: 3.21983289719
y: -17.7774410248
theta: 1.67686378956
speed: 10.2812204361
id: 0
t: 78
xxx after update is x: 3.51647949219
y: -17.1929855347
theta: 1.63198101521
speed: 10.1506652832
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.4541287422180176, 16.045690536499023, 4.66337776184082, 14.29725170135498)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: 3.51647949219
y: -17.1929855347
theta: 1.63198101521
speed: 10.1506652832
id: 0
t: 79
xxx after update is x: 2.43824362755
y: -17.0245780945
theta: 1.57660853863
speed: 10.0124750137
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.44976202670749654, 0.06965645765772578]
222 self.state_dicts[msg.id][msg.t] is (-3.171412706375122, 14.951201438903809, 4.8856658935546875, 13.951869010925293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: 2.43824362755
y: -17.0245780945
theta: 1.57660853863
speed: 10.0124750137
id: 0
t: 80
xxx after update is x: 3.38879299164
y: -16.672410965
theta: 1.63279223442
speed: 9.58216667175
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: 3.38879299164
y: -16.672410965
theta: 1.63279223442
speed: 9.58216667175
id: 0
t: 81
xxx after update is x: 3.23504185677
y: -16.0321578979
theta: 1.42450010777
speed: 9.17343997955
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: 3.23504185677
y: -16.0321578979
theta: 1.42450010777
speed: 9.17343997955
id: 0
t: 82
xxx after update is x: 3.48589348793
y: -15.9319705963
theta: 1.60379183292
speed: 8.84392261505
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.5978648869627926, 0.03828176926512824]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: 3.48589348793
y: -15.9319705963
theta: 1.60379183292
speed: 8.84392261505
id: 0
t: 83
xxx after update is x: 3.2319688797
y: -15.201218605
theta: 1.549859523nction, finish the n times spin:77

xxx before update is x: -3.4601252079
y: 17.8455867767
theta: 4.66129159927
speed: 14.0781831741
id: 1
t: 76
xxx after update is x: -2.81622433662
y: 16.7535190582
theta: 4.70209980011
speed: 14.2057542801
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: -2.81622433662
y: 16.7535190582
theta: 4.70209980011
speed: 14.2057542801
id: 1
t: 77
xxx after update is x: -3.75073719025
y: 16.6412353516
theta: 4.82930278778
speed: 14.0487098694
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.75073719025
y: 16.6412353516
theta: 4.82930278778
speed: 14.0487098694
id: 1
t: 78
xxx after update is x: -3.45412874222
y: 16.0456905365
theta: 4.66337776184
speed: 14.2972517014
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21957346338342734, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5164794921875, -17.19298553466797, 1.6319810152053833, 10.150665283203125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: -3.45412874222
y: 16.0456905365
theta: 4.66337776184
speed: 14.2972517014
id: 1
t: 79
xxx after update is x: -3.17141270638
y: 14.9512014389
theta: 4.88566589355
speed: 13.9518690109
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31541833355744725, 0]
222 self.state_dicts[msg.id][msg.t] is (2.4382436275482178, -17.024578094482422, 1.5766085386276245, 10.01247501373291)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: -3.17141270638
y: 14.9512014389
theta: 4.88566589355
speed: 13.9518690109
id: 1
t: 80
xxx after update is x: -3.4411418438
y: 15.1402168274
theta: 4.68682003021
speed: 13.9825372696
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.4411418438
y: 15.1402168274
theta: 4.68682003021
speed: 13.9825372696
id: 1
t: 81
xxx after update is x: -3.12129688263
y: 13.7028617859
theta: 4.7089304924
speed: 13.9632863998
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5332260997789331, 0]
222 self.state_dicts[msg.id][msg.t] is (3.235041856765747, -16.03215789794922, 1.4245001077651978, 9.173439979553223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
Received -->>: 
current clock is 3.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotia77
speed: 8.73176383972
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.73333333333

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.6444444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0,left
!!!!change state to get
GET,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.73333333333
self.communication_details == 0
sending GET,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
current clock is 3.73333333333




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.73333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '3.64444444444', 'Position': ['(-3.460125207901001', ' 17.8455867767334', ' 4.661291599273682)'], 'Type': 'DENY'}
car 0 received DENY,1,3.64444444444,(-3.460125207901001, 17.8455867767334, 4.661291599273682),14,1,3.2,1 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.6444444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.6444444444444444, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.73333333333






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.6444444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.73333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.64444444444
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.73333333333
self.communication_details == 0
sending RELEASE,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
222 self.state_dicts[msg.id][msg.t] is (-2.905467987060547, 13.345458984375, 4.641315937042236, 14.065291404724121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
itir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '3.73333333333', 'IntendedCourse': 'left', 'Position': ['3.231968879699707', ' -15.201218605041504', ' 1.5498595237731934'], 'TagID': '0', 'Type': 'GET', 'Velocity': '8'}
car 1 received GET,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0,left from  car0
status: 5
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.165925925926
sender travel direction is:  north
sender earliest entering time is:  1.36874714982
sender last entering time is:  2.16592592593
sender last leaving time is:  4.53922418235
my entering time is:  0.616087530065
my leaving time is:  2.1462491342
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.64444444444
self.communication_details == 0
sending DENY,1,3.64444444444,(-3.460125207901001, 17.8455867767334, 4.661291599273682),14,1,3.2,1 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 3.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '8', 'Sender': '0', 'TagID': '1', 'Time': '3.73333333333', 'Position': ['(3.231968879699707', ' -15.201218605041504', ' 1.5498595237731934)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.73333333333,(3.231968879699707, -15.201218605041504, 1.5498595237731934),8,1,3.24444444444,0 from  car0
status: 5




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: -3.12129688263
y: 13.7028617859
theta: 4.7089304924
speed: 13.9632863998
id: 1
t: 82
xxx after update is x: -3.49246454239
y: 13.4345140457
theta: 4.77805805206
speed: 13.9539709091
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.49246454239
y: 13.4345140457
theta: 4.77805805206
speed: 13.9539709091
id: 1
t: 83
xxx after update is x: -2.90546798706
y: 13.3454589844
theta: 4.64131593704
speed: 14.0652914047
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.23630764622586414, 0]
222 self.state_dicts[msg.id][msg.t] is (3.231968879699707, -15.201218605041504, 1.5498595237731934, 8.73176383972168)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.73333333333






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: -2.90546798706
y: 13.3454589844
theta: 4n spin function, finish the n times spin:85

xxx before update is x: 3.2319688797
y: -15.201218605
theta: 1.54985952377
speed: 8.73176383972
id: 0
t: 84
xxx after update is x: 3.33521771431
y: -15.1455583572
theta: 1.48536145687
speed: 8.60742664337
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: 3.33521771431
y: -15.1455583572
theta: 1.48536145687
speed: 8.60742664337
id: 0
t: 85
xxx after update is x: 3.58324980736
y: -14.5741252899
theta: 1.53084123135
speed: 8.54392814636
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: 3.58324980736
y: -14.5741252899
theta: 1.53084123135
speed: 8.54392814636
id: 0
t: 86
xxx after update is x: 3.29344034195
y: -14.2800683975
theta: 1.70354545116
speed: 8.66738033295
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.42489654960231704, 0.029659100030243763]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: 3.29344034195
y: -14.2800683975
theta: 1.70354545116
speed: 8.66738033295
id: 0
t: 87
xxx after update is x: 3.4449801445
y: -13.6124658585
theta: 1.57934558392
speed: 8.0802116394
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.4675559997558594, 11.180253028869629, 4.556344509124756, 13.928166389465332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: 3.4449801445
y: -13.6124658585
theta: 1.57934558392
speed: 8.0802116394
id: 0
t: 88
xxx after update is x: 3.55045342445
y: -13.9176216125
theta: 1.63334345818
speed: 7.84360837936
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: 3.55045342445
y: -13.9176216125
theta: 1.63334345818
speed: 7.84360837936
id: 0
t: 89
xxx after update is x: 2.91425514221
y: -13.258389473
theta: 1.51770281792
speed: 7.41763448715
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.38047374697283765, 0.044916210833144316]
222 self.state_dicts[msg.id][msg.t] is (-2.573639154434204, 8.653058052062988, 4.660666465759277, 13.693374633789062)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: 2.91425514221
y: -13.258389473
theta: 1.51770281792
speed: 7.41763448715
id: 0
t: 90
xxx after update is x: 3.21192932129
y: -12.8226852417
theta: 1.37971305847
speed: 7.31141090393
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, .64131593704
speed: 14.0652914047
id: 1
t: 84
xxx after update is x: -3.4883620739
y: 12.4247455597
theta: 4.82332038879
speed: 13.8935232162
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.4883620739
y: 12.4247455597
theta: 4.82332038879
speed: 13.8935232162
id: 1
t: 85
xxx after update is x: -2.98796105385
y: 11.3737783432
theta: 4.735206604
speed: 14.1297292709
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.24708641527860312, 0]
222 self.state_dicts[msg.id][msg.t] is (3.583249807357788, -14.574125289916992, 1.5308412313461304, 8.543928146362305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: -2.98796105385
y: 11.3737783432
theta: 4.735206604
speed: 14.1297292709
id: 1
t: 86
xxx after update is x: -3.1029419899
y: 11.5735406876
theta: 4.73984193802
speed: 13.5222091675
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.1029419899
y: 11.5735406876
theta: 4.73984193802
speed: 13.5222091675
id: 1
t: 87
xxx after update is x: -3.46755599976
y: 11.1802530289
theta: 4.55634450912
speed: 13.9281663895
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3787394935528515, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4449801445007324, -13.612465858459473, 1.5793455839157104, 8.080211639404297)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: -3.46755599976
y: 11.1802530289
theta: 4.55634450912
speed: 13.9281663895
id: 1
t: 88
xxx after update is x: -2.96212649345
y: 9.4370174408
theta: 4.60883951187
speed: 14.3436059952
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.96212649345
y: 9.4370174408
theta: 4.60883951187
speed: 14.3436059952
id: 1
t: 89
xxx after update is x: -2.57363915443
y: 8.65305805206
theta: 4.66066646576
speed: 13.6933746338
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: -2.57363915443
y: 8.65305805206
theta: 4.66066646576
speed: 13.6933746338
id: 1
t: 90
xxx after update is x: -3.18505477905
y: 8.4278011322
theta: 4.64915132523
speed: 13.8924980164
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.34557834610083643, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2119293212890625, -12.822685241699219, 1.3797130584716797, 7.311410903930664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 4.04444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.04444444444
maneuver_negotiatir.pyit doesn't need to chcnge)maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.04444444444






self.maneuver_requested left

current clock is 4.04444444444

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.911111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.04444444444,(3.2119293212890625, -12.822685241699219, 1.3797130584716797),7,1,3.24444444444,0,left
!!!!change state to get
GET,0,4.04444444444,(3.2119293212890625, -12.822685241699219, 1.3797130584716797),7,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.04444444444
self.communication_details == 0
sending GET,0,4.04444444444,(3.2119293212890625, -12.822685241699219, 1.3797130584716797),7,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
finish try maneuver
Received -->>: 
current clock is 4.04444444444




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.04444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '4.04444444444', 'Position': ['(-2.905467987060547', ' 13.345458984375', ' 4.641315937042236)'], 'Type': 'DENY'}
car 0 received DENY,1,4.04444444444,(-2.905467987060547, 13.345458984375, 4.641315937042236),14,1,3.2,1 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.044444444444444, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.044444444444444, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: 3.21192932129
y: -12.8226852417
theta: 1.37971305847
speed: 7.31141090393
id: 0
t: 91
xxx after update is x: 3.56949234009
y: -12.7598390579
theta: 1.59946274757
speed: 7.14331769943
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: 3.56949234009
y: -12.7598390579
theta: 1.59946274757
speed: 7.14331769943
id: 0
t: 92
xxx after update is x: 3.09439516068
y: -12.6004362106
theta: 1.55750358105
speed: 6.84055089951
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4227963241141071, 0.01864773621822683]
222 self.state_dicts[msg.id][msg.t] is (-3.435979127883911, 6.842588901519775, 4.808865070343018, 13.839228630065918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94


xxx before update is x: 3.09439516068
y: -12.6004362106
theta: 1.55750358105
speed: 6.84055089951
id: 0
t: 93
xxx after update is x: 3.26154327393
y: -11.775053978
theta: 1.4834446907
speed: 6.86737155914
id: 0
t: 94
maneuver_negotiatir.py finish the update agen message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '4.04444444444', 'IntendedCourse': 'left', 'Position': ['3.2119293212890625', ' -12.822685241699219', ' 1.3797130584716797'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,4.04444444444,(3.2119293212890625, -12.822685241699219, 1.3797130584716797),7,1,3.24444444444,0,left from  car0
status: 5
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.17975308642
sender travel direction is:  north
sender earliest entering time is:  1.08333223907
sender last entering time is:  2.17975308642
sender last leaving time is:  4.55305134284
my entering time is:  0.249620421361
my leaving time is:  1.39997765843
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.04444444444
self.communication_details == 0
sending DENY,1,4.04444444444,(-2.905467987060547, 13.345458984375, 4.641315937042236),14,1,3.2,1 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: -3.18505477905
y: 8.4278011322
theta: 4.64915132523
speed: 13.8924980164
id: 1
t: 91
xxx after update is x: -3.38154482841
y: 7.98293638229
theta: 4.75294828415
speed: 13.7393302917
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.38154482841
y: 7.98293638229
theta: 4.75294828415
speed: 13.7393302917
id: 1
t: 92
xxx after update is x: -3.43597912788
y: 6.84258890152
theta: 4.80886507034
speed: 13.8392286301
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.23316978560656915, 0]
222 self.state_dicts[msg.id][msg.t] is (3.094395160675049, -12.600436210632324, 1.557503581047058, 6.840550899505615)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.13333333333






self.maneuver_requested straight


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: -3.43597912788
y: 6.84258890152
theta: 4.80886507034
speed: 13.8392286301
id: 1
t: 93
xxx after update is x: -3.10214328766
y: 6.67845344543
theta: 4.53060817719
speed: 14.0597772598
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.10214328766
y: 6.67845344543
theta: 4.53060817719
speed: 14.0597772598
id: 1
t: 94
xxx after update is x: -3.01572203636
y: 6.06203699112
theta: 4.8270907402
speed: 13.7367811203
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2003135449585505, 0]
22t state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: 3.26154327393
y: -11.775053978
theta: 1.4834446907
speed: 6.86737155914
id: 0
t: 94
xxx after update is x: 3.16595053673
y: -11.5324468613
theta: 1.33497965336
speed: 6.51376342773
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: 3.16595053673
y: -11.5324468613
theta: 1.33497965336
speed: 6.51376342773
id: 0
t: 95
xxx after update is x: 2.95750188828
y: -11.6805419922
theta: 1.55996417999
speed: 6.3597445488
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.3732817200747569, 0.015076336813364332]
222 self.state_dicts[msg.id][msg.t] is (-3.3802683353424072, 5.850220203399658, 4.683111667633057, 13.58218002319336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: 2.95750188828
y: -11.6805419922
theta: 1.55996417999
speed: 6.3597445488
id: 0
t: 96
xxx after update is x: 3.45471692085
y: -11.0803956985
theta: 1.58449113369
speed: 6.03426933289
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98


xxx before update is x: 3.45471692085
y: -11.0803956985
theta: 1.58449113369
speed: 6.03426933289
id: 0
t: 97
xxx after update is x: 3.08359003067
y: -10.7523374557
theta: 1.53440976143
speed: 5.64903736115
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: 3.08359003067
y: -10.7523374557
theta: 1.53440976143
speed: 5.64903736115
id: 0
t: 98
xxx after update is x: 3.22972464561
y: -10.2771492004
theta: 1.76030778885
speed: 5.64435529709
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.43123614483052797, 0.052352140054720206]
222 self.state_dicts[msg.id][msg.t] is (-3.1518912315368652, 4.0638017654418945, 4.819098949432373, 13.632726669311523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.4






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.311111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.4
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.31111111111
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.4,(3.229724645614624, -10.277149200439453, 1.760307788848877),5,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.4
self.communication_details == 0
sending RELEASE,0,4.4,(3.229724645614624, -10.277149200439453, 1.760307788848877),5,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfin2 self.state_dicts[msg.id][msg.t] is (3.1659505367279053, -11.53244686126709, 1.3349796533584595, 6.513763427734375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: -3.01572203636
y: 6.06203699112
theta: 4.8270907402
speed: 13.7367811203
id: 1
t: 95
xxx after update is x: -3.38026833534
y: 5.8502202034
theta: 4.68311166763
speed: 13.5821800232
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: -3.38026833534
y: 5.8502202034
theta: 4.68311166763
speed: 13.5821800232
id: 1
t: 96
xxx after update is x: -3.15407204628
y: 5.47850370407
theta: 4.76805019379
speed: 13.617430687
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21148738655834506, 0]
222 self.state_dicts[msg.id][msg.t] is (3.454716920852661, -11.080395698547363, 1.5844911336898804, 6.034269332885742)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: -3.15407204628
y: 5.47850370407
theta: 4.76805019379
speed: 13.617430687
id: 1
t: 97
xxx after update is x: -3.14029431343
y: 3.9913547039
theta: 4.79566812515
speed: 13.7531280518
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.14029431343
y: 3.9913547039
theta: 4.79566812515
speed: 13.7531280518
id: 1
t: 98
xxx after update is x: -3.15189123154
y: 4.06380176544
theta: 4.81909894943
speed: 13.6327266693
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.17253238102286209, 0]
222 self.state_dicts[msg.id][msg.t] is (3.229724645614624, -10.277149200439453, 1.760307788848877, 5.644355297088623)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 4.4




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.4
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '5', 'Sender': '0', 'TagID': '1', 'Time': '4.4', 'Position': ['(3.229724645614624', ' -10.277149200439453', ' 1.760307788848877)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.4,(3.229724645614624, -10.277149200439453, 1.760307788848877),5,1,3.24444444444,0 from  car0
status: 5




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: -3.15189123154
y: 4.06380176544
theta: 4.81909894943
speed: 13.6327266693
id: 1
t: 99
xxish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: 3.22972464561
y: -10.2771492004
theta: 1.76030778885
speed: 5.64435529709
id: 0
t: 99
xxx after update is x: 3.45611023903
y: -10.4078073502
theta: 1.60418474674
speed: 5.44256353378
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: 3.45611023903
y: -10.4078073502
theta: 1.60418474674
speed: 5.44256353378
id: 0
t: 100
xxx after update is x: 3.66539359093
y: -10.0470218658
theta: 1.49629247189
speed: 5.21648168564
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.5338812573185694, 0.02964161652044554]
222 self.state_dicts[msg.id][msg.t] is (-3.2519938945770264, 2.8169171810150146, 4.682458400726318, 13.892247200012207)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: 3.66539359093
y: -10.0470218658
theta: 1.49629247189
speed: 5.21648168564
id: 0
t: 101
xxx after update is x: 2.67937397957
y: -9.59165096283
theta: 1.59005463123
speed: 4.80319929123
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: 2.67937397957
y: -9.59165096283
theta: 1.59005463123
speed: 4.80319929123
id: 0
t: 102
xxx after update is x: 3.72715806961
y: -9.67423725128
theta: 1.65310764313
speed: 4.50855970383
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: 3.72715806961
y: -9.67423725128
theta: 1.65310764313
speed: 4.50855970383
id: 0
t: 103
xxx after update is x: 3.13697338104
y: -10.019572258
theta: 1.49997901917
speed: 4.48346853256
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5464950269278099, 9.537446406742718e-06]
222 self.state_dicts[msg.id][msg.t] is (-3.6036429405212402, 0.7540686726570129, 4.582534313201904, 13.952142715454102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: 3.13697338104
y: -10.019572258
theta: 1.49997901917
speed: 4.48346853256
id: 0
t: 104
xxx after update is x: 3.01441955566
y: -9.43300628662
theta: 1.59818804264
speed: 4.03279066086
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: 3.01441955566
y: -9.43300628662
theta: 1.59818804264
speed: 4.03279066086
id: 0
t: 105
xxx after update is x: 2.91970705986
y: -8.880610466
theta: 1.5611281395
speed: 3.97755050659
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negx after update is x: -3.07492923737
y: 3.30742144585
theta: 4.56823444366
speed: 13.8012075424
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.07492923737
y: 3.30742144585
theta: 4.56823444366
speed: 13.8012075424
id: 1
t: 100
xxx after update is x: -3.25199389458
y: 2.81691718102
theta: 4.68245840073
speed: 13.8922472
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31494387108242083, 0]
222 self.state_dicts[msg.id][msg.t] is (3.665393590927124, -10.047021865844727, 1.4962924718856812, 5.216481685638428)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.48888888889






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: -3.25199389458
y: 2.81691718102
theta: 4.68245840073
speed: 13.8922472
id: 1
t: 101
xxx after update is x: -3.35677719116
y: 1.94960260391
theta: 4.77120733261
speed: 14.1164579391
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.35677719116
y: 1.94960260391
theta: 4.77120733261
speed: 14.1164579391
id: 1
t: 102
xxx after update is x: -3.94648528099
y: 1.39471065998
theta: 4.71516466141
speed: 13.5860433578
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.18002519057876665, 0]
222 self.state_dicts[msg.id][msg.t] is (3.7271580696105957, -9.674237251281738, 1.6531076431274414, 4.508559703826904)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: -3.94648528099
y: 1.39471065998
theta: 4.71516466141
speed: 13.5860433578
id: 1
t: 103
xxx after update is x: -3.60364294052
y: 0.754068672657
theta: 4.5825343132
speed: 13.9521427155
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: -3.60364294052
y: 0.754068672657
theta: 4.5825343132
speed: 13.9521427155
id: 1
t: 104
xxx after update is x: -3.42319893837
y: -0.606266260147
theta: 4.59928512573
speed: 13.892821312
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.03399727148651526, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0144195556640625, -9.433006286621094, 1.598188042640686, 4.032790660858154)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
Received -->>: 
current clock is 4.66666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.66666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict otiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107


xxx before update is x: 2.91970705986
y: -8.880610466
theta: 1.5611281395
speed: 3.97755050659
id: 0
t: 106
xxx after update is x: 3.30288290977
y: -9.30829715729
theta: 1.56361055374
speed: 3.51293754578
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.75555555556

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0,left
!!!!change state to get
GET,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.75555555556
self.communication_details == 0
sending GET,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 4.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.66666666667', 'Position': ['(-3.2519938945770264', ' 2.8169171810150146', ' 4.682458400726318)'], 'Type': 'DENY'}
car 0 received DENY,1,4.66666666667,(-3.2519938945770264, 2.8169171810150146, 4.682458400726318),13,1,3.2,1 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.666666666666667, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.75555555556






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.75555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.66666666667
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.75555555556
self.communication_details == 0
sending RELEASE,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. sfinish
risk is [0.4862425289169241, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8279922008514404, -0.9339891076087952, 4.741734027862549, 14.24917221069336)
if we is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '4.75555555556', 'IntendedCourse': 'left', 'Position': ['3.3028829097747803', ' -9.308297157287598', ' 1.563610553741455'], 'TagID': '0', 'Type': 'GET', 'Velocity': '3'}
car 1 received GET,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0,left from  car0
status: 5
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.211358024692
sender travel direction is:  north
sender earliest entering time is:  0.634811174069
sender last entering time is:  2.21135802469
sender last leaving time is:  4.58465628112
my entering time is:  0.211358024692
my leaving time is:  0.711262409517
i have left the intersection:  False
sender enters just im about to leave
time is  -0.0764512354471
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.66666666667
self.communication_details == 0
sending DENY,1,4.66666666667,(-3.2519938945770264, 2.8169171810150146, 4.682458400726318),13,1,3.2,1 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107


xxx before update is x: -3.42319893837
y: -0.606266260147
theta: 4.59928512573
speed: 13.892821312
id: 1
t: 105
xxx after update is x: -3.76126241684
y: -0.437912166119
theta: 4.74748134613
speed: 13.9333324432
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.76126241684
y: -0.437912166119
theta: 4.74748134613
speed: 13.9333324432
id: 1
t: 106
xxx after update is x: -2.82799220085
y: -0.933989107609
theta: 4.74173402786
speed: 14.2491722107
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0643245426165338, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3028829097747803, -9.308297157287598, 1.563610553741455, 3.512937545776367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 4.75555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '3', 'Sender': '0', 'TagID': '1', 'Time': '4.75555555556', 'Position': ['(3.3028829097747803', ' -9.308297157287598', ' 1.563610553741455)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.75555555556,(3.3028829097747803, -9.308297157287598, 1.563610553741455),3,1,3.24444444444,0 from  car0
status: 5




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: -2.82799220085
y: -0.933989107609
theta: 4.74173402786
speed: 14.2491722107
id: 1
t: 107
xxx after update is x: -2.59851956367
y: -1.76580274105
theta: 4.77401161194
speed: 13.8847942352
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.598519have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: 3.30288290977
y: -9.30829715729
theta: 1.56361055374
speed: 3.51293754578
id: 0
t: 107
xxx after update is x: 3.00808644295
y: -8.67984485626
theta: 1.61115431786
speed: 3.30484175682
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: 3.00808644295
y: -8.67984485626
theta: 1.61115431786
speed: 3.30484175682
id: 0
t: 108
xxx after update is x: 3.15442419052
y: -8.40609836578
theta: 1.76817023754
speed: 3.02010083199
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110


xxx before update is x: 3.15442419052
y: -8.40609836578
theta: 1.76817023754
speed: 3.02010083199
id: 0
t: 109
xxx after update is x: 3.21658778191
y: -8.36048412323
theta: 1.38389980793
speed: 2.69901418686
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4534908649426314, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: 3.21658778191
y: -8.36048412323
theta: 1.38389980793
speed: 2.69901418686
id: 0
t: 110
xxx after update is x: 3.99220871925
y: -8.09411525726
theta: 1.63624453545
speed: 2.66149783134
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-2.9415979385375977, -3.114163875579834, 4.789375305175781, 13.843487739562988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: 3.99220871925
y: -8.09411525726
theta: 1.63624453545
speed: 2.66149783134
id: 0
t: 111
xxx after update is x: 3.28996086121
y: -7.97688341141
theta: 1.6142270565
speed: 2.39436173439
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: 3.28996086121
y: -7.97688341141
theta: 1.6142270565
speed: 2.39436173439
id: 0
t: 112
xxx after update is x: 3.29983711243
y: -8.11824035645
theta: 1.6684179306
speed: 2.39505171776
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6077542175231029, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.094338893890381, -5.2070465087890625, 4.831748962402344, 13.653019905090332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: 3.29983711243
y: -8.11824035645
theta: 1.6684179306
speed: 2.39505171776
id: 0
t: 113
xxx after update is x: 3.55621123314
y: -7.48770046234
theta: 1.49847579002
speed: 2.20939350128
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all ag56367
y: -1.76580274105
theta: 4.77401161194
speed: 13.8847942352
id: 1
t: 108
xxx after update is x: -3.17058587074
y: -2.59529066086
theta: 4.77070379257
speed: 14.2211399078
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.11111298287698461, 0]
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.84444444444






self.maneuver_requested straight
222 self.state_dicts[msg.id][msg.t] is (3.1544241905212402, -8.406098365783691, 1.7681702375411987, 3.0201008319854736)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: -3.17058587074
y: -2.59529066086
theta: 4.77070379257
speed: 14.2211399078
id: 1
t: 109
xxx after update is x: -3.43710660934
y: -3.25213646889
theta: 4.83495950699
speed: 13.9047203064
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.43710660934
y: -3.25213646889
theta: 4.83495950699
speed: 13.9047203064
id: 1
t: 110
xxx after update is x: -2.94159793854
y: -3.11416387558
theta: 4.78937530518
speed: 13.8434877396
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.08908618749503185, 0]
222 self.state_dicts[msg.id][msg.t] is (3.99220871925354, -8.094115257263184, 1.636244535446167, 2.6614978313446045)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: -2.94159793854
y: -3.11416387558
theta: 4.78937530518
speed: 13.8434877396
id: 1
t: 111
xxx after update is x: -3.36897540092
y: -4.04151344299
theta: 4.6113243103
speed: 14.1905012131
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.36897540092
y: -4.04151344299
theta: 4.6113243103
speed: 14.1905012131
id: 1
t: 112
xxx after update is x: -3.09433889389
y: -5.20704650879
theta: 4.8317489624
speed: 13.6530199051
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.05983047684543549, 0]
222 self.state_dicts[msg.id][msg.t] is (3.299837112426758, -8.118240356445312, 1.6684179306030273, 2.3950517177581787)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
Received -->>: 
current clock is 5.02222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.02222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '5.06666666667', 'IntendedCourse': 'left', 'Position': ['3.556211233139038', ' -7.487700462341309', ' 1.4984757900238037'], 'TagID':nets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.06666666667

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.022222222222222, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0,left
!!!!change state to get
GET,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 5.06666666667
self.communication_details == 0
sending GET,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 5.06666666667




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.06666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '5.02222222222', 'Position': ['(-3.170585870742798', ' -2.5952906608581543', ' 4.7707037925720215)'], 'Type': 'DENY'}
car 0 received DENY,1,5.02222222222,(-3.170585870742798, -2.5952906608581543, 4.7707037925720215),14,1,3.2,1 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.022222222222222, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.022222222222222, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.06666666667






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.022222222222222, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 5.06666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.02222222222
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 5.06666666667
self.communication_details == 0
sending RELEASE,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: 3.55621123314
y: -7.48770046234
theta: 1.49847579002
speed: 2.20939350128
id: 0
t: 114
xxx after update is x: 2.46635317802
y: -7.77538728714
theta: 1.59219324589
speed: 1.77039837837
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targe '0', 'Type': 'GET', 'Velocity': '2'}
car 1 received GET,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0,left from  car0
status: 5
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.225185185185
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 5.02222222222
self.communication_details == 0
sending DENY,1,5.02222222222,(-3.170585870742798, -2.5952906608581543, 4.7707037925720215),14,1,3.2,1 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




Received -->>: 
current clock is 5.02222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.02222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '2', 'Sender': '0', 'TagID': '1', 'Time': '5.06666666667', 'Position': ['(3.556211233139038', ' -7.487700462341309', ' 1.4984757900238037)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,5.06666666667,(3.556211233139038, -7.487700462341309, 1.4984757900238037),2,1,3.24444444444,0 from  car0
status: 5




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: -3.09433889389
y: -5.20704650879
theta: 4.8317489624
speed: 13.6530199051
id: 1
t: 113
xxx after update is x: -2.87443733215
y: -5.50118017197
theta: 4.69222354889
speed: 13.7967195511
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.87443733215
y: -5.50118017197
theta: 4.69222354889
speed: 13.7967195511
id: 1
t: 114
xxx after update is x: -3.14194941521
y: -6.53482580185
theta: 4.87137269974
speed: 14.0793867111
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.07684131324944338, 0]
222 self.state_dicts[msg.id][msg.t] is (2.466353178024292, -7.775387287139893, 1.5921932458877563, 1.7703983783721924)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.11111111111






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: -3.14194941521
y: -6.53482580185
theta: 4.87137269974
speed: 14.0793867111
id: 1
t: 115
xxx after update is x: -3.00178098679
y: -6.77195310593
theta: 4.63202810287
speed: 13.7739849091
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.00178098679
y: -6.77195310593
theta: 4.63202810287
speed: 13.7739849091
id: 1
t: 116
xxx after update is x: -3.05558228493
y: -8.11091995239
theta: 4.67962312698
speed: 13.9864902496
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.04817449780126312, 0]
222 self.state_dicts[msg.id][msg.t] is (3.46955513tspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: 2.46635317802
y: -7.77538728714
theta: 1.59219324589
speed: 1.77039837837
id: 0
t: 115
xxx after update is x: 3.0034327507
y: -7.823179245
theta: 1.52894806862
speed: 1.56990337372
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4608805721426837, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: 3.0034327507
y: -7.823179245
theta: 1.52894806862
speed: 1.56990337372
id: 0
t: 116
xxx after update is x: 3.46955513954
y: -7.32270669937
theta: 1.72183418274
speed: 1.23291599751
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.055582284927368, -8.110919952392578, 4.679623126983643, 13.986490249633789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118


xxx before update is x: 3.46955513954
y: -7.32270669937
theta: 1.72183418274
speed: 1.23291599751
id: 0
t: 117
xxx after update is x: 3.49321317673
y: -7.69715499878
theta: 1.46263468266
speed: 1.07697713375
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: 3.49321317673
y: -7.69715499878
theta: 1.46263468266
speed: 1.07697713375
id: 0
t: 118
xxx after update is x: 3.59453582764
y: -8.29125881195
theta: 1.4016340971
speed: 0.972892045975
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6303221482441839, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2521750926971436, -8.85866928100586, 4.609750270843506, 14.07559871673584)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120


xxx before update is x: 3.59453582764
y: -8.29125881195
theta: 1.4016340971
speed: 0.972892045975
id: 0
t: 119
xxx after update is x: 3.39556646347
y: -7.27161407471
theta: 1.56545352936
speed: 0.653919875622
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: 3.39556646347
y: -7.27161407471
theta: 1.56545352936
speed: 0.653919875622
id: 0
t: 120
xxx after update is x: 3.1587600708
y: -7.78116607666
theta: 1.69641697407
speed: 0.528331696987
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6906677742211373, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8471903800964355, -10.182083129882812, 4.752658843994141, 13.951571464538574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


xxx before update is x: 3.1587600708
y: -7.78116607666
theta: 1.69641697407
speed: 0.528331696987
id: 0
t: 121
xxx after update is x: 3.22199726105
y: -7.48687648773
theta: 1.51799535751
speed: -0.0511706620455
id: 0
t: 122
maneuver_negotiatir.py 9541626, -7.322706699371338, 1.7218341827392578, 1.232915997505188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: -3.05558228493
y: -8.11091995239
theta: 4.67962312698
speed: 13.9864902496
id: 1
t: 117
xxx after update is x: -3.06966137886
y: -8.08867263794
theta: 4.65134525299
speed: 13.7108049393
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.06966137886
y: -8.08867263794
theta: 4.65134525299
speed: 13.7108049393
id: 1
t: 118
xxx after update is x: -3.2521750927
y: -8.85866928101
theta: 4.60975027084
speed: 14.0755987167
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8135881321528637, 0]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.5945358276367188, -8.291258811950684, 1.4016340970993042, 0.9728920459747314)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: -3.2521750927
y: -8.85866928101
theta: 4.60975027084
speed: 14.0755987167
id: 1
t: 119
xxx after update is x: -3.37400507927
y: -9.736328125
theta: 4.76462554932
speed: 13.7622232437
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.37400507927
y: -9.736328125
theta: 4.76462554932
speed: 13.7622232437
id: 1
t: 120
xxx after update is x: -2.8471903801
y: -10.1820831299
theta: 4.75265884399
speed: 13.9515714645
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8020184456533147, 0.5407999999999991]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.1587600708007812, -7.781166076660156, 1.696416974067688, 0.5283316969871521)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
************normalize weight**********************
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: -2.8471903801
y: -10.1820831299
theta: 4.75265884399
speed: 13.9515714645
id: 1
t: 121
xxx after update is x: -2.85130143166
y: -10.8880329132
theta: 4.67827367783
speed: 13.5552663803
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.85130143166
y: -10.8880329132
theta: 4.67827367783
speed: 13.5552663803
id: 1
t: 122
xxx after update is x: -2.98455071449
y: -10.5385990143
theta: 4.70641756058
speed: 14.1036071777
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4500622781392512, 0.4575999999999981]
222 self.state_dicts[msg.id][msg.t] is (3.441223382949829, -7.371542930603027, 1.54finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.42222222222

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.377777777777778, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
Empty
self.agents_to_ask is []
message is :GET,0,5.42222222222,(3.2219972610473633, -7.486876487731934, 1.5179953575134277),0,1,3.24444444444,0,left
!!!!change state to get
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.42222222222






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.377777777777778, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 5.42222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.37777777778
self.TMan is 5
Empty
self.agents_to_ask is []
stopped retry timer
deny not in message
maneuver_negotiatir.py in the domaneuver function - start
finish try maneuver
added car with id 0 to grantlist. current grantlist:  {0: [10.288888888888888, 'left']}
Doing maneuver
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: 3.22199726105
y: -7.48687648773
theta: 1.51799535751
speed: -0.0511706620455
id: 0
t: 122
xxx after update is x: 3.44122338295
y: -7.3715429306
theta: 1.54728722572
speed: 0.144496589899
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: 3.44122338295
y: -7.3715429306
theta: 1.54728722572
speed: 0.144496589899
id: 0
t: 123
xxx after update is x: 3.42487835884
y: -7.55347824097
theta: 1.471981287
speed: 0.292542040348
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6165271542893866, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: 3.42487835884
y: -7.55347824097
theta: 1.471981287
speed: 0.292542040348
id: 0
t: 124
xxx after update is x: 3.41068124771
y: -7.62302398682
theta: 1.55199301243
speed: 0.823445737362
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.279034376144409, -12.42014217376709, 4.625303745269775, 14.027142524719238)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: 3.41068124771
y: -7.62302398682
theta: 1.55199301243
speed: 0.823445737362
id: 0
t: 125
xxx after update is x: 2.97027730942
y: -7.790163517
theta: 1.45740425587
speed: 0.940907418728
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.spe72872257232666, 0.1444965898990631)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.46666666667






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: -2.98455071449
y: -10.5385990143
theta: 4.70641756058
speed: 14.1036071777
id: 1
t: 123
xxx after update is x: -3.25007176399
y: -11.7231283188
theta: 4.75617790222
speed: 14.2303237915
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.25007176399
y: -11.7231283188
theta: 4.75617790222
speed: 14.2303237915
id: 1
t: 124
xxx after update is x: -3.27903437614
y: -12.4201421738
theta: 4.62530374527
speed: 14.0271425247
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5216560193355639, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4106812477111816, -7.623023986816406, 1.5519930124282837, 0.823445737361908)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: -3.27903437614
y: -12.4201421738
theta: 4.62530374527
speed: 14.0271425247
id: 1
t: 125
xxx after update is x: -3.21295142174
y: -12.577214241
theta: 4.82136964798
speed: 13.7603683472
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.1502490759625059, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9702773094177246, -7.790163516998291, 1.4574042558670044, 0.9409074187278748)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: -3.21295142174
y: -12.577214241
theta: 4.82136964798
speed: 13.7603683472
id: 1
t: 126
xxx after update is x: -3.27076625824
y: -13.1548471451
theta: 4.81500577927
speed: 13.609120369
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.27076625824
y: -13.1548471451
theta: 4.81500577927
speed: 13.609120369
id: 1
t: 127
xxx after update is x: -3.33772420883
y: -13.9396266937
theta: 4.85131788254
speed: 13.8398256302
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31021995520729007, 0]
222 self.state_dicts[msg.id][msg.t] is (3.423748016357422, -7.2173380851745605, 1.6763314008712769, 1.4200471639633179)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129




going to the update function
sim.py in the sim.py update function 
tared:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: 2.97027730942
y: -7.790163517
theta: 1.45740425587
speed: 0.940907418728
id: 0
t: 126
xxx after update is x: 3.48799467087
y: -7.22202634811
theta: 1.61424553394
speed: 1.15289103985
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6913793356876996, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: 3.48799467087
y: -7.22202634811
theta: 1.61424553394
speed: 1.15289103985
id: 0
t: 127
xxx after update is x: 3.42374801636
y: -7.21733808517
theta: 1.67633140087
speed: 1.42004716396
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.337724208831787, -13.939626693725586, 4.851317882537842, 13.839825630187988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: 3.42374801636
y: -7.21733808517
theta: 1.67633140087
speed: 1.42004716396
id: 0
t: 128
xxx after update is x: 3.16127324104
y: -7.09350061417
theta: 1.62544226646
speed: 1.96707427502
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: 3.16127324104
y: -7.09350061417
theta: 1.62544226646
speed: 1.96707427502
id: 0
t: 129
xxx after update is x: 3.10525894165
y: -7.042552948
theta: 1.54377377033
speed: 1.87681782246
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.77777777778






self.maneuver_requested left
aaaaaa
risk is [0.0792205612047769, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8456900119781494, -15.723143577575684, 4.681230545043945, 14.143016815185547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131


xxx before update is x: 3.10525894165
y: -7.042552948
theta: 1.54377377033
speed: 1.87681782246
id: 0
t: 130
xxx after update is x: 3.58976006508
y: -6.91435909271
theta: 1.56269025803
speed: 2.16039013863
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: 3.58976006508
y: -6.91435909271
theta: 1.56269025803
speed: 2.16039013863
id: 0
t: 131
xxx after update is x: 2.99706172943
y: -6.95497465134
theta: 1.47676610947
speed: 2.40753269196
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [5.445127213052181e-07, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2535829544067383, -16.091257095336914, 4.780764579772949, 14.217530250549316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n tgetspeed < self.speed:xxxxxxxxxxxx before update is x: -3.33772420883
y: -13.9396266937
theta: 4.85131788254
speed: 13.8398256302
id: 1
t: 128
xxx after update is x: -3.63121652603
y: -14.795340538
theta: 4.45715904236
speed: 13.8925561905
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion

 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: -3.63121652603
y: -14.795340538
theta: 4.45715904236
speed: 13.8925561905
id: 1
t: 129
xxx after update is x: -2.84569001198
y: -15.7231435776
theta: 4.68123054504
speed: 14.1430168152
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0916981877844072, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1052589416503906, -7.042552947998047, 1.5437737703323364, 1.8768178224563599)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: -2.84569001198
y: -15.7231435776
theta: 4.68123054504
speed: 14.1430168152
id: 1
t: 130
xxx after update is x: -3.04363632202
y: -16.3303451538
theta: 4.61057853699
speed: 13.4620027542
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.04363632202
y: -16.3303451538
theta: 4.61057853699
speed: 13.4620027542
id: 1
t: 131
xxx after update is x: -3.25358295441
y: -16.0912570953
theta: 4.78076457977
speed: 14.2175302505
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0008328226567775576, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9970617294311523, -6.95497465133667, 1.4767661094665527, 2.4075326919555664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.86666666667






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134


xxx before update is x: -3.25358295441
y: -16.0912570953
theta: 4.78076457977
speed: 14.2175302505
id: 1
t: 132
xxx after update is x: -3.09969949722
y: -17.0971183777
theta: 4.64237260818
speed: 13.9714393616
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.09969949722
y: -17.0971183777
theta: 4.64237260818
speed: 13.9714393616
id: 1
t: 133
xxx after update is x: -2.93058156967
y: -17.8819713593
theta: 4.87093925476
speed: 14.1780786514
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.7060468621185637e-32, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7870936393737793, -6.250807762145996, 1.4966787099838257, 2.740173101425171)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


xxx before updaimes spin:133

xxx before update is x: 2.99706172943
y: -6.95497465134
theta: 1.47676610947
speed: 2.40753269196
id: 0
t: 132
xxx after update is x: 2.89511704445
y: -6.80110454559
theta: 1.48643600941
speed: 2.5930109024
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134


xxx before update is x: 2.89511704445
y: -6.80110454559
theta: 1.48643600941
speed: 2.5930109024
id: 0
t: 133
xxx after update is x: 2.78709363937
y: -6.25080776215
theta: 1.49667870998
speed: 2.74017310143
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: 2.78709363937
y: -6.25080776215
theta: 1.49667870998
speed: 2.74017310143
id: 0
t: 134
xxx after update is x: 2.86146664619
y: -6.70600605011
theta: 1.73321723938
speed: 3.4353761673
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.1870472404639845e-32, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4394569396972656, -18.16637420654297, 4.721195697784424, 13.650218963623047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: 2.86146664619
y: -6.70600605011
theta: 1.73321723938
speed: 3.4353761673
id: 0
t: 135
xxx after update is x: 3.58973050117
y: -6.42523002625
theta: 1.54837441444
speed: 3.54427242279
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: 3.58973050117
y: -6.42523002625
theta: 1.54837441444
speed: 3.54427242279
id: 0
t: 136
xxx after update is x: 3.03402757645
y: -6.43085384369
theta: 1.63172662258
speed: 3.625903368
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [6.157123085632517e-66, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1994566917419434, -19.57569694519043, 4.729682922363281, 13.959641456604004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138


xxx before update is x: 3.03402757645
y: -6.43085384369
theta: 1.63172662258
speed: 3.625903368
id: 0
t: 137
xxx after update is x: 3.15201640129
y: -6.09504079819
theta: 1.70229923725
speed: 4.25619602203
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.13333333333






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: 3.15201640129
y: -6.09504079819
theta: 1.70229923725
speed: 4.25619602203
id: 0
t: 138
xxx after update is x: 2.86585688591
y: -6.2492146492
theta: 1.66349136829
speed: 4.36402797699
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.4491690808268428e-74, 0.0]
222 self.state_dicts[msg.id][msg.tte is x: -2.93058156967
y: -17.8819713593
theta: 4.87093925476
speed: 14.1780786514
id: 1
t: 134
xxx after update is x: -3.4394569397
y: -18.1663742065
theta: 4.72119569778
speed: 13.6502189636
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: -3.4394569397
y: -18.1663742065
theta: 4.72119569778
speed: 13.6502189636
id: 1
t: 135
xxx after update is x: -3.56544661522
y: -18.807767868
theta: 5.00848293304
speed: 14.2452049255
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.276979525965976e-44, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5897305011749268, -6.425230026245117, 1.5483744144439697, 3.5442724227905273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: -3.56544661522
y: -18.807767868
theta: 5.00848293304
speed: 14.2452049255
id: 1
t: 136
xxx after update is x: -3.19945669174
y: -19.5756969452
theta: 4.72968292236
speed: 13.9596414566
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [5.989842326590009e-71, 0]
222 self.state_dicts[msg.id][msg.t] is (3.034027576446533, -6.430853843688965, 1.631726622581482, 3.625903367996216)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: -3.19945669174
y: -19.5756969452
theta: 4.72968292236
speed: 13.9596414566
id: 1
t: 137
xxx after update is x: -2.9764175415
y: -20.0375614166
theta: 4.91004800797
speed: 13.7366695404
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.9764175415
y: -20.0375614166
theta: 4.91004800797
speed: 13.7366695404
id: 1
t: 138
xxx after update is x: -3.76024913788
y: -20.8685703278
theta: 4.61160230637
speed: 14.1266994476
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.8038568639895505e-74, 0]
222 self.state_dicts[msg.id][msg.t] is (2.865856885910034, -6.2492146492004395, 1.6634913682937622, 4.364027976989746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.17777777778






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: -3.76024913788
y: -20.8685703278
theta: 4.61160230637
speed: 14.1266994476
id: 1
t: 139
xxx after update is x: -3.49384570122
y: -21.4138145447
theta: 4.90330553055
speed: 13.8307828903
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.1620288205823207e-107, 0]
222 self.state_dicts[msg.id][msg.t] is (3.11586332321167, -5.5727763175964355, 1.505090594291687, 4.296475887298584)] is (-3.760249137878418, -20.86857032775879, 4.611602306365967, 14.126699447631836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: 2.86585688591
y: -6.2492146492
theta: 1.66349136829
speed: 4.36402797699
id: 0
t: 139
xxx after update is x: 3.11586332321
y: -5.5727763176
theta: 1.50509059429
speed: 4.2964758873
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: 3.11586332321
y: -5.5727763176
theta: 1.50509059429
speed: 4.2964758873
id: 0
t: 140
xxx after update is x: 3.188113451
y: -5.91753768921
theta: 1.81527841091
speed: 4.6658654213
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.5094346529242444e-107, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: 3.188113451
y: -5.91753768921
theta: 1.81527841091
speed: 4.6658654213
id: 0
t: 141
xxx after update is x: 3.53408432007
y: -5.75851202011
theta: 1.6394687891
speed: 4.78528594971
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.1154227256774902, -22.41328239440918, 4.8712992668151855, 13.985786437988281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: 3.53408432007
y: -5.75851202011
theta: 1.6394687891
speed: 4.78528594971
id: 0
t: 142
xxx after update is x: 3.6199529171
y: -4.99870252609
theta: 1.72497713566
speed: 5.41608190536
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.926730046065439e-131, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.780667304992676, -23.558223724365234, 4.723373889923096, 13.913107872009277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: 3.6199529171
y: -4.99870252609
theta: 1.72497713566
speed: 5.41608190536
id: 0
t: 143
xxx after update is x: 2.95246911049
y: -5.05433702469
theta: 1.65154886246
speed: 5.75476455688
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: 2.95246911049
y: -5.05433702469
theta: 1.65154886246
speed: 5.75476455688
id: 0
t: 144
xxx after update is x: 2.90930199623
y: -4.74922418594
theta: 1.64605510235
speed: 5.61570119858
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.44444444444






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, fini
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: -3.49384570122
y: -21.4138145447
theta: 4.90330553055
speed: 13.8307828903
id: 1
t: 140
xxx after update is x: -3.68322229385
y: -21.7093200684
theta: 4.70800590515
speed: 13.6649045944
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.68322229385
y: -21.7093200684
theta: 4.70800590515
speed: 13.6649045944
id: 1
t: 141
xxx after update is x: -3.11542272568
y: -22.4132823944
theta: 4.87129926682
speed: 13.985786438
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.1177098772811097e-108, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5340843200683594, -5.758512020111084, 1.639468789100647, 4.785285949707031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: -3.11542272568
y: -22.4132823944
theta: 4.87129926682
speed: 13.985786438
id: 1
t: 142
xxx after update is x: -3.78066730499
y: -23.5582237244
theta: 4.72337388992
speed: 13.913107872
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.664715407088789e-131, 0]
222 self.state_dicts[msg.id][msg.t] is (3.619952917098999, -4.998702526092529, 1.7249771356582642, 5.41608190536499)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: -3.78066730499
y: -23.5582237244
theta: 4.72337388992
speed: 13.913107872
id: 1
t: 143
xxx after update is x: -3.48088860512
y: -24.0856361389
theta: 4.62887239456
speed: 14.2563476562
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.48088860512
y: -24.0856361389
theta: 4.62887239456
speed: 14.2563476562
id: 1
t: 144
xxx after update is x: -3.58392953873
y: -25.0073852539
theta: 4.74946641922
speed: 13.9883489609
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [4.460143952357344e-174, 0]
222 self.state_dicts[msg.id][msg.t] is (2.909301996231079, -4.7492241859436035, 1.6460551023483276, 5.615701198577881)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: -3.58392953873
y: -25.0073852539
theta: 4.74946641922
speed: 13.9883489609
id: 1
t: 145
xxx after update is x: -3.79442000389
y: -25.1388702393
theta: 4.63295841217
speed: 13.9579610825
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbsh the n times spin:146

xxx before update is x: 2.90930199623
y: -4.74922418594
theta: 1.64605510235
speed: 5.61570119858
id: 0
t: 145
xxx after update is x: 3.30057907104
y: -4.82046318054
theta: 1.73443484306
speed: 6.01981258392
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [2.755935494975386e-174, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.794420003890991, -25.138870239257812, 4.63295841217041, 13.957961082458496)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: 3.30057907104
y: -4.82046318054
theta: 1.73443484306
speed: 6.01981258392
id: 0
t: 146
xxx after update is x: 3.09181046486
y: -3.772138834
theta: 1.85445380211
speed: 6.82802152634
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:148


xxx before update is x: 3.09181046486
y: -3.772138834
theta: 1.85445380211
speed: 6.82802152634
id: 0
t: 147
xxx after update is x: 3.61243653297
y: -3.65175509453
theta: 1.97103357315
speed: 6.80915498734
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.1919924110063605e-213, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.247288942337036, -26.56349754333496, 4.655763149261475, 13.949148178100586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: 3.61243653297
y: -3.65175509453
theta: 1.97103357315
speed: 6.80915498734
id: 0
t: 148
xxx after update is x: 2.29455399513
y: -3.10320210457
theta: 1.92388010025
speed: 6.99578714371
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: 2.29455399513
y: -3.10320210457
theta: 1.92388010025
speed: 6.99578714371
id: 0
t: 149
xxx after update is x: 2.92031860352
y: -3.01229166985
theta: 1.8352009058
speed: 7.22723865509
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [7.488856388940371e-289, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3857972621917725, -27.31553840637207, 4.831018924713135, 13.609614372253418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: 2.92031860352
y: -3.01229166985
theta: 1.8352009058
speed: 7.22723865509
id: 0
t: 150
xxx after update is x: 2.67272424698
y: -2.6653881073
theta: 1.93952834606
speed: 7.47313451767
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: 2.67272424698
y: -2.6653881073
theta: 1.93952834606
speed: 7.47313451767
id: 0
t: 151
xxx after update is x: 3.10850358009
y: -2.74834561348
theta: 2.06085991859
speed: 7.65737295151
id: 0
t: 152
maneuver_negotiatir.py finish the update abbb
risk is [3.075093055329266e-189, 0]
222 self.state_dicts[msg.id][msg.t] is (3.300579071044922, -4.820463180541992, 1.7344348430633545, 6.01981258392334)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.48888888889






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


xxx before update is x: -3.79442000389
y: -25.1388702393
theta: 4.63295841217
speed: 13.9579610825
id: 1
t: 146
xxx after update is x: -3.14297580719
y: -25.7066612244
theta: 4.77283716202
speed: 14.3117446899
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.14297580719
y: -25.7066612244
theta: 4.77283716202
speed: 14.3117446899
id: 1
t: 147
xxx after update is x: -3.24728894234
y: -26.5634975433
theta: 4.65576314926
speed: 13.9491481781
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [6.13516811107405e-214, 0]
222 self.state_dicts[msg.id][msg.t] is (3.612436532974243, -3.6517550945281982, 1.9710335731506348, 6.809154987335205)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: -3.24728894234
y: -26.5634975433
theta: 4.65576314926
speed: 13.9491481781
id: 1
t: 148
xxx after update is x: -3.32685780525
y: -27.1854400635
theta: 4.64564180374
speed: 13.883067131
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.32685780525
y: -27.1854400635
theta: 4.64564180374
speed: 13.883067131
id: 1
t: 149
xxx after update is x: -3.38579726219
y: -27.3155384064
theta: 4.83101892471
speed: 13.6096143723
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [8.4291449175669e-289, 0]
222 self.state_dicts[msg.id][msg.t] is (2.920318603515625, -3.012291669845581, 1.8352009057998657, 7.227238655090332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: -3.38579726219
y: -27.3155384064
theta: 4.83101892471
speed: 13.6096143723
id: 1
t: 150
xxx after update is x: -3.06981086731
y: -28.0872554779
theta: 4.67913246155
speed: 13.7221021652
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (2.6727242469787598, -2.6653881072998047, 1.9395283460617065, 7.473134517669678)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
removed car with id 1 from grantlist. currentgrantlist: {}
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: -3.06981086731
y: -28.0872554779
theta: 4.67913246155
speed: 13.7221021652
id: 1
t: 151
xxx after update is x: -3.15160083771
y: -28.8845043182
theta: 4.80405569077
speed: 13.9470949173
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.15160083771
y: -28.8845043182
theta: 4.80405569077
speed: 13.9470949173
id: 1
t: 152
xxx after update is x: -3.40878820419
y: -30.0017223358
theta: 4.67658281326
speed: 13.9762506485
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (2.3923802375793457, -2.621251106262207, 2.1267616748809814, 7.736194133758545)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: -3.40878820419
y: -30.0017223358
theta: 4.67658281326
speed: 13.9762506485
id: 1
t: 153
xxx after update is x: -3.40673780441
y: -30.1186504364
theta: 4.63885974884
speed: 14.0500822067
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.40673780441
y: -30.1186504364
theta: 4.63885974884
speed: 14.0500822067
id: 1
t: 154
xxx after update is x: -3.02874279022
y: -30.9118537903
theta: 4.55307531357
speed: 13.8898954391
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (1.7083898782730103, -1.5128099918365479, 2.241934061050415, 8.666367530822754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.88888888889






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: -3.02874279022
y: -30.9118537903
theta: 4.55307531357
speed: 13.8898954391
id: 1
t: 155
xxx after update is x: -3.23732376099
y: -31.0836277008
theta: 4.73385238647
speed: 13.8397989273
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (1.7365854978561401, -1.1465321779251099, 2.2069284915924072, 9.364086151123047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: -3.23732376099
y: -31.0836277008
theta: 4.73385238647
speed: 13.8397989273
id: 1
t: 156
xxx after update is x: -3.22968411446
y: -31.7867031097
theta: 4.54315662384
speed: 13.6144523621
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 segent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: 3.10850358009
y: -2.74834561348
theta: 2.06085991859
speed: 7.65737295151
id: 0
t: 152
xxx after update is x: 2.39238023758
y: -2.62125110626
theta: 2.12676167488
speed: 7.73619413376
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.8






self.maneuver_requested left
aaaaaa
risk is [0.0, 0.0]
maneuver_negotiatir.py in the try maneuver function update -. sfinish
222 self.state_dicts[msg.id][msg.t] is (-3.4087882041931152, -30.00172233581543, 4.6765828132629395, 13.976250648498535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: 2.39238023758
y: -2.62125110626
theta: 2.12676167488
speed: 7.73619413376
id: 0
t: 153
xxx after update is x: 2.1637597084
y: -2.32293009758
theta: 2.03108763695
speed: 8.26889324188
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: 2.1637597084
y: -2.32293009758
theta: 2.03108763695
speed: 8.26889324188
id: 0
t: 154
xxx after update is x: 1.70838987827
y: -1.51280999184
theta: 2.24193406105
speed: 8.66636753082
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.028742790222168, -30.911853790283203, 4.553075313568115, 13.88989543914795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: 1.70838987827
y: -1.51280999184
theta: 2.24193406105
speed: 8.66636753082
id: 0
t: 155
xxx after update is x: 1.73658549786
y: -1.14653217793
theta: 2.20692849159
speed: 9.36408615112
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: 1.73658549786
y: -1.14653217793
theta: 2.20692849159
speed: 9.36408615112
id: 0
t: 156
xxx after update is x: 1.49403512478
y: -1.06086993217
theta: 2.25314092636
speed: 9.40082740784
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: 1.49403512478
y: -1.06086993217
theta: 2.25314092636
speed: 9.40082740784
id: 0
t: 157
xxx after update is x: 1.62277233601
y: -1.31047856808
theta: 2.28611660004
speed: 9.13856697083
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.0834248065948486, -32.708946228027344, 4.6484575271606445, 13.979378700256348)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_ilf.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: -3.22968411446
y: -31.7867031097
theta: 4.54315662384
speed: 13.6144523621
id: 1
t: 157
xxx after update is x: -3.08342480659
y: -32.708946228
theta: 4.64845752716
speed: 13.9793787003
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (1.6227723360061646, -1.3104785680770874, 2.286116600036621, 9.138566970825195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: -3.08342480659
y: -32.708946228
theta: 4.64845752716
speed: 13.9793787003
id: 1
t: 158
xxx after update is x: -3.49148535728
y: -33.3433799744
theta: 4.74625062943
speed: 13.6633768082
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (1.094792127609253, -0.88808673620224, 2.3047399520874023, 9.393178939819336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: -3.49148535728
y: -33.3433799744
theta: 4.74625062943
speed: 13.6633768082
id: 1
t: 159
xxx after update is x: -3.61742305756
y: -33.6620292664
theta: 4.7358083725
speed: 13.9622678757
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.61742305756
y: -33.6620292664
theta: 4.7358083725
speed: 13.9622678757
id: 1
t: 160
xxx after update is x: -3.61338996887
y: -34.7482681274
theta: 4.70621967316
speed: 14.075138092
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.61338996887
y: -34.7482681274
theta: 4.70621967316
speed: 14.075138092
id: 1
t: 161
xxx after update is x: -3.31409668922
y: -35.0396575928
theta: 4.88090610504
speed: 13.9848384857
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (0.5723395943641663, 0.30488401651382446, 2.508406639099121, 10.60851764678955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.2






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -3.31409668922
y: -35.0396575928
theta: 4.88090610504
speed: 13.9848384857
id: 1
t: 162
xxx after update is x: -3.41113376617
y: -35.9840812683
theta: 4.65968894958
speed: 13.97nit:
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: 1.62277233601
y: -1.31047856808
theta: 2.28611660004
speed: 9.13856697083
id: 0
t: 158
xxx after update is x: 1.09479212761
y: -0.888086736202
theta: 2.30473995209
speed: 9.39317893982
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: 1.09479212761
y: -0.888086736202
theta: 2.30473995209
speed: 9.39317893982
id: 0
t: 159
xxx after update is x: 0.998734533787
y: -1.03918397427
theta: 2.51120066643
speed: 9.76266860962
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.11111111111






self.maneuver_requested left
xxx before update is x: 0.998734533787
y: -1.03918397427
theta: 2.51120066643
speed: 9.76266860962
id: 0
t: 160
xxx after update is x: 0.701383113861
y: 0.12742292881
theta: 2.43765974045
speed: 10.5792207718
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:161


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 0.701383113861
y: 0.12742292881
theta: 2.43765974045
speed: 10.5792207718
id: 0
t: 161
xxx after update is x: 0.572339594364
y: 0.304884016514
theta: 2.5084066391
speed: 10.6085176468
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162


222 self.state_dicts[msg.id][msg.t] is (-3.314096689224243, -35.03965759277344, 4.880906105041504, 13.984838485717773)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: 0.572339594364
y: 0.304884016514
theta: 2.5084066391
speed: 10.6085176468
id: 0
t: 162
xxx after update is x: -0.182206362486
y: 0.694421768188
theta: 2.47544693947
speed: 10.7269906998
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -0.182206362486
y: 0.694421768188
theta: 2.47544693947
speed: 10.7269906998
id: 0
t: 163
xxx after update is x: -0.373366504908
y: 0.335873812437
theta: 2.37500190735
speed: 10.7533655167
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1276443004608154, -36.24044418334961, 4.707698822021484, 13.697236061096191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: -0.373366504908
y: 0.335873812437
theta: 2.37500190735
speed: 10.7533655167
id: 0
t: 164
xxx after update is x: -0.587770938873
y: 1.1819190979
theta: 2.635201931
speed: 11.2436180115
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim94435501
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.41113376617
y: -35.9840812683
theta: 4.65968894958
speed: 13.9794435501
id: 1
t: 163
xxx after update is x: -3.12764430046
y: -36.2404441833
theta: 4.70769882202
speed: 13.6972360611
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-0.37336650490760803, 0.3358738124370575, 2.375001907348633, 10.753365516662598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -3.12764430046
y: -36.2404441833
theta: 4.70769882202
speed: 13.6972360611
id: 1
t: 164
xxx after update is x: -3.90065670013
y: -36.9477615356
theta: 4.6278886795
speed: 14.3692073822
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.90065670013
y: -36.9477615356
theta: 4.6278886795
speed: 14.3692073822
id: 1
t: 165
xxx after update is x: -3.1267516613
y: -37.8679275513
theta: 4.64828014374
speed: 13.6554546356
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-1.2504531145095825, 1.1515079736709595, 2.57501482963562, 11.341629981994629)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -3.1267516613
y: -37.8679275513
theta: 4.64828014374
speed: 13.6554546356
id: 1
t: 166
xxx after update is x: -3.54544615746
y: -37.8184700012
theta: 4.7281870842
speed: 14.3970661163
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.54544615746
y: -37.8184700012
theta: 4.7281870842
speed: 14.3970661163
id: 1
t: 167
xxx after update is x: -2.88959312439
y: -38.8603134155
theta: 4.52825784683
speed: 14.1215143204
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-2.1701321601867676, 1.857535719871521, 2.6834704875946045, 11.94888687133789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.46666666667






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -0.587770938873
y: 1.1819190979
theta: 2.635201931
speed: 11.2436180115
id: 0
t: 165
xxx after update is x: -1.25045311451
y: 1.15150797367
theta: 2.57501482964
speed: 11.341629982
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.126751661300659, -37.86792755126953, 4.648280143737793, 13.655454635620117)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


xxx before update is x: -1.25045311451
y: 1.15150797367
theta: 2.57501482964
speed: 11.341629982
id: 0
t: 166
xxx after update is x: -1.26374089718
y: 2.21154093742
theta: 2.51151251793
speed: 11.8612508774
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -1.26374089718
y: 2.21154093742
theta: 2.51151251793
speed: 11.8612508774
id: 0
t: 167
xxx after update is x: -2.17013216019
y: 1.85753571987
theta: 2.68347048759
speed: 11.9488868713
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.46666666667






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: -2.17013216019
y: 1.85753571987
theta: 2.68347048759
speed: 11.9488868713
id: 0
t: 168
xxx after update is x: -3.00324416161
y: 2.40373015404
theta: 2.62607288361
speed: 12.2733564377
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170


xxx before update is x: -3.00324416161
y: 2.40373015404
theta: 2.62607288361
speed: 12.2733564377
id: 0
t: 169
xxx after update is x: -3.20601820946
y: 2.75640249252
theta: 2.82654452324
speed: 11.9706802368
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: -3.20601820946
y: 2.75640249252
theta: 2.82654452324
speed: 11.9706802368
id: 0
t: 170
xxx after update is x: -3.83688497543
y: 1.68766343594
theta: 2.92920351028
speed: 12.6965770721
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.1409566402435303, -41.10133743286133, 4.514640808105469, 13.612916946411133)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: -3.83688497543
y: 1.68766343594
theta: 2.92920351028
speed: 12.6965770721
id: 0
t: 171
xxx after update is x: -4.52520895004
y: 2.76732635498
theta: 2.99178385735
speed: 12.9026155472
id: 0
t: 172
maneuver_negotiatir.py finish the upd spin:171

xxx before update is x: -2.88959312439
y: -38.8603134155
theta: 4.52825784683
speed: 14.1215143204
id: 1
t: 168
xxx after update is x: -3.66516041756
y: -38.8915290833
theta: 4.56241559982
speed: 14.0844364166
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.66516041756
y: -38.8915290833
theta: 4.56241559982
speed: 14.0844364166
id: 1
t: 169
xxx after update is x: -3.13578557968
y: -40.7074966431
theta: 4.64061927795
speed: 13.8512811661
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.13578557968
y: -40.7074966431
theta: 4.64061927795
speed: 13.8512811661
id: 1
t: 170
xxx after update is x: -3.14095664024
y: -41.1013374329
theta: 4.51464080811
speed: 13.6129169464
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-3.8368849754333496, 1.6876634359359741, 2.929203510284424, 12.696577072143555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -3.14095664024
y: -41.1013374329
theta: 4.51464080811
speed: 13.6129169464
id: 1
t: 171
xxx after update is x: -2.75995135307
y: -41.4714317322
theta: 4.76399040222
speed: 14.2412519455
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.75995135307
y: -41.4714317322
theta: 4.76399040222
speed: 14.2412519455
id: 1
t: 172
xxx after update is x: -3.02490639687
y: -42.2973556519
theta: 4.85229921341
speed: 13.8261585236
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-4.60012149810791, 2.6440155506134033, 2.8682873249053955, 12.92110824584961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -3.02490639687
y: -42.2973556519
theta: 4.85229921341
speed: 13.8261585236
id: 1
t: 173
xxx after update is x: -2.74408268929
y: -42.2323188782
theta: 4.8953166008
speed: 13.8099889755
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.74408268929
y: -42.2323188782
theta: 4.8953166008
speed: 13.8099889755
id: 1
t: 174
xxx after update is x: -3.84686899185
y: -43.069480896
theta: 4.61937046051
speed: 13.9781236649
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-5.439004898071289, 3.203561782836914, 3.021775722503662, 13.359109878540039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.maate agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -4.52520895004
y: 2.76732635498
theta: 2.99178385735
speed: 12.9026155472
id: 0
t: 172
xxx after update is x: -4.60012149811
y: 2.64401555061
theta: 2.86828732491
speed: 12.9211082458
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0249063968658447, -42.29735565185547, 4.852299213409424, 13.82615852355957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: -4.60012149811
y: 2.64401555061
theta: 2.86828732491
speed: 12.9211082458
id: 0
t: 173
xxx after update is x: -5.65198707581
y: 3.37303519249
theta: 3.01879000664
speed: 13.6856060028
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -5.65198707581
y: 3.37303519249
theta: 3.01879000664
speed: 13.6856060028
id: 0
t: 174
xxx after update is x: -5.43900489807
y: 3.20356178284
theta: 3.0217757225
speed: 13.3591098785
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.8468689918518066, -43.069480895996094, 4.619370460510254, 13.978123664855957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


xxx before update is x: -5.43900489807
y: 3.20356178284
theta: 3.0217757225
speed: 13.3591098785
id: 0
t: 175
xxx after update is x: -6.57275533676
y: 3.33333420753
theta: 3.03262972832
speed: 13.8111486435
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: -6.57275533676
y: 3.33333420753
theta: 3.03262972832
speed: 13.8111486435
id: 0
t: 176
xxx after update is x: -7.13864612579
y: 4.02320432663
theta: 3.00941634178
speed: 13.8289299011
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.86666666667






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.634305715560913, -44.14411163330078, 4.731631755828857, 13.880592346191406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178


xxx before update is x: -7.13864612579
y: 4.02320432663
theta: 3.00941634178
speed: 13.8289299011
id: 0
t: 177
xxx after update is x: -7.72260427475
y: 3.4283645153
theta: 3.21741485596
speed: 13.8870763779
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
n_init:xxx before update is x: -3.84686899185
y: -43.069480896
theta: 4.61937046051
speed: 13.9781236649
id: 1
t: 175
xxx after update is x: -3.25267863274
y: -44.4218597412
theta: 4.83376264572
speed: 13.8261032104
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion

(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: -3.25267863274
y: -44.4218597412
theta: 4.83376264572
speed: 13.8261032104
id: 1
t: 176
xxx after update is x: -3.63430571556
y: -44.1441116333
theta: 4.73163175583
speed: 13.8805923462
id: 1
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-7.138646125793457, 4.023204326629639, 3.009416341781616, 13.828929901123047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.86666666667






self.maneuver_requested straight
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178


maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -3.63430571556
y: -44.1441116333
theta: 4.73163175583
speed: 13.8805923462
id: 1
t: 177
xxx after update is x: -3.12662601471
y: -44.5202445984
theta: 4.60234928131
speed: 13.8423023224
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-7.722604274749756, 3.4283645153045654, 3.2174148559570312, 13.887076377868652)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -3.12662601471
y: -44.5202445984
theta: 4.60234928131
speed: 13.8423023224
id: 1
t: 178
xxx after update is x: -3.11904430389
y: -45.8694801331
theta: 4.80431127548
speed: 14.0601892471
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.11904430389
y: -45.8694801331
theta: 4.80431127548
speed: 14.0601892471
id: 1
t: 179
xxx after update is x: -3.50727844238
y: -46.8636016846
theta: 4.63861465454
speed: 13.6528053284
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-8.783924102783203, 3.497343063354492, 3.1339051723480225, 14.061478614807129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181


xxx before update is x: -3.50727844238
y: -46.8636016846
theta: 4.63861465454
speed: 13.6528053284
id: 1
t: 180
xxx after update is x: -3.42181515694
y: -46.801486969
theta: 4.62699365616
speed: 13.6342153549
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-9.638494491577148, 3.677722454071045, 3.0967907905578613, 13.916964530944824)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update functio self.man_init:
leave the update function 
in spin function, finish the n times spin:179


xxx before update is x: -7.72260427475
y: 3.4283645153
theta: 3.21741485596
speed: 13.8870763779
id: 0
t: 178
xxx after update is x: -8.66270065308
y: 3.17260789871
theta: 3.02243852615
speed: 14.0165567398
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -8.66270065308
y: 3.17260789871
theta: 3.02243852615
speed: 14.0165567398
id: 0
t: 179
xxx after update is x: -8.78392410278
y: 3.49734306335
theta: 3.13390517235
speed: 14.0614786148
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.5072784423828125, -46.86360168457031, 4.638614654541016, 13.65280532836914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:181


xxx before update is x: -8.78392410278
y: 3.49734306335
theta: 3.13390517235
speed: 14.0614786148
id: 0
t: 180
xxx after update is x: -9.63849449158
y: 3.67772245407
theta: 3.09679079056
speed: 13.9169645309
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:182


xxx before update is x: -9.63849449158
y: 3.67772245407
theta: 3.09679079056
speed: 13.9169645309
id: 0
t: 181
xxx after update is x: -10.5588579178
y: 3.21552157402
theta: 3.08161067963
speed: 13.881067276
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -10.5588579178
y: 3.21552157402
theta: 3.08161067963
speed: 13.881067276
id: 0
t: 182
xxx after update is x: -10.9611063004
y: 3.47533583641
theta: 3.26466178894
speed: 13.9003763199
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.028299331665039, -48.065242767333984, 4.754791259765625, 13.651887893676758)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184


xxx before update is x: -10.9611063004
y: 3.47533583641
theta: 3.26466178894
speed: 13.9003763199
id: 0
t: 183
xxx after update is x: -11.2231578827
y: 3.3247256279
theta: 3.19128036499
speed: 13.9340715408
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.17777777778






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185


xxx before update is x: -11.2231578827
y: 3.3247256279
theta: 3.19128036499
speed: 13.9340715408
id: 0
t: 184
xxx after update is x: -11.8506698608
y: 3.85468435287
theta: 3.14644122124
speed: 14.0471544266
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to tn
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -3.42181515694
y: -46.801486969
theta: 4.62699365616
speed: 13.6342153549
id: 1
t: 181
xxx after update is x: -3.66441965103
y: -47.7959632874
theta: 4.48814821243
speed: 13.472694397
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.66441965103
y: -47.7959632874
theta: 4.48814821243
speed: 13.472694397
id: 1
t: 182
xxx after update is x: -3.02829933167
y: -48.0652427673
theta: 4.75479125977
speed: 13.6518878937
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-10.961106300354004, 3.4753358364105225, 3.2646617889404297, 13.900376319885254)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:184


xxx before update is x: -3.02829933167
y: -48.0652427673
theta: 4.75479125977
speed: 13.6518878937
id: 1
t: 183
xxx after update is x: -2.97619557381
y: -48.6809959412
theta: 4.70013237
speed: 13.7462377548
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-11.22315788269043, 3.32472562789917, 3.1912803649902344, 13.93407154083252)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:185




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -2.97619557381
y: -48.6809959412
theta: 4.70013237
speed: 13.7462377548
id: 1
t: 184
xxx after update is x: -3.47043943405
y: -49.009059906
theta: 4.55143594742
speed: 14.2928733826
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.47043943405
y: -49.009059906
theta: 4.55143594742
speed: 14.2928733826
id: 1
t: 185
xxx after update is x: -3.39561009407
y: -49.9894104004
theta: 4.73219203949
speed: 13.9077482224
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-12.145304679870605, 3.499800205230713, 3.1074564456939697, 13.470016479492188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.26666666667






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -3.39561009407
y: -49.9894104004
theta: 4.73219203949
speed: 13.9077482224
id: 1
t: 186
xxxhe update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -11.8506698608
y: 3.85468435287
theta: 3.14644122124
speed: 14.0471544266
id: 0
t: 185
xxx after update is x: -12.1453046799
y: 3.49980020523
theta: 3.10745644569
speed: 13.4700164795
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.3956100940704346, -49.989410400390625, 4.732192039489746, 13.907748222351074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -12.1453046799
y: 3.49980020523
theta: 3.10745644569
speed: 13.4700164795
id: 0
t: 186
xxx after update is x: -12.9702291489
y: 3.63212776184
theta: 3.1750125885
speed: 14.0638418198
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -12.9702291489
y: 3.63212776184
theta: 3.1750125885
speed: 14.0638418198
id: 0
t: 187
xxx after update is x: -14.2467212677
y: 3.08106517792
theta: 3.18840074539
speed: 13.8911399841
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.169212579727173, -51.264060974121094, 4.769108772277832, 13.48827838897705)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -14.2467212677
y: 3.08106517792
theta: 3.18840074539
speed: 13.8911399841
id: 0
t: 188
xxx after update is x: -14.4581727982
y: 3.12079334259
theta: 3.13555669785
speed: 13.9753751755
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:190


xxx before update is x: -14.4581727982
y: 3.12079334259
theta: 3.13555669785
speed: 13.9753751755
id: 0
t: 189
xxx after update is x: -14.8661603928
y: 2.96926474571
theta: 3.27059793472
speed: 14.1878509521
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191


xxx before update is x: -14.8661603928
y: 2.96926474571
theta: 3.27059793472
speed: 14.1878509521
id: 0
t: 190
xxx after update is x: -15.7164916992
y: 3.67760419846
theta: 3.10573983192
speed: 13.8619709015
id: 0
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.4114763736724854, -53.249507904052734, 4.77297830581665, 13.792463302612305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -15.7164916992
y: 3.67760419846
theta: 3.10573983192
speed: 13.8619709015
id: 0
t: 191
xxx after update is x: -16.4933357239
y: 3.75087857246
theta: 3.2251670 after update is x: -3.5966694355
y: -50.4852142334
theta: 4.70813369751
speed: 14.0508804321
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.5966694355
y: -50.4852142334
theta: 4.70813369751
speed: 14.0508804321
id: 1
t: 187
xxx after update is x: -3.16921257973
y: -51.2640609741
theta: 4.76910877228
speed: 13.488278389
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-14.246721267700195, 3.0810651779174805, 3.1884007453918457, 13.89113998413086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -3.16921257973
y: -51.2640609741
theta: 4.76910877228
speed: 13.488278389
id: 1
t: 188
xxx after update is x: -2.89572787285
y: -51.5597076416
theta: 4.67233467102
speed: 13.6564893723
id: 1
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-14.458172798156738, 3.120793342590332, 3.135556697845459, 13.975375175476074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:191


xxx before update is x: -2.89572787285
y: -51.5597076416
theta: 4.67233467102
speed: 13.6564893723
id: 1
t: 189
xxx after update is x: -3.20995640755
y: -51.8307914734
theta: 4.81696891785
speed: 13.9072580338
id: 1
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.20995640755
y: -51.8307914734
theta: 4.81696891785
speed: 13.9072580338
id: 1
t: 190
xxx after update is x: -3.41147637367
y: -53.2495079041
theta: 4.77297830582
speed: 13.7924633026
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-15.71649169921875, 3.6776041984558105, 3.1057398319244385, 13.861970901489258)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -3.41147637367
y: -53.2495079041
theta: 4.77297830582
speed: 13.7924633026
id: 1
t: 191
xxx after update is x: -3.34935045242
y: -53.6046295166
theta: 4.77739620209
speed: 13.7781915665
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-16.493335723876953, 3.7508785724639893, 3.2251670360565186, 13.863164901733398)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.53333333333






self.maneuver_requested straight
maneuver_negotiatir.py in the try maneuver function update -. sfinish
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193




going to the update function
 xxx before update is x: -3.34935045242
y: -53.6046295166
theta: 4.77739620209
speed: 13.7781915665
id: 1
t: 192
xxx after update is x: -3.38374876976
y: -54.3687477112
theta: 4.68408823013
speed: 13.9076023102
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
xxx before update is x: -3.38374876976
y: -54.3687477112
theta: 4.68408823013
speed: 13.9076023102
id: 1
t: 193
xxx after update is x: -3.04758858681
y: -54.9994888306
theta: 4.9021654129
speed: 14.3353996277
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:194


aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-17.39413070678711, 2.99908447265625, 3.224856376647949, 13.678174018859863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195


3606
speed: 13.8631649017
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.53333333333






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -16.4933357239
y: 3.75087857246
theta: 3.22516703606
speed: 13.8631649017
id: 0
t: 192
xxx after update is x: -16.4691505432
y: 3.00279378891
theta: 3.27936577797
speed: 14.1003427505
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194


xxx before update is x: -16.4691505432
y: 3.00279378891
theta: 3.27936577797
speed: 14.1003427505
id: 0
t: 193
xxx after update is x: -17.3941307068
y: 2.99908447266
theta: 3.22485637665
speed: 13.6781740189
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.047588586807251, -54.999488830566406, 4.902165412902832, 14.335399627685547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -17.3941307068
y: 2.99908447266
theta: 3.22485637665
speed: 13.6781740189
id: 0
t: 194
xxx after update is x: -18.7373790741
y: 3.25713825226
theta: 3.11052751541
speed: 13.866601944
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.66666666667






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196


... logging to /home/lu/.ros/log/70cd89ae-0e68-11e9-bb7c-000c291801fc/roslaunch-ubuntu-4345.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:41037/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [4421][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 70cd89ae-0e68-11e9-bb7c-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [4434][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [4437][0m
[1mprocess[rviz-3]: started with pid [4438][0m
[1mprocess[car0-4]: started with pid [4439][0m
[1mprocess[car1-5]: started with pid [4440][0m
[1mprocess[cloud-6]: started with pid [4441][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
