sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.26852488518


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (2.9164674282073975, -34.36903762817383, 1.5374469757080078, 13.83498764038086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f7ac8146b90>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f7ac8168f38>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (2.8126068115234375, -33.52579116821289, 1.622164249420166, 13.810498237609863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.36133023988086876, 0.29098820764912187]
222 self.state_dicts[msg.id][msg.t] is (3.686123847961426, -31.88947105407715, 1.6075680255889893, 13.960643768310547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leasim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.35398793221
222 self.state_dicts[msg.id][msg.t] is (-3.436023712158203, 34.26557922363281, 4.646753787994385, 13.885802268981934)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (-2.6280343532562256, 33.20440673828125, 4.655525207519531, 13.969897270202637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f904c3fc8c0>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f904c41a6c8>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3


222 self.state_dicts[msg.id][msg.t] is (-2.8502278327941895, 32.353397369384766, 4.868333339691162, 14.33964729309082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.38189221740221135, 0.26961966951672156]
222 self.state_dicts[msg.id][msg.t] is (-3.3334805965423584, 31.248863220214844, 4.560675621032715, 13.840611457824707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sve the update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.34003269561695526, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4263155460357666, -30.905014038085938, 1.539389967918396, 14.251897811889648)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.51890921593
y: 30.5227603912
theta: 4.81850004196
speed: 13.6741142273
id: 1
t: 8
current clock is .t / rate/slowdown
0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3324635341200944, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3995842933654785, -28.280744552612305, 1.594939947128296, 13.835439682006836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:13


aaaaaa
aaaaaabbbbb
risk is [0.3372020958400965, 0]
222 self.state_dicts[msg.id][msg.t] is (3.6500205993652344, -26.797992706298828, 1.440821647644043, 14.175175666809082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
im.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.34386976135173525, 0.4282632552498756]
222 self.state_dicts[msg.id][msg.t] is (-3.496051788330078, 29.71219253540039, 4.752457618713379, 14.121859550476074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.96050858498
y: -29.064907074
theta: 1.64881980419
speed: 13.668302536
id: 0
t: 10
current clock is .t / rate/slowdown
0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.380586211959868, 0.4353141978308509]
222 self.state_dicts[msg.id][msg.t] is (-3.2416813373565674, 26.60238265991211, 4.723691463470459, 13.890668869018555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:14


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:15


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.spsim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.6249833107
y: 24.9592685699
theta: 4.87377595901
speed: 14.0010128021
id: 1
t: 16
current clock is .t / rate/slowdown
0.711111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.3416567910918187, 0]
222 self.state_dicts[msg.id][msg.t] is (2.387237787246704, -25.156299591064453, 1.5180726051330566, 13.062289237976074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.297714028621478, 0]
222 self.state_dicts[msg.id][msg.t] is (2.6076462268829346, -22.35718536376953, 1.6235305070877075, 12.06163501739502)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


maneuver_negotiatir.py start the update agent stateed:
leave the update function 
in spin function, finish the n times spin:16


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3434405376621184, 0.33893438707296225]
222 self.state_dicts[msg.id][msg.t] is (-3.624983310699463, 24.95926856994629, 4.873775959014893, 14.001012802124023)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:17


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:18


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.91358327866
y: -23.8881034851
theta: 1.82334816456
speed: 12.8646459579
id: 0
t: 18
current clock is .t / rate/slowdown
0.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.04705008640788255, 0.3634988080734883]
222 self.state_dicts[msg.id][msg.t] is (-3.154907703399658, 22.307565689086914, 4.7413482666015625, 13.640141487121582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:22


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.10302446804932995, 0.09764581801437196]
222 self.state_dicts[msg.id][msg.t] is (-2.9316186904907227, 19.880088806152344, 4.826632022857666, 13.834046363830566)
if we have all mee from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2237126368092531, 0]
222 self.state_dicts[msg.id][msg.t] is (3.36342191696167, -21.429180145263672, 1.5510683059692383, 11.949329376220703)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.93161869049
y: 19.8800888062
theta: 4.82663202286
speed: 13.8340463638
id: 1
t: 24
current clock is .t / rate/slowdown
1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.36319382277941364, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4314067363739014, -20.87553596496582, 1.6180264949798584, 11.265522003173828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.77283573151
y: 18.6924972534
theta: 4.72885417938
speed: 13.4647836685
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556







maneuver_negotiatir.py message_processing, it's a long code, start...








maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.77283573151
y: 18.6924972534
theta: 4.72885417938
speed: 13.4647836685
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.15555555556', 'IntendedCourse': 'left', 'Position': ['3.4344992637634277', ' -19.6435546875', ' 1.7451019287109375'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}





car 1 received GET,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0,left from  car0
status: 1




maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0513580246916
maneuver_negotiatir.py this is get posotion function, it's importantasurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:25


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.27436280251
y: -19.9697494507
theta: 1.46074259281
speed: 11.2812643051
id: 0
t: 25
current clock is .t / rate/slowdown
1.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:










initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$











maneuver_negotiatir.py in the try maneuver function update -. strat
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion










maneuver_negotiatir.py in the trymaneuver function - start





1.self.status is 1


maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
!!!!after check statue the self.tag is [1.1555555555555554, 0]
2.self.status is 1


change normal to tryget(for the case tryget, it doesn't need to chcnge)

maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration



maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.0666666666666667, True, ['1']]
1.06666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish


self.agent_state[0] is 1.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.06666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1

self.agents_to_ask is ['1']

message is :GET,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1


maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get




GET,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
self.communication_details == 0
sending GET,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556







maneuver_negotiatir.py message_processing, it's a long code, start...















maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556


maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1


maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(-2.9316186904907227', ' 19.880088806152344', ' 4.826632022857666)'], 'Type': 'DENY'}


car 0 received DENY,1,1.15555555556,(-2.9316186904907227, 19.880088806152344, 4.826632022857666),13,1,0,0 from  car1
status: 2



maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1555555555555554, True, ['1']]
1.15555555556
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish




maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.1555555555555554, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])



maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer





maneuver_negotiatir.py message_processing, self.last()



maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET





RELEASE,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.43449926376
y: -19.6435546875
theta: 1.74510192871
speed: 11.0212945938
id: 0
t: 26
current clock is .t / rate/slowdown
1.15555555556
self.communication_details == 0
sending RELEASE,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message






finish try maneuver









maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.19516301708635517, 0.10208389513435027]
222 self.state_dicts[msg.id][msg.t] is (-3.331178665161133, 18.165184020996094, 4.503167152404785, 13.917497634887695)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:28




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the updat for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.69975842945
sender last entering time is:  1.69975842945
sender last leaving time is:  4.06395519115
my entering time is:  0.860773382493
my leaving time is:  2.75018874029
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.77283573151
y: 18.6924972534
theta: 4.72885417938
speed: 13.4647836685
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556
self.communication_details == 0
sending DENY,1,1.15555555556,(-2.9316186904907227, 19.880088806152344, 4.826632022857666),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.77283573151
y: 18.6924972534
theta: 4.72885417938
speed: 13.4647836685
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556











maneuver_negotiatir.py message_processing, it's a long code, start...










maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.77283573151
y: 18.6924972534
theta: 4.72885417938
speed: 13.4647836685
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '11', 'Sender': '0', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(3.4344992637634277', ' -19.6435546875', ' 1.7451019287109375)'], 'Type': 'RELEASE'}










car 1 received RELEASE,0,1.15555555556,(3.4344992637634277, -19.6435546875, 1.7451019287109375),11,1,1.15555555556,0 from  car0
status: 1





maneuver_negotiatir.py in the message processing function, it's a long code, finish








going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2581959958436196, 0]
222 self.state_dicts[msg.id][msg.t] is (3.05207896232605, -18.188642501831055, 1.4053758382797241, 10.749441146850586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30


aaaaaa
aaaaaabbbbb
risk is [0.2723559251229819, 0]
222 self.state_dicts[msg.id][msg.t] is (3.494572877883911, -18.e function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:30




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4814095724418289, 0.045998544150963674]
222 self.state_dicts[msg.id][msg.t] is (-3.3505849838256836, 15.845922470092773, 4.712180137634277, 13.830400466918945)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:33


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.493932724
y: -16.8064937592
theta: 1.52909743786
speed: 9.01131820679
id: 0
t: 33
current clock is .t / rate/slowdown
1.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.03389143944
y: -16.1297225952
theta: 1.50804114342
speed: 9.44161319733
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.4666666666666666, True, ['1']]
1.46666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.51111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.46666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function






------------------timeout-----------------------

1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0,left












maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.133628845214844, 1.4456325769424438, 10.097199440002441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.42601513863
y: 15.1705617905
theta: 4.73501682281
speed: 13.5328035355
id: 1
t: 32
current clock is .t / rate/slowdown
1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.19402189084648408, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4939327239990234, -16.806493759155273, 1.5290974378585815, 9.01131820678711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33764910698
y: 14.3409252167
theta: 4.65773820877
speed: 13.9395904541
id: 1
t: 34
current clock is .t / rate/slowdown
1.51111111111



















maneuver_negotiatir.py message_processing, it's a long code, start...











maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33764910698
y: 14.3409252167
theta: 4.65773820877
speed: 13.9395904541
id: 1
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.51111111111', 'IntendedCourse': 'left', 'Position': ['3.033891439437866', ' -16.129722595214844', ' 1.5080411434173584'], 'TagID': '0', 'Type': 'GET', 'Velocity': '9'}







car 1 received GET,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0,left from  car0






status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0671604938271
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.36953094274
sender last entering time is:  1.422py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.03389143944
y: -16.1297225952
theta: 1.50804114342
speed: 9.44161319733
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
self.communication_details == 0
sending GET,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.03389143944
y: -16.1297225952
theta: 1.50804114342
speed: 9.44161319733
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.03389143944
y: -16.1297225952
theta: 1.50804114342
speed: 9.44161319733
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.51111111111', 'Position': ['(-3.4260151386260986', ' 15.170561790466309', ' 4.735016822814941)'], 'Type': 'DENY'}
car 0 received DENY,1,1.51111111111,(-3.4260151386260986, 15.170561790466309, 4.735016822814941),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.4666666666666666, True, ['1']]
1.46666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.4666666666666666, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.03389143944
y: -16.1297225952
theta: 1.50804114342
speed: 9.44161319733
id: 0
t: 34
current clock is .t / rate/slowdown
1.51111111111
self.communication_details == 0
sending RELEASE,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:36


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5265780763713307, 0.007742767266417673]
222 self.state_dicts[msg.id][msg.t] 41566878
sender last leaving time is:  3.49346720067
my entering time is:  0.563262664983
my leaving time is:  2.13936483614
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33764910698
y: 14.3409252167
theta: 4.65773820877
speed: 13.9395904541
id: 1
t: 34
current clock is .t / rate/slowdown
1.51111111111
self.communication_details == 0
sending DENY,1,1.51111111111,(-3.4260151386260986, 15.170561790466309, 4.735016822814941),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33764910698
y: 14.3409252167
theta: 4.65773820877
speed: 13.9395904541
id: 1
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.33764910698
y: 14.3409252167
theta: 4.65773820877
speed: 13.9395904541
id: 1
t: 34
current clock is .t / rate/slowdown
1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '1.51111111111', 'Position': ['(3.033891439437866', ' -16.129722595214844', ' 1.5080411434173584)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.51111111111,(3.033891439437866, -16.129722595214844, 1.5080411434173584),9,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.20774019620642276, 0]
222 self.state_dicts[msg.id][msg.t] is (3.45064115524292, -15.721728324890137, 1.6485358476638794, 8.772685050964355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:38




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update ais (-3.7904372215270996, 12.595992088317871, 4.6409502029418945, 13.813102722167969)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:38


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4329317831632535, 0.035343162794938585]
222 self.state_dicts[msg.id][msg.t] is (-2.986044406890869, 11.524164199829102, 4.585294723510742, 13.971020698547363)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.17984628677
y: -13.6151304245
theta: 1.48502230644
speed: 8.03587722778
id: 0
t: 41
current clock is .t / rate/slowdown
1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.93483781815
y: -12.7056398392
theta: 1.43722057343
speed: 7.39334487915
id: 0
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.8222222222222222, True, ['1']]
1.82222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR functigent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21911875349098203, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0178987979888916, -13.51414966583252, 1.6954957246780396, 8.08033561706543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.98604440689
y: 11.5241641998
theta: 4.58529472351
speed: 13.9710206985
id: 1
t: 39
current clock is .t / rate/slowdown
1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.19968771935
y: 8.87139129639
theta: 4.59028148651
speed: 13.7963676453
id: 1
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.19968771935
y: 8.87139129639
theta: 4.59028148651
speed: 13.7963676453
id: 1
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.86666666667', 'IntendedCourse': 'left', 'Position': ['2.934837818145752', ' -12.705639839172363', ' 1.437220573425293'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0829629629631
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.970409810617
sender last entering time is:  1.26135991903
sender last leaving time is:  3.3372666944
my entering time is:  0.185236196733
my leaving time is:  1.36753192563
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and ton, finish
self.agent_state[0] is 1.86666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.82222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.93483781815
y: -12.7056398392
theta: 1.43722057343
speed: 7.39334487915
id: 0
t: 42
current clock is .t / rate/slowdown
1.86666666667
self.communication_details == 0
sending GET,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.93483781815
y: -12.7056398392
theta: 1.43722057343
speed: 7.39334487915
id: 0
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.93483781815
y: -12.7056398392
theta: 1.43722057343
speed: 7.39334487915
id: 0
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.86666666667', 'Position': ['(-2.986044406890869', ' 11.524164199829102', ' 4.585294723510742)'], 'Type': 'DENY'}
car 0 received DENY,1,1.86666666667,(-2.986044406890869, 11.524164199829102, 4.585294723510742),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.8222222222222222, True, ['1']]
1.82222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.8222222222222222, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.93483781815
y: -12.7056398392
theta: 1.43722057343
speed: 7.39334487915
id: 0
t: 42
current clock is .t / rate/slowdown
1.86666666667
self.communication_details == 0
sending RELEASE,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < 
x: -3.19968771935
y: 8.87139129639
theta: 4.59028148651
speed: 13.7963676453
id: 1
t: 42
current clock is .t / rate/slowdown
1.86666666667
self.communication_details == 0
sending DENY,1,1.86666666667,(-2.986044406890869, 11.524164199829102, 4.585294723510742),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.19968771935
y: 8.87139129639
theta: 4.59028148651
speed: 13.7963676453
id: 1
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.19968771935
y: 8.87139129639
theta: 4.59028148651
speed: 13.7963676453
id: 1
t: 42
current clock is .t / rate/slowdown
1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '7', 'Sender': '0', 'TagID': '1', 'Time': '1.86666666667', 'Position': ['(2.934837818145752', ' -12.705639839172363', ' 1.437220573425293)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.86666666667,(2.934837818145752, -12.705639839172363, 1.437220573425293),7,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
aaaaaabbbbb
risk is [0.2270975824193599, 0]
222 self.state_dicts[msg.id][msg.t] is (2.934837818145752, -12.705639839172363, 1.437220573425293, 7.393344879150391)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:44


aaaaaa
aaaaaabbbbb
risk is [0.38273536960307447, 0]
222 self.state_dicts[msg.id][msg.t] is (2.8522887229919434, -12.549323081970215, 1.697179913520813, 7.089162349700928)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4370543790655828, 0]
222 self.state_dicts[msg.id][msg.t] is (3.389923334121704, -11.64585018157959, 1.4900288581848145, 6.641050815582275)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


maneuself.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.19298796543430075, 0.03684646512509816]
222 self.state_dicts[msg.id][msg.t] is (-3.3537094593048096, 8.952720642089844, 4.782011985778809, 13.817874908447266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.27569057215590453, 0.029185757908102433]
222 self.state_dicts[msg.id][msg.t] is (-2.772886276245117, 6.098545551300049, 4.74491024017334, 14.009529113769531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.17140316963
y: -10.9374084473
theta: 1.6396945715
speed: 6.12386417389
id: 0
t: 48
current clock is .t / rate/slowdown
2.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23258805275
y: -11.0763168335
theta: 1.60053908825
speed: 5.55857467651
id: 0
t: 49
current clock is .t / rate/slowdown
2.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car'ver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.94739460945
y: 5.41096258163
theta: 4.75890874863
speed: 13.6392621994
id: 1
t: 47
current clock is .t / rate/slowdown
2.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52008485794
y: 4.41642284393
theta: 4.74563026428
speed: 14.160243988
id: 1
t: 49
current clock is .t / rate/slowdown
2.17777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52008485794
y: 4.41642284393
theta: 4.74563026428
speed: 14.160243988
id: 1
t: 49
current clock is .t / rate/slowdown
2.17777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.17777777778', 'IntendedCourse': 'left', 'Position': ['3.232588052749634', ' -11.076316833496094', ' 1.6005390882492065'], 'TagID': '0', 'Type': 'GET', 'Velocity': '5'}
car 1 received GET,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0967901234569
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.745156771397
sender last entering time is:  1.17890954339
sender last leaving time is:  3.39650158097
my entering time is:  0.0967901234569
my leaving time is:  0.95477256822
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52008485794
y: 4.41642284393
theta: 4.74563026428
speed: 14.160243988
id: 1
t: 49
current clock is .t / rate/slowdown
2.17777777778
self.communication_details == 0
sending DENY,1,2.17777777778,(-2.947394609451294, 5.4109625816345215, 4.758908748626709),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxs location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.1333333333333333, True, ['1']]
2.13333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.17777777778
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.13333333333
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23258805275
y: -11.0763168335
theta: 1.60053908825
speed: 5.55857467651
id: 0
t: 49
current clock is .t / rate/slowdown
2.17777777778
self.communication_details == 0
sending GET,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.95493936539
y: -10.4343881607
theta: 1.61564934254
speed: 5.75099945068
id: 0
t: 50
current clock is .t / rate/slowdown
2.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.95493936539
y: -10.4343881607
theta: 1.61564934254
speed: 5.75099945068
id: 0
t: 50
current clock is .t / rate/slowdown
2.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.17777777778', 'Position': ['(-2.947394609451294', ' 5.4109625816345215', ' 4.758908748626709)'], 'Type': 'DENY'}
car 0 received DENY,1,2.17777777778,(-2.947394609451294, 5.4109625816345215, 4.758908748626709),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.1333333333333333, True, ['1']]
2.13333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.1333333333333333, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in x
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.3791949749
y: 3.64540982246
theta: 4.83227396011
speed: 14.0247631073
id: 1
t: 50
current clock is .t / rate/slowdown
2.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.3791949749
y: 3.64540982246
theta: 4.83227396011
speed: 14.0247631073
id: 1
t: 50
current clock is .t / rate/slowdown
2.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '5', 'Sender': '0', 'TagID': '1', 'Time': '2.17777777778', 'Position': ['(3.232588052749634', ' -11.076316833496094', ' 1.6005390882492065)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
leave the update function 
in spin function, finish the n times spin:50


aaaaaa
aaaaaabbbbb
risk is [0.46146423881967763, 0]
222 self.state_dicts[msg.id][msg.t] is (2.954939365386963, -10.434388160705566, 1.6156493425369263, 5.750999450683594)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.46664373992376984, 0]
222 self.state_dicts[msg.id][msg.t] is (3.750481367111206, -10.159018516540527, 1.547518014907837, 5.159104824066162)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.67976021767
y: 1.39888846874
theta: 4.72036790848
speed: 13.7927627563
id: 1
t: 55
current clock is .t / rate/slowdown
2.44444444444
maneuver_negotithe clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.95493936539
y: -10.4343881607
theta: 1.61564934254
speed: 5.75099945068
id: 0
t: 50
current clock is .t / rate/slowdown
2.22222222222
self.communication_details == 0
sending RELEASE,0,2.17777777778,(3.232588052749634, -11.076316833496094, 1.6005390882492065),5,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
aaaaaazzzzz
risk is [0.37134597609016695, 0.001708833540534212]
222 self.state_dicts[msg.id][msg.t] is (-3.379194974899292, 3.6454098224639893, 4.832273960113525, 14.024763107299805)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.3705021772210837, 0.0038565107300754277]
222 self.state_dicts[msg.id][msg.t] is (-3.756941318511963, 2.802544355392456, 4.887539386749268, 13.891077041625977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4351257172206611, 6.930129861973848e-213]
222 self.state_dicts[msg.id][msg.t] is (-3.266753673553467, 0.608460545539856, 4.460178852081299, 13.538691520690918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.38266897202
y: -9.47795295715
theta: 1.64091420174
speed: 4.16306352615
id: 0
t: 56
current clock is .t / rate/slowdown
2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.54993319511
y: -9.03662204742
theta: 1.46479988098
speed: 4.03967761993
id: 0
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.488888888888889, True, ['1']]
2.48888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.53333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.48888888889
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.54993319511
y: -9.03662204742
theta: 1.46479988098
speed: 4.03967761993
id: 0
t: 57
current clock is .t / rate/slowdown
2.53333333333
self.communication_details == 0
sending GET,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.54993319511
y: -9.03662204742
theta: 1.46479988098
speed: 4.03967761993
id: 0
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.54993319511
y: -9.03662204742
theta: 1.46479988098
speed: 4.03967761993
id: 0
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.53333333333', 'Position': ['(-3.679760217666626', ' 1.3988884687423706', ' 4.720367908477783)'], 'Type': 'DENY'}







car 0 received DENY,1,2.53333333333,(-3.679760217666626, 1.3988884687423706, 4.720367908477783),13,1,0,0 from  car1
status: 2






maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.533333333333333, True, ['1']]
2.53333333333
True
1

maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.533333333333333, Trueatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.45652012054505514, 0]

222 self.state_dicts[msg.id][msg.t] is (2.8959851264953613, -9.88018798828125, 1.5299452543258667, 4.631284713745117)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52093076706
y: 0.044782333076
theta: 4.75919818878
speed: 13.7517213821
id: 1
t: 57
current clock is .t / rate/slowdown
2.53333333333





maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52093076706
y: 0.044782333076
theta: 4.75919818878
speed: 13.7517213821
id: 1
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.53333333333', 'IntendedCourse': 'left', 'Position': ['3.5499331951141357', ' -9.036622047424316', ' 1.4647998809814453'], 'TagID': '0', 'Type': 'GET', 'Velocity': '4'}



car 1 received GET,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0,left from  car0
status: 1




maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.112592592592
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.432030643782
sender last entering time is:  1.11259259259
sender last leaving time is:  3.48589084902
my entering time is:  0.112592592592
my leaving time is:  0.659372476129
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52093076706
y: 0.044782333076
theta: 4.75919818878
speed: 13.7517213821
id: 1
t: 57
current clock is .t / rate/slowdown
2.53333333333
self.communication_details == 0
sending DENY,1,2.53333333333,(-3.679760217666626, 1.3988884687423706, 4.720367908477783),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52093076706
y: 0.044782333076
theta: 4.75919818878
speed: 13.7517213821
id: 1
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.52093076706
y: 0.044782333076
theta: 4.75919818878
speed: 13.7517213821
id: 1
t: 57
current clock is .t / rate/slowdown
2.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '4', 'Sender': '0', 'TagID': '1', 'Time': '2.53333333333', 'Position': ['(3.5499331951141357', ' -9.036622047424316', ' 1.4647998809814453)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:58


aaaaaa
aaaaaabbbbb
risk is [0.3548099892445179, 0]
222 self.state_dicts[msg.id][msg.t] is (3.165485382080078, -9.282116889953613, 1.536314845085144, 3.7195730209350586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:61




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:62


aaaaaa
aaaaaabbbbb
risk is [0.4497572470487069, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4266583919525146, -8.090495109558105, 1.5971450805664062, 2.790548086166382)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.00122094154
y: -3.46834754944
theta: 4.57685947418
speed: 13.6804943085
id: 1
t: 62
current clock is .t / rate/slowdown
2.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negot, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.54993319511
y: -9.03662204742
theta: 1.46479988098
speed: 4.03967761993
id: 0
t: 57
current clock is .t / rate/slowdown
2.53333333333
self.communication_details == 0
sending RELEASE,0,2.53333333333,(3.5499331951141357, -9.036622047424316, 1.4647998809814453),4,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:58


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6256695668151891, 0.00042308250529957803]
222 self.state_dicts[msg.id][msg.t] is (-3.3477680683135986, -1.6357492208480835, 4.739184379577637, 13.99164867401123)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.70816469193
y: -7.5096449852
theta: 1.61555850506
speed: 2.52172970772
id: 0
t: 64
current clock is .t / rate/slowdown
2.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
risk is [0.6016928088757149, 0.006248419489808994]
222 self.state_dicts[msg.id][msg.t] is (-2.7382755279541016, -4.501352310180664, 4.79830265045166, 13.497751235961914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.79869556427
y: -7.722427845
theta: 1.43507575989
speed: 2.1872279644
id: 0
t: 65
current clock is .t / rate/slowdown
2.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.888888888888889, True, ['1']]
2.88888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.88888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.88888888889
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.88888888889,(3.7986955642700195, -7.722427845001221, 1.4350757598876953),2,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get








GET,0,2.88888888889,(3.7986955642700195, -7.722427845001221, 1.4350757598876953),2,1,1.15555555556,0,left






maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.79869556427
y: -7.722427845
theta: 1.43507575989
speed: 2.1872279644
id: 0
t: 65
current clock is .t / rate/slowdown
2.88888888889
self.communication_details == 0
sending GET,0,2.88888888889,(3.7986955642700195, -7.722427845001221, 1.4350757598876953),2,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.79869556427
y: -7.722427845
theta: 1.43507575989
speed: 2.1872279644
id: 0
t: 65
current clock is .t / rate/slowdown
2.88888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.79869556427
y: -7.722427845
theta: 1.43507575989
speed: 2.1872279644
id: 0
t: 65
current clock is .t / rate/slowdown
2.88888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.88888888889', 'Position': ['(-3.00122094154357iatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.83884882927
y: -5.35269021988
theta: 4.69861650467
speed: 13.9157142639
id: 1
t: 65
current clock is .t / rate/slowdown
2.88888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.83884882927
y: -5.35269021988
theta: 4.69861650467
speed: 13.9157142639
id: 1
t: 65
current clock is .t / rate/slowdown
2.88888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.88888888889', 'IntendedCourse': 'left', 'Position': ['3.7986955642700195', ' -7.722427845001221', ' 1.4350757598876953'], 'TagID': '0', 'Type': 'GET', 'Velocity': '2'}







car 1 received GET,0,2.88888888889,(3.7986955642700195, -7.722427845001221, 1.4350757598876953),2,1,1.15555555556,0,left from  car0








status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.128395061728
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0






GRANT,1,2.88888888889,(-3.001220941543579, -3.4683475494384766, 4.576859474182129),13,1,0,0
aaaaaa
aaaaaabbbbb
risk is [0.3511052621283861, 0]
222 self.state_dicts[msg.id][msg.t] is (3.7986955642700195, -7.722427845001221, 1.4350757598876953, 2.187227964401245)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
added car with id 0 to grantlist. current grantlist:  {0: [7.5777777777777775, 'left']}
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.83884882927
y: -5.35269021988
theta: 4.69861650467
speed: 13.9157142639
id: 1
t: 65
current clock is .t / rate/slowdown
2.88888888889
self.communication_details == 0
sending GRANT,1,2.88888888889,(-3.001220941543579, -3.4683475494384766, 4.576859474182129),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:66




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spi9', ' -3.4683475494384766', ' 4.576859474182129)'], 'Type': 'GRANT'}





car 0 received GRANT,1,2.88888888889,(-3.001220941543579, -3.4683475494384766, 4.576859474182129),13,1,0,0 from  car1
status: 2





maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.888888888888889, True, ['1']]
2.88888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.888888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
!!WW change status to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [7.622222222222222, 'left']}
Doing maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:66




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4834401645001776, 0.9995465019001548]
222 self.state_dicts[msg.id][msg.t] is (-2.7565505504608154, -6.575952053070068, 4.682219505310059, 13.768774032592773)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:68


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.19054268801498028, 0.9939008662608252]
222 self.state_dicts[msg.id][msg.t] is (-3.118608236312866, -7.946918487548828, 4.698787212371826, 13.957719802856445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:71


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23068404198
y: -7.326n:67

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7765061380156675, 0.9982274875105688]
222 self.state_dicts[msg.id][msg.t] is (3.019193649291992, -8.006422996520996, 1.5004595518112183, 2.490522861480713)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.17653854274427094, 0.0641918574842959]
222 self.state_dicts[msg.id][msg.t] is (2.87330961227417, -7.714062213897705, 1.5576368570327759, 3.2844736576080322)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.11860823631
y: -7.94691848755
theta: 4.69878721237
speed: 13.9577198029
id: 1
t: 70
current clock is .t / rate/slowdown
3.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.3391853611831206e-09, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2569336891174316, -6.821569919586182, 1.4448647499084473, 3.7032957077026367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py upda35736465
theta: 1.62721168995
speed: 3.56138706207
id: 0
t: 71

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

current clock is .t / rate/slowdown
3.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.454256269607836e-13, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3482162952423096, -10.178740501403809, 4.79709005355835, 14.34367561340332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.9580942081119758e-21, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.346656322479248, -11.532163619995117, 4.714900493621826, 13.979106903076172)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.6863499310978346e-94, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.94504714012146, -13.738625526428223, 4.5449748039245605, 13.867897033691406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurete function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.0314244317349834e-15, 0]
222 self.state_dicts[msg.id][msg.t] is (2.664510488510132, -6.454479694366455, 1.7493282556533813, 4.09562349319458)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.579407224418386e-94, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5726356506347656, -5.813483715057373, 1.706612467765808, 4.703506946563721)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.94504714012
y: -13.7386255264
theta: 4.54497480392
speed: 13.8678970337
id: 1
t: 78
current clock is .t / rate/slowdown
3.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [8.249839568174113e-127, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7495343685150146, -5.529333591461182, 1.6502766609191895, 5.578373908996582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:81


aaaaaa
aaaaaabbbbb
risk is [2.950747485307983e-178, 0]
222 self.state_dicts[msg.id][msg.t] is (3.383505344390869, -4.97464656829834, 1.5912119150161743, 5.709584712982178)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call updments has x, y, theta, speed, id and t
x: 2.74953436852
y: -5.52933359146
theta: 1.65027666092
speed: 5.578373909
id: 0
t: 79
current clock is .t / rate/slowdown
3.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.0315125351736271e-132, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.580929756164551, -14.256621360778809, 4.673696041107178, 14.011890411376953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.367711345404797e-179, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3554556369781494, -16.145671844482422, 4.657142162322998, 14.067608833312988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [4.8330438443372014e-237, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.735318660736084, -17.310720443725586, 4.651946067810059, 13.880791664123535)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in thate_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.518774768095363e-191, 0]
222 self.state_dicts[msg.id][msg.t] is (2.889158248901367, -4.724791526794434, 1.7063448429107666, 6.342718601226807)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.152561531038557e-236, 0]
222 self.state_dicts[msg.id][msg.t] is (2.6325602531433105, -4.3907060623168945, 1.8335062265396118, 6.946045875549316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.48027515411
y: -18.0909767151
theta: 4.84035825729
speed: 14.1627025604
id: 1
t: 86
current clock is .t / rate/slowdown
3.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.4765436287958905e-286, 0]
222 self.state_dicts[msg.id][msg.t] is (2.821897506713867, -3.823965072631836, 1.8610121011734009, 7.832154750823975)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89


maneuver_negotie clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.82189750671
y: -3.82396507263
theta: 1.86101210117
speed: 7.83215475082
id: 0
t: 87
current clock is .t / rate/slowdown
3.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.9448378394077914e-287, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5069026947021484, -19.593488693237305, 4.744946002960205, 13.673236846923828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.089643955230713, -21.477622985839844, 4.64816951751709, 13.855154991149902)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2603344917297363, -22.50748634338379, 4.541268825531006, 14.17363166809082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1.73844742775
y: -1.3904761076
theta: 2.19133424759
speed: 9.50534725189
id: 0
t: 94
current clock is .t / rate/slowdown
4.17777777778
maneuver_negotiatir.py this is get posoatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0118143558502197, -3.403765916824341, 1.9792660474777222, 7.857558250427246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (2.444016456604004, -2.2265477180480957, 2.015746593475342, 8.579110145568848)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (2.0019853115081787, -2.018683671951294, 2.177932024002075, 8.818083763122559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.26033449173
y: -22.5074863434
theta: 4.54126882553
speed: 14.1736316681
id: 1
t: 93
current clock is .t / rate/slowdown
4.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (1.2888952493667603, -1.3820273876190186, 2.2776896953582764, 9.518349647521973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


maneuver_netion function, it's important for me to read other car's location

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:96


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.437727928161621, -24.383344650268555, 4.814329147338867, 14.0756254196167)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:97




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1945419311523438, -25.504653930664062, 4.70876407623291, 13.926851272583008)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.475412130355835, -27.625267028808594, 4.7260847091674805, 13.620429039001465)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -1.09636056423
y: 1.04726266861
theta: 2.55752873421
speed: 11.5607881546
id: 0
t: 102
current clock is .t / rate/slowdown
4.53333333333
maneuver_negotiagotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (0.7063950300216675, -0.5196767449378967, 2.512827157974243, 10.163599967956543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (0.16575849056243896, 0.18164359033107758, 2.5174543857574463, 10.490160942077637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-0.3084009289741516, 0.9176813960075378, 2.4841864109039307, 10.476593017578125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.47541213036
y: -27.6252670288
theta: 4.72608470917
speed: 13.620429039
id: 1
t: 101
current clock is .t / rate/slowdown
4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-1.3873034715652466, 1.8520400524139404, 2.7302920818328857, 11.5906620tir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.167875051498413, -30.276630401611328, 4.711574077606201, 13.998151779174805)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.7533490657806396, -30.67229652404785, 4.865779399871826, 13.966737747192383)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4019460678100586, -31.699947357177734, 4.6993937492370605, 13.772193908691406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -5.00165271759
y: 3.03632211685
theta: 2.82429385185
speed: 13.0176725388
id: 0
t: 110
current clock is .t / rate/slowdown02563477)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-3.0512807369232178, 1.679160475730896, 2.5732545852661133, 12.315773010253906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-3.491507053375244, 2.131106376647949, 2.6871249675750732, 12.516253471374512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-4.203433036804199, 2.9066219329833984, 3.1293139457702637, 13.080199241638184)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.15543174744
y: -31.7735309601
theta: 4.83313894272
speed: 13.4989881516
id: 1
t: 109
current clock is .t / rate/slowdown
4.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the 
4.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0192856788635254, -33.40093231201172, 4.596859455108643, 13.907133102416992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9252092838287354, -34.89658737182617, 4.763727188110352, 13.84840202331543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.203202724456787, -36.477787017822266, 4.725982189178467, 14.14173412322998)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -9.6024980545
y: 3.5015039444
theta: 2.91512727737
speed: 13.9261169434
id: 0
t: 118
current clupdate function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:111


aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-4.99055290222168, 2.825025796890259, 2.9992451667785645, 13.503458023071289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-6.569239616394043, 2.9413836002349854, 2.894256591796875, 13.6976957321167)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-7.992458820343018, 3.817350387573242, 3.027862787246704, 14.019848823547363)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-8.40715217590332, 3.423100233078003, 3.036466121673584, 13.954329490661621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.73956346512
y: -37.5217018127
theta: 4.80516719818
speed: 13.9861030579
id: 1
t: 117
current clock is .t / rate/slowdown
5.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the updock is .t / rate/slowdown
5.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.995818853378296, -38.35551834106445, 4.725390434265137, 13.834465980529785)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.471754312515259, -40.23039245605469, 4.748880386352539, 14.025925636291504)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:123


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.832414150238037, -41.867740631103516, 4.744412422180176, 13.773520469665527)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -14.9007730484
y: 2.850004673
theta: 3.30489253998
speed: 13.9607114792
id: 0
t: 125
current clock is .t / rate/slowdown
5.55555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneate function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-10.976823806762695, 3.422240972518921, 3.275242567062378, 14.075366973876953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-12.730587005615234, 3.616964817047119, 3.1085429191589355, 14.05726432800293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-13.37933349609375, 3.5945522785186768, 3.17663311958313, 13.969710350036621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.83241415024
y: -41.8677406311
theta: 4.74441242218
speed: 13.7735204697
id: 1
t: 124
current clock is .t / rate/slowdown
5.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-15.330814361572266, 3.92985463142395, 3.0869922637939453, 13.963152885437012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-16.676132202148438, 3.2046449184417725, 2.996894598007202, 13.963436126708984)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-18.472854614257812, 3.5186116695404053, 3.1861770153045654, 13.978422164916992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.68275952339
y: -46.6739082336
theta: 4.79228591919
speed: 13.5319023132
id: 1
t: 132
current clock is .t / rate/slowdown
5.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the upuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:126


maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:127




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3952388763427734, -43.653038024902344, 4.721748352050781, 14.007990837097168)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.74119234085083, -46.29199981689453, 4.803467273712158, 13.512123107910156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -19.2155818939
y: 3.56156110764
theta: 3.07603693008
speed: 13.5659589767
id: 0
t: 133
current clock is .t / rate/slowdown
5.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134


maneuver_negotiatir.py start the update agent state from ros funtion
mdate function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-20.43799591064453, 3.2438859939575195, 3.0926663875579834, 14.048064231872559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-21.60650062561035, 3.3609578609466553, 3.0873043537139893, 13.887190818786621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-23.086082458496094, 2.8839120864868164, 3.0797674655914307, 13.759930610656738)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.05769705772
y: -51.1424865723
theta: 4.66671228409
speed: 13.4115076065
id: 1
t: 140
current clock is .t / rate/slowdown
6.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141


maneuver_negotiatir.py start the updaneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.061363935470581, -47.82906723022461, 4.645397186279297, 13.892385482788086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.5483694076538086, -50.287601470947266, 4.589914321899414, 13.485552787780762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.057697057723999, -51.142486572265625, 4.666712284088135, 13.411507606506348)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py message_processing,!!dwd change status to NORMAL
maneuver_negotiatir.py in the message processing function, it's a long code, finish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -24.2426395416
y: 3.27264523506
theta: 3.27092337608
speed: 13.6524715424
id: 0
t: 141
current clock is .t / rate/slowdown
6.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try ate agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-24.276836395263672, 2.949795722961426, 3.322172164916992, 13.965524673461914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-25.658891677856445, 3.679141044616699, 3.0761191844940186, 13.857256889343262)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:145




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-26.558380126953125, 3.5448291301727295, 3.123924970626831, 13.955177307128906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:147


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.41098713875
y: -55.3060302734
theta: 4.55902290344
speed: 14.1283626556
id: 1
t: 147
current clock is .t / rate/slowdown
6.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the updatemaneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:142




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3372979164123535, -53.693321228027344, 4.607388973236084, 13.972131729125977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:144




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.381265640258789, -54.60770797729492, 4.738009929656982, 13.571109771728516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:146




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:148


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.818430185317993, -56.425907135009766, 4.671442031860352, 13.908458709716797)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -28.8811683655
y: 3.06757998466
theta: 3.27862668037
speed: 13.7271137238
id: 0
t: 149
current clock is .t / rate/slowdown
6.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneu function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:149


222 self.state_dicts[msg.id][msg.t] is (-28.881168365478516, 3.067579984664917, 3.2786266803741455, 13.727113723754883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:150




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-30.229326248168945, 3.7659993171691895, 3.3853821754455566, 13.582786560058594)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-31.25335693359375, 3.142730236053467, 3.244431734085083, 14.277104377746582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155


aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-32.67384338378906, 2.8161425590515137, 3.1135590076446533, 13.856412887573242)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.18599200249
y: -60.7572860718
theta: 4.65402364731
speed: 13.9692344666
id: 1
t: 155
current clock is .t / rate/slowdown
6.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
ver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:150




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.622732400894165, -58.337833404541016, 4.7311553955078125, 13.856144905090332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.6553170680999756, -59.540958404541016, 4.561182022094727, 14.003975868225098)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:155


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.037559747695923, -61.75418472290039, 4.780869007110596, 13.89687442779541)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -33.4428215027
y: 2.9011631012
theta: 3.14555335045
speed: 13.9496030807
id: 0
t: 156
current clock is .t / rate/slowdown
6.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-33.320098876953125, 3.2625732421875, 3.006303548812866, 13.949265480041504)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:158




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-35.066261291503906, 3.2413854598999023, 3.06746506690979, 14.210737228393555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-36.3604621887207, 3.2396421432495117, 3.1365842819213867, 13.98486328125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.18771338463
y: -65.3537902832
theta: 4.62358093262
speed: 13.741230011
id: 1
t: 163
current clock is .t / rate/slowdown
7.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver functistate from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.508882761001587, -62.325347900390625, 4.782010555267334, 14.03287410736084)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4388427734375, -64.52787017822266, 4.732966423034668, 14.100881576538086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:162


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.187713384628296, -65.35379028320312, 4.6235809326171875, 13.741230010986328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:164


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -37.8967132568
y: 2.74567461014
theta: 3.15312290192
speed: 14.2757558823
id: 0
t: 164
current clock is .t / rate/slowdown
7.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165


maneuver_negotiatir.py on update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-38.088172912597656, 3.32175874710083, 3.135357618331909, 14.037551879882812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:165




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-39.57008361816406, 3.115036725997925, 3.1243858337402344, 13.773734092712402)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-40.45117950439453, 3.347550630569458, 3.3084402084350586, 13.864556312561035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-42.08577346801758, 3.1635491847991943, 3.005493402481079, 13.801056861877441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.72730851173
y: -69.9488220215
theta: 4.72306919098
speed: 14.0540914536
id: 1
t: 170
current clock is .t / rate/slowdown
7.55555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.pystart the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3251216411590576, -67.6664047241211, 4.598144054412842, 13.54327392578125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.409287929534912, -69.64266967773438, 4.8917131423950195, 13.867362976074219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.270885944366455, -71.12177276611328, 4.620612144470215, 14.184314727783203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -43.5163154602
y: 3.2954185009
theta: 2.97913241386
speed: 13.8675327301
id: 0
t: 172
current clock is .t / rate/slowdown
7.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
mane in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-43.51631546020508, 3.2954185009002686, 2.9791324138641357, 13.867532730102539)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-44.05508041381836, 3.0763306617736816, 3.069586992263794, 13.996060371398926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-45.8995246887207, 3.9666755199432373, 3.0908467769622803, 13.711324691772461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:177




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.53742408752
y: -75.0366973877
theta: 4.53306245804
speed: 13.8888435364
id: 1
t: 178
current clock is .t / rate/slowdown
7.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py uver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2433972358703613, -73.13493347167969, 4.658756732940674, 14.042933464050293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2448103427886963, -74.37794494628906, 4.618508338928223, 13.805418968200684)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -47.9669189453
y: 2.66179418564
theta: 3.14648222923
speed: 13.9175205231
id: 0
t: 180
current clock is .t / rate/slowdown
8.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.371825933456421, -76.3025894165039, 4.745739459991455, 13.9915189743042)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-46.502174377441406, 2.8838744163513184, 2.998450517654419, 13.640664100646973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:180




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-48.83225631713867, 3.541736125946045, 3.124647378921509, 13.81811237335205)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-49.452476501464844, 3.6007213592529297, 3.086082935333252, 13.423568725585938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:183




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:184


aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-50.79350280761719, 3.0841119289398193, 3.1232707500457764, 13.609171867370605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measuretimes spin:181

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:182




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:183


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4844412803649902, -77.9479751586914, 4.601474285125732, 14.344893455505371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.025804042816162, -79.74036407470703, 4.645346164703369, 13.523665428161621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -52.6557235718
y: 2.96589422226
theta: 3.21347928047
speed: 13.8664608002
id: 0
t: 187
current clock is .t / rate/slowdown
8.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.140082359313965, -81.74859619ments has x, y, theta, speed, id and t
x: -3.02580404282
y: -79.7403640747
theta: 4.6453461647
speed: 13.5236654282
id: 1
t: 186
current clock is .t / rate/slowdown
8.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-52.655723571777344, 2.9658942222595215, 3.2134792804718018, 13.866460800170898)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-53.4326286315918, 3.0276849269866943, 3.1536688804626465, 14.029884338378906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:191


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-54.73782730102539, 3.1936514377593994, 2.914604663848877, 13.96694564819336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-56.254112243652344, 3.4445714950561523, 3.055644989013672, 13.987584114074707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  t140625, 4.757072448730469, 13.885391235351562)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.0590484142303467, -83.28865814208984, 4.607057094573975, 13.75278091430664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0452685356140137, -85.80552673339844, 4.654839992523193, 13.742860794067383)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -57.3418083191
y: 3.38523364067
theta: 3.06679344177
speed: 13.7372188568
id: 0
t: 195
current clock is .t / rate/slowdown
8.66666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:197


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
tahe ros_measurements has x, y, theta, speed, id and t
x: -2.83200764656
y: -84.2872543335
theta: 4.84905195236
speed: 14.0502758026
id: 1
t: 193
current clock is .t / rate/slowdown
8.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-57.3418083190918, 3.3852336406707764, 3.066793441772461, 13.737218856811523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-58.407596588134766, 2.9667601585388184, 3.239591598510742, 13.76818561553955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:198




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-60.20817947387695, 3.2417709827423096, 3.0757791996002197, 13.718058586120605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:201


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clockrgetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.6330747604370117, -87.75263214111328, 4.82061767578125, 13.72607707977295)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:199


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:200


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2172422409057617, -88.79598999023438, 4.675539970397949, 13.922794342041016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -62.0257415771
y: 3.01531052589
theta: 3.13424897194
speed: 14.1324310303
id: 0
t: 203
current clock is .t / rate/slowdown
9.02222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5863571166992188, -90.5491714477539, 4.753930568695068, 14.007110595703125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:204




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:205


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the  function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.05473208427
y: -89.1950912476
theta: 4.76461076736
speed: 13.9243164062
id: 1
t: 201
current clock is .t / rate/slowdown
8.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-61.158260345458984, 3.426060438156128, 3.0106611251831055, 14.033524513244629)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:202


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-62.301761627197266, 3.4689645767211914, 3.253793954849243, 13.672931671142578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-63.58719253540039, 3.067519187927246, 3.2513163089752197, 13.817361831665039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:208


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-65.74908447265625, 3.275221586227417, 3.044942617416382, 14.008599281311035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.ssim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.027385711669922, -92.01884460449219, 4.58438777923584, 13.827045440673828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.865610122680664, -93.25962829589844, 4.760626792907715, 14.01130485534668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -66.7497940063
y: 2.79622077942
theta: 3.13262271881
speed: 13.8479728699
id: 0
t: 210
current clock is .t / rate/slowdown
9.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.986356258392334, -95.57887268066406, 4.7613677978515625, 14.18025016784668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:212


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:213


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the updatepeed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.92603492737
y: -93.9113998413
theta: 4.78404855728
speed: 13.8537197113
id: 1
t: 209
current clock is .t / rate/slowdown
9.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:210


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-67.51854705810547, 3.3104147911071777, 3.2753427028656006, 13.980430603027344)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-68.79569244384766, 3.519472360610962, 3.162177085876465, 13.885357856750488)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:216


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-70.89171600341797, 3.4066834449768066, 3.230400562286377, 13.859678268432617)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
s function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3451807498931885, -97.66082000732422, 4.412398338317871, 14.016529083251953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2484567165374756, -99.7564468383789, 4.871119499206543, 14.08642864227295)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -71.8441238403
y: 3.67004394531
theta: 3.12124347687
speed: 13.8704509735
id: 0
t: 218
current clock is .t / rate/slowdown
9.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:219


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2239975929260254, -100.75338745117188, 4.7921247482299805, 14.161974906921387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros im.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.51196694374
y: -99.5427856445
theta: 4.59658718109
speed: 13.8722257614
id: 1
t: 217
current clock is .t / rate/slowdown
9.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:219


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-72.15621948242188, 2.8146557807922363, 3.2913076877593994, 13.854846954345703)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:220


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-73.69315338134766, 3.4383485317230225, 3.196864128112793, 13.542020797729492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:222




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:223


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-74.52171325683594, 3.455601453781128, 3.006348133087158, 13.85289478302002)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:224


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agentfuntion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:222


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.212270975112915, -102.86328887939453, 4.697320461273193, 13.791159629821777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:224


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.282235622406006, -103.18717956542969, 4.767614841461182, 13.647241592407227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:226


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -76.7098922729
y: 3.39240908623
theta: 3.16526556015
speed: 13.8109331131
id: 0
t: 226
current clock is .t / rate/slowdown
10.0444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:227


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:228


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:229


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:230


maneuver_negotiatir.py start the update agent sta state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.28223562241
y: -103.187179565
theta: 4.76761484146
speed: 13.6472415924
id: 1
t: 225
current clock is .t / rate/slowdown
10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:226


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-76.70989227294922, 3.392409086227417, 3.1652655601501465, 13.810933113098145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:227


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:228


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:229


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-78.03722381591797, 3.494386672973633, 3.05865216255188, 13.850486755371094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:230


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:231


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:232


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-80.37580871582031, 3.4761407375335693, 3.2527425289154053, 13.702646255493164)
if we have all measurements for a certain time-stamp perform riste from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.001485824584961, -106.96102905273438, 4.565184593200684, 13.581013679504395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:231


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:232


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.6125409603118896, -108.647705078125, 4.634299278259277, 13.844131469726562)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:233


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:234


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -80.5441589355
y: 3.0987508297
theta: 3.04606127739
speed: 14.1250867844
id: 0
t: 233
current clock is .t / rate/slowdown
10.3555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:235


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:236




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:237


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.312455892562866, -111.3331298828125, 4.797511577606201, 14.185964584350586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:238


maneuver_negotiatir.py k estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.61254096031
y: -108.647705078
theta: 4.63429927826
speed: 13.8441314697
id: 1
t: 232
current clock is .t / rate/slowdown
10.3111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:233


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:234


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:235


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-82.14604949951172, 2.715695858001709, 3.166796922683716, 13.755574226379395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:236


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:237


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:238


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-83.77218627929688, 2.836503267288208, 3.20906138420105, 13.977417945861816)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:239


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:240


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
222 self.state_dicts[msg.id][msg.t] is (-84.9935302734375, 3.3818061351776123, 3.1489176750183105, 13.747611999511719)
if we havestart the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:239


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.370612144470215, -112.14631652832031, 4.519364356994629, 13.788763999938965)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:240


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:241


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -85.8009796143
y: 2.89577174187
theta: 3.25080823898
speed: 13.745300293
id: 0
t: 241
current clock is .t / rate/slowdown
10.7111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -85.8009796143
y: 2.89577174187
theta: 3.25080823898
speed: 13.745300293
id: 0
t: 241
current clock is .t / rate/slowdown
10.7111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:242


 all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.94188904762
y: -113.874099731
theta: 4.69932174683
speed: 14.1062269211
id: 1
t: 240
current clock is .t / rate/slowdown
10.6666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:241


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.65481925011
y: -113.611816406
theta: 4.83784103394
speed: 13.9556884766
id: 1
t: 241
current clock is .t / rate/slowdown
10.7111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:242


... logging to /home/lu/.ros/log/fb1c12b2-ff89-11e8-9ca8-000c291801fc/roslaunch-ubuntu-4669.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:37111/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [4679][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to fb1c12b2-ff89-11e8-9ca8-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [4692][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [4708][0m
[1mprocess[rviz-3]: started with pid [4710][0m
[1mprocess[car0-4]: started with pid [4711][0m
[1mprocess[car1-5]: started with pid [4712][0m
[1mprocess[cloud-6]: started with pid [4713][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
