sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.52863097191
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: -3.43174648285
y: 34.4152259827
theta: 4.58755731583
speed: 14.1124572754
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-3.431746482849121, 34.415225982666016, 4.587557315826416, 14.112457275390625)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f9838c8b998>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f9838ca8cb0>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: -3.30536079407
y: 33.8123970032
theta: 4.77622652054
speed: 13.979300499
id: 1
t: 2

222 self.state_dicts[msg.id][msg.t] is (-3.305360794067383, 33.81239700317383, 4.77622652053833, 13.979300498962402)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.69701123238
y: -34.0508956909
theta: 1.66491043568
speed: 14.0932588577
id: 0
t: 2
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: 3.69701123238
y: -34.0508956909
theta: 1.66491043568
speed: 14.0932588577
id: 0
t: 2
xxx after update is x: 3.72128915787
y: -33.5857772827
theta: 1.58567142487
speed: 13.6609535217
id: 0
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: 3.72128915787
y: -33.5857772827
theta: 1.58567142487
speed: 13.6609535217
id: 0
t: 3
xxx after update is x: 3.42553782463
y: -32.2075805664
theta: 1.66602325439
speed: 13.676112175
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.42553782463
y: -32.2075805664
theta: 1.66602325439
speed: 13.676112175
id: 0
t: 4
xxx after update is x: 3.22110700607
y: -31.7651596069sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.56996297836
sim.py in the sim.py statecallback function, msg is

x: 3.87237906456
y: -34.4519233704
theta: 1.56949865818
speed: 13.7325181961
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (3.8723790645599365, -34.45192337036133, 1.5694986581802368, 13.732518196105957)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: 3.69701123238
y: -34.0508956909
theta: 1.66491043568
speed: 14.0932588577
id: 0
t: 2

222 self.state_dicts[msg.id][msg.t] is (3.6970112323760986, -34.05089569091797, 1.6649104356765747, 14.09325885772705)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7ff67c32afc8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7ff67c34f3f8>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
sim.py in the sim.py statecallback function, msg is

x: 3.72128915787
y: -33.5857772827
theta: 1.58567142487
speed: 13.6609535217
id: 0
t: 3

222 self.state_dicts[msg.id][msg.t] is (3.7212891578674316, -33.585777282714844, 1.5856714248657227, 13.660953521728516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -2.95445275307
y: 32.4629592896
theta: 4.6865401268
speed: 13.7732276917
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: -2.95445275307
y: 32.4629592896
theta: 4.6865401268
speed: 13.7732276917
id: 1
t: 4
xxx after update is x: -3.50837159157
y: 32.3399543762
theta: 4.66495609283
speed: 14.1275463104
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: -3.50837159157
y: 32.3399543762
theta: 4.66495609283
speed: 14.1275463104
id: 1
t: 5
xxx after update is x: -3.36271691322
y: 30.8466300964
theta: 4.76565933228
speed: 13.7789859772
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4243536994225919, 0.3412511197366831]
sim.py in the sim.py statecallback function, msg is

x: 3.42553782463
y: -32.2075805664
theta: 1.66602325439
speed: 13.676112175
id: 0
t: 4

sim.py in the sim.py statecallback function, msg is

x: 3.22110700607
y: -31.7651596069
theta: 1.54562652111
speed: 13.7193775177
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 3.48229336739
y: -31.0497817993
theta: 1.53122282028
speed: 13.7264719009
id: 0
t: 6

222 self.state_dicts[msg.id][msg.t] is (3.4822933673858643, -31.049781799316406, 1.5312228202819824, 13.726471900939941)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -3.36271691322
y: 30.8466300964
theta: 4.76565933228
speed: 13.7789859772
id: 1
t: 6
xxx after update is x: -3.29679250717
y: 30.8712406158
theta: 4.84825992584
speed: 13.5981903076
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.29679250717
y: 30.8712406158
theta: 4.84825992584
speed: 13.5981903076
id: 1
t: 7
xxx after update is x: -3.59959411621
y: 29.8622722626
theta: 4.72634029388
speed: 14.0958566666
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: -3.59959411621
y: 29.8622722626
theta: 4.72634029388
speed: 14.0958566666
id: 1
t: 8
xxx after update is x: -3.22256445885
y: 29.6213531494
theta: 4.64337778091
speed: 13.8370485306
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.48433456967773875, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.90173411369
y: -30.871931076
theta: 1.67882299423
speed: 13.89112854
id: 0
t: 7

sim.py in the sim.py statecallback function, msg is

x: 3.27701807022
y: -30.3746261597
theta: 1.42434024811
speed: 14.0899810791
id: 0
t: 8

sim.py in the sim.py statecallback function, msg is

x: 3.34976029396
y: -28.887090683
theta: 1.5093845129
speed: 13.8022289276
id: 0
t: 9

222 self.state_dicts[msg.id][msg.t] is (3.3497602939605713, -28.8870906829834, 1.5093845129013062, 13.802228927612305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: -3.22256445885
y: 29.6213531494
theta: 4.64337778091
speed: 13.8370485306
id: 1
t: 9
xxx after update is x: -3.5419049263
y: 29.0017051697
theta: 4.73010206223
speed: 13.978764534
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.5419049263
y: 29.0017051697
theta: 4.73010206223
speed: 13.978764534
id: 1
t: 10
current clock is 0.444444444444
maneuver_negotiatir.py this is get poso
theta: 1.54562652111
speed: 13.7193775177
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:5
risk is [0.33472967555400646, 0.37220515431619094]
sim.py in the sim.py statecallback function, msg is

x: -2.69760322571
y: 33.3543930054
theta: 4.61833000183
speed: 13.739528656
id: 1
t: 3

sim.py in the sim.py statecallback function, msg is

x: -2.95445275307
y: 32.4629592896
theta: 4.6865401268
speed: 13.7732276917
id: 1
t: 4

sim.py in the sim.py statecallback function, msg is

x: -3.50837159157
y: 32.3399543762
theta: 4.66495609283
speed: 14.1275463104
id: 1
t: 5

222 self.state_dicts[msg.id][msg.t] is (-3.508371591567993, 32.3399543762207, 4.664956092834473, 14.127546310424805)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: 3.22110700607
y: -31.7651596069
theta: 1.54562652111
speed: 13.7193775177
id: 0
t: 5
xxx after update is x: 3.48229336739
y: -31.0497817993
theta: 1.53122282028
speed: 13.7264719009
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 3.48229336739
y: -31.0497817993
theta: 1.53122282028
speed: 13.7264719009
id: 0
t: 6
xxx after update is x: 2.90173411369
y: -30.871931076
theta: 1.67882299423
speed: 13.89112854
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 2.90173411369
y: -30.871931076
theta: 1.67882299423
speed: 13.89112854
id: 0
t: 7
xxx after update is x: 3.27701807022
y: -30.3746261597
theta: 1.42434024811
speed: 14.0899810791
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.27701807022
y: -30.3746261597
theta: 1.42434024811
speed: 14.0899810791
id: 0
t: 8
current clock is 0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.27701807022
y: -30.3746261597
theta: 1.42434024811
speed: 14.0899810791
id: 0
t: 8
xxx after update is x: 3.34976029396
y: -28.887090683
theta: 1.5093845129
speed: 13.8022289276
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: 3.34976029396
y: -28.887090683
theta: 1.5093845129
speed: 13.8022289276
id: 0
t: 9
xxx after update is x: 3.35277438164
y: -29.3799476624
theta: 1.60543298721
speed: 13.8722333908
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3452754582550168, 0.37485730784037236]
sim.py in the sim.py statecallback function, msg is

x: -3.36271691322
y: 30.8466300964
theta: 4.76565933228
speed: 13.7789859772
id: 1
t: 6

sim.py in the sim.py statecallback function, msg is

x: -3.29679250717
y: 30.8712406158
theta: 4.84825992584
speed: 13.5981903076
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.59959411621
y: 29.8622722626
theta: 4.72634029388
speed: 14.0958566666
id: 1
t: 8

sim.py in the sim.py statecallback function, msg is

x: -3.22256445885
y: 29.6213531494
theta: 4.64337778091
speed: 13.8370485306
id: 1
t: 9

sim.py in the sim.py statecallback function, msg is

x: -3.5419049263
y: 29.0017051697
theta: 4.73010206223
speed: 13.978764534
id: 1
t: 10

222 self.state_dicts[msg.id][msg.t] is (-3.541904926300049, 29.001705169677734, 4.730102062225342, 13.978764533996582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 3.35277438164
y: -29.3799476624
theta: 1.60543298721
speed: 13.8722333908
id: 0
t: 10
xxx after update is x: 3.16358208656
y: -28.0390129089
theta: 1.52602303028
speed: 13.7266159058
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 3.16358208656
y: -28.0390129089
theta: 1.52602303028
speed: 13.7266159058
id: 0
t: 11
xxx after update is x: 3.02356529236
y: -27.5523414612
theta: 1.52434313297
speed: 13.8361988068
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: 3.02356529236
y: -27.5523414612
theta: 1.52434313297
speed: 13.8361988068
id: 0
t: 12
xxx after update is x: 3.04773783684
y: -27.2085857391
theta: 1.60225319862
speed: 13.7318143845
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 3.04773783684
y: -27.2085857391
theta: 1.60225319862
speed: 13.7318143845
id: 0
t: 13
xxx after update is x: 3.22920632362
y: -26.2681789398
theta: 1.73866641521
speed: 13.7655296326
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: 3.22920632362
y: -26.2681789398
theta: 1.73866641521
speed: 13.7655296326
id: 0
t: 14
xxx after update is x: 3.43896150589
y: -25.9625988007
theta: 1.58988392353
speed: 13.9219045639
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3479145098680861, 0.39515308715222847]
sim.py in the sim.py statecallback function, msg is

x: -3.64574313164
y: 27.8047180176
theta: 4.85297679901
speed: 14.04895401
id: 1
t: 11

sim.py in the sim.py statecallback function, msg is

x: -2.85849285126
y: 27.8111686707
theta: 4.78123664856
speed: 13.541270256
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -3.0761077404
y: 26.9560203552
theta: 4.69788217545
speed: 13.5903453827
id: 1
t: 13

sim.py in the sim.py statecallback function, msg is

x: -3.18024396896
y: 26.320476532
theta: 4.58515119553
speed: 13.552280426
id: 1
t: 14

sim.py in the sim.py statecallback function, msg is

x: -3.58404874802
y: 25.5023040771
theta: 4.73242998123
speed: 13.6842041016
id: 1
t: 15

222 self.state_dicts[msg.id][msg.t] is (-3.5840487480163574, 25.502304077148438, 4.7324299812316895, 13.6842041015625)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update ftion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -3.5419049263
y: 29.0017051697
theta: 4.73010206223
speed: 13.978764534
id: 1
t: 10
xxx after update is x: -3.64574313164
y: 27.8047180176
theta: 4.85297679901
speed: 14.04895401
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: -3.64574313164
y: 27.8047180176
theta: 4.85297679901
speed: 14.04895401
id: 1
t: 11
xxx after update is x: -2.85849285126
y: 27.8111686707
theta: 4.78123664856
speed: 13.541270256
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -2.85849285126
y: 27.8111686707
theta: 4.78123664856
speed: 13.541270256
id: 1
t: 12
xxx after update is x: -3.0761077404
y: 26.9560203552
theta: 4.69788217545
speed: 13.5903453827
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4273033895936787, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.35277438164
y: -29.3799476624
theta: 1.60543298721
speed: 13.8722333908
id: 0
t: 10

sim.py in the sim.py statecallback function, msg is

x: 3.16358208656
y: -28.0390129089
theta: 1.52602303028
speed: 13.7266159058
id: 0
t: 11

sim.py in the sim.py statecallback function, msg is

x: 3.02356529236
y: -27.5523414612
theta: 1.52434313297
speed: 13.8361988068
id: 0
t: 12

sim.py in the sim.py statecallback function, msg is

x: 3.04773783684
y: -27.2085857391
theta: 1.60225319862
speed: 13.7318143845
id: 0
t: 13

222 self.state_dicts[msg.id][msg.t] is (3.0477378368377686, -27.208585739135742, 1.6022531986236572, 13.73181438446045)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -3.0761077404
y: 26.9560203552
theta: 4.69788217545
speed: 13.5903453827
id: 1
t: 13
xxx after update is x: -3.18024396896
y: 26.320476532
theta: 4.58515119553
speed: 13.552280426
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: -3.18024396896
y: 26.320476532
theta: 4.58515119553
speed: 13.552280426
id: 1
t: 14
xxx after update is x: -3.58404874802
y: 25.5023040771
theta: 4.73242998123
speed: 13.6842041016
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: -3.58404874802
y: 25.5023040771
theta: 4.73242998123
speed: 13.6842041016
id: 1
t: 15
xxx after update is x: -3.34053969383
y: 25.5146064758
theta: 4.5977306366
speed: 13.6089849472
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3305598207731145, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.22920632362
y: -26.2681789398
thunction xxx before update is x: 3.43896150589
y: -25.9625988007
theta: 1.58988392353
speed: 13.9219045639
id: 0
t: 15
xxx after update is x: 3.55424404144
y: -24.9702396393
theta: 1.6360322237
speed: 13.9101638794
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:16
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.55424404144
y: -24.9702396393
theta: 1.6360322237
speed: 13.9101638794
id: 0
t: 16
current clock is 0.711111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: 3.55424404144
y: -24.9702396393
theta: 1.6360322237
speed: 13.9101638794
id: 0
t: 16
xxx after update is x: 3.42195177078
y: -24.3869342804
theta: 1.61302471161
speed: 13.7996845245
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.42195177078
y: -24.3869342804
theta: 1.61302471161
speed: 13.7996845245
id: 0
t: 17
xxx after update is x: 3.170181036
y: -23.4343776703
theta: 1.70486843586
speed: 13.6477603912
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:18
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.170181036
y: -23.4343776703
theta: 1.70486843586
speed: 13.6477603912
id: 0
t: 18
xxx after update is x: 3.24478578568
y: -23.2160015106
theta: 1.56794631481
speed: 13.6706619263
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: 3.24478578568
y: -23.2160015106
theta: 1.56794631481
speed: 13.6706619263
id: 0
t: 19
xxx after update is x: 3.13318037987
y: -22.3924503326
theta: 1.4882004261
speed: 13.3290863037
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3115722379086428, 0.31276371477140824]
sim.py in the sim.py statecallback function, msg is

x: -3.34053969383
y: 25.5146064758
theta: 4.5977306366
speed: 13.6089849472
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.33435511589
y: 24.5703887939
theta: 4.68440580368
speed: 13.6393165588
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -2.99702572823
y: 23.1501159668
theta: 4.66963529587
speed: 13.4374675751
id: 1
t: 18

sim.py in the sim.py statecallback function, msg is

x: -3.55318212509
y: 23.1992397308
theta: 4.67700767517
speed: 14.2545690536
id: 1
t: 19

sim.py in the sim.py statecallback function, msg is

x: -3.08438539505
y: 22.7752056122
theta: 4.70722818375
speed: 13.8717498779
id: 1
t: 20

222 self.state_dicts[msg.id][msg.t] is (-3.084385395050049, 22.775205612182617, 4.707228183746338, 13.871749877929688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 3.13318037987
y: -22.3924503326
theta: 1.4882004261
speed: 13.3290863037
id: 0
t: 20
xxx after update is x: 3.08879733086
y: -22.0435333252
theta: 1.69639062881
speed: 13.0972566605
id: 0
t: 21
maneuvereta: 1.73866641521
speed: 13.7655296326
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 3.43896150589
y: -25.9625988007
theta: 1.58988392353
speed: 13.9219045639
id: 0
t: 15

sim.py in the sim.py statecallback function, msg is

x: 3.55424404144
y: -24.9702396393
theta: 1.6360322237
speed: 13.9101638794
id: 0
t: 16

222 self.state_dicts[msg.id][msg.t] is (3.554244041442871, -24.970239639282227, 1.636032223701477, 13.910163879394531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.34053969383
y: 25.5146064758
theta: 4.5977306366
speed: 13.6089849472
id: 1
t: 16
xxx after update is x: -3.33435511589
y: 24.5703887939
theta: 4.68440580368
speed: 13.6393165588
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.33435511589
y: 24.5703887939
theta: 4.68440580368
speed: 13.6393165588
id: 1
t: 17
xxx after update is x: -2.99702572823
y: 23.1501159668
theta: 4.66963529587
speed: 13.4374675751
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.99702572823
y: 23.1501159668
theta: 4.66963529587
speed: 13.4374675751
id: 1
t: 18
current clock is 0.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: -2.99702572823
y: 23.1501159668
theta: 4.66963529587
speed: 13.4374675751
id: 1
t: 18
xxx after update is x: -3.55318212509
y: 23.1992397308
theta: 4.67700767517
speed: 14.2545690536
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4271385240695893, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.42195177078
y: -24.3869342804
theta: 1.61302471161
speed: 13.7996845245
id: 0
t: 17

sim.py in the sim.py statecallback function, msg is

x: 3.170181036
y: -23.4343776703
theta: 1.70486843586
speed: 13.6477603912
id: 0
t: 18

sim.py in the sim.py statecallback function, msg is

x: 3.24478578568
y: -23.2160015106
theta: 1.56794631481
speed: 13.6706619263
id: 0
t: 19

222 self.state_dicts[msg.id][msg.t] is (3.244785785675049, -23.216001510620117, 1.5679463148117065, 13.670661926269531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: -3.55318212509
y: 23.1992397308
theta: 4.67700767517
speed: 14.2545690536
id: 1
t: 19
xxx after update is x: -3.08438539505
y: 22.7752056122
theta: 4.70722818375
speed: 13.8717498779
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: -3.08438539505
y: 22.7752056122
theta: 4.70722818375
speed: 13.8717498779
id: 1
t: 20
xxx after update is x: -3.29538297653
y: 21.7247390747
t_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: 3.08879733086
y: -22.0435333252
theta: 1.69639062881
speed: 13.0972566605
id: 0
t: 21
xxx after update is x: 3.36510324478
y: -21.583108902
theta: 1.41947829723
speed: 13.2061023712
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: 3.36510324478
y: -21.583108902
theta: 1.41947829723
speed: 13.2061023712
id: 0
t: 22
xxx after update is x: 3.34046840668
y: -20.898765564
theta: 1.48178803921
speed: 12.7583560944
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: 3.34046840668
y: -20.898765564
theta: 1.48178803921
speed: 12.7583560944
id: 0
t: 23
xxx after update is x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24
current clock is 1.06666666667
!!!!after check statue the self.tag is [1.0666666666666667, 0]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24
current clock is 1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
 self.man_init:
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24
xxx after update is x: 4.00448942184
y: -19.423576355
theta: 1.72337317467
speed: 12.1567354202
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py intended_course
straight
membership is [1.0666666666666667, True, []]
1.06666666667
True

maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.06666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.06666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
Empty
self.agents_to_ask is []
message is :GET,0,1.06666666667,(2.595179796218872, -20.087120056152344, 1.7799392938613892),12,1,1.06666666667,0,straight
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is emheta: 4.85973644257
speed: 14.1137475967
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: -3.29538297653
y: 21.7247390747
theta: 4.85973644257
speed: 14.1137475967
id: 1
t: 21
xxx after update is x: -3.1835026741
y: 22.000246048
theta: 4.81256151199
speed: 13.7794647217
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: -3.1835026741
y: 22.000246048
theta: 4.81256151199
speed: 13.7794647217
id: 1
t: 22
xxx after update is x: -2.91602325439
y: 20.7336101532
theta: 4.74474287033
speed: 13.7723503113
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3991423189532096, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.13318037987
y: -22.3924503326
theta: 1.4882004261
speed: 13.3290863037
id: 0
t: 20

sim.py in the sim.py statecallback function, msg is

x: 3.08879733086
y: -22.0435333252
theta: 1.69639062881
speed: 13.0972566605
id: 0
t: 21

sim.py in the sim.py statecallback function, msg is

x: 3.36510324478
y: -21.583108902
theta: 1.41947829723
speed: 13.2061023712
id: 0
t: 22

sim.py in the sim.py statecallback function, msg is

x: 3.34046840668
y: -20.898765564
theta: 1.48178803921
speed: 12.7583560944
id: 0
t: 23

222 self.state_dicts[msg.id][msg.t] is (3.340468406677246, -20.898765563964844, 1.4817880392074585, 12.758356094360352)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -2.91602325439
y: 20.7336101532
theta: 4.74474287033
speed: 13.7723503113
id: 1
t: 23
xxx after update is x: -3.00176596642
y: 20.3196258545
theta: 4.92718791962
speed: 13.8392190933
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: -3.00176596642
y: 20.3196258545
theta: 4.92718791962
speed: 13.8392190933
id: 1
t: 24
xxx after update is x: -3.61132121086
y: 19.3571586609
theta: 4.45852470398
speed: 13.7692985535
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.61132121086
y: 19.3571586609
theta: 4.45852470398
speed: 13.7692985535
id: 1
t: 25
current clock is 1.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -3.61132121086
y: 19.3571586609
theta: 4.45852470398
speed: 13.7692985535
id: 1
t: 25
xxx after update is x: -3.48439407349
y: 19.2569046021
theta: 4.61629343033
speed: 13.7810201645
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx befpty, so return 1, why 1. what 1 means, is that car 1
!!!!change state to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [5.666666666666667, 'straight']}
Doing maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 4.00448942184
y: -19.423576355
theta: 1.72337317467
speed: 12.1567354202
id: 0
t: 25
xxx after update is x: 2.98415207863
y: -18.9547252655
theta: 1.54799354076
speed: 11.4492120743
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: 2.98415207863
y: -18.9547252655
theta: 1.54799354076
speed: 11.4492120743
id: 0
t: 26
xxx after update is x: 3.43068218231
y: -18.486415863
theta: 1.67709815502
speed: 12.3204679489
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: 3.43068218231
y: -18.486415863
theta: 1.67709815502
speed: 12.3204679489
id: 0
t: 27
xxx after update is x: 3.33076882362
y: -18.2132129669
theta: 1.51734828949
speed: 12.6173143387
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6326443013516393, 0.5380961335688159]
sim.py in the sim.py statecallback function, msg is

x: -3.29538297653
y: 21.7247390747
theta: 4.85973644257
speed: 14.1137475967
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.1835026741
y: 22.000246048
theta: 4.81256151199
speed: 13.7794647217
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -2.91602325439
y: 20.7336101532
theta: 4.74474287033
speed: 13.7723503113
id: 1
t: 23

sim.py in the sim.py statecallback function, msg is

x: -3.00176596642
y: 20.3196258545
theta: 4.92718791962
speed: 13.8392190933
id: 1
t: 24

sim.py in the sim.py statecallback function, msg is

x: -3.61132121086
y: 19.3571586609
theta: 4.45852470398
speed: 13.7692985535
id: 1
t: 25

sim.py in the sim.py statecallback function, msg is

x: -3.48439407349
y: 19.2569046021
theta: 4.61629343033
speed: 13.7810201645
id: 1
t: 26

sim.py in the sim.py statecallback function, msg is

x: -3.11098742485
y: 18.3628044128
theta: 4.50480508804
speed: 13.7592506409
id: 1
t: 27

sim.py in the sim.py statecallback function, msg is

x: -3.42791032791
y: 17.7982330322
theta: 4.68195438385
speed: 13.4440383911
id: 1
t: 28

222 self.state_dicts[msg.id][msg.t] is (-3.427910327911377, 17.798233032226562, 4.681954383850098, 13.444038391113281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: 3.33076882362
y: -18.2132129669
theta: 1.51734828949
speed: 12.6173143387
id: 0
t: 28
xxx after update is x: 3.62243199348
y: -17.9228477478
theta: 1.80759549141
speed: 12.8099060059
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: 3.62243199348
y: -17.9228477478
theta: 1.80759549141
speed: 12.8099060059
id: 0
t: 29
xxx after update is x: 3.00979018211
y: -17.2394676208
theta: 1.5381155014
speed: 13.1826610565
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the updaore update is x: -3.48439407349
y: 19.2569046021
theta: 4.61629343033
speed: 13.7810201645
id: 1
t: 26
xxx after update is x: -3.11098742485
y: 18.3628044128
theta: 4.50480508804
speed: 13.7592506409
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11098742485
y: 18.3628044128
theta: 4.50480508804
speed: 13.7592506409
id: 1
t: 27
xxx after update is x: -3.42791032791
y: 17.7982330322
theta: 4.68195438385
speed: 13.4440383911
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:28
aaaaaa
aaaaaabbbbb
risk is [0.3267198828368905, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.59517979622
y: -20.0871200562
theta: 1.77993929386
speed: 12.3869228363
id: 0
t: 24

sim.py in the sim.py statecallback function, msg is

x: 4.00448942184
y: -19.423576355
theta: 1.72337317467
speed: 12.1567354202
id: 0
t: 25

sim.py in the sim.py statecallback function, msg is

x: 2.98415207863
y: -18.9547252655
theta: 1.54799354076
speed: 11.4492120743
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.43068218231
y: -18.486415863
theta: 1.67709815502
speed: 12.3204679489
id: 0
t: 27

sim.py in the sim.py statecallback function, msg is

x: 3.33076882362
y: -18.2132129669
theta: 1.51734828949
speed: 12.6173143387
id: 0
t: 28

222 self.state_dicts[msg.id][msg.t] is (3.3307688236236572, -18.213212966918945, 1.517348289489746, 12.617314338684082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: -3.42791032791
y: 17.7982330322
theta: 4.68195438385
speed: 13.4440383911
id: 1
t: 28
xxx after update is x: -3.6574716568
y: 17.5534572601
theta: 4.64793729782
speed: 14.2536392212
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: -3.6574716568
y: 17.5534572601
theta: 4.64793729782
speed: 14.2536392212
id: 1
t: 29
xxx after update is x: -3.51071429253
y: 16.4897289276
theta: 4.53568935394
speed: 13.9164066315
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: -3.51071429253
y: 16.4897289276
theta: 4.53568935394
speed: 13.9164066315
id: 1
t: 30
xxx after update is x: -3.10841679573
y: 16.0455360413
theta: 4.5992732048
speed: 13.9910955429
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -3.10841679573
y: 16.0455360413
theta: 4.5992732048
speed: 13.9910955429
id: 1
t: 31
xxx after update is x: -3.2613093853
y: 15.1892652512
theta: 4.6791806221
speed: 13.3277988434
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.2486400633731556, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.62243199348
y: -17.9228477478
theta: 1.80759549141
speed: 12.8099060059
id: 0
t: 29

sim.py in the sim.py statecallback function, msg is

x: 3.00979018211
y: -17.2394676208
theta: 1.5381155014
speed: 13.1826610565
id: 0
t: 30

sim.py in the sim.py statecallback function, msg is

x: 2.84661221504
te function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 3.00979018211
y: -17.2394676208
theta: 1.5381155014
speed: 13.1826610565
id: 0
t: 30
xxx after update is x: 2.84661221504
y: -16.6049804688
theta: 1.59590625763
speed: 13.7042198181
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 2.84661221504
y: -16.6049804688
theta: 1.59590625763
speed: 13.7042198181
id: 0
t: 31
xxx after update is x: 3.21956086159
y: -15.2986717224
theta: 1.51887774467
speed: 13.8812942505
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.21956086159
y: -15.2986717224
theta: 1.51887774467
speed: 13.8812942505
id: 0
t: 32
current clock is 1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: 3.21956086159
y: -15.2986717224
theta: 1.51887774467
speed: 13.8812942505
id: 0
t: 32
xxx after update is x: 3.39161205292
y: -15.2651338577
theta: 1.49082326889
speed: 13.5934257507
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.08088736688186358, 0.9963180864710446]
sim.py in the sim.py statecallback function, msg is

x: -3.6574716568
y: 17.5534572601
theta: 4.64793729782
speed: 14.2536392212
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -3.51071429253
y: 16.4897289276
theta: 4.53568935394
speed: 13.9164066315
id: 1
t: 30

sim.py in the sim.py statecallback function, msg is

x: -3.10841679573
y: 16.0455360413
theta: 4.5992732048
speed: 13.9910955429
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -3.2613093853
y: 15.1892652512
theta: 4.6791806221
speed: 13.3277988434
id: 1
t: 32

sim.py in the sim.py statecallback function, msg is

x: -2.85319805145
y: 14.313170433
theta: 4.77644348145
speed: 13.3274784088
id: 1
t: 33

222 self.state_dicts[msg.id][msg.t] is (-2.8531980514526367, 14.313170433044434, 4.7764434814453125, 13.327478408813477)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.39161205292
y: -15.2651338577
theta: 1.49082326889
speed: 13.5934257507
id: 0
t: 33
xxx after update is x: 3.58169674873
y: -14.771525383
theta: 1.58063650131
speed: 13.7077093124
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:34
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: 3.58169674873
y: -14.771525383
theta: 1.58063650131
speed: 13.7077093124
id: 0
t: 34
xxx after update is x: 3.39047122002
y: -13.7381982803
theta: 1.56483733654
speed: 14.0002403259
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:3y: -16.6049804688
theta: 1.59590625763
speed: 13.7042198181
id: 0
t: 31

sim.py in the sim.py statecallback function, msg is

x: 3.21956086159
y: -15.2986717224
theta: 1.51887774467
speed: 13.8812942505
id: 0
t: 32

222 self.state_dicts[msg.id][msg.t] is (3.2195608615875244, -15.29867172241211, 1.5188777446746826, 13.881294250488281)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: -3.2613093853
y: 15.1892652512
theta: 4.6791806221
speed: 13.3277988434
id: 1
t: 32
xxx after update is x: -2.85319805145
y: 14.313170433
theta: 4.77644348145
speed: 13.3274784088
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.85319805145
y: 14.313170433
theta: 4.77644348145
speed: 13.3274784088
id: 1
t: 33
current clock is 1.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34
maneuver_negotiatir.py in the try maneuver function update -. strat
xxx before update is x: -2.85319805145
y: 14.313170433
theta: 4.77644348145
speed: 13.3274784088
id: 1
t: 33
xxx after update is x: -3.50981283188
y: 14.4810733795
theta: 4.64278697968
speed: 14.0934257507
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.028067953535722452, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.39161205292
y: -15.2651338577
theta: 1.49082326889
speed: 13.5934257507
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 3.58169674873
y: -14.771525383
theta: 1.58063650131
speed: 13.7077093124
id: 0
t: 34

222 self.state_dicts[msg.id][msg.t] is (3.5816967487335205, -14.771525382995605, 1.5806365013122559, 13.707709312438965)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -3.50981283188
y: 14.4810733795
theta: 4.64278697968
speed: 14.0934257507
id: 1
t: 34
xxx after update is x: -3.30057358742
y: 13.5457220078
theta: 4.58078956604
speed: 13.7509880066
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: -3.30057358742
y: 13.5457220078
theta: 4.58078956604
speed: 13.7509880066
id: 1
t: 35
xxx after update is x: -3.38137769699
y: 12.3532276154
theta: 4.62020683289
speed: 14.0181818008
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -3.38137769699
y: 12.3532276154
theta: 4.62020683289
speed: 14.0181818008
id: 1
t: 36
xxx after update is x: -2.93387913704
y: 11.984128952
theta: 4.77385520935
speed: 13.7133159637
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0013700166641244667, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.39047122002
y: -13.76xxx before update is x: 3.39047122002
y: -13.7381982803
theta: 1.56483733654
speed: 14.0002403259
id: 0
t: 35
xxx after update is x: 2.93344140053
y: -13.790854454
theta: 1.53001689911
speed: 13.7145366669
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [1.9184773150572906e-21, 0.949225024781257]
sim.py in the sim.py statecallback function, msg is

x: -3.50981283188
y: 14.4810733795
theta: 4.64278697968
speed: 14.0934257507
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -3.30057358742
y: 13.5457220078
theta: 4.58078956604
speed: 13.7509880066
id: 1
t: 35

sim.py in the sim.py statecallback function, msg is

x: -3.38137769699
y: 12.3532276154
theta: 4.62020683289
speed: 14.0181818008
id: 1
t: 36

222 self.state_dicts[msg.id][msg.t] is (-3.381377696990967, 12.353227615356445, 4.620206832885742, 14.018181800842285)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 2.93344140053
y: -13.790854454
theta: 1.53001689911
speed: 13.7145366669
id: 0
t: 36
xxx after update is x: 3.39397788048
y: -13.2668714523
theta: 1.54410052299
speed: 13.5450773239
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: 3.39397788048
y: -13.2668714523
theta: 1.54410052299
speed: 13.5450773239
id: 0
t: 37
xxx after update is x: 2.54338026047
y: -12.2646913528
theta: 1.55320775509
speed: 13.7505474091
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 2.54338026047
y: -12.2646913528
theta: 1.55320775509
speed: 13.7505474091
id: 0
t: 38
xxx after update is x: 3.13059782982
y: -11.3893127441
theta: 1.52985060215
speed: 14.0786752701
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.13059782982
y: -11.3893127441
theta: 1.52985060215
speed: 14.0786752701
id: 0
t: 39
current clock is 1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: 3.13059782982
y: -11.3893127441
theta: 1.52985060215
speed: 14.0786752701
id: 0
t: 39
xxx after update is x: 3.49118423462
y: -11.0489912033
theta: 1.80092513561
speed: 13.8645343781
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.2080848057227725e-05, 0.9733008428160425]
sim.py in the sim.py statecallback function, msg is

x: -2.93387913704
y: 11.984128952
theta: 4.77385520935
speed: 13.7133159637
id: 1
t: 37

sim.py in the sim.py statecallback function, msg is

x: -2.77594780922
y: 11.8366165161
theta: 4.87171411514
speed: 14.0102481842
id: 1
t: 38

sim.py in the sim.py statecallback function, msg is

x: -3.22077202797
y: 10.9395933151
theta: 4.73122262955
speed: 14.3355178833
id: 1
t: 39

sim.py in the sim.py statecallback function, msg is

x: -3.19677186012
y: 10.4147758484
theta: 4.82507133484
speed: 13.8498096466
id: 1
t: 40

222 self381982803
theta: 1.56483733654
speed: 14.0002403259
id: 0
t: 35

sim.py in the sim.py statecallback function, msg is

x: 2.93344140053
y: -13.790854454
theta: 1.53001689911
speed: 13.7145366669
id: 0
t: 36

sim.py in the sim.py statecallback function, msg is

x: 3.39397788048
y: -13.2668714523
theta: 1.54410052299
speed: 13.5450773239
id: 0
t: 37

222 self.state_dicts[msg.id][msg.t] is (3.3939778804779053, -13.266871452331543, 1.5441005229949951, 13.545077323913574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: -2.93387913704
y: 11.984128952
theta: 4.77385520935
speed: 13.7133159637
id: 1
t: 37
xxx after update is x: -2.77594780922
y: 11.8366165161
theta: 4.87171411514
speed: 14.0102481842
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -2.77594780922
y: 11.8366165161
theta: 4.87171411514
speed: 14.0102481842
id: 1
t: 38
xxx after update is x: -3.22077202797
y: 10.9395933151
theta: 4.73122262955
speed: 14.3355178833
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: -3.22077202797
y: 10.9395933151
theta: 4.73122262955
speed: 14.3355178833
id: 1
t: 39
xxx after update is x: -3.19677186012
y: 10.4147758484
theta: 4.82507133484
speed: 13.8498096466
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: -3.19677186012
y: 10.4147758484
theta: 4.82507133484
speed: 13.8498096466
id: 1
t: 40
xxx after update is x: -3.31134867668
y: 9.67810726166
theta: 4.68330097198
speed: 14.08314991
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.31134867668
y: 9.67810726166
theta: 4.68330097198
speed: 14.08314991
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.08950450075415023, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.54338026047
y: -12.2646913528
theta: 1.55320775509
speed: 13.7505474091
id: 0
t: 38

sim.py in the sim.py statecallback function, msg is

x: 3.13059782982
y: -11.3893127441
theta: 1.52985060215
speed: 14.0786752701
id: 0
t: 39

sim.py in the sim.py statecallback function, msg is

x: 3.49118423462
y: -11.0489912033
theta: 1.80092513561
speed: 13.8645343781
id: 0
t: 40

sim.py in the sim.py statecallback function, msg is

x: 3.56334376335
y: -10.2850074768
theta: 1.5140298605
speed: 13.330663681
id: 0
t: 41

222 self.state_dicts[msg.id][msg.t] is (3.5633437633514404, -10.28500747680664, 1.514029860496521, 13.330663681030273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42
xxx.state_dicts[msg.id][msg.t] is (-3.1967718601226807, 10.414775848388672, 4.825071334838867, 13.849809646606445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 3.49118423462
y: -11.0489912033
theta: 1.80092513561
speed: 13.8645343781
id: 0
t: 40
xxx after update is x: 3.56334376335
y: -10.2850074768
theta: 1.5140298605
speed: 13.330663681
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: 3.56334376335
y: -10.2850074768
theta: 1.5140298605
speed: 13.330663681
id: 0
t: 41
xxx after update is x: 3.11074304581
y: -10.1882505417
theta: 1.55174124241
speed: 13.8860216141
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 3.11074304581
y: -10.1882505417
theta: 1.55174124241
speed: 13.8860216141
id: 0
t: 42
xxx after update is x: 2.94289922714
y: -8.9716386795
theta: 1.61492180824
speed: 14.4134902954
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.790104652318878e-12, 0.9986367450965308]
sim.py in the sim.py statecallback function, msg is

x: -3.31134867668
y: 9.67810726166
theta: 4.68330097198
speed: 14.08314991
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -2.98502159119
y: 9.13664913177
theta: 4.82022953033
speed: 13.9779071808
id: 1
t: 42

sim.py in the sim.py statecallback function, msg is

x: -3.05905413628
y: 8.60715389252
theta: 4.5690202713
speed: 13.7208442688
id: 1
t: 43

222 self.state_dicts[msg.id][msg.t] is (-3.059054136276245, 8.60715389251709, 4.5690202713012695, 13.720844268798828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 2.94289922714
y: -8.9716386795
theta: 1.61492180824
speed: 14.4134902954
id: 0
t: 43
xxx after update is x: 3.68655896187
y: -8.06339263916
theta: 1.52284276485
speed: 13.9277973175
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 3.68655896187
y: -8.06339263916
theta: 1.52284276485
speed: 13.9277973175
id: 0
t: 44
xxx after update is x: 3.54090285301
y: -7.33454322815
theta: 1.74789512157
speed: 13.6668624878
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: 3.54090285301
y: -7.33454322815
theta: 1.74789512157
speed: 13.6668624878
id: 0
t: 45
xxx after update is x: 2.87430739403
y: -7.22616243362
theta: 1.50655639172
speed: 13.9503145218
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.00026908300893267387, 0.9999650320741622]
sim.py in the sim.py statecallback function, msg is

x: -3.0530962944
y: 7.74203014374
theta: 4.63105916977
speed: 14.1648731232
id: 1
t: 44

sim.py in the sim.py statecallback functi before update is x: -3.31134867668
y: 9.67810726166
theta: 4.68330097198
speed: 14.08314991
id: 1
t: 41
xxx after update is x: -2.98502159119
y: 9.13664913177
theta: 4.82022953033
speed: 13.9779071808
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -2.98502159119
y: 9.13664913177
theta: 4.82022953033
speed: 13.9779071808
id: 1
t: 42
xxx after update is x: -3.05905413628
y: 8.60715389252
theta: 4.5690202713
speed: 13.7208442688
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: -3.05905413628
y: 8.60715389252
theta: 4.5690202713
speed: 13.7208442688
id: 1
t: 43
xxx after update is x: -3.0530962944
y: 7.74203014374
theta: 4.63105916977
speed: 14.1648731232
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0631052624147671, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.11074304581
y: -10.1882505417
theta: 1.55174124241
speed: 13.8860216141
id: 0
t: 42

sim.py in the sim.py statecallback function, msg is

x: 2.94289922714
y: -8.9716386795
theta: 1.61492180824
speed: 14.4134902954
id: 0
t: 43

sim.py in the sim.py statecallback function, msg is

x: 3.68655896187
y: -8.06339263916
theta: 1.52284276485
speed: 13.9277973175
id: 0
t: 44

222 self.state_dicts[msg.id][msg.t] is (3.686558961868286, -8.063392639160156, 1.5228427648544312, 13.927797317504883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -3.0530962944
y: 7.74203014374
theta: 4.63105916977
speed: 14.1648731232
id: 1
t: 44
xxx after update is x: -3.93479537964
y: 7.21541118622
theta: 4.65743350983
speed: 14.0639429092
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: -3.93479537964
y: 7.21541118622
theta: 4.65743350983
speed: 14.0639429092
id: 1
t: 45
xxx after update is x: -2.72164559364
y: 6.42701530457
theta: 4.73557901382
speed: 13.9543571472
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.06538174967069464, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.54090285301
y: -7.33454322815
theta: 1.74789512157
speed: 13.6668624878
id: 0
t: 45

sim.py in the sim.py statecallback function, msg is

x: 2.87430739403
y: -7.22616243362
theta: 1.50655639172
speed: 13.9503145218
id: 0
t: 46

222 self.state_dicts[msg.id][msg.t] is (2.87430739402771, -7.226162433624268, 1.5065563917160034, 13.95031452178955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: -2.72164559364
y: 6.42701530457
theta: 4.73557901382
speed: 13.9543571472
id: 1
t: 46
xxx after update is x: -3.20673179626
y: 5.5349445343
theta: 4.70280599594
speed: 13.9734106064
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.20673179626
y: 5.5349445343
theta: 4.70280599594
speed: 13.9734106064
id: 1
t: 47
xxx after update is x: -2.74803423882
y: 5.11593866348
theta: 4.74122571945
speed: 13.8624887466
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: -2.74803423882
y: 5.11593866348
theta: 4.74122571945
speed: 13.8624887466
id: 1
t: 48
xxx after update is x: -3.3012406826
y: 4.63613939285
theta: 4.83517599106
speed: 14.0151720047
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3012406826
y: 4.63613939285
theta: 4.83517599106
speed: 14.0151720047
id: 1
t: 49
current clock is 2.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: -3.3012406826
y: 4.63613939285
theta: 4.83517599106
speed: 14.0151720047
id: 1
t: 49
xxx after update is x: -2.81665897369
y: 4.08923387527
theta: 4.49308490753
speed: 14.1395702362
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.011776803412265207, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.98738956451
y: -7.08391141891
theta: 1.57544112206
speed: 14.1047182083
id: 0
t: 47

sim.py in the sim.py statecallback function, msg is

x: 2.99663734436
y: -6.20205211639
theta: 1.65912103653
speed: 13.4972019196
id: 0
t: 48

sim.py in the sim.py statecallback function, msg is

x: 4.10152816772
y: -5.1188044548
theta: 1.54532968998
speed: 13.8464078903
id: 0
t: 49

sim.py in the sim.py statecallback function, msg is

x: 3.2858569622
y: -4.03184175491
theta: 1.50373589993
speed: 13.7232189178
id: 0
t: 50

222 self.state_dicts[msg.id][msg.t] is (3.2858569622039795, -4.03184175491333, 1.503735899925232, 13.72321891784668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: -2.81665897369
y: 4.08923387527
theta: 4.49308490753
speed: 14.1395702362
id: 1
t: 50
xxx after update is x: -2.78699946404
y: 3.24582028389
theta: 4.8161854744
speed: 14.0844202042
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: -2.78699946404
y: 3.24582028389
theta: 4.8161854744
speed: 14.0844202042
id: 1
t: 51
xxx after update is x: -3.64613938332
y: 2.87167334557
theta: 4.84690332413
speed: 13.7921924591
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: -3.64613938332
y: 2.87167334557
theta: 4.84690332413
speed: 13.7921924591
id: 1
t: 52
xxx after update is x: -3.59343934059
y: 2.15378451347
theta: 4.8453950882
speed: 13.6374397278
id: 1
t: 53
maneuver_negoon, msg is

x: -3.93479537964
y: 7.21541118622
theta: 4.65743350983
speed: 14.0639429092
id: 1
t: 45

sim.py in the sim.py statecallback function, msg is

x: -2.72164559364
y: 6.42701530457
theta: 4.73557901382
speed: 13.9543571472
id: 1
t: 46

222 self.state_dicts[msg.id][msg.t] is (-2.7216455936431885, 6.42701530456543, 4.735579013824463, 13.954357147216797)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: 2.87430739403
y: -7.22616243362
theta: 1.50655639172
speed: 13.9503145218
id: 0
t: 46
xxx after update is x: 2.98738956451
y: -7.08391141891
theta: 1.57544112206
speed: 14.1047182083
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.98738956451
y: -7.08391141891
theta: 1.57544112206
speed: 14.1047182083
id: 0
t: 47
current clock is 2.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.98738956451
y: -7.08391141891
theta: 1.57544112206
speed: 14.1047182083
id: 0
t: 47
xxx after update is x: 2.99663734436
y: -6.20205211639
theta: 1.65912103653
speed: 13.4972019196
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: 2.99663734436
y: -6.20205211639
theta: 1.65912103653
speed: 13.4972019196
id: 0
t: 48
xxx after update is x: 4.10152816772
y: -5.1188044548
theta: 1.54532968998
speed: 13.8464078903
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: 4.10152816772
y: -5.1188044548
theta: 1.54532968998
speed: 13.8464078903
id: 0
t: 49
xxx after update is x: 3.2858569622
y: -4.03184175491
theta: 1.50373589993
speed: 13.7232189178
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: 3.2858569622
y: -4.03184175491
theta: 1.50373589993
speed: 13.7232189178
id: 0
t: 50
xxx after update is x: 3.11298561096
y: -4.25339889526
theta: 1.59023487568
speed: 14.0562486649
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: 3.11298561096
y: -4.25339889526
theta: 1.59023487568
speed: 14.0562486649
id: 0
t: 51
xxx after update is x: 3.26831841469
y: -3.51409339905
theta: 1.62016510963
speed: 14.0029096603
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: 3.26831841469
y: -3.51409339905
theta: 1.62016510963
speed: 14.0029096603
id: 0
t: 52
xxx after update is x: 3.16996836662
y: -2.9870057106
theta: 1.59610235691
speed: 13.5620174408
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [6.19978015444184e-53, 0.9990744416939735]
sim.py in the sim.py statecallback function, msg is

x: -3.20673179626
y: 5.5349445343
theta: 4.70280599594
speed: 13.9734106064
id: 1
t: 47

sim.py in the sim.py statecallback function, msg is

x: -2.74803423882
y: 5.11593866348
theta: 4.74122571945
speed: 13.8624887466
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.3012406826
y: 4.63613939285
theta: 4.83517599106
speed: 14.0151720047
id: 1
t: 49

sim.py in the sim.py statecallback function, msg is

x: -2.81665897369
y: 4.08923387527
theta: 4.49308490753
speed: 14.1395702362
id: 1
t: 50

sim.py in the sim.py statecallback function, msg is

x: -2.78699946404
y: 3.24582028389
theta: 4.8161854744
speed: 14.0844202042
id: 1
t: 51

sim.py in the sim.py statecallback function, msg is

x: -3.64613938332
y: 2.87167334557
theta: 4.84690332413
speed: 13.7921924591
id: 1
t: 52

sim.py in the sim.py statecallback function, msg is

x: -3.59343934059
y: 2.15378451347
theta: 4.8453950882
speed: 13.6374397278
id: 1
t: 53

222 self.state_dicts[msg.id][msg.t] is (-3.5934393405914307, 2.1537845134735107, 4.845395088195801, 13.637439727783203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: 3.16996836662
y: -2.9870057106
theta: 1.59610235691
speed: 13.5620174408
id: 0
t: 53
xxx after update is x: 3.46650195122
y: -2.40007328987
theta: 1.5088288784
speed: 14.0912885666
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.46650195122
y: -2.40007328987
theta: 1.5088288784
speed: 14.0912885666
id: 0
t: 54
current clock is 2.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: 3.46650195122
y: -2.40007328987
theta: 1.5088288784
speed: 14.0912885666
id: 0
t: 54
xxx after update is x: 3.08272385597
y: -1.6667124033
theta: 1.64457178116
speed: 13.9652271271
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: 3.08272385597
y: -1.6667124033
theta: 1.64457178116
speed: 13.9652271271
id: 0
t: 55
xxx after update is x: 3.07738637924
y: -0.810437083244
theta: 1.47212398052
speed: 13.9975786209
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: 3.07738637924
y: -0.810437083244
theta: 1.47212398052
speed: 13.9975786209
id: 0
t: 56
xxx after update is x: 3.41756677628
y: -0.472599387169
theta: 1.68357050419
speed: 13.7434444427
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_itiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: -3.59343934059
y: 2.15378451347
theta: 4.8453950882
speed: 13.6374397278
id: 1
t: 53
xxx after update is x: -3.18235874176
y: 1.38376426697
theta: 4.80713748932
speed: 13.9062099457
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: -3.18235874176
y: 1.38376426697
theta: 4.80713748932
speed: 13.9062099457
id: 1
t: 54
xxx after update is x: -3.32171678543
y: 1.34213495255
theta: 4.75751256943
speed: 13.9201812744
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: -3.32171678543
y: 1.34213495255
theta: 4.75751256943
speed: 13.9201812744
id: 1
t: 55
xxx after update is x: -3.06048464775
y: 0.925434708595
theta: 4.66589593887
speed: 13.7087163925
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.004450355624998744, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.11298561096
y: -4.25339889526
theta: 1.59023487568
speed: 14.0562486649
id: 0
t: 51

sim.py in the sim.py statecallback function, msg is

x: 3.26831841469
y: -3.51409339905
theta: 1.62016510963
speed: 14.0029096603
id: 0
t: 52

sim.py in the sim.py statecallback function, msg is

x: 3.16996836662
y: -2.9870057106
theta: 1.59610235691
speed: 13.5620174408
id: 0
t: 53

sim.py in the sim.py statecallback function, msg is

x: 3.46650195122
y: -2.40007328987
theta: 1.5088288784
speed: 14.0912885666
id: 0
t: 54

sim.py in the sim.py statecallback function, msg is

x: 3.08272385597
y: -1.6667124033
theta: 1.64457178116
speed: 13.9652271271
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.07738637924
y: -0.810437083244
theta: 1.47212398052
speed: 13.9975786209
id: 0
t: 56

222 self.state_dicts[msg.id][msg.t] is (3.0773863792419434, -0.8104370832443237, 1.4721239805221558, 13.997578620910645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.06048464775
y: 0.925434708595
theta: 4.66589593887
speed: 13.7087163925
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -3.06048464775
y: 0.925434708595
theta: 4.66589593887
speed: 13.7087163925
id: 1
t: 56
xxx after update is x: -3.6186876297
y: -0.0701386407018
theta: 4.59714078903
speed: 13.6815748215
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.6186876297
y: -0.0701386407018
theta: 4.59714078903
speed: 13.6815748215
id: 1
t: 57
xxx after update is x: -3.55087351799
y: -0.701710224152
theta: 4.76831150055
speed: 13.5657529831
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spinit:
xxx before update is x: 3.41756677628
y: -0.472599387169
theta: 1.68357050419
speed: 13.7434444427
id: 0
t: 57
xxx after update is x: 3.16354346275
y: 0.0381783172488
theta: 1.62532246113
speed: 14.019068718
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:58
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: 3.16354346275
y: 0.0381783172488
theta: 1.62532246113
speed: 14.019068718
id: 0
t: 58
xxx after update is x: 2.41525602341
y: 0.739189326763
theta: 1.47252678871
speed: 13.6833543777
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: 2.41525602341
y: 0.739189326763
theta: 1.47252678871
speed: 13.6833543777
id: 0
t: 59
xxx after update is x: 2.67123961449
y: 1.42861318588
theta: 1.58030104637
speed: 14.2346363068
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [4.838219408596354e-199, 0.9999999999999999]
sim.py in the sim.py statecallback function, msg is

x: -3.18235874176
y: 1.38376426697
theta: 4.80713748932
speed: 13.9062099457
id: 1
t: 54

sim.py in the sim.py statecallback function, msg is

x: -3.32171678543
y: 1.34213495255
theta: 4.75751256943
speed: 13.9201812744
id: 1
t: 55

sim.py in the sim.py statecallback function, msg is

x: -3.06048464775
y: 0.925434708595
theta: 4.66589593887
speed: 13.7087163925
id: 1
t: 56

sim.py in the sim.py statecallback function, msg is

x: -3.6186876297
y: -0.0701386407018
theta: 4.59714078903
speed: 13.6815748215
id: 1
t: 57

sim.py in the sim.py statecallback function, msg is

x: -3.55087351799
y: -0.701710224152
theta: 4.76831150055
speed: 13.5657529831
id: 1
t: 58

sim.py in the sim.py statecallback function, msg is

x: -3.12733030319
y: -1.29574787617
theta: 4.70353603363
speed: 14.0067024231
id: 1
t: 59

sim.py in the sim.py statecallback function, msg is

x: -3.49341964722
y: -2.09737324715
theta: 4.80471515656
speed: 14.0857105255
id: 1
t: 60

222 self.state_dicts[msg.id][msg.t] is (-3.493419647216797, -2.0973732471466064, 4.804715156555176, 14.085710525512695)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: 2.67123961449
y: 1.42861318588
theta: 1.58030104637
speed: 14.2346363068
id: 0
t: 60
xxx after update is x: 3.19184231758
y: 1.46024477482
theta: 1.61908423901
speed: 13.8147449493
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: 3.19184231758
y: 1.46024477482
theta: 1.61908423901
speed: 13.8147449493
id: 0
t: 61
xxx after update is x: 3.18992424011
y: 2.29394507408
theta: 1.5095102787
speed: 13.5808830261
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.993987556677362]
sim.py in the sim.py statecallback function, msg is

x: -3.25338673592
y: -2.99783873558
theta: 4.81838226318
speed: 13.914680481
id: 1
t: 61

sim.py in the sim.py statecallback function, msg is

x: -3.56358361244
y: -3.4527785778
theta: 4.63647174835
speed: 13.8806962967
id: 1
t: 62

222 self.state_dicts[msg.id][msg.t] is (-3.5635836124420166, -3.4527785778045654, 4.636471748352051, 13.880696296691895)
if we have all measurements for a certain time-stn function, finish the n times spin:58
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: -3.55087351799
y: -0.701710224152
theta: 4.76831150055
speed: 13.5657529831
id: 1
t: 58
xxx after update is x: -3.12733030319
y: -1.29574787617
theta: 4.70353603363
speed: 14.0067024231
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12733030319
y: -1.29574787617
theta: 4.70353603363
speed: 14.0067024231
id: 1
t: 59
xxx after update is x: -3.49341964722
y: -2.09737324715
theta: 4.80471515656
speed: 14.0857105255
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:60
aaaaaa
aaaaaabbbbb
risk is [1.5862878524311718e-72, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.41756677628
y: -0.472599387169
theta: 1.68357050419
speed: 13.7434444427
id: 0
t: 57

sim.py in the sim.py statecallback function, msg is

x: 3.16354346275
y: 0.0381783172488
theta: 1.62532246113
speed: 14.019068718
id: 0
t: 58

sim.py in the sim.py statecallback function, msg is

x: 2.41525602341
y: 0.739189326763
theta: 1.47252678871
speed: 13.6833543777
id: 0
t: 59

sim.py in the sim.py statecallback function, msg is

x: 2.67123961449
y: 1.42861318588
theta: 1.58030104637
speed: 14.2346363068
id: 0
t: 60

222 self.state_dicts[msg.id][msg.t] is (2.6712396144866943, 1.4286131858825684, 1.58030104637146, 14.234636306762695)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: -3.49341964722
y: -2.09737324715
theta: 4.80471515656
speed: 14.0857105255
id: 1
t: 60
xxx after update is x: -3.25338673592
y: -2.99783873558
theta: 4.81838226318
speed: 13.914680481
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: -3.25338673592
y: -2.99783873558
theta: 4.81838226318
speed: 13.914680481
id: 1
t: 61
xxx after update is x: -3.56358361244
y: -3.4527785778
theta: 4.63647174835
speed: 13.8806962967
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: -3.56358361244
y: -3.4527785778
theta: 4.63647174835
speed: 13.8806962967
id: 1
t: 62
xxx after update is x: -3.5409822464
y: -3.68881654739
theta: 4.78193998337
speed: 14.0207395554
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.19184231758
y: 1.46024477482
theta: 1.61908423901
speed: 13.8147449493
id: 0
t: 61

sim.py in the sim.py statecallback function, msg is

x: 3.18992424011
y: 2.29394507408
theta: 1.5095102787
speed: 13.5808830261
id: 0
t: 62

sim.py in the sim.py statecallback function, msg is

x: 2.88690876961
y: 3.5778131485
theta: 1.48089838028
speed: 13.7493305206
id: 0
t: 63

222 self.state_dicts[msg.id][msg.t] is (2.886908769607544, 3.577813148498535, 1.480898380279541, 13.749330520629883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update functioamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.18992424011
y: 2.29394507408
theta: 1.5095102787
speed: 13.5808830261
id: 0
t: 62
current clock is 2.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: 3.18992424011
y: 2.29394507408
theta: 1.5095102787
speed: 13.5808830261
id: 0
t: 62
xxx after update is x: 2.88690876961
y: 3.5778131485
theta: 1.48089838028
speed: 13.7493305206
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: 2.88690876961
y: 3.5778131485
theta: 1.48089838028
speed: 13.7493305206
id: 0
t: 63
xxx after update is x: 3.44647455215
y: 4.12033128738
theta: 1.52025616169
speed: 13.9751558304
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: 3.44647455215
y: 4.12033128738
theta: 1.52025616169
speed: 13.9751558304
id: 0
t: 64
xxx after update is x: 3.40328669548
y: 4.55942487717
theta: 1.63880515099
speed: 14.0638065338
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: 3.40328669548
y: 4.55942487717
theta: 1.63880515099
speed: 14.0638065338
id: 0
t: 65
xxx after update is x: 3.63481068611
y: 5.09037637711
theta: 1.54681348801
speed: 13.5914316177
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: 3.63481068611
y: 5.09037637711
theta: 1.54681348801
speed: 13.5914316177
id: 0
t: 66
xxx after update is x: 3.16843986511
y: 5.45976877213
theta: 1.54887926579
speed: 14.0208358765
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.9922822445561258]
sim.py in the sim.py statecallback function, msg is

x: -3.5409822464
y: -3.68881654739
theta: 4.78193998337
speed: 14.0207395554
id: 1
t: 63

sim.py in the sim.py statecallback function, msg is

x: -3.36619281769
y: -4.17467546463
theta: 4.67136335373
speed: 14.0371704102
id: 1
t: 64

sim.py in the sim.py statecallback function, msg is

x: -3.16582012177
y: -5.16557073593
theta: 4.72767162323
speed: 13.8367900848
id: 1
t: 65

sim.py in the sim.py statecallback function, msg is

x: -3.04347467422
y: -5.67714929581
theta: 4.62396860123
speed: 14.0923118591
id: 1
t: 66

sim.py in the sim.py statecallback function, msg is

x: -3.36143183708
y: -6.36286973953
theta: 4.7107000351
speed: 13.8802146912
id: 1
t: 67

222 self.state_dicts[msg.id][msg.t] is (-3.361431837081909, -6.362869739532471, 4.710700035095215, 13.88021469116211)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.n 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: -3.5409822464
y: -3.68881654739
theta: 4.78193998337
speed: 14.0207395554
id: 1
t: 63
xxx after update is x: -3.36619281769
y: -4.17467546463
theta: 4.67136335373
speed: 14.0371704102
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: -3.36619281769
y: -4.17467546463
theta: 4.67136335373
speed: 14.0371704102
id: 1
t: 64
xxx after update is x: -3.16582012177
y: -5.16557073593
theta: 4.72767162323
speed: 13.8367900848
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.16582012177
y: -5.16557073593
theta: 4.72767162323
speed: 13.8367900848
id: 1
t: 65
current clock is 2.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: -3.16582012177
y: -5.16557073593
theta: 4.72767162323
speed: 13.8367900848
id: 1
t: 65
xxx after update is x: -3.04347467422
y: -5.67714929581
theta: 4.62396860123
speed: 14.0923118591
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: -3.04347467422
y: -5.67714929581
theta: 4.62396860123
speed: 14.0923118591
id: 1
t: 66
xxx after update is x: -3.36143183708
y: -6.36286973953
theta: 4.7107000351
speed: 13.8802146912
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: -3.36143183708
y: -6.36286973953
theta: 4.7107000351
speed: 13.8802146912
id: 1
t: 67
xxx after update is x: -2.92316174507
y: -6.63320732117
theta: 4.7970867157
speed: 13.7639713287
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.44647455215
y: 4.12033128738
theta: 1.52025616169
speed: 13.9751558304
id: 0
t: 64

sim.py in the sim.py statecallback function, msg is

x: 3.40328669548
y: 4.55942487717
theta: 1.63880515099
speed: 14.0638065338
id: 0
t: 65

sim.py in the sim.py statecallback function, msg is

x: 3.63481068611
y: 5.09037637711
theta: 1.54681348801
speed: 13.5914316177
id: 0
t: 66

sim.py in the sim.py statecallback function, msg is

x: 3.16843986511
y: 5.45976877213
theta: 1.54887926579
speed: 14.0208358765
id: 0
t: 67

sim.py in the sim.py statecallback function, msg is

x: 3.46286964417
y: 7.08751249313
theta: 1.55762302876
speed: 14.1558094025
id: 0
t: 68

222 self.state_dicts[msg.id][msg.t] is (3.462869644165039, 7.087512493133545, 1.557623028755188, 14.15580940246582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: -2.92316174507
y: -6.63320732117
thetman_init:
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: 3.16843986511
y: 5.45976877213
theta: 1.54887926579
speed: 14.0208358765
id: 0
t: 67
xxx after update is x: 3.46286964417
y: 7.08751249313
theta: 1.55762302876
speed: 14.1558094025
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: 3.46286964417
y: 7.08751249313
theta: 1.55762302876
speed: 14.1558094025
id: 0
t: 68
xxx after update is x: 3.42058444023
y: 7.17859554291
theta: 1.6834294796
speed: 13.9204177856
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 1.0000000000000004]
sim.py in the sim.py statecallback function, msg is

x: -2.92316174507
y: -6.63320732117
theta: 4.7970867157
speed: 13.7639713287
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -3.63109230995
y: -7.40783834457
theta: 4.63429355621
speed: 13.9478206635
id: 1
t: 69

222 self.state_dicts[msg.id][msg.t] is (-3.6310923099517822, -7.407838344573975, 4.634293556213379, 13.947820663452148)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: 3.42058444023
y: 7.17859554291
theta: 1.6834294796
speed: 13.9204177856
id: 0
t: 69
xxx after update is x: 3.74111819267
y: 7.36188793182
theta: 1.6307605505
speed: 13.9273643494
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.74111819267
y: 7.36188793182
theta: 1.6307605505
speed: 13.9273643494
id: 0
t: 70
current clock is 3.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: 3.74111819267
y: 7.36188793182
theta: 1.6307605505
speed: 13.9273643494
id: 0
t: 70
xxx after update is x: 3.44413423538
y: 8.42937850952
theta: 1.46529245377
speed: 13.8363237381
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: 3.44413423538
y: 8.42937850952
theta: 1.46529245377
speed: 13.8363237381
id: 0
t: 71
xxx after update is x: 3.11035251617
y: 8.69130992889
theta: 1.43318545818
speed: 13.9984378815
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.53403115273
y: -8.47636604309
theta: 4.82457780838
speed: 13.8211975098
id: 1
t: 70

sim.py in the sim.py statecallback function, msg is

x: -2.8567211628
y: -8.3976688385
theta: 4.91408538818
speed: 13.5726099014
id: 1
t: 71

sim.py in the sim.py statecallback function, msg is

x: -2.85441732407
y: -9.05893802643
theta: 4.70450687408
speed: 13.7661437988
id: 1
t: 72

222 self.state_dicts[msg.id][msg.t] is (-2.854417324066162, -9.058938026428223, 4.704506874084473, 13.766143798828125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update fua: 4.7970867157
speed: 13.7639713287
id: 1
t: 68
xxx after update is x: -3.63109230995
y: -7.40783834457
theta: 4.63429355621
speed: 13.9478206635
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: -3.63109230995
y: -7.40783834457
theta: 4.63429355621
speed: 13.9478206635
id: 1
t: 69
xxx after update is x: -3.53403115273
y: -8.47636604309
theta: 4.82457780838
speed: 13.8211975098
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.42058444023
y: 7.17859554291
theta: 1.6834294796
speed: 13.9204177856
id: 0
t: 69

sim.py in the sim.py statecallback function, msg is

x: 3.74111819267
y: 7.36188793182
theta: 1.6307605505
speed: 13.9273643494
id: 0
t: 70

222 self.state_dicts[msg.id][msg.t] is (3.7411181926727295, 7.3618879318237305, 1.6307605504989624, 13.927364349365234)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: -3.53403115273
y: -8.47636604309
theta: 4.82457780838
speed: 13.8211975098
id: 1
t: 70
xxx after update is x: -2.8567211628
y: -8.3976688385
theta: 4.91408538818
speed: 13.5726099014
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: -2.8567211628
y: -8.3976688385
theta: 4.91408538818
speed: 13.5726099014
id: 1
t: 71
xxx after update is x: -2.85441732407
y: -9.05893802643
theta: 4.70450687408
speed: 13.7661437988
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.44413423538
y: 8.42937850952
theta: 1.46529245377
speed: 13.8363237381
id: 0
t: 71

sim.py in the sim.py statecallback function, msg is

x: 3.11035251617
y: 8.69130992889
theta: 1.43318545818
speed: 13.9984378815
id: 0
t: 72

222 self.state_dicts[msg.id][msg.t] is (3.1103525161743164, 8.691309928894043, 1.4331854581832886, 13.998437881469727)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: -2.85441732407
y: -9.05893802643
theta: 4.70450687408
speed: 13.7661437988
id: 1
t: 72
xxx after update is x: -3.2178106308
y: -10.2193193436
theta: 4.58906841278
speed: 13.7367343903
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.2178106308
y: -10.2193193436
theta: 4.58906841278
speed: 13.7367343903
id: 1
t: 73
current clock is 3.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: -3.2178106308
y: -10.2193193436
theta: 4.58906841278
speed: 13.7367343903
id:nction
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: 3.11035251617
y: 8.69130992889
theta: 1.43318545818
speed: 13.9984378815
id: 0
t: 72
xxx after update is x: 3.46099567413
y: 9.48248386383
theta: 1.59908938408
speed: 14.1014089584
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: 3.46099567413
y: 9.48248386383
theta: 1.59908938408
speed: 14.1014089584
id: 0
t: 73
xxx after update is x: 2.71602201462
y: 10.1566200256
theta: 1.49822723866
speed: 13.9399843216
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: 2.71602201462
y: 10.1566200256
theta: 1.49822723866
speed: 13.9399843216
id: 0
t: 74
xxx after update is x: 2.72111082077
y: 10.7301902771
theta: 1.68867611885
speed: 13.6746826172
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.2178106308
y: -10.2193193436
theta: 4.58906841278
speed: 13.7367343903
id: 1
t: 73

sim.py in the sim.py statecallback function, msg is

x: -3.02696228027
y: -10.7456903458
theta: 4.61053466797
speed: 13.7207078934
id: 1
t: 74

sim.py in the sim.py statecallback function, msg is

x: -3.50368189812
y: -11.2008180618
theta: 4.788646698
speed: 13.9273967743
id: 1
t: 75

222 self.state_dicts[msg.id][msg.t] is (-3.5036818981170654, -11.200818061828613, 4.788646697998047, 13.927396774291992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: 2.72111082077
y: 10.7301902771
theta: 1.68867611885
speed: 13.6746826172
id: 0
t: 75
xxx after update is x: 3.35539197922
y: 11.3220815659
theta: 1.55503797531
speed: 13.879611969
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: 3.35539197922
y: 11.3220815659
theta: 1.55503797531
speed: 13.879611969
id: 0
t: 76
xxx after update is x: 3.37816381454
y: 11.5822095871
theta: 1.66456508636
speed: 13.9370994568
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: 3.37816381454
y: 11.5822095871
theta: 1.66456508636
speed: 13.9370994568
id: 0
t: 77
xxx after update is x: 2.86384534836
y: 12.2557945251
theta: 1.53442680836
speed: 13.792798996
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.86384534836
y: 12.2557945251
theta: 1.53442680836
speed: 13.792798996
id: 0
t: 78
current clock is 3.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in t 1
t: 73
xxx after update is x: -3.02696228027
y: -10.7456903458
theta: 4.61053466797
speed: 13.7207078934
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: -3.02696228027
y: -10.7456903458
theta: 4.61053466797
speed: 13.7207078934
id: 1
t: 74
xxx after update is x: -3.50368189812
y: -11.2008180618
theta: 4.788646698
speed: 13.9273967743
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.46099567413
y: 9.48248386383
theta: 1.59908938408
speed: 14.1014089584
id: 0
t: 73

sim.py in the sim.py statecallback function, msg is

x: 2.71602201462
y: 10.1566200256
theta: 1.49822723866
speed: 13.9399843216
id: 0
t: 74

sim.py in the sim.py statecallback function, msg is

x: 2.72111082077
y: 10.7301902771
theta: 1.68867611885
speed: 13.6746826172
id: 0
t: 75

222 self.state_dicts[msg.id][msg.t] is (2.7211108207702637, 10.73019027709961, 1.688676118850708, 13.6746826171875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: -3.50368189812
y: -11.2008180618
theta: 4.788646698
speed: 13.9273967743
id: 1
t: 75
xxx after update is x: -3.42736983299
y: -11.5292453766
theta: 4.69868803024
speed: 13.9501037598
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: -3.42736983299
y: -11.5292453766
theta: 4.69868803024
speed: 13.9501037598
id: 1
t: 76
xxx after update is x: -3.19604277611
y: -12.5638093948
theta: 4.82242822647
speed: 13.9010009766
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.35539197922
y: 11.3220815659
theta: 1.55503797531
speed: 13.879611969
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 3.37816381454
y: 11.5822095871
theta: 1.66456508636
speed: 13.9370994568
id: 0
t: 77

222 self.state_dicts[msg.id][msg.t] is (3.3781638145446777, 11.582209587097168, 1.664565086364746, 13.93709945678711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: -3.19604277611
y: -12.5638093948
theta: 4.82242822647
speed: 13.9010009766
id: 1
t: 77
xxx after update is x: -3.09097671509
y: -12.777554512
theta: 4.69662618637
speed: 13.5433044434
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: -3.09097671509
y: -12.777554512
theta: 4.69662618637
speed: 13.5433044434
id: 1
t: 78
xxx after update is x: -3.10918569565
y: -14.0439453125
theta: 4.50010490417
speed: 13.6959753036
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: -3.10918569565
y: -14.0439453125
theta: 4.50010490417
speed: 13.6959753036
id: 1
t: 79
xxx after update is x: -3.5945315361
y: -14.6127004623
theta: 4.66785097122
speed: 14.0565519333
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.86384534836
y: 12.2557945251
theta: 1.53442680836
speed: 13.792798996
id: 0
t: 78

sim.py in the sim.py statecallback function, msg is

x: 3.41997432709
y: 13.5945920944
theta: 1.65831828117
speed: 14.2175483704
id: 0
t: 79

sim.py in the sim.py statecallback function, msg is

x: 2.92361736298
y: 13.5806245804
theta: 1.57410466671
speed: 13.7211837769
id: 0
t: 80

222 self.state_dicts[msg.id][msg.t] is (2.923617362976074, 13.5806245803833, 1.5741046667099, 13.721183776855469)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: -3.5945315361
y: -14.6127004623
theta: 4.66785097122
speed: 14.0565519333
id: 1
t: 80
xxx after update is x: -3.39077115059
y: -15.6220359802
theta: 4.73915147781
speed: 13.8031949997
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39077115059
y: -15.6220359802
theta: 4.73915147781
speed: 13.8031949997
id: 1
t: 81
current clock is 3.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: -3.39077115059
y: -15.6220359802
theta: 4.73915147781
speed: 13.8031949997
id: 1
t: 81
xxx after update is x: -3.34026360512
y: -15.4980010986
theta: 4.6463766098
speed: 13.6266412735
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: -3.34026360512
y: -15.4980010986
theta: 4.6463766098
speed: 13.6266412735
id: 1
t: 82
xxx after update is x: -3.42600536346
y: -15.8837680817
theta: 4.56268310547
speed: 13.9540548325
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.20690774918
y: 14.4457349777
theta: 1.51712572575
speed: 13.4635267258
id: 0
t: 81

sim.py in the sim.py statecallback function, msg is

x: 3.75072979927
y: 14.8078765869
theta: 1.60367071629
speed: 13.7501220703
id: 0
t: 82

sim.py in the sim.py statecallback function, msg is

x: 3.15611672401
y: 15.8869171143
theta: 1.52907109261
speed: 14.2279281616
id: 0
t: 83

222 self.state_dicts[msg.id][msg.t] is (3.1561167240142822, 15.886917114257812, 1.5290710926055908, 14.227928161621094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: -3.42600536346
y: -15.8837680817
theta: 4.56268310547
speed: 13.9540548325
id: 1
t: 83
xxx after update is x: -3.01359343529
y: -16.4735012054
theta: 4.7167391777
speed: 13.9629268646
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from roshe sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.86384534836
y: 12.2557945251
theta: 1.53442680836
speed: 13.792798996
id: 0
t: 78
xxx after update is x: 3.41997432709
y: 13.5945920944
theta: 1.65831828117
speed: 14.2175483704
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:79
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.42736983299
y: -11.5292453766
theta: 4.69868803024
speed: 13.9501037598
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -3.19604277611
y: -12.5638093948
theta: 4.82242822647
speed: 13.9010009766
id: 1
t: 77

sim.py in the sim.py statecallback function, msg is

x: -3.09097671509
y: -12.777554512
theta: 4.69662618637
speed: 13.5433044434
id: 1
t: 78

sim.py in the sim.py statecallback function, msg is

x: -3.10918569565
y: -14.0439453125
theta: 4.50010490417
speed: 13.6959753036
id: 1
t: 79

222 self.state_dicts[msg.id][msg.t] is (-3.1091856956481934, -14.0439453125, 4.500104904174805, 13.695975303649902)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: 3.41997432709
y: 13.5945920944
theta: 1.65831828117
speed: 14.2175483704
id: 0
t: 79
xxx after update is x: 2.92361736298
y: 13.5806245804
theta: 1.57410466671
speed: 13.7211837769
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: 2.92361736298
y: 13.5806245804
theta: 1.57410466671
speed: 13.7211837769
id: 0
t: 80
xxx after update is x: 3.20690774918
y: 14.4457349777
theta: 1.51712572575
speed: 13.4635267258
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: 3.20690774918
y: 14.4457349777
theta: 1.51712572575
speed: 13.4635267258
id: 0
t: 81
xxx after update is x: 3.75072979927
y: 14.8078765869
theta: 1.60367071629
speed: 13.7501220703
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.75072979927
y: 14.8078765869
theta: 1.60367071629
speed: 13.7501220703
id: 0
t: 82
xxx after update is x: 3.15611672401
y: 15.8869171143
theta: 1.52907109261
speed: 14.2279281616
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:83
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: 3.15611672401
y: 15.8869171143
theta: 1.52907109261
speed: 14.2279281616
id: 0
t: 83
xxx after update is x: 3.4144282341
y: 16.1439113617
theta: 1.54369521141
speed: 13.9709272385
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.5945315361
y: -14.6127004623
theta: 4.66785097122
speed: 14.0565519333
id: 1
t: 80

sim.py in the sim.py statecallback function, msg is

x: -3.39077115059
y: -15.6220359802
theta: 4.73915147781
speed: 13.8031949997
id: 1
t: 81

sim.py in the sim.py statecallback function, msg is

x: -3.34026360512
y: -15.4980010986
theta: 4.6463766098
speed: 13.6266412735
id: 1
t: 82

sim.py in the sim.py statecallback function, msg is

x: -3.42600536346
y: -15.8837680817
theta: 4.56268310547
speed: 13.9540548325
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.01359343529
y: -16.4735012054
theta: 4.7167391777
speed: 13.9629268646
id: 1
t: 84

222 self.state_dicts[msg.id][msg.t] is (-3.0135934352874756, -16.473501205444336, 4.716739177703857, 13.962926864624023)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: 3.4144282341
y: 16.1439113617
theta: 1.54369521141
speed: 13.9709272385
id: 0
t: 84
xxx after update is x: 2.87599134445
y: 17.0662002563
theta: 1.5897629261
speed: 13.5923852921
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87599134445
y: 17.0662002563
theta: 1.5897629261
speed: 13.5923852921
id: 0
t: 85
current clock is 3.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.87599134445
y: 17.0662002563
theta: 1.5897629261
speed: 13.5923852921
id: 0
t: 85
xxx after update is x: 2.81140065193
y: 17.3145065308
theta: 1.61699712276
speed: 14.0209255219
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:86
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: 2.81140065193
y: 17.3145065308
theta: 1.61699712276
speed: 14.0209255219
id: 0
t: 86
xxx after update is x: 3.15520715714
y: 18.1961688995
theta: 1.61640048027
speed: 13.9155035019
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18747115135
y: -17.3063411713
theta: 4.74952077866
speed: 13.8779811859
id: 1
t: 85

sim.py in the sim.py statecallback function, msg is

x: -3.10433554649
y: -17.9591770172
theta: 4.62615442276
speed: 13.8576669693
id: 1
t: 86

sim.py in the sim.py statecallback function, msg is

x: -3.08872509003
y: -18.7886486053
theta: 4.64255619049
speed: 13.5994911194
id: 1
t: 87

222 self.state_dicts[msg.id][msg.t] is (-3.0887250900268555, -18.78864860534668, 4.642556190490723, 13.599491119384766)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: 3.15520715714
y: 18.1961688995
theta: 1.61640048027
speed: 13.9155035019
id: 0
t: 87
xxx after update is x: 3.37706708908
y: 18.768497467
theta: 1.54712474346
speed: 14.2859287262
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: 3.37706708908
y: 18.768497467
theta: 1.54712474346
speed: 14.2859287262
id: 0
t: 88
xxx after update is x: 3.47392559052
y: 19.5434169769
theta: 1.44167566299
speed: 13.5604896545
id funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.01359343529
y: -16.4735012054
theta: 4.7167391777
speed: 13.9629268646
id: 1
t: 84
xxx after update is x: -3.18747115135
y: -17.3063411713
theta: 4.74952077866
speed: 13.8779811859
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: -3.18747115135
y: -17.3063411713
theta: 4.74952077866
speed: 13.8779811859
id: 1
t: 85
xxx after update is x: -3.10433554649
y: -17.9591770172
theta: 4.62615442276
speed: 13.8576669693
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.4144282341
y: 16.1439113617
theta: 1.54369521141
speed: 13.9709272385
id: 0
t: 84

sim.py in the sim.py statecallback function, msg is

x: 2.87599134445
y: 17.0662002563
theta: 1.5897629261
speed: 13.5923852921
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: 2.81140065193
y: 17.3145065308
theta: 1.61699712276
speed: 14.0209255219
id: 0
t: 86

222 self.state_dicts[msg.id][msg.t] is (2.8114006519317627, 17.31450653076172, 1.6169971227645874, 14.020925521850586)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: -3.10433554649
y: -17.9591770172
theta: 4.62615442276
speed: 13.8576669693
id: 1
t: 86
xxx after update is x: -3.08872509003
y: -18.7886486053
theta: 4.64255619049
speed: 13.5994911194
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -3.08872509003
y: -18.7886486053
theta: 4.64255619049
speed: 13.5994911194
id: 1
t: 87
xxx after update is x: -2.99218535423
y: -19.4989089966
theta: 4.67557621002
speed: 13.4158973694
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.15520715714
y: 18.1961688995
theta: 1.61640048027
speed: 13.9155035019
id: 0
t: 87

sim.py in the sim.py statecallback function, msg is

x: 3.37706708908
y: 18.768497467
theta: 1.54712474346
speed: 14.2859287262
id: 0
t: 88

222 self.state_dicts[msg.id][msg.t] is (3.3770670890808105, 18.768497467041016, 1.5471247434616089, 14.285928726196289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: -2.99218535423
y: -19.4989089966
theta: 4.67557621002
speed: 13.4158973694
id: 1
t: 88
xxx after update is x: -3.48162937164
y: -20.2519226074
theta: 4.8150806427
speed: 13.8273439407
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.48162937164
y: -20.2519226074
theta: 4.8150806427
speed: 13.8273439407
id: 1
t: 89
current clock is 3.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocit: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: 3.47392559052
y: 19.5434169769
theta: 1.44167566299
speed: 13.5604896545
id: 0
t: 89
xxx after update is x: 3.22167134285
y: 19.9547367096
theta: 1.41692256927
speed: 13.946313858
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.99218535423
y: -19.4989089966
theta: 4.67557621002
speed: 13.4158973694
id: 1
t: 88

sim.py in the sim.py statecallback function, msg is

x: -3.48162937164
y: -20.2519226074
theta: 4.8150806427
speed: 13.8273439407
id: 1
t: 89

sim.py in the sim.py statecallback function, msg is

x: -3.23183226585
y: -20.525592804
theta: 4.75657844543
speed: 13.5392379761
id: 1
t: 90

222 self.state_dicts[msg.id][msg.t] is (-3.231832265853882, -20.525592803955078, 4.75657844543457, 13.539237976074219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: 3.22167134285
y: 19.9547367096
theta: 1.41692256927
speed: 13.946313858
id: 0
t: 90
xxx after update is x: 3.76120114326
y: 20.5167617798
theta: 1.60194861889
speed: 14.111032486
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: 3.76120114326
y: 20.5167617798
theta: 1.60194861889
speed: 14.111032486
id: 0
t: 91
xxx after update is x: 3.18176937103
y: 21.287776947
theta: 1.57549571991
speed: 13.9443902969
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.03580212593
y: -21.2402858734
theta: 4.84027290344
speed: 13.7026853561
id: 1
t: 91

sim.py in the sim.py statecallback function, msg is

x: -3.23638367653
y: -21.9376049042
theta: 4.59211778641
speed: 13.6378087997
id: 1
t: 92

222 self.state_dicts[msg.id][msg.t] is (-3.2363836765289307, -21.937604904174805, 4.592117786407471, 13.637808799743652)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: 3.18176937103
y: 21.287776947
theta: 1.57549571991
speed: 13.9443902969
id: 0
t: 92
xxx after update is x: 3.02175045013
y: 21.959651947
theta: 1.65706455708
speed: 13.6901454926
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02175045013
y: 21.959651947
theta: 1.65706455708
speed: 13.6901454926
id: 0
t: 93
current clock is 4.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: 3.02175045013
y: 21.959651947
theta: 1.65706455708
speed: 13.6901454926
id: 0
t: 93
xxx after update is x: 2.8967y
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: -3.48162937164
y: -20.2519226074
theta: 4.8150806427
speed: 13.8273439407
id: 1
t: 89
xxx after update is x: -3.23183226585
y: -20.525592804
theta: 4.75657844543
speed: 13.5392379761
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.47392559052
y: 19.5434169769
theta: 1.44167566299
speed: 13.5604896545
id: 0
t: 89

sim.py in the sim.py statecallback function, msg is

x: 3.22167134285
y: 19.9547367096
theta: 1.41692256927
speed: 13.946313858
id: 0
t: 90

222 self.state_dicts[msg.id][msg.t] is (3.2216713428497314, 19.954736709594727, 1.4169225692749023, 13.946313858032227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: -3.23183226585
y: -20.525592804
theta: 4.75657844543
speed: 13.5392379761
id: 1
t: 90
xxx after update is x: -3.03580212593
y: -21.2402858734
theta: 4.84027290344
speed: 13.7026853561
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.03580212593
y: -21.2402858734
theta: 4.84027290344
speed: 13.7026853561
id: 1
t: 91
xxx after update is x: -3.23638367653
y: -21.9376049042
theta: 4.59211778641
speed: 13.6378087997
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:92
aaaaaa
aaaaaabbbbb
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: -3.23638367653
y: -21.9376049042
theta: 4.59211778641
speed: 13.6378087997
id: 1
t: 92
xxx after update is x: -2.92157459259
y: -22.3176193237
theta: 4.74664735794
speed: 13.667971611
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.76120114326
y: 20.5167617798
theta: 1.60194861889
speed: 14.111032486
id: 0
t: 91

sim.py in the sim.py statecallback function, msg is

x: 3.18176937103
y: 21.287776947
theta: 1.57549571991
speed: 13.9443902969
id: 0
t: 92

sim.py in the sim.py statecallback function, msg is

x: 3.02175045013
y: 21.959651947
theta: 1.65706455708
speed: 13.6901454926
id: 0
t: 93

222 self.state_dicts[msg.id][msg.t] is (3.0217504501342773, 21.959651947021484, 1.6570645570755005, 13.690145492553711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: -2.92157459259
y: -22.3176193237
theta: 4.74664735794
speed: 13.667971611
id: 1
t: 93
xxx after update is x: -2.97964930534
y: -22.5539722443
theta: 4.85350704193
speed: 13.9061822891
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: -2.97964930534
y: -22.5539722443
theta: 4.85350704193
speed: 13.9061822891
id: 13161507
y: 22.3491039276
theta: 1.5683273077
speed: 14.1556568146
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: 2.89673161507
y: 22.3491039276
theta: 1.5683273077
speed: 14.1556568146
id: 0
t: 94
xxx after update is x: 3.0926835537
y: 23.4118461609
theta: 1.46555447578
speed: 13.6030311584
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: 3.0926835537
y: 23.4118461609
theta: 1.46555447578
speed: 13.6030311584
id: 0
t: 95
xxx after update is x: 3.29898953438
y: 23.6761703491
theta: 1.5515294075
speed: 13.9149370193
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.92157459259
y: -22.3176193237
theta: 4.74664735794
speed: 13.667971611
id: 1
t: 93

sim.py in the sim.py statecallback function, msg is

x: -2.97964930534
y: -22.5539722443
theta: 4.85350704193
speed: 13.9061822891
id: 1
t: 94

sim.py in the sim.py statecallback function, msg is

x: -3.28986382484
y: -23.1308002472
theta: 4.6981048584
speed: 14.1559114456
id: 1
t: 95

sim.py in the sim.py statecallback function, msg is

x: -3.60370993614
y: -24.1703834534
theta: 4.68173789978
speed: 13.7538414001
id: 1
t: 96

222 self.state_dicts[msg.id][msg.t] is (-3.6037099361419678, -24.17038345336914, 4.681737899780273, 13.753841400146484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: 3.29898953438
y: 23.6761703491
theta: 1.5515294075
speed: 13.9149370193
id: 0
t: 96
xxx after update is x: 2.67522597313
y: 24.3274154663
theta: 1.61316132545
speed: 14.1045322418
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: 2.67522597313
y: 24.3274154663
theta: 1.61316132545
speed: 14.1045322418
id: 0
t: 97
xxx after update is x: 3.60643076897
y: 24.9641227722
theta: 1.73825919628
speed: 13.807592392
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: 3.60643076897
y: 24.9641227722
theta: 1.73825919628
speed: 13.807592392
id: 0
t: 98
xxx after update is x: 3.30617403984
y: 25.6525211334
theta: 1.59261333942
speed: 13.6332483292
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: 3.30617403984
y: 25.6525211334
theta: 1.59261333942
speed: 13.6332483292
id: 0
t: 99
xxx after update is x: 3.30144762993
y: 25.8161697388
theta: 1.60161161423
speed: 13.8047199249
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
!!!!finish and change statu to normal
finish try maneuver
going to the update function
sim.py in the sim.py update functio
t: 94
xxx after update is x: -3.28986382484
y: -23.1308002472
theta: 4.6981048584
speed: 14.1559114456
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: -3.28986382484
y: -23.1308002472
theta: 4.6981048584
speed: 14.1559114456
id: 1
t: 95
xxx after update is x: -3.60370993614
y: -24.1703834534
theta: 4.68173789978
speed: 13.7538414001
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.89673161507
y: 22.3491039276
theta: 1.5683273077
speed: 14.1556568146
id: 0
t: 94

sim.py in the sim.py statecallback function, msg is

x: 3.0926835537
y: 23.4118461609
theta: 1.46555447578
speed: 13.6030311584
id: 0
t: 95

sim.py in the sim.py statecallback function, msg is

x: 3.29898953438
y: 23.6761703491
theta: 1.5515294075
speed: 13.9149370193
id: 0
t: 96

222 self.state_dicts[msg.id][msg.t] is (3.2989895343780518, 23.676170349121094, 1.5515294075012207, 13.914937019348145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.60370993614
y: -24.1703834534
theta: 4.68173789978
speed: 13.7538414001
id: 1
t: 96
current clock is 4.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: -3.60370993614
y: -24.1703834534
theta: 4.68173789978
speed: 13.7538414001
id: 1
t: 96
xxx after update is x: -2.5403740406
y: -24.6231460571
theta: 4.63006210327
speed: 13.9946498871
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: -2.5403740406
y: -24.6231460571
theta: 4.63006210327
speed: 13.9946498871
id: 1
t: 97
xxx after update is x: -2.94010162354
y: -25.3717708588
theta: 4.88684415817
speed: 13.741150856
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: -2.94010162354
y: -25.3717708588
theta: 4.88684415817
speed: 13.741150856
id: 1
t: 98
xxx after update is x: -3.0196928978
y: -26.3450050354
theta: 4.93624639511
speed: 13.6728439331
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: -3.0196928978
y: -26.3450050354
theta: 4.93624639511
speed: 13.6728439331
id: 1
t: 99
xxx after update is x: -3.54296088219
y: -26.867609024
theta: 4.79354143143
speed: 13.8344726562
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: -3.54296088219
y: -26.867609024
theta: 4.79354143143
speed: 13.8344726562
id: 1
t: 100
xxx after update is x: -2.96138453484
y: -27.3482608795
theta: 4.60275936127
speed: 13.9157581329
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.67522597313
y: 24.3274154663
theta: 1.61316132545
speed: 14.1045322418
id: 0
t: 97

sim.py in the sim.py statecallback function, msg is

x: 3.60643076897
y: 24.9641227722
theta: 1.73825919628
speed: 13.807592392
id: 0
t: 98

sim.py in the sim.py statecallback function, msg is

x: 3.30617403984
y: 25.6525211334
theta: 1.59261333942
speed: 13.6332483292
id: 0
t: 99

sim.py in the sim.py statecallback function, msg is

x: 3.30144762993
y: 25.8161697388
theta: 1.60161161423
speed: 13.8047199249
id: 0
t: 100

sim.py in the sim.py statecallback function, msg is

x: 3.1989979744
y: 26.8026981354
theta: 1.68741571903
speed: 13.7480316162
id: 0
t: 101

222 self.state_dicts[msg.id][msg.t] is (3.198997974395752, 26.802698135375977, 1.6874157190322876, 13.748031616210938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: -2.96138453484
y: -27.3482608795
theta: 4.60275936127
speed: 13.9157581329
id: 1
t: 101
xxx after update is x: -3.5022354126
y: -27.8120098114
theta: 4.54857683182
speed: 13.8917713165
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: -3.5022354126
y: -27.8120098114
theta: 4.54857683182
speed: 13.8917713165
id: 1
t: 102
xxx after update is x: -3.31208586693
y: -28.5657463074
theta: 4.80739688873
speed: 13.7258882523
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: -3.31208586693
y: -28.5657463074
theta: 4.80739688873
speed: 13.7258882523
id: 1
t: 103
xxx after update is x: -2.70711326599
y: -29.1358261108
theta: 4.62720918655
speed: 13.7931432724
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.70711326599
y: -29.1358261108
theta: 4.62720918655
speed: 13.7931432724
id: 1
t: 104
current clock is 4.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105
xxx before update is x: -2.70711326599
y: -29.1358261108
theta: 4.62720918655
speed: 13.7931432724
id: 1
t: 104
xxx after update is x: -3.33437180519
y: -29.7316875458
theta: 4.65011024475
speed: 13.8426570892
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.98072433472
y: 27.0572090149
theta: 1.74816358089
speed: 13.8884038925
id: 0
t: 102

sim.py in the sim.py statecallback function, msg is

x: 3.18545174599
y: 27.8183994293
theta: 1.79738950729
speed: 13.5415525436
id: 0
t: 103

sim.py in the sim.py statecallback function, msg is

x: 3.58480072021
y: 28.0712909698
theta: 1.5606379509
speed: 13.9869852066
id:n 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.30144762993
y: 25.8161697388
theta: 1.60161161423
speed: 13.8047199249
id: 0
t: 100
xxx after update is x: 3.1989979744
y: 26.8026981354
theta: 1.68741571903
speed: 13.7480316162
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:101
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.1989979744
y: 26.8026981354
theta: 1.68741571903
speed: 13.7480316162
id: 0
t: 101
current clock is 4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: 3.1989979744
y: 26.8026981354
theta: 1.68741571903
speed: 13.7480316162
id: 0
t: 101
xxx after update is x: 2.98072433472
y: 27.0572090149
theta: 1.74816358089
speed: 13.8884038925
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: 2.98072433472
y: 27.0572090149
theta: 1.74816358089
speed: 13.8884038925
id: 0
t: 102
xxx after update is x: 3.18545174599
y: 27.8183994293
theta: 1.79738950729
speed: 13.5415525436
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.5403740406
y: -24.6231460571
theta: 4.63006210327
speed: 13.9946498871
id: 1
t: 97

sim.py in the sim.py statecallback function, msg is

x: -2.94010162354
y: -25.3717708588
theta: 4.88684415817
speed: 13.741150856
id: 1
t: 98

sim.py in the sim.py statecallback function, msg is

x: -3.0196928978
y: -26.3450050354
theta: 4.93624639511
speed: 13.6728439331
id: 1
t: 99

sim.py in the sim.py statecallback function, msg is

x: -3.54296088219
y: -26.867609024
theta: 4.79354143143
speed: 13.8344726562
id: 1
t: 100

sim.py in the sim.py statecallback function, msg is

x: -2.96138453484
y: -27.3482608795
theta: 4.60275936127
speed: 13.9157581329
id: 1
t: 101

sim.py in the sim.py statecallback function, msg is

x: -3.5022354126
y: -27.8120098114
theta: 4.54857683182
speed: 13.8917713165
id: 1
t: 102

sim.py in the sim.py statecallback function, msg is

x: -3.31208586693
y: -28.5657463074
theta: 4.80739688873
speed: 13.7258882523
id: 1
t: 103

222 self.state_dicts[msg.id][msg.t] is (-3.3120858669281006, -28.565746307373047, 4.80739688873291, 13.7258882522583)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: 3.18545174599
y: 27.8183994293
theta: 1.79738950729
speed: 13.5415525436
id: 0
t: 103
xxx after update is x: 3.58480072021
y: 28.0712909698
theta: 1.5606379509
speed: 13.9869852066
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105
xxx before update is x: 3.58480072021
y: 28.0712909698
theta: 1.5606379509
speed: 13.9869852066
id: 0
t: 104
xxx after update is x: 3.30176115036
y: 29.3985767365
theta: 1.56215548515
speed: 14.0433340073
id: 0
t: 105
maneuver_negotiatir.py finish the updat 0
t: 104

sim.py in the sim.py statecallback function, msg is

x: 3.30176115036
y: 29.3985767365
theta: 1.56215548515
speed: 14.0433340073
id: 0
t: 105

222 self.state_dicts[msg.id][msg.t] is (3.3017611503601074, 29.398576736450195, 1.5621554851531982, 14.043334007263184)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106
xxx before update is x: -3.33437180519
y: -29.7316875458
theta: 4.65011024475
speed: 13.8426570892
id: 1
t: 105
xxx after update is x: -3.548609972
y: -30.8202629089
theta: 4.9326877594
speed: 13.6922006607
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107
xxx before update is x: -3.548609972
y: -30.8202629089
theta: 4.9326877594
speed: 13.6922006607
id: 1
t: 106
xxx after update is x: -3.32138967514
y: -31.1047286987
theta: 4.67506456375
speed: 13.4402189255
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108
xxx before update is x: -3.32138967514
y: -31.1047286987
theta: 4.67506456375
speed: 13.4402189255
id: 1
t: 107
xxx after update is x: -3.25498390198
y: -31.453245163
theta: 4.89400720596
speed: 14.1264820099
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.05013847351
y: 30.1335678101
theta: 1.56693458557
speed: 13.7051410675
id: 0
t: 106

sim.py in the sim.py statecallback function, msg is

x: 3.10763239861
y: 30.3511924744
theta: 1.51709878445
speed: 13.6844329834
id: 0
t: 107

sim.py in the sim.py statecallback function, msg is

x: 2.92127323151
y: 31.1528205872
theta: 1.58228135109
speed: 13.7940187454
id: 0
t: 108

222 self.state_dicts[msg.id][msg.t] is (2.9212732315063477, 31.152820587158203, 1.5822813510894775, 13.794018745422363)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109
xxx before update is x: -3.25498390198
y: -31.453245163
theta: 4.89400720596
speed: 14.1264820099
id: 1
t: 108
xxx after update is x: -3.36586141586
y: -32.2276763916
theta: 4.55708503723
speed: 14.2387666702
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: -3.36586141586
y: -32.2276763916
theta: 4.55708503723
speed: 14.2387666702
id: 1
t: 109
xxx after update is x: -3.67849183083
y: -33.1706428528
theta: 4.73395204544
speed: 13.8887557983
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.53285169601
y: 32.1700706482
theta: 1.60744273663
speed: 13.8221483231
id: 0
t: 109

sim.py in the sim.py statecallback function, msg is

x: 3.47227621078
y: 32.3476867676
theta: 1.49486243725
speed: 13.7065505981
id: 0
t: 110

222 self.state_dicts[msg.id][msg.t] is (3.472276210784912, 32.347686767578125, 1.49486243724823, 13.706550598144531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call upde agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106
xxx before update is x: 3.30176115036
y: 29.3985767365
theta: 1.56215548515
speed: 14.0433340073
id: 0
t: 105
xxx after update is x: 3.05013847351
y: 30.1335678101
theta: 1.56693458557
speed: 13.7051410675
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107
xxx before update is x: 3.05013847351
y: 30.1335678101
theta: 1.56693458557
speed: 13.7051410675
id: 0
t: 106
xxx after update is x: 3.10763239861
y: 30.3511924744
theta: 1.51709878445
speed: 13.6844329834
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.70711326599
y: -29.1358261108
theta: 4.62720918655
speed: 13.7931432724
id: 1
t: 104

sim.py in the sim.py statecallback function, msg is

x: -3.33437180519
y: -29.7316875458
theta: 4.65011024475
speed: 13.8426570892
id: 1
t: 105

sim.py in the sim.py statecallback function, msg is

x: -3.548609972
y: -30.8202629089
theta: 4.9326877594
speed: 13.6922006607
id: 1
t: 106

sim.py in the sim.py statecallback function, msg is

x: -3.32138967514
y: -31.1047286987
theta: 4.67506456375
speed: 13.4402189255
id: 1
t: 107

222 self.state_dicts[msg.id][msg.t] is (-3.321389675140381, -31.10472869873047, 4.675064563751221, 13.440218925476074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108
xxx before update is x: 3.10763239861
y: 30.3511924744
theta: 1.51709878445
speed: 13.6844329834
id: 0
t: 107
xxx after update is x: 2.92127323151
y: 31.1528205872
theta: 1.58228135109
speed: 13.7940187454
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109
xxx before update is x: 2.92127323151
y: 31.1528205872
theta: 1.58228135109
speed: 13.7940187454
id: 0
t: 108
xxx after update is x: 3.53285169601
y: 32.1700706482
theta: 1.60744273663
speed: 13.8221483231
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.53285169601
y: 32.1700706482
theta: 1.60744273663
speed: 13.8221483231
id: 0
t: 109
current clock is 4.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: 3.53285169601
y: 32.1700706482
theta: 1.60744273663
speed: 13.8221483231
id: 0
t: 109
xxx after update is x: 3.47227621078
y: 32.3476867676
theta: 1.49486243725
speed: 13.7065505981
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.25498390198
y: -31.453245163
theta: 4.89400720596
speed: 14.1264820099
id: 1
t: 108

sim.py in the sim.py statecallback function, msg is

x: -3.36586141586
y: -32.2276763916
theta: 4.55708503723
speed: 14.2387666702
id: 1
t: 109

sim.py in the sim.py statecallback function, msg is

x: -3.67849183083
y: -33.1706428528
theta: 4.73395204544
speed: 13.8887557983
id: 1
t: 110

222 self.state_dicts[msg.id][msg.t] is (-3.6784918308258057, -33.1706428527832, 4.733952045440674, 13.888755798339844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111
xxx before update is x: 3.47227621078
y: 32.3476867676
theta: 1.49486243725
speed: 13.7065505981
id: 0
t: 110
xxx after update is x: 3.78531718254
y: 33.099609375
theta: 1.50026130676
speed: 13.7919301987
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: 3.78531718254
y: 33.099609375
theta: 1.50026130676
speed: 13.7919301987
id: 0
t: 111
xxx after update is x: 3.17782497406
y: 33.7121810913
theta: 1.72273719311
speed: 14.3580121994
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: 3.17782497406
y: 33.7121810913
theta: 1.72273719311
speed: 14.3580121994
id: 0
t: 112
xxx after update is x: 2.90507555008
y: 34.0598678589
theta: 1.65157723427
speed: 14.1691474915
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.65533661842
y: -33.9626655579
theta: 4.91949558258
speed: 13.8840904236
id: 1
t: 111

sim.py in the sim.py statecallback function, msg is

x: -3.23485517502
y: -33.8240013123
theta: 4.61831855774
speed: 14.1631288528
id: 1
t: 112

sim.py in the sim.py statecallback function, msg is

x: -3.74207663536
y: -34.8898429871
theta: 4.88777017593
speed: 13.5717029572
id: 1
t: 113

222 self.state_dicts[msg.id][msg.t] is (-3.7420766353607178, -34.88984298706055, 4.887770175933838, 13.57170295715332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: 2.90507555008
y: 34.0598678589
theta: 1.65157723427
speed: 14.1691474915
id: 0
t: 113
xxx after update is x: 2.9292113781
y: 35.0890274048
theta: 1.67995250225
speed: 13.7192630768
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115
ate_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111
xxx before update is x: -3.67849183083
y: -33.1706428528
theta: 4.73395204544
speed: 13.8887557983
id: 1
t: 110
xxx after update is x: -3.65533661842
y: -33.9626655579
theta: 4.91949558258
speed: 13.8840904236
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: -3.65533661842
y: -33.9626655579
theta: 4.91949558258
speed: 13.8840904236
id: 1
t: 111
xxx after update is x: -3.23485517502
y: -33.8240013123
theta: 4.61831855774
speed: 14.1631288528
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23485517502
y: -33.8240013123
theta: 4.61831855774
speed: 14.1631288528
id: 1
t: 112
current clock is 4.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.78531718254
y: 33.099609375
theta: 1.50026130676
speed: 13.7919301987
id: 0
t: 111

sim.py in the sim.py statecallback function, msg is

x: 3.17782497406
y: 33.7121810913
theta: 1.72273719311
speed: 14.3580121994
id: 0
t: 112

222 self.state_dicts[msg.id][msg.t] is (3.1778249740600586, 33.712181091308594, 1.722737193107605, 14.358012199401855)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: -3.23485517502
y: -33.8240013123
theta: 4.61831855774
speed: 14.1631288528
id: 1
t: 112
xxx after update is x: -3.74207663536
y: -34.8898429871
theta: 4.88777017593
speed: 13.5717029572
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: -3.74207663536
y: -34.8898429871
theta: 4.88777017593
speed: 13.5717029572
id: 1
t: 113
xxx after update is x: -3.57889676094
y: -35.6286621094
theta: 4.58772659302
speed: 13.6982488632
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115
... logging to /home/lu/.ros/log/5367aa70-fc5c-11e8-a4c6-000c291801fc/roslaunch-ubuntu-4553.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:46843/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [4563][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 5367aa70-fc5c-11e8-a4c6-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [4576][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [4593][0m
[1mprocess[rviz-3]: started with pid [4594][0m
[1mprocess[car0-4]: started with pid [4595][0m
[1mprocess[car1-5]: started with pid [4596][0m
[1mprocess[cloud-6]: started with pid [4597][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
