sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.38198709488


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (-2.874315023422241, 73.98616790771484, 4.785225868225098, 13.924023628234863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f65364f9878>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f6536515680>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (-3.2719035148620605, 73.99681091308594, 4.659572601318359, 13.86362361907959)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.0






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.11725783348
y: -59.2272758484
theta: 1.4890165329
speed: 13.5183830261
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 3.11725783348
y: -59.2272758484
theta: 1.4890165329
speed: 13.5183830261
id: 0
t: 4
xxx after update is x: 2.99468708038
y: -58.2034072876
theta: 1.67941856384
speed: 13.8062314987
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: 2.99468708038
y: -58.2034072876
theta: 1.67941856384
speed: 13.8062314987
id: 0
t: 5
xxx after update is x: 3.68691492081
y: -55.5015716553
theta: 1.66377663612
speed: 13.7376289368
id: 0
t: 6
maneuver_negotiatir.py finish the update agent statsim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.35555791855
222 self.state_dicts[msg.id][msg.t] is (3.0478124618530273, -64.40257263183594, 1.734420657157898, 14.029009819030762)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (3.0704004764556885, -63.861854553222656, 1.5627820491790771, 14.16228199005127)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f1155397b48>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f11553b4f38>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.0






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the try maneuver function update -. sfinish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (2.963902711868286, -55.99900436401367, 1.6460033655166626, 14.320063591003418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.07473039627
y: 65.5544052124
theta: 4.63466215134
speed: 13.9717760086
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py updae from ros funtion
xxx before update is x: 3.68691492081
y: -55.5015716553
theta: 1.66377663612
speed: 13.7376289368
id: 0
t: 6
xxx after update is x: 2.96390271187
y: -55.999004364
theta: 1.64600336552
speed: 14.320063591
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.96390271187
y: -55.999004364
theta: 1.64600336552
speed: 14.320063591
id: 0
t: 7
xxx after update is x: 3.43085122108
y: -55.3412780762
theta: 1.64542078972
speed: 13.6080675125
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:8




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: 3.43085122108
y: -55.3412780762
theta: 1.64542078972
speed: 13.6080675125
id: 0
t: 8
xxx after update is x: 3.26726341248
y: -54.775100708
theta: 1.60021603107
speed: 13.9040164948
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.26726341248
y: -54.775100708
theta: 1.60021603107
speed: 13.9040164948
id: 0
t: 9
xxx after update is x: 3.5110013485
y: -54.1398010254
theta: 1.38768994808
speed: 13.942070961
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: 3.5110013485
y: -54.1398010254
theta: 1.38768994808
speed: 13.942070961
id: 0
t: 10
xxx after update is x: 3.17960381508
y: -53.6179924011
theta: 1.57140517235
speed: 13.7171983719
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: 3.17960381508
y: -53.6179924011
theta: 1.57140517235
speed: 13.7171983719
id: 0
t: 11
xxx after update is x: 2.80622696877
y: -53.1784172058
theta: 1.5782854557
speed: 13.9169368744
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.35950545047240196, 0.3258609439243697]
222 self.state_dicts[msg.id][msg.t] is (-3.5151383876800537, 63.1663818359375, 4.723724365234375, 13.8112211227417)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.80622696877
y: -53.1784172058
theta: 1.5782854557
speed: 13.9169368744
id: 0
t: 12
xxx after update is x: 3.4168651104
y: -51.8111724854
theta: 1.49686217308
speed: 13.8520669937
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:13




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.4168651104
y: -51.8111724854
theta: 1.49686217308
speed: 13.8520669937
id: 0
t: 13
xxx after update is x: 2.81061339378
y: -51.609085083
theta: 1.64754092693
speed: 13.9654912949
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:14


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.622222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try mante function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: -3.07473039627
y: 65.5544052124
theta: 4.63466215134
speed: 13.9717760086
id: 1
t: 8
xxx after update is x: -3.45630526543
y: 64.7119522095
theta: 4.7149848938
speed: 14.287858963
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: -3.45630526543
y: 64.7119522095
theta: 4.7149848938
speed: 14.287858963
id: 1
t: 9
xxx after update is x: -3.39607453346
y: 63.9784393311
theta: 4.76118087769
speed: 13.6617965698
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.39607453346
y: 63.9784393311
theta: 4.76118087769
speed: 13.6617965698
id: 1
t: 10
xxx after update is x: -2.8578517437
y: 63.2906646729
theta: 4.83123779297
speed: 13.9914236069
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:11




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: -2.8578517437
y: 63.2906646729
theta: 4.83123779297
speed: 13.9914236069
id: 1
t: 11
xxx after update is x: -3.51513838768
y: 63.1663818359
theta: 4.72372436523
speed: 13.8112211227
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: -3.51513838768
y: 63.1663818359
theta: 4.72372436523
speed: 13.8112211227
id: 1
t: 12
xxx after update is x: -3.96385335922
y: 62.2330131531
theta: 4.81862545013
speed: 13.7920484543
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.22676630735848974, 0.0003239776401766181]
222 self.state_dicts[msg.id][msg.t] is (3.416865110397339, -51.81117248535156, 1.4968621730804443, 13.852066993713379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14


xxx before update is x: -3.96385335922
y: 62.2330131531
theta: 4.81862545013
speed: 13.7920484543
id: 1
t: 13
xxx after update is x: -3.21473503113
y: 61.4982032776
theta: 4.65851163864
speed: 13.9797868729
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.622222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: -3.21473503113
y: 61.4982032776
theta: 4.65851163864
speed: 13.9797868729
id: 1
t: 14
xxx after update is x: -3.42348313332
y: 60.8415031433
theta: 4.72884273529
speed: 13.9151239395
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.23303068265092436, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4708168506622314, -50.92708969116211, 1.6288384199142456, 13.554341316223145)
if we have all measurements for a certain time-stamp perform risk estimation
seuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: 2.81061339378
y: -51.609085083
theta: 1.64754092693
speed: 13.9654912949
id: 0
t: 14
xxx after update is x: 3.47081685066
y: -50.9270896912
theta: 1.62883841991
speed: 13.5543413162
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: 3.47081685066
y: -50.9270896912
theta: 1.62883841991
speed: 13.5543413162
id: 0
t: 15
xxx after update is x: 3.02374958992
y: -50.6571884155
theta: 1.72505819798
speed: 13.5809345245
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: 3.02374958992
y: -50.6571884155
theta: 1.72505819798
speed: 13.5809345245
id: 0
t: 16
xxx after update is x: 2.7635409832
y: -50.1421775818
theta: 1.59901702404
speed: 14.0698471069
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.7635409832
y: -50.1421775818
theta: 1.59901702404
speed: 14.0698471069
id: 0
t: 17
xxx after update is x: 2.99765872955
y: -49.540725708
theta: 1.63284468651
speed: 13.6319141388
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:18




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: 2.99765872955
y: -49.540725708
theta: 1.63284468651
speed: 13.6319141388
id: 0
t: 18
xxx after update is x: 3.52762770653
y: -48.7154998779
theta: 1.51790809631
speed: 13.9168739319
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.8972571076383841, 0.9996591171288637]
222 self.state_dicts[msg.id][msg.t] is (-3.58715558052063, 58.699832916259766, 4.848094940185547, 13.970211029052734)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.52762770653
y: -48.7154998779
theta: 1.51790809631
speed: 13.9168739319
id: 0
t: 19
xxx after update is x: 3.40350222588
y: -48.4097747803
theta: 1.54581868649
speed: 14.0444774628
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: 3.40350222588
y: -48.4097747803
theta: 1.54581868649
speed: 14.0444774628
id: 0
t: 20
xxx after update is x: 3.48864412308
y: -47.0765075684
theta: 1.58535957336
speed: 14.0968360901
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.524311888544887, 0.17365402005745284]
222 self.state_dicts[msg.id][msg.t] is (-3.990041732788086, 56.9191780090332, 4.755062580108643, 13.836864471435547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


xxx before elf.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: -3.42348313332
y: 60.8415031433
theta: 4.72884273529
speed: 13.9151239395
id: 1
t: 15
xxx after update is x: -2.86520171165
y: 60.1886863708
theta: 4.72666931152
speed: 13.6286172867
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.86520171165
y: 60.1886863708
theta: 4.72666931152
speed: 13.6286172867
id: 1
t: 16
xxx after update is x: -3.08669829369
y: 59.6563568115
theta: 4.81444358826
speed: 13.9236860275
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:17


aaaaaa
aaaaaabbbbb
risk is [0.6543302742544463, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7635409832000732, -50.14217758178711, 1.5990170240402222, 14.069847106933594)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: -3.08669829369
y: 59.6563568115
theta: 4.81444358826
speed: 13.9236860275
id: 1
t: 17
xxx after update is x: -3.29833030701
y: 59.7404403687
theta: 4.7957816124
speed: 13.8869085312
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: -3.29833030701
y: 59.7404403687
theta: 4.7957816124
speed: 13.8869085312
id: 1
t: 18
xxx after update is x: -3.58715558052
y: 58.6998329163
theta: 4.84809494019
speed: 13.9702110291
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.58715558052
y: 58.6998329163
theta: 4.84809494019
speed: 13.9702110291
id: 1
t: 19
xxx after update is x: -4.00813961029
y: 57.4317245483
theta: 4.80919837952
speed: 13.704161644
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20


aaaaaa
aaaaaabbbbb
risk is [0.74563058524356, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4035022258758545, -48.40977478027344, 1.5458186864852905, 14.044477462768555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: -4.00813961029
y: 57.4317245483
theta: 4.80919837952
speed: 13.704161644
id: 1
t: 20
xxx after update is x: -3.99004173279
y: 56.919178009
theta: 4.75506258011
speed: 13.8368644714
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: -3.99004173279
y: 56.919178009
theta: 4.75506258011
speed: 13.8368644714
id: 1
t: 21
xxx after update is x: -3.24433684349
y: 56.972454071
theta: 4.76941299438
speed: 13.9121208191
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.583778468590336, 0]
222 supdate is x: 3.48864412308
y: -47.0765075684
theta: 1.58535957336
speed: 14.0968360901
id: 0
t: 21
xxx after update is x: 3.99881434441
y: -46.8624305725
theta: 1.60957765579
speed: 13.8236923218
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.977777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.99881434441
y: -46.8624305725
theta: 1.60957765579
speed: 13.8236923218
id: 0
t: 22
xxx after update is x: 3.52466416359
y: -46.6990318298
theta: 1.64014184475
speed: 14.0105342865
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: 3.52466416359
y: -46.6990318298
theta: 1.64014184475
speed: 14.0105342865
id: 0
t: 23
xxx after update is x: 3.04374599457
y: -45.5926246643
theta: 1.63295960426
speed: 13.9872121811
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.1859610020777417, 0.5592679481382505]
222 self.state_dicts[msg.id][msg.t] is (-3.6949048042297363, 55.53712844848633, 4.691431999206543, 13.868729591369629)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: 3.04374599457
y: -45.5926246643
theta: 1.63295960426
speed: 13.9872121811
id: 0
t: 24
xxx after update is x: 3.3567302227
y: -44.397064209
theta: 1.68298053741
speed: 14.0470399857
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.3567302227
y: -44.397064209
theta: 1.68298053741
speed: 14.0470399857
id: 0
t: 25
xxx after update is x: 3.46105360985
y: -44.3481636047
theta: 1.39829623699
speed: 13.4040527344
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:26




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: 3.46105360985
y: -44.3481636047
theta: 1.39829623699
speed: 13.4040527344
id: 0
t: 26
xxx after update is x: 3.15233707428
y: -43.4986457825
theta: 1.72178316116
speed: 13.9377355576
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.287773743338636, 0.007738064791462192]
222 self.state_dicts[msg.id][msg.t] is (-3.2680163383483887, 53.254737854003906, 4.664037227630615, 13.915741920471191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: 3.15233707428
y: -43.4986457825
theta: 1.72178316116
speed: 13.9377355576
id: 0
t: 27
xxx after update is x: 3.06207609177
y: -42.7611427307
theta: 1.46836531162
speed: 13.8753547668
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.06207609177
y: -42.7611427307
theta: 1.46836531162
speed: 13.87elf.state_dicts[msg.id][msg.t] is (3.998814344406128, -46.862430572509766, 1.6095776557922363, 13.823692321777344)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.977777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.24433684349
y: 56.972454071
theta: 4.76941299438
speed: 13.9121208191
id: 1
t: 22
xxx after update is x: -3.385835886
y: 55.6580543518
theta: 4.72781038284
speed: 14.0718870163
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: -3.385835886
y: 55.6580543518
theta: 4.72781038284
speed: 14.0718870163
id: 1
t: 23
xxx after update is x: -3.69490480423
y: 55.5371284485
theta: 4.69143199921
speed: 13.8687295914
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.09651206094060588, 0]
222 self.state_dicts[msg.id][msg.t] is (3.043745994567871, -45.59262466430664, 1.6329596042633057, 13.987212181091309)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: -3.69490480423
y: 55.5371284485
theta: 4.69143199921
speed: 13.8687295914
id: 1
t: 24
xxx after update is x: -3.61064314842
y: 54.5721473694
theta: 4.79077577591
speed: 14.0206594467
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: -3.61064314842
y: 54.5721473694
theta: 4.79077577591
speed: 14.0206594467
id: 1
t: 25
xxx after update is x: -3.00910687447
y: 54.3739089966
theta: 4.61440181732
speed: 13.7491416931
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: -3.00910687447
y: 54.3739089966
theta: 4.61440181732
speed: 13.7491416931
id: 1
t: 26
xxx after update is x: -3.26801633835
y: 53.254737854
theta: 4.66403722763
speed: 13.9157419205
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.568504755521181, 0]
222 self.state_dicts[msg.id][msg.t] is (3.152337074279785, -43.4986457824707, 1.72178316116333, 13.937735557556152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.26801633835
y: 53.254737854
theta: 4.66403722763
speed: 13.9157419205
id: 1
t: 27
xxx after update is x: -3.13760018349
y: 53.4219245911
theta: 4.82342672348
speed: 13.6080636978
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:28




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function xxx before update is x: -3.13760018349
y: 53.4219245911
theta: 4.82342672348
speed: 13.6080636978
id: 1
t: 28
xxx after update is x: -3.09006166458
y: 52.2013931274
theta: 4.78653907776
speed: 14.1514406204
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: -3.09006166458
y: 52.2013931274
theta: 4.78653907776
speed: 14.1514406204
id: 1
t: 29
xxx after update is x: -3.24854636192
y: 51.4792060852
theta: 4.67037153244
speed: 13.8161277771
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.33333333333






self.maneuver_requested None
aaaaaa
aaaaaabbbbb
risk is [0.5603036410528567, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4490175247192383, -42.1304817199707, 1.560701608657837, 13.477540969848633)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: -3.24854636192
y: 51.4792060852
theta: 4.67037153244
speed: 13.8161277771
id: 1
t: 30
xxx after update is x: -3.32455253601
y: 50.7717628479
theta: 4.76972675323
speed: 13.9623641968
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32455253601
y: 50.7717628479
theta: 4.76972675323
speed: 13.9623641968
id: 1
t: 31
xxx after update is x: -3.70677614212
y: 50.4365196228
theta: 4.80578184128
speed: 13.7633295059
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:32




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.70677614212
y: 50.4365196228
theta: 4.80578184128
speed: 13.7633295059
id: 1
t: 32
xxx after update is x: -2.81948208809
y: 50.0892982483
theta: 4.71998596191
speed: 13.7025794983
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33


aaaaaa
aaaaaabbbbb
risk is [0.5668474852937937, 0]
222 self.state_dicts[msg.id][msg.t] is (3.75669264793396, -39.82232666015625, 1.3568685054779053, 13.866158485412598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.81948208809
y: 50.0892982483
theta: 4.71998596191
speed: 13.7025794983
id: 1
t: 33
xxx after update is x: -3.53547286987
y: 48.9814147949
theta: 4.61279296875
speed: 13.573381424
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:34




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: -3.53547286987
y: 48.9814147949
theta: 4.61279296875
speed: 13.573381424
id: 1
t: 34
xxx after update is x: -3.26525330544
y: 48.9160499573
theta: 4.7982006073
speed: 13.9162826538
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.53547668
id: 0
t: 28
xxx after update is x: 2.94939947128
y: -42.3806419373
theta: 1.56153523922
speed: 14.0741052628
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: 2.94939947128
y: -42.3806419373
theta: 1.56153523922
speed: 14.0741052628
id: 0
t: 29
xxx after update is x: 3.44901752472
y: -42.13048172
theta: 1.56070160866
speed: 13.4775409698
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.33333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.44162908892340325, 0.14531891011495154]
222 self.state_dicts[msg.id][msg.t] is (-3.2485463619232178, 51.47920608520508, 4.6703715324401855, 13.81612777709961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: 3.44901752472
y: -42.13048172
theta: 1.56070160866
speed: 13.4775409698
id: 0
t: 30
xxx after update is x: 3.20213794708
y: -40.9300003052
theta: 1.46400725842
speed: 14.0068025589
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: 3.20213794708
y: -40.9300003052
theta: 1.46400725842
speed: 14.0068025589
id: 0
t: 31
xxx after update is x: 3.60076975822
y: -40.4310302734
theta: 1.59935379028
speed: 13.8222150803
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33


xxx before update is x: 3.60076975822
y: -40.4310302734
theta: 1.59935379028
speed: 13.8222150803
id: 0
t: 32
xxx after update is x: 3.75669264793
y: -39.8223266602
theta: 1.35686850548
speed: 13.8661584854
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.5888243569857815, 0.3826964235206466]
222 self.state_dicts[msg.id][msg.t] is (-2.8194820880889893, 50.089298248291016, 4.7199859619140625, 13.702579498291016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: 3.75669264793
y: -39.8223266602
theta: 1.35686850548
speed: 13.8661584854
id: 0
t: 33
xxx after update is x: 2.91782331467
y: -39.1412010193
theta: 1.55067193508
speed: 13.7058858871
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: 2.91782331467
y: -39.1412010193
theta: 1.55067193508
speed: 13.7058858871
id: 0
t: 34
xxx after update is x: 3.13881754875
y: -38.6046791077
theta: 1.51066172123
speed: 14.1072378159
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36


xxx before update py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.26525330544
y: 48.9160499573
theta: 4.7982006073
speed: 13.9162826538
id: 1
t: 35
xxx after update is x: -3.05140709877
y: 47.7969779968
theta: 4.73253488541
speed: 14.1372585297
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: -3.05140709877
y: 47.7969779968
theta: 4.73253488541
speed: 14.1372585297
id: 1
t: 36
xxx after update is x: -3.39047646523
y: 47.5032806396
theta: 4.6438293457
speed: 14.1380796432
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.42903811341712156, 0]
222 self.state_dicts[msg.id][msg.t] is (2.987136125564575, -37.19066619873047, 1.595299482345581, 13.769604682922363)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.64444444444






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: -3.39047646523
y: 47.5032806396
theta: 4.6438293457
speed: 14.1380796432
id: 1
t: 37
xxx after update is x: -3.46781802177
y: 46.8630065918
theta: 4.65281057358
speed: 13.8579463959
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: -3.46781802177
y: 46.8630065918
theta: 4.65281057358
speed: 13.8579463959
id: 1
t: 38
xxx after update is x: -3.09171366692
y: 45.7309036255
theta: 4.76807594299
speed: 14.0901479721
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: -3.09171366692
y: 45.7309036255
theta: 4.76807594299
speed: 14.0901479721
id: 1
t: 39
xxx after update is x: -3.49893498421
y: 45.8020439148
theta: 4.62799453735
speed: 13.6466398239
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.33748796772083267, 0]
222 self.state_dicts[msg.id][msg.t] is (3.8056395053863525, -34.93035888671875, 1.6712477207183838, 14.243793487548828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: -3.49893498421
y: 45.8020439148
theta: 4.62799453735
speed: 13.6466398239
id: 1
t: 40
xxx after update is x: -3.07414054871
y: 44.9869003296
theta: 4.61313581467
speed: 14.0103750229
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


xxx before update is x: -3.07414054871
y: 44.9869003296
theta: 4.61313581467
speed: 14.0103750229
id: 1
t: 41
xxx after update is x: -3.28970837593
y: 43.8254432678
theta: 4.85984992981
speed: 13.8065490723
id: 1
t: 42
maneuver_negotiatir.pis x: 3.13881754875
y: -38.6046791077
theta: 1.51066172123
speed: 14.1072378159
id: 0
t: 35
xxx after update is x: 3.19092512131
y: -37.8638801575
theta: 1.63807022572
speed: 13.7516136169
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.10069052381121187, 0.37131306610316106]
222 self.state_dicts[msg.id][msg.t] is (-3.0514070987701416, 47.79697799682617, 4.732534885406494, 14.137258529663086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: 3.19092512131
y: -37.8638801575
theta: 1.63807022572
speed: 13.7516136169
id: 0
t: 36
xxx after update is x: 2.98713612556
y: -37.1906661987
theta: 1.59529948235
speed: 13.7696046829
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.64444444444






self.maneuver_requested None
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.98713612556
y: -37.1906661987
theta: 1.59529948235
speed: 13.7696046829
id: 0
t: 37
xxx after update is x: 3.82880020142
y: -36.8019142151
theta: 1.77172839642
speed: 14.0095443726
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:38


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: 3.82880020142
y: -36.8019142151
theta: 1.77172839642
speed: 14.0095443726
id: 0
t: 38
xxx after update is x: 2.9551281929
y: -36.3123283386
theta: 1.57247138023
speed: 14.0727119446
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: 2.9551281929
y: -36.3123283386
theta: 1.57247138023
speed: 14.0727119446
id: 0
t: 39
xxx after update is x: 3.80563950539
y: -34.9303588867
theta: 1.67124772072
speed: 14.2437934875
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.17164003989491275, 0.3175877492244532]
222 self.state_dicts[msg.id][msg.t] is (-3.4989349842071533, 45.80204391479492, 4.627994537353516, 13.646639823913574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: 3.80563950539
y: -34.9303588867
theta: 1.67124772072
speed: 14.2437934875
id: 0
t: 40
xxx after update is x: 2.88356399536
y: -34.6840248108
theta: 1.68131172657
speed: 13.884062767
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.88356399536
y: -34.6840248108
theta: 1.68131172657
speed: 13.884062767
id: 0
t: 41
xxx after update is x: 2.62240314484
y: -34.2583045959
theta: 1.50174343586
speed: 14.1100883484
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


xxx before update is xy finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28970837593
y: 43.8254432678
theta: 4.85984992981
speed: 13.8065490723
id: 1
t: 42
xxx after update is x: -3.20476007462
y: 43.3291168213
theta: 4.76173448563
speed: 13.471991539
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:43




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: -3.20476007462
y: 43.3291168213
theta: 4.76173448563
speed: 13.471991539
id: 1
t: 43
xxx after update is x: -3.40870332718
y: 42.5538215637
theta: 4.72107315063
speed: 13.956533432
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: -3.40870332718
y: 42.5538215637
theta: 4.72107315063
speed: 13.956533432
id: 1
t: 44
xxx after update is x: -2.91143226624
y: 42.8671760559
theta: 4.68883991241
speed: 14.1327943802
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.44316414867222187, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4472692012786865, -32.531307220458984, 1.7371095418930054, 14.089235305786133)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.0






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: -2.91143226624
y: 42.8671760559
theta: 4.68883991241
speed: 14.1327943802
id: 1
t: 45
xxx after update is x: -3.38598036766
y: 41.8168754578
theta: 4.71845149994
speed: 13.8747959137
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: -3.38598036766
y: 41.8168754578
theta: 4.71845149994
speed: 13.8747959137
id: 1
t: 46
xxx after update is x: -2.65762114525
y: 41.1878128052
theta: 4.59945201874
speed: 14.124502182
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3399635729601018, 0]
222 self.state_dicts[msg.id][msg.t] is (3.4552037715911865, -31.456544876098633, 1.37771475315094, 13.925060272216797)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48


xxx before update is x: -2.65762114525
y: 41.1878128052
theta: 4.59945201874
speed: 14.124502182
id: 1
t: 47
xxx after update is x: -3.05737257004
y: 40.697971344
theta: 4.72174310684
speed: 14.3005104065
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49


xxx before update is x: -3.05737257004
y: 40.697971344
theta: 4.72174310684
speed: 14.3005104065
id: 1
t: 48
xxx after update is x: -3.88547348976
y: 39.71: 2.62240314484
y: -34.2583045959
theta: 1.50174343586
speed: 14.1100883484
id: 0
t: 42
xxx after update is x: 3.13137674332
y: -32.9953041077
theta: 1.53707706928
speed: 14.0949201584
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4397641451665981, 0.3205088468749626]
222 self.state_dicts[msg.id][msg.t] is (-3.2047600746154785, 43.32911682128906, 4.761734485626221, 13.471991539001465)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.13137674332
y: -32.9953041077
theta: 1.53707706928
speed: 14.0949201584
id: 0
t: 43
xxx after update is x: 3.32754588127
y: -32.6742172241
theta: 1.54258990288
speed: 13.99979496
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:44




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: 3.32754588127
y: -32.6742172241
theta: 1.54258990288
speed: 13.99979496
id: 0
t: 44
xxx after update is x: 3.44726920128
y: -32.5313072205
theta: 1.73710954189
speed: 14.0892353058
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.0






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: 3.44726920128
y: -32.5313072205
theta: 1.73710954189
speed: 14.0892353058
id: 0
t: 45
xxx after update is x: 2.87024688721
y: -31.7273616791
theta: 1.69834303856
speed: 13.7908220291
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.014377257793411383, 0.12632623444826585]
222 self.state_dicts[msg.id][msg.t] is (-3.3859803676605225, 41.81687545776367, 4.718451499938965, 13.874795913696289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: 2.87024688721
y: -31.7273616791
theta: 1.69834303856
speed: 13.7908220291
id: 0
t: 46
xxx after update is x: 3.45520377159
y: -31.4565448761
theta: 1.37771475315
speed: 13.9250602722
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.45520377159
y: -31.4565448761
theta: 1.37771475315
speed: 13.9250602722
id: 0
t: 47
xxx after update is x: 3.38417506218
y: -31.1510810852
theta: 1.47178423405
speed: 14.0313243866
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:49


xxx before update is x: 3.38417506218
y: -31.1510810852
theta: 1.47178423405
speed: 14.0313243866
id: 0
t: 48
xxx after update is x: 3.38866853714
y: -29.5483322144
theta: 1.59127986431
speed: 13.7405958176
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: 3.38866853714
y: -29.5483322144
theta: 1.59127986431
speed: 13.7405958176
id: 0
t: 49
xxx after update is x: 3.69899082184
y: -29.7554359436
theta: 1.36969339848
speed: 14.0293598175
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.2695629022093918, 0.34411011624592536]
222 self.state_dicts[msg.id][msg.t] is (-2.861999034881592, 39.35548782348633, 4.671794414520264, 13.907069206237793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: 3.69899082184
y: -29.7554359436
theta: 1.36969339848
speed: 14.0293598175
id: 0
t: 50
xxx after update is x: 2.85459470749
y: -29.2238044739
theta: 1.59984695911
speed: 14.0707674026
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: 2.85459470749
y: -29.2238044739
theta: 1.59984695911
speed: 14.0707674026
id: 0
t: 51
xxx after update is x: 3.06838107109
y: -28.2440853119
theta: 1.43961381912
speed: 13.5243740082
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: 3.06838107109
y: -28.2440853119
theta: 1.43961381912
speed: 13.5243740082
id: 0
t: 52
xxx after update is x: 3.5731511116
y: -27.5424747467
theta: 1.59634757042
speed: 13.9609441757
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.35555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: 3.5731511116
y: -27.5424747467
theta: 1.59634757042
speed: 13.9609441757
id: 0
t: 53
xxx after update is x: 3.54032897949
y: -26.904706955
theta: 1.72061884403
speed: 14.0513687134
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: 3.54032897949
y: -26.904706955
theta: 1.72061884403
speed: 14.0513687134
id: 0
t: 54
xxx after update is x: 3.9688835144
y: -26.5878715515
theta: 1.56524407864
speed: 13.8875980377
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.9688835144
y: -26.5878715515
theta: 1.56524407864
speed: 13.8875980377
id: 0
t: 55
xxx after update is x: 3.36348414421
y: -25.0721969604
theta: 1.50750386715
speed: 13.3307628632
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:56


aaaaaa
risk is [0.40916856464134416, 0.384668497035989]
222 self.state_dicts[msg.id][msg.t] is (-3.3474981784820557, 35.36728286743164, 4.760263442993164, 13.963199615478516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: 3.36348414421
y: -25.0721969604
theta: 1.507503811320496
theta: 4.86605882645
speed: 14.3171043396
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.88547348976
y: 39.7111320496
theta: 4.86605882645
speed: 14.3171043396
id: 1
t: 49
xxx after update is x: -2.86199903488
y: 39.3554878235
theta: 4.67179441452
speed: 13.9070692062
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:50




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: -2.86199903488
y: 39.3554878235
theta: 4.67179441452
speed: 13.9070692062
id: 1
t: 50
xxx after update is x: -3.11134767532
y: 39.0596389771
theta: 4.69869041443
speed: 14.0774412155
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.387515692598634, 0]
222 self.state_dicts[msg.id][msg.t] is (2.8545947074890137, -29.223804473876953, 1.5998469591140747, 14.070767402648926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: -3.11134767532
y: 39.0596389771
theta: 4.69869041443
speed: 14.0774412155
id: 1
t: 51
xxx after update is x: -3.26189422607
y: 37.8558044434
theta: 4.67411899567
speed: 13.7939224243
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: -3.26189422607
y: 37.8558044434
theta: 4.67411899567
speed: 13.7939224243
id: 1
t: 52
xxx after update is x: -3.02838206291
y: 37.4639930725
theta: 4.83929920197
speed: 13.9396486282
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.35555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: -3.02838206291
y: 37.4639930725
theta: 4.83929920197
speed: 13.9396486282
id: 1
t: 53
xxx after update is x: -3.17686533928
y: 36.8382797241
theta: 4.7148270607
speed: 13.7796144485
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: -3.17686533928
y: 36.8382797241
theta: 4.7148270607
speed: 13.7796144485
id: 1
t: 54
xxx after update is x: -3.44368362427
y: 36.0135040283
theta: 4.6411318779
speed: 14.0624647141
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.44368362427
y: 36.0135040283
theta: 4.6411318779
speed: 14.0624647141
id: 1
t: 55
xxx after update is x: -3.34749817848
y: 35.3672828674
theta: 4.76026344299
speed: 13.9631996155
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:56


aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: -3.34749817848
y: 35.3672828674
theta: 4.76026344299
speed: 13.9631996155
id: 1
t: 56
xxx after update is x: -2.92651987076
y: 35.3815383911
theta: 4.60839605331
speed: 13.9090595245
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3210748121548118, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3243401050567627, -25.084075927734375, 1.757483720779419, 13.18683910369873)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: -2.92651987076
y: 35.3815383911
theta: 4.60839605331
speed: 13.9090595245
id: 1
t: 57
xxx after update is x: -3.53200006485
y: 33.6709136963
theta: 4.71088027954
speed: 13.702876091
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.53200006485
y: 33.6709136963
theta: 4.71088027954
speed: 13.702876091
id: 1
t: 58
xxx after update is x: -3.809653759
y: 34.0908546448
theta: 4.60824871063
speed: 13.8491096497
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:59




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: -3.809653759
y: 34.0908546448
theta: 4.60824871063
speed: 13.8491096497
id: 1
t: 59
xxx after update is x: -2.9854927063
y: 33.3399009705
theta: 4.60942459106
speed: 13.708732605
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.66666666667






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: -2.9854927063
y: 33.3399009705
theta: 4.60942459106
speed: 13.708732605
id: 1
t: 60
xxx after update is x: -3.21767187119
y: 32.6024932861
theta: 4.7875123024
speed: 13.8144922256
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: -3.21767187119
y: 32.6024932861
theta: 4.7875123024
speed: 13.8144922256
id: 1
t: 61
xxx after update is x: -3.59770655632
y: 31.8727550507
theta: 4.71745920181
speed: 13.7807950974
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: -3.59770655632
y: 31.8727550507
theta: 4.71745920181
speed: 13.7807950974
id: 1
t: 62
xxx after update is x: -3.62791991234
y: 31.0751533508
theta: 4.63082408905
speed: 13.8564090729
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.46458394723871094, 0]
222 self.state_dicts[msg.id][msg.t] is (3.9460396766662598, -21.72795867919922, 1.4469025135040283, 12.003630638122559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_st6715
speed: 13.3307628632
id: 0
t: 56
xxx after update is x: 3.32434010506
y: -25.0840759277
theta: 1.75748372078
speed: 13.1868391037
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: 3.32434010506
y: -25.0840759277
theta: 1.75748372078
speed: 13.1868391037
id: 0
t: 57
xxx after update is x: 3.16346812248
y: -24.1157035828
theta: 1.54478013515
speed: 13.4634990692
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: 3.16346812248
y: -24.1157035828
theta: 1.54478013515
speed: 13.4634990692
id: 0
t: 58
xxx after update is x: 3.3855535984
y: -23.4126472473
theta: 1.55445897579
speed: 13.0130701065
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: 3.3855535984
y: -23.4126472473
theta: 1.55445897579
speed: 13.0130701065
id: 0
t: 59
xxx after update is x: 3.36805653572
y: -23.1869106293
theta: 1.47332680225
speed: 12.4503116608
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: 3.36805653572
y: -23.1869106293
theta: 1.47332680225
speed: 12.4503116608
id: 0
t: 60
xxx after update is x: 2.76611161232
y: -22.8036308289
theta: 1.63375520706
speed: 12.1263666153
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.71111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.76611161232
y: -22.8036308289
theta: 1.63375520706
speed: 12.1263666153
id: 0
t: 61
xxx after update is x: 3.31407904625
y: -21.9918498993
theta: 1.50764238834
speed: 12.0909376144
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:62




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.31407904625
y: -21.9918498993
theta: 1.50764238834
speed: 12.0909376144
id: 0
t: 62
xxx after update is x: 3.94603967667
y: -21.7279586792
theta: 1.4469025135
speed: 12.0036306381
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:63


aaaaaa
risk is [0.45145705213936216, 0.3760723316284628]
222 self.state_dicts[msg.id][msg.t] is (-3.627919912338257, 31.075153350830078, 4.630824089050293, 13.856409072875977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: 3.94603967667
y: -21.7279586792
theta: 1.4469025135
speed: 12.0036306381
id: 0
t: 63
xxx after update is x: 3.33681774139
y: -20.9417610168
theta: 1.59080529213
speed: 11.8604202271
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:65

xxx before update is x: 3.33681774139
y: -20.9417610168
theta: 1.59080529213
speed: 11.8604202271
id: 0
t: 64
xxx after update is x: 2.95734405518
y: -19.653295517
theta: 1.59928011894
speed: 11.4088115692
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: 2.95734405518
y: -19.653295517
theta: 1.59928011894
speed: 11.4088115692
id: 0
t: 65
xxx after update is x: 3.28114056587
y: -20.2345695496
theta: 1.57466959953
speed: 11.4477729797
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$


maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 2.93333333333
!!!!after check statue the self.tag is [2.933333333333333, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 2.93333333333

maneuver_negotiatir.py get membership, in the get_MR function, start
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: 3.28114056587
y: -20.2345695496
theta: 1.57466959953
speed: 11.4477729797
id: 0
t: 66
xxx after update is x: 2.93179297447
y: -19.7904262543
theta: 1.61694169044
speed: 11.2240314484
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
membership is [2.888888888888889, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.93333333333,(3.2811405658721924, -20.234569549560547, 1.574669599533081),11,1,2.93333333333,0,left
!!!!change state to get
GET,0,2.93333333333,(3.2811405658721924, -20.234569549560547, 1.574669599533081),11,1,2.93333333333,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 2.97777777778
self.communication_details == 0
sending GET,0,2.93333333333,(3.2811405658721924, -20.234569549560547, 1.574669599533081),11,1,2.93333333333,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 2.97777777778




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 2.97777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.97777777778', 'Position': ['(-2.985492706298828', ' 33.339900970458984', ' 4.609424591064453)'], 'Type': 'DENY'}
car 0 received DENY,1,2.97777777778,(-2.985492706298828, 33.339900970458984, 4.609424591064453),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [2.888888888888889, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.888888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.93179297447
y: -19.7904262543
theta: 1.61694169044
speed: 11.2240314484
id: 0
t: 67
xxx after update function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: -3.62791991234
y: 31.0751533508
theta: 4.63082408905
speed: 13.8564090729
id: 1
t: 63
xxx after update is x: -3.13328695297
y: 30.5660171509
theta: 4.69286346436
speed: 14.1049947739
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65


xxx before update is x: -3.13328695297
y: 30.5660171509
theta: 4.69286346436
speed: 14.1049947739
id: 1
t: 64
xxx after update is x: -2.96289730072
y: 29.7313232422
theta: 4.64563083649
speed: 13.8952293396
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: -2.96289730072
y: 29.7313232422
theta: 4.64563083649
speed: 13.8952293396
id: 1
t: 65
xxx after update is x: -3.81578350067
y: 29.7520694733
theta: 4.61051511765
speed: 13.8458938599
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.81578350067
y: 29.7520694733
theta: 4.61051511765
speed: 13.8458938599
id: 1
t: 66
xxx after update is x: -3.32954120636
y: 28.7771663666
theta: 4.66025829315
speed: 13.8068780899
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:67


Received -->>: 
current clock is 2.97777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 2.97777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '2.93333333333', 'Sender': '0', 'Time': '2.93333333333', 'IntendedCourse': 'left', 'Position': ['3.2811405658721924', ' -20.234569549560547', ' 1.574669599533081'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,2.93333333333,(3.2811405658721924, -20.234569549560547, 1.574669599533081),11,1,2.93333333333,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.13037037037
sender travel direction is:  north
sender earliest entering time is:  1.83176581557
sender last entering time is:  2.23384447359
sender last leaving time is:  4.41582757836
my entering time is:  1.66588190432
my leaving time is:  4.28139343827
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 2.97777777778
self.communication_details == 0
sending DENY,1,2.97777777778,(-2.985492706298828, 33.339900970458984, 4.609424591064453),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




aaaaaa
aaaaaabbbbb
risk is [0.2669884309751756, 0]
222 self.state_dicts[msg.id][msg.t] is (2.931792974472046, -19.79042625427246, 1.6169416904449463, 11.224031448364258)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before ate is x: 2.96743249893
y: -18.996088028
theta: 1.69023644924
speed: 10.4193315506
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:68




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.02222222222






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.022222222222222, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.02222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.02222222222
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.02222222222,(2.9674324989318848, -18.9960880279541, 1.6902364492416382),10,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.02222222222
self.communication_details == 0
sending RELEASE,0,3.02222222222,(2.9674324989318848, -18.9960880279541, 1.6902364492416382),10,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: 2.96743249893
y: -18.996088028
theta: 1.69023644924
speed: 10.4193315506
id: 0
t: 68
xxx after update is x: 3.44336986542
y: -18.8164920807
theta: 1.63077795506
speed: 10.6805210114
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69


risk is [0.4366075223288557, 0.405965097242067]
222 self.state_dicts[msg.id][msg.t] is (-3.5696754455566406, 27.2033634185791, 4.7660698890686035, 13.717706680297852)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: 3.44336986542
y: -18.8164920807
theta: 1.63077795506
speed: 10.6805210114
id: 0
t: 69
xxx after update is x: 3.65752005577
y: -18.2774715424
theta: 1.42793989182
speed: 10.0663728714
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.65752005577
y: -18.2774715424
theta: 1.42793989182
speed: 10.0663728714
id: 0
t: 70
xxx after update is x: 3.25244235992
y: -17.4799156189
theta: 1.66651189327
speed: 10.1246290207
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:71




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: 3.25244235992
y: -17.4799156189
theta: 1.66651189327
speed: 10.1246290207
id: 0
t: 71
xxx after update is x: 3.6519818306
y: -16.9804515839
theta: 1.66643261909
speed: 10.1112222672
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.6519818306
y: -16.9804515839
theta: 1.66643261909
speed: 10.1112222672
id: 0
t: 72
xxx after update is x: 3.07502889633
y: -16.9432125092
theta: 1.46025884151
speed: 9.68342494965
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:73




going to the update function
sim.py in the sim.py update funupdate is x: -3.32954120636
y: 28.7771663666
theta: 4.66025829315
speed: 13.8068780899
id: 1
t: 67
xxx after update is x: -3.50543451309
y: 28.0130138397
theta: 4.49011564255
speed: 13.8254747391
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:68


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.02222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.50543451309
y: 28.0130138397
theta: 4.49011564255
speed: 13.8254747391
id: 1
t: 68
xxx after update is x: -3.56967544556
y: 27.2033634186
theta: 4.76606988907
speed: 13.7177066803
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69


Received -->>: 
current clock is 3.06666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.06666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '10', 'Sender': '0', 'TagID': '1', 'Time': '3.02222222222', 'Position': ['(2.9674324989318848', ' -18.9960880279541', ' 1.6902364492416382)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.02222222222,(2.9674324989318848, -18.9960880279541, 1.6902364492416382),10,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56967544556
y: 27.2033634186
theta: 4.76606988907
speed: 13.7177066803
id: 1
t: 69
xxx after update is x: -2.84304523468
y: 26.7100486755
theta: 4.54899168015
speed: 13.7745857239
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:70




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: -2.84304523468
y: 26.7100486755
theta: 4.54899168015
speed: 13.7745857239
id: 1
t: 70
xxx after update is x: -3.01104259491
y: 26.2092170715
theta: 4.72241353989
speed: 13.820189476
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4920924792184996, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2524423599243164, -17.479915618896484, 1.6665118932724, 10.124629020690918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: -3.01104259491
y: 26.2092170715
theta: 4.72241353989
speed: 13.820189476
id: 1
t: 71
xxx after update is x: -3.4409096241
y: 26.1340637207
theta: 4.6275434494
speed: 14.0200490952
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73


xxx before update is x: -3.4409096241
y: 26.1340637207
theta: 4.6275434494
speed: 14.0200490952
id: 1
t: 72
xxx after update is x: -3.50422239304
y: 25.1542472839
theta: 4.71787452698
speed: 14.399764061
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetsction 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: 3.07502889633
y: -16.9432125092
theta: 1.46025884151
speed: 9.68342494965
id: 0
t: 73
xxx after update is x: 3.05167341232
y: -16.4277324677
theta: 1.67243933678
speed: 9.80674362183
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.05167341232
y: -16.4277324677
theta: 1.67243933678
speed: 9.80674362183
id: 0
t: 74
xxx after update is x: 3.23686766624
y: -15.4409017563
theta: 1.61586904526
speed: 9.00913047791
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:75


risk is [0.3130110772767166, 0.38383575397534875]
222 self.state_dicts[msg.id][msg.t] is (-3.1722214221954346, 24.057653427124023, 4.714360237121582, 14.355576515197754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: 3.23686766624
y: -15.4409017563
theta: 1.61586904526
speed: 9.00913047791
id: 0
t: 75
xxx after update is x: 3.10466837883
y: -15.8686418533
theta: 1.52826440334
speed: 9.08950614929
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.37777777778

maneuver_negotiatir.py get membership, in the get_MR function, start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: 3.10466837883
y: -15.8686418533
theta: 1.52826440334
speed: 9.08950614929
id: 0
t: 76
xxx after update is x: 3.04530763626
y: -15.7041711807
theta: 1.60481822491
speed: 8.85054397583
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
membership is [3.3777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.37777777778,(3.104668378829956, -15.86864185333252, 1.5282644033432007),9,1,2.93333333333,0,left
!!!!change state to get
GET,0,3.37777777778,(3.104668378829956, -15.86864185333252, 1.5282644033432007),9,1,2.93333333333,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.42222222222
self.communication_details == 0
sending GET,0,3.37777777778,(3.104668378829956, -15.86864185333252, 1.5282644033432007),9,1,2.93333333333,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 3.42222222222




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.42222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.37777777778', 'Position': ['(-3.69608473777771', ' 23.32732582092285', ' 4.688483238220215)'], 'Type': 'DENY'}
car 0 received DENY,1,3.37777777778,(-3.69608473777771, 23.32732582092285, 4.688483238220215),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.377peed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: -3.50422239304
y: 25.1542472839
theta: 4.71787452698
speed: 14.399764061
id: 1
t: 73
xxx after update is x: -3.14931154251
y: 24.1961154938
theta: 4.52913093567
speed: 13.9196224213
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14931154251
y: 24.1961154938
theta: 4.52913093567
speed: 13.9196224213
id: 1
t: 74
xxx after update is x: -3.1722214222
y: 24.0576534271
theta: 4.71436023712
speed: 14.3555765152
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:75


aaaaaa
aaaaaabbbbb
risk is [0.30906451912674193, 0]
222 self.state_dicts[msg.id][msg.t] is (3.236867666244507, -15.440901756286621, 1.6158690452575684, 9.009130477905273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: -3.1722214222
y: 24.0576534271
theta: 4.71436023712
speed: 14.3555765152
id: 1
t: 75
xxx after update is x: -3.69608473778
y: 23.3273258209
theta: 4.68848323822
speed: 13.647310257
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.37777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77


Received -->>: 
current clock is 3.37777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.37777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '2.93333333333', 'Sender': '0', 'Time': '3.37777777778', 'IntendedCourse': 'left', 'Position': ['3.104668378829956', ' -15.86864185333252', ' 1.5282644033432007'], 'TagID': '0', 'Type': 'GET', 'Velocity': '9'}
car 1 received GET,0,3.37777777778,(3.104668378829956, -15.86864185333252, 1.5282644033432007),9,1,2.93333333333,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.15012345679
sender travel direction is:  north
sender earliest entering time is:  1.42417352577
sender last entering time is:  2.15012345679
sender last leaving time is:  4.52342171321
my entering time is:  1.29324647145
my leaving time is:  3.51636948611
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.37777777778
self.communication_details == 0
sending DENY,1,3.37777777778,(-3.69608473777771, 23.32732582092285, 4.688483238220215),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -3.69608473778
y: 23.3273258209
theta: 4.68848323822
speed: 13.647310257
id: 1
t: 76
xxx after update is x: -3.3216176033
y: 22.4612197876
theta: 4.56681966782
speed: 13.8672904968
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clo7777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.3777777777777778, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.42222222222






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.3777777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.42222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.37777777778
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.42222222222,(3.0453076362609863, -15.704171180725098, 1.6048182249069214),8,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.42222222222
self.communication_details == 0
sending RELEASE,0,3.42222222222,(3.0453076362609863, -15.704171180725098, 1.6048182249069214),8,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: 3.04530763626
y: -15.7041711807
theta: 1.60481822491
speed: 8.85054397583
id: 0
t: 77
xxx after update is x: 2.98656320572
y: -14.6096248627
theta: 1.79293549061
speed: 8.34632015228
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: 2.98656320572
y: -14.6096248627
theta: 1.79293549061
speed: 8.34632015228
id: 0
t: 78
xxx after update is x: 3.56215548515
y: -14.7643032074
theta: 1.62220704556
speed: 8.27617454529
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.56215548515
y: -14.7643032074
theta: 1.62220704556
speed: 8.27617454529
id: 0
t: 79
xxx after update is x: 3.55467319489
y: -14.1876068115
theta: 1.56143343449
speed: 7.55266857147
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:80




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.55467319489
y: -14.1876068115
theta: 1.56143343449
speed: 7.55266857147
id: 0
t: 80
xxx after update is x: 2.81909346581
y: -13.7436389923
theta: 1.62187814713
speed: 7.39156103134
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:81




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: 2.81909346581
y: -13.7436389923
theta: 1.62187814713
speed: 7.39156103134
id: 0
t: 81
xxx after update is x: 3.10553073883
y: -13.3000040054
theta: 1.79616439342
speed: 7.73953962326
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6124000968060278, 0.3401214463113159]
222 self.state_dicts[msg.id][msg.t] ick is 3.42222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.42222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '8', 'Sender': '0', 'TagID': '1', 'Time': '3.42222222222', 'Position': ['(3.0453076362609863', ' -15.704171180725098', ' 1.6048182249069214)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.42222222222,(3.0453076362609863, -15.704171180725098, 1.6048182249069214),8,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.3216176033
y: 22.4612197876
theta: 4.56681966782
speed: 13.8672904968
id: 1
t: 77
xxx after update is x: -3.02956151962
y: 22.2752342224
theta: 4.82477283478
speed: 14.038775444
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:78




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: -3.02956151962
y: 22.2752342224
theta: 4.82477283478
speed: 14.038775444
id: 1
t: 78
xxx after update is x: -3.41907715797
y: 20.8104782104
theta: 4.76660966873
speed: 13.6386528015
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: -3.41907715797
y: 20.8104782104
theta: 4.76660966873
speed: 13.6386528015
id: 1
t: 79
xxx after update is x: -3.44175958633
y: 21.1148166656
theta: 4.67854356766
speed: 13.8797235489
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2858727228610438, 0]
222 self.state_dicts[msg.id][msg.t] is (3.554673194885254, -14.187606811523438, 1.5614334344863892, 7.552668571472168)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.44175958633
y: 21.1148166656
theta: 4.67854356766
speed: 13.8797235489
id: 1
t: 80
xxx after update is x: -3.79044723511
y: 20.1283798218
theta: 4.8173584938
speed: 13.6486463547
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:81




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: -3.79044723511
y: 20.1283798218
theta: 4.8173584938
speed: 13.6486463547
id: 1
t: 81
xxx after update is x: -3.31163883209
y: 18.9165611267
theta: 4.85731506348
speed: 13.7858123779
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31163883209
y: 18.9165611267
theta: 4.85731506348
speed: 13.7858123779
id: 1
t: 82
xxx after update is x: -3.27107596397
y: 18.4792881012
theta: 4.63843774796
speed: 13.8058290482
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:83




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.27107596397
y: 18.479288s (-3.311638832092285, 18.916561126708984, 4.8573150634765625, 13.785812377929688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: 3.10553073883
y: -13.3000040054
theta: 1.79616439342
speed: 7.73953962326
id: 0
t: 82
xxx after update is x: 3.24721360207
y: -13.6377811432
theta: 1.60485553741
speed: 7.79707479477
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: 3.24721360207
y: -13.6377811432
theta: 1.60485553741
speed: 7.79707479477
id: 0
t: 83
xxx after update is x: 3.32251644135
y: -12.577832222
theta: 1.29887139797
speed: 7.11685037613
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.32251644135
y: -12.577832222
theta: 1.29887139797
speed: 7.11685037613
id: 0
t: 84
xxx after update is x: 3.61391401291
y: -12.6174917221
theta: 1.3243688345
speed: 7.05597162247
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85


maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.77777777778

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.688888888888889, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.77777777778,(3.6139140129089355, -12.617491722106934, 1.3243688344955444),7,1,2.93333333333,0,left
!!!!change state to get
GET,0,3.77777777778,(3.6139140129089355, -12.617491722106934, 1.3243688344955444),7,1,2.93333333333,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.77777777778
self.communication_details == 0
sending GET,0,3.77777777778,(3.6139140129089355, -12.617491722106934, 1.3243688344955444),7,1,2.93333333333,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.77777777778






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
Received -->>: 
current clock is 3.77777777778




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.77777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.73333333333', 'Position': ['(-3.1063361167907715', ' 17.669483184814453', ' 4.563723087310791)'], 'Type': 'DENY'}
car 0 received DENY,1,3.73333333333,(-3.1063361167907715, 17.669483184814453, 4.563723087310791),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.688888888888889, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py m1012
theta: 4.63843774796
speed: 13.8058290482
id: 1
t: 83
xxx after update is x: -3.10633611679
y: 17.6694831848
theta: 4.56372308731
speed: 13.9362421036
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.73333333333






self.maneuver_requested None
aaaaaa
aaaaaabbbbb
risk is [0.10688732723408902, 0]
222 self.state_dicts[msg.id][msg.t] is (3.322516441345215, -12.577832221984863, 1.298871397972107, 7.11685037612915)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85


Received -->>: 
current clock is 3.73333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.73333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '2.93333333333', 'Sender': '0', 'Time': '3.77777777778', 'IntendedCourse': 'left', 'Position': ['3.6139140129089355', ' -12.617491722106934', ' 1.3243688344955444'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,3.77777777778,(3.6139140129089355, -12.617491722106934, 1.3243688344955444),7,1,2.93333333333,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.167901234568
sender travel direction is:  north
xxx before update is x: -3.10633611679
y: 17.6694831848
theta: 4.56372308731
speed: 13.9362421036
id: 1
t: 84
xxx after update is x: -2.92751049995
y: 18.0843143463
theta: 4.8783249855
speed: 13.9087610245
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
sender earliest entering time is:  1.04307859918
sender last entering time is:  2.16790123457
sender last leaving time is:  4.54119949099
my entering time is:  0.90365957943
my leaving time is:  2.71941792429
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.77777777778
self.communication_details == 0
sending DENY,1,3.73333333333,(-3.1063361167907715, 17.669483184814453, 4.563723087310791),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.92751049995
y: 18.0843143463
theta: 4.8783249855
speed: 13.9087610245
id: 1
t: 85
xxx after update is x: -2.81738710403
y: 16.9346904755
theta: 4.61623382568
speed: 13.7785634995
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:86




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.81738710403
y: 16.9346904755
theta: 4.61623382568
speed: 13.7785634995
id: 1
t: 86
xxx after update is x: -2.68685245514
y: 15.8732814789
theta: 4.57366275787
speed: 13.8436250687
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.idessage_processing,in request processing, new membership =  [3.688888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: 3.61391401291
y: -12.6174917221
theta: 1.3243688345
speed: 7.05597162247
id: 0
t: 85
xxx after update is x: 3.1831202507
y: -11.888958931
theta: 1.59975886345
speed: 6.69041013718
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87


xxx before update is x: 3.1831202507
y: -11.888958931
theta: 1.59975886345
speed: 6.69041013718
id: 0
t: 86
xxx after update is x: 3.38964557648
y: -11.7643213272
theta: 1.62044751644
speed: 6.738966465
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.38964557648
y: -11.7643213272
theta: 1.62044751644
speed: 6.738966465
id: 0
t: 87
xxx after update is x: 3.01801347733
y: -11.0618524551
theta: 1.6117926836
speed: 6.2092833519
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:88


risk is [0.6056716847745256, 0.020981978988657626]
222 self.state_dicts[msg.id][msg.t] is (-3.3297269344329834, 15.647156715393066, 4.790065288543701, 13.793148040771484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: 3.01801347733
y: -11.0618524551
theta: 1.6117926836
speed: 6.2092833519
id: 0
t: 88
xxx after update is x: 3.12901520729
y: -10.5383501053
theta: 1.67850232124
speed: 5.93487644196
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: 3.12901520729
y: -10.5383501053
theta: 1.67850232124
speed: 5.93487644196
id: 0
t: 89
xxx after update is x: 3.28643655777
y: -10.4753913879
theta: 1.67200314999
speed: 5.84073734283
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: 3.28643655777
y: -10.4753913879
theta: 1.67200314999
speed: 5.84073734283
id: 0
t: 90
xxx after update is x: 3.89756822586
y: -11.0121526718
theta: 1.55110216141
speed: 5.60460329056
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: 3.89756822586
y: -11.0121526718
theta: 1.55110216141
speed: 5.60460329056
id: 0
t: 91
xxx after update is x: 2.84950375557
y: -10.4377450943
theta: 1.63015592098
speed: 5.06685352325
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.08888888889






self.maneuver_requested == 1):
xxx before update is x: -2.68685245514
y: 15.8732814789
theta: 4.57366275787
speed: 13.8436250687
id: 1
t: 87
xxx after update is x: -3.32972693443
y: 15.6471567154
theta: 4.79006528854
speed: 13.7931480408
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:88


aaaaaa
aaaaaabbbbb
risk is [0.2642657797795913, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0180134773254395, -11.06185245513916, 1.6117926836013794, 6.209283351898193)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32972693443
y: 15.6471567154
theta: 4.79006528854
speed: 13.7931480408
id: 1
t: 88
xxx after update is x: -2.90305948257
y: 15.4672250748
theta: 4.92033338547
speed: 13.8860197067
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.90305948257
y: 15.4672250748
theta: 4.92033338547
speed: 13.8860197067
id: 1
t: 89
xxx after update is x: -2.77345395088
y: 14.4250326157
theta: 4.80541753769
speed: 13.9975318909
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.77345395088
y: 14.4250326157
theta: 4.80541753769
speed: 13.9975318909
id: 1
t: 90
xxx after update is x: -3.19451785088
y: 14.3320846558
theta: 4.99837493896
speed: 14.0766954422
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19451785088
y: 14.3320846558
theta: 4.99837493896
speed: 14.0766954422
id: 1
t: 91
xxx after update is x: -3.16622114182
y: 13.4444770813
theta: 4.73712825775
speed: 14.1601133347
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:92


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.08888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93


Received -->>: 
current clock is 4.08888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.08888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '5', 'Sender': '0', 'TagID': '1', 'Time': '4.08888888889', 'Position': ['(2.849503755569458', ' -10.437745094299316', ' 1.6301559209823608)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.08888888889,(2.849503755569458, -10.437745094299316, 1.6301559209823608),5,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -3.16622114182
y: 13.4444770813
theta: 4.73712825775
speed: 14.1601133347
id: 1
t: 92
xxx after update is x: -2.92165446281
y: 12.9100723267
theta: 4.69119930267
speed: 13.9741153717
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim. 

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: 2.84950375557
y: -10.4377450943
theta: 1.63015592098
speed: 5.06685352325
id: 0
t: 92
xxx after update is x: 3.2238843441
y: -10.6261873245
theta: 1.61895358562
speed: 5.25783538818
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.088888888888889, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.08888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.08888888889
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.08888888889,(2.849503755569458, -10.437745094299316, 1.6301559209823608),5,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.13333333333
self.communication_details == 0
sending RELEASE,0,4.08888888889,(2.849503755569458, -10.437745094299316, 1.6301559209823608),5,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
aaaaaa
risk is [0.5411243259615273, 1.4260979630647315e-15]
222 self.state_dicts[msg.id][msg.t] is (-2.921654462814331, 12.910072326660156, 4.69119930267334, 13.974115371704102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94


xxx before update is x: 3.2238843441
y: -10.6261873245
theta: 1.61895358562
speed: 5.25783538818
id: 0
t: 93
xxx after update is x: 3.22017788887
y: -9.60990333557
theta: 1.50253999233
speed: 5.23336648941
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: 3.22017788887
y: -9.60990333557
theta: 1.50253999233
speed: 5.23336648941
id: 0
t: 94
xxx after update is x: 3.28241896629
y: -9.97737789154
theta: 1.51546645164
speed: 4.48763895035
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: 3.28241896629
y: -9.97737789154
theta: 1.51546645164
speed: 4.48763895035
id: 0
t: 95
xxx after update is x: 3.14832377434
y: -10.1633853912
theta: 1.595089674
speed: 4.52197790146
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: 3.14832377434
y: -10.1633853912
theta: 1.595089674
speed: 4.52197790146
id: 0
t: 96
xxx after update is x: 3.31017303467
y: -9.39676189423
theta: 1.54651546478
speed: 4.19865989685
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98


xxx before update is x: 3.31017303467
y: -9.39676189423
theta: 1.54651546478
speed: 4.19865989685
id: 0
t: 97
xxx after update is x: 2.36177587509
y: -9.2980298996
theta: 1.4727127552
speed: 3.87733149529
id: 0
t: 98
maneuver_negotiatirpy update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.92165446281
y: 12.9100723267
theta: 4.69119930267
speed: 13.9741153717
id: 1
t: 93
xxx after update is x: -3.18405818939
y: 11.6701622009
theta: 4.81388807297
speed: 13.8325967789
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94


aaaaaa
aaaaaabbbbb
risk is [0.4082390619441089, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2201778888702393, -9.609903335571289, 1.5025399923324585, 5.2333664894104)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: -3.18405818939
y: 11.6701622009
theta: 4.81388807297
speed: 13.8325967789
id: 1
t: 94
xxx after update is x: -3.54112434387
y: 11.2945299149
theta: 4.77726364136
speed: 13.8910474777
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: -3.54112434387
y: 11.2945299149
theta: 4.77726364136
speed: 13.8910474777
id: 1
t: 95
xxx after update is x: -3.08733606339
y: 10.9131135941
theta: 4.6101307869
speed: 13.6256551743
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: -3.08733606339
y: 10.9131135941
theta: 4.6101307869
speed: 13.6256551743
id: 1
t: 96
xxx after update is x: -3.59600234032
y: 10.2775354385
theta: 4.7987370491
speed: 13.6094532013
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98


xxx before update is x: -3.59600234032
y: 10.2775354385
theta: 4.7987370491
speed: 13.6094532013
id: 1
t: 97
xxx after update is x: -3.56072354317
y: 9.33056926727
theta: 4.99603939056
speed: 14.1375741959
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56072354317
y: 9.33056926727
theta: 4.99603939056
speed: 14.1375741959
id: 1
t: 98
xxx after update is x: -3.2104113102
y: 8.9769411087
theta: 4.71153211594
speed: 13.6423549652
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:99


aaaaaa
aaaaaabbbbb
risk is [0.4275993408483065, 0]
222 self.state_dicts[msg.id][msg.t] is (3.163095235824585, -8.71021556854248, 1.5338096618652344, 3.607525110244751)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.4






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: -3.2104113102
y: 8.9769411087
theta: 4.71153211594
speed: 13.6423549652
id: 1
t: 99
xxx after update is x: -3.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: 2.36177587509
y: -9.2980298996
theta: 1.4727127552
speed: 3.87733149529
id: 0
t: 98
xxx after update is x: 3.16309523582
y: -8.71021556854
theta: 1.53380966187
speed: 3.60752511024
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.43750051052129796, 0.012501661231114902]
222 self.state_dicts[msg.id][msg.t] is (-3.210411310195923, 8.976941108703613, 4.711532115936279, 13.642354965209961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


xxx before update is x: 3.16309523582
y: -8.71021556854
theta: 1.53380966187
speed: 3.60752511024
id: 0
t: 99
xxx after update is x: 3.33635592461
y: -8.62792778015
theta: 1.42131268978
speed: 3.34593844414
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: 3.33635592461
y: -8.62792778015
theta: 1.42131268978
speed: 3.34593844414
id: 0
t: 100
xxx after update is x: 2.86248517036
y: -8.87110710144
theta: 1.60605192184
speed: 3.81018781662
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.48888888889

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.355555555555555, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.48888888889,(2.86248517036438, -8.87110710144043, 1.6060519218444824),3,1,2.93333333333,0,left
!!!!change state to get
GET,0,4.48888888889,(2.86248517036438, -8.87110710144043, 1.6060519218444824),3,1,2.93333333333,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.48888888889
self.communication_details == 0
sending GET,0,4.48888888889,(2.86248517036438, -8.87110710144043, 1.6060519218444824),3,1,2.93333333333,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.48888888889






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
Received -->>: 
current clock is 4.48888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.48888888889', 'Position': ['(-3.210411310195923', ' 8.976941108703613', ' 4.711532115936279)'], 'Type': 'DENY'}
car 0 received DENY,1,4.48888888889,(-3.210411310195923, 8.976941108703613, 4.711532115936279),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.4, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_n.14688158035
y: 7.60925483704
theta: 4.7245464325
speed: 13.7677249908
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.14688158035
y: 7.60925483704
theta: 4.7245464325
speed: 13.7677249908
id: 1
t: 100
xxx after update is x: -3.32465219498
y: 6.9816699028
theta: 4.7183432579
speed: 14.0292921066
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 4.48888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '2.93333333333', 'Sender': '0', 'Time': '4.48888888889', 'IntendedCourse': 'left', 'Position': ['2.86248517036438', ' -8.87110710144043', ' 1.6060519218444824'], 'TagID': '0', 'Type': 'GET', 'Velocity': '3'}
car 1 received GET,0,4.48888888889,(2.86248517036438, -8.87110710144043, 1.6060519218444824),3,1,2.93333333333,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.19950617284
sender travel direction is:  north
sender earliest entering time is:  0.54036032219
sender last entering time is:  2.19950617284
sender last leaving time is:  4.57280442926
my entering time is:  0.19950617284
my leaving time is:  1.24218640584
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.48888888889
self.communication_details == 0
sending DENY,1,4.48888888889,(-3.210411310195923, 8.976941108703613, 4.711532115936279),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: -3.32465219498
y: 6.9816699028
theta: 4.7183432579
speed: 14.0292921066
id: 1
t: 101
xxx after update is x: -3.65227651596
y: 6.89735507965
theta: 4.77131080627
speed: 13.3787279129
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: -3.65227651596
y: 6.89735507965
theta: 4.77131080627
speed: 13.3787279129
id: 1
t: 102
xxx after update is x: -3.6522974968
y: 6.70923280716
theta: 4.49046564102
speed: 13.8205127716
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.6522974968
y: 6.70923280716
theta: 4.49046564102
speed: 13.8205127716
id: 1
t: 103
xxx after update is x: -3.0269742012
y: 5.71694898605
theta: 4.76992273331
speed: 13.9150123596
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:104




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: -3.0269742012
y: 5.71694898605
theta: 4.76992273331
speed: 13.9150123596
id: 1
t: 104
xxx after update is x: -3.42716217041
y: 5.64486980438
theta: 4.59832286835
speed: 14.0302877426
id: 1
t: 105
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.4, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. sfinish
finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: 2.86248517036
y: -8.87110710144
theta: 1.60605192184
speed: 3.81018781662
id: 0
t: 101
xxx after update is x: 3.31699156761
y: -8.17125415802
theta: 1.71118450165
speed: 3.521879673
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.31699156761
y: -8.17125415802
theta: 1.71118450165
speed: 3.521879673
id: 0
t: 102
xxx after update is x: 2.7964451313
y: -8.44706439972
theta: 1.53981232643
speed: 2.755890131
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:103


risk is [0.7303786156959646, 0.036367992892025025]
222 self.state_dicts[msg.id][msg.t] is (-3.6522974967956543, 6.709232807159424, 4.4904656410217285, 13.820512771606445)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: 2.7964451313
y: -8.44706439972
theta: 1.53981232643
speed: 2.755890131
id: 0
t: 103
xxx after update is x: 3.13804531097
y: -7.91088342667
theta: 1.47036099434
speed: 2.86603450775
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: 3.13804531097
y: -7.91088342667
theta: 1.47036099434
speed: 2.86603450775
id: 0
t: 104
xxx after update is x: 2.92526125908
y: -8.20244407654
theta: 1.66756510735
speed: 2.28986048698
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: 2.92526125908
y: -8.20244407654
theta: 1.66756510735
speed: 2.28986048698
id: 0
t: 105
xxx after update is x: 3.31323361397
y: -7.34244537354
theta: 1.6325186491
speed: 2.2436709404
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.31323361397
y: -7.34244537354
theta: 1.6325186491
speed: 2.2436709404
id: 0
t: 106
xxx after update is x: 3.36081266403
y: -7.62146425247
theta: 1.70820081234
speed: 1.79714179039
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.36081266403
y: -7.62146425247
theta: 1.70820081234
speed: 1.79714179039
id: 0
t: 107
xxx after update is x: 3.50168418884
y: -8.14931201935
theta: 1.62103652954
speed: 1.41268205643
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108




going egotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6454460442175431, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9252612590789795, -8.202444076538086, 1.667565107345581, 2.289860486984253)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: -3.42716217041
y: 5.64486980438
theta: 4.59832286835
speed: 14.0302877426
id: 1
t: 105
xxx after update is x: -3.35609292984
y: 4.86416912079
theta: 4.61619567871
speed: 14.3175268173
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.35609292984
y: 4.86416912079
theta: 4.61619567871
speed: 14.3175268173
id: 1
t: 106
xxx after update is x: -3.41665554047
y: 4.16557598114
theta: 4.55922698975
speed: 13.6696376801
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: -3.41665554047
y: 4.16557598114
theta: 4.55922698975
speed: 13.6696376801
id: 1
t: 107
xxx after update is x: -3.83703732491
y: 3.72220373154
theta: 4.91733312607
speed: 13.880982399
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.8






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: -3.83703732491
y: 3.72220373154
theta: 4.91733312607
speed: 13.880982399
id: 1
t: 108
xxx after update is x: -3.56546640396
y: 2.38608813286
theta: 4.82419538498
speed: 13.5528774261
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 4.84444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.84444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '1', 'Sender': '0', 'TagID': '1', 'Time': '4.84444444444', 'Position': ['(3.715059995651245', ' -8.092412948608398', ' 1.5336819887161255)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.84444444444,(3.715059995651245, -8.092412948608398, 1.5336819887161255),1,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56546640396
y: 2.38608813286
theta: 4.82419538498
speed: 13.5528774261
id: 1
t: 109
xxx after update is x: -3.42265725136
y: 2.102247715
theta: 4.77434539795
speed: 13.9143648148
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110


aaaaaa
aaaaaabbbbb
risk is [0.6322414950061122, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1113364696502686, -7.9947590827941895, 1.4515652656555176, 1.3151111602783203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py updto the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.50168418884
y: -8.14931201935
theta: 1.62103652954
speed: 1.41268205643
id: 0
t: 108
xxx after update is x: 3.71505999565
y: -8.09241294861
theta: 1.53368198872
speed: 1.3355448246
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:109


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.84444444444






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.7555555555555555, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.84444444444
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.75555555556
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.84444444444,(3.715059995651245, -8.092412948608398, 1.5336819887161255),1,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.84444444444
self.communication_details == 0
sending RELEASE,0,4.84444444444,(3.715059995651245, -8.092412948608398, 1.5336819887161255),1,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
risk is [0.6811695485357365, 0.02077062506005178]
222 self.state_dicts[msg.id][msg.t] is (-3.5654664039611816, 2.3860881328582764, 4.824195384979248, 13.552877426147461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110


xxx before update is x: 3.71505999565
y: -8.09241294861
theta: 1.53368198872
speed: 1.3355448246
id: 0
t: 109
xxx after update is x: 3.11133646965
y: -7.99475908279
theta: 1.45156526566
speed: 1.31511116028
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.11133646965
y: -7.99475908279
theta: 1.45156526566
speed: 1.31511116028
id: 0
t: 110
xxx after update is x: 3.07201981544
y: -7.59870910645
theta: 1.64435505867
speed: 0.837745010853
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:111




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: 3.07201981544
y: -7.59870910645
theta: 1.64435505867
speed: 0.837745010853
id: 0
t: 111
xxx after update is x: 3.2834353447
y: -7.85917758942
theta: 1.53768718243
speed: 1.05307483673
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: 3.2834353447
y: -7.85917758942
theta: 1.53768718243
speed: 1.05307483673
id: 0
t: 112
xxx after update is x: 2.98675656319
y: -7.00407743454
theta: 1.5815756321
speed: 0.768885314465
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: 2.98675656319
y: -7.00407743454
theta: 1.5815756321
speed: 0.768885314465
id: 0
tate function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: -3.42265725136
y: 2.102247715
theta: 4.77434539795
speed: 13.9143648148
id: 1
t: 110
xxx after update is x: -3.65698504448
y: 2.33178186417
theta: 4.5868396759
speed: 13.7875518799
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: -3.65698504448
y: 2.33178186417
theta: 4.5868396759
speed: 13.7875518799
id: 1
t: 111
xxx after update is x: -3.50783109665
y: 1.29255366325
theta: 4.55839824677
speed: 14.0917549133
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: -3.50783109665
y: 1.29255366325
theta: 4.55839824677
speed: 14.0917549133
id: 1
t: 112
xxx after update is x: -2.76997947693
y: 0.678933799267
theta: 4.62976551056
speed: 13.7711343765
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.38998406701211924, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9867565631866455, -7.004077434539795, 1.581575632095337, 0.7688853144645691)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: -2.76997947693
y: 0.678933799267
theta: 4.62976551056
speed: 13.7711343765
id: 1
t: 113
xxx after update is x: -2.8790640831
y: -0.81085652113
theta: 4.77839803696
speed: 13.7919111252
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: -2.8790640831
y: -0.81085652113
theta: 4.77839803696
speed: 13.7919111252
id: 1
t: 114
xxx after update is x: -3.71105504036
y: -0.681004822254
theta: 4.88399839401
speed: 13.9355716705
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: -3.71105504036
y: -0.681004822254
theta: 4.88399839401
speed: 13.9355716705
id: 1
t: 115
xxx after update is x: -3.44577455521
y: -1.71573352814
theta: 4.53411626816
speed: 13.838558197
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.15555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: -3.44577455521
y: -1.71573352814
theta: 4.53411626816
speed: 13.838558197
id: 1
t: 116
xxx after update is x: -3.5046248436
y: -1.99576282501
theta: 4.84460163116
speed: 13.9054307938
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 5.2




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py messag: 113
xxx after update is x: 3.26826286316
y: -7.77994537354
theta: 1.65326523781
speed: 0.49543941021
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: 3.26826286316
y: -7.77994537354
theta: 1.65326523781
speed: 0.49543941021
id: 0
t: 114
xxx after update is x: 2.63322162628
y: -7.9605383873
theta: 1.60776376724
speed: -0.0817524343729
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4409764809587673, 0.00015052933655442042]
222 self.state_dicts[msg.id][msg.t] is (-3.711055040359497, -0.6810048222541809, 4.883998394012451, 13.935571670532227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: 2.63322162628
y: -7.9605383873
theta: 1.60776376724
speed: -0.0817524343729
id: 0
t: 115
xxx after update is x: 3.43641996384
y: -6.81491804123
theta: 1.6552567482
speed: -0.0620662793517
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.15555555556

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.155555555555556, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.15555555556,(3.43641996383667, -6.814918041229248, 1.655256748199463),0,1,2.93333333333,0,left
!!!!change state to get
GET,0,5.15555555556,(3.43641996383667, -6.814918041229248, 1.655256748199463),0,1,2.93333333333,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 5.15555555556
self.communication_details == 0
sending GET,0,5.15555555556,(3.43641996383667, -6.814918041229248, 1.655256748199463),0,1,2.93333333333,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.15555555556






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
xxx before update is x: 3.43641996384
y: -6.81491804123
theta: 1.6552567482
speed: -0.0620662793517
id: 0
t: 116
xxx after update is x: 3.35287117958
y: -7.71724939346
theta: 1.63899075985
speed: 0.418261736631
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
finish try maneuver
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 5.2




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '5.2', 'Position': ['(-3.445774555206299', ' -1.715733528137207', ' 4.534116268157959)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.2,(-3.445774555206299, -1.715733528137207, 4.53411e_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '2.93333333333', 'Sender': '0', 'Time': '5.15555555556', 'IntendedCourse': 'left', 'Position': ['3.43641996383667', ' -6.814918041229248', ' 1.655256748199463'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,5.15555555556,(3.43641996383667, -6.814918041229248, 1.655256748199463),0,1,2.93333333333,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.229135802469
maneuver_negotiatir.py sender travel direction is none
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.2,(-3.445774555206299, -1.715733528137207, 4.534116268157959),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [9.88888888888889, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 5.2
self.communication_details == 0
sending GRANT,1,5.2,(-3.445774555206299, -1.715733528137207, 4.534116268157959),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 5.2




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.5046248436
y: -1.99576282501
theta: 4.84460163116
speed: 13.9054307938
id: 1
t: 117
xxx after update is x: -3.11453390121
y: -2.65652322769
theta: 4.87980747223
speed: 13.9939603806
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: -3.11453390121
y: -2.65652322769
theta: 4.87980747223
speed: 13.9939603806
id: 1
t: 118
xxx after update is x: -3.39103341103
y: -3.76692199707
theta: 4.55229997635
speed: 14.0845403671
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3632298322635184, 0.98299482074789]
222 self.state_dicts[msg.id][msg.t] is (3.7659342288970947, -7.730093955993652, 1.6301201581954956, 0.0566459596157074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.39103341103
y: -3.76692199707
theta: 4.55229997635
speed: 14.0845403671
id: 1
t: 119
xxx after update is x: -3.02774882317
y: -3.44946551323
theta: 4.58077716827
speed: 13.3439741135
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: -3.02774882317
y: -3.44946551323
theta: 4.58077716827
speed: 13.3439741135
id: 1
t: 120
xxx after update is x: -3.23635554314
y: -4.51902246475
theta: 4.8108959198
speed: 14.0805873871
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23635554314
y: -4.51902246475
theta: 4.8108959198
speed: 14.0805873871
id: 1
t: 121
xxx after update is x: -3.87148571014
y: -5.57131528854
theta: 4.75437164307
speed: 13.8317041397
id: 1
t: 122
maneuver_negotiatir.py fin6268157959),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.155555555555556, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.155555555555556, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.35287117958
y: -7.71724939346
theta: 1.63899075985
speed: 0.418261736631
id: 0
t: 117
xxx after update is x: 3.00256991386
y: -7.75220489502
theta: 1.54564523697
speed: 0.234200030565
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: 3.00256991386
y: -7.75220489502
theta: 1.54564523697
speed: 0.234200030565
id: 0
t: 118
xxx after update is x: 3.7659342289
y: -7.73009395599
theta: 1.6301201582
speed: 0.0566459596157
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120


xxx before update is x: 3.7659342289
y: -7.73009395599
theta: 1.6301201582
speed: 0.0566459596157
id: 0
t: 119
xxx after update is x: 3.3766283989
y: -7.36788368225
theta: 1.63889431953
speed: -0.0344201140106
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3584586325242724, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0277488231658936, -3.44946551322937, 4.580777168273926, 13.343974113464355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.3766283989
y: -7.36788368225
theta: 1.63889431953
speed: -0.0344201140106
id: 0
t: 120
xxx after update is x: 2.64568853378
y: -7.89635515213
theta: 1.47131645679
speed: 0.476347476244
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:121




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


xxx before update is x: 2.64568853378
y: -7.89635515213
theta: 1.47131645679
speed: 0.476347476244
id: 0
t: 121
xxx after update is x: 3.24366903305
y: -7.47116327286
theta: 1.47759687901
speed: 0.0341199748218
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.24366903305
y: -7.47116327286
theta: 1.47759687901
speed: 0.0341199748218
id: 0
t: 122
xxx after update is x: 3.46221208572
y: -7.98066425323
theta: 1.61905908585
speed: 0.058592967689
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:123




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: 3.46221208572
y: -7.98066425323
theta:ish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:122




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: -3.87148571014
y: -5.57131528854
theta: 4.75437164307
speed: 13.8317041397
id: 1
t: 122
xxx after update is x: -2.68090200424
y: -5.93069314957
theta: 4.67715644836
speed: 14.0168676376
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9935586828614571, 0.9626434475492927]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.462212085723877, -7.980664253234863, 1.6190590858459473, 0.05859296768903732)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124


xxx before update is x: -2.68090200424
y: -5.93069314957
theta: 4.67715644836
speed: 14.0168676376
id: 1
t: 123
xxx after update is x: -2.99669933319
y: -6.1776471138
theta: 4.70844745636
speed: 13.3737430573
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.51111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: -2.99669933319
y: -6.1776471138
theta: 4.70844745636
speed: 13.3737430573
id: 1
t: 124
xxx after update is x: -3.12148165703
y: -7.25813770294
theta: 4.82723760605
speed: 13.8344545364
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: -3.12148165703
y: -7.25813770294
theta: 4.82723760605
speed: 13.8344545364
id: 1
t: 125
xxx after update is x: -3.14927721024
y: -7.60554218292
theta: 4.6616435051
speed: 13.7896900177
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: -3.14927721024
y: -7.60554218292
theta: 4.6616435051
speed: 13.7896900177
id: 1
t: 126
xxx after update is x: -3.13171744347
y: -8.36590480804
theta: 4.60918188095
speed: 13.9268312454
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9222122728248805, 0.5007999999999979]
Stops!
222 self.state_dicts[msg.id][msg.t] is (2.5801358222961426, -7.760324001312256, 1.5047125816345215, 0.3918595016002655)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: -3.13171744347
y: -8.36590480804
theta: 4.60918188095
speed: 13.9268312454
id: 1
t: 127
xxx after update is x: -2.8146469593
y: -8.65858364105
theta: 4.88340950012
speed: 13.3440351486
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin fu 1.61905908585
speed: 0.058592967689
id: 0
t: 123
xxx after update is x: 3.66671967506
y: -7.6324262619
theta: 1.58440446854
speed: 0.094015493989
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.51111111111






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.511111111111111, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 5.51111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.51111111111
self.TMan is 5
Empty
self.agents_to_ask is []
stopped retry timer
deny not in message
maneuver_negotiatir.py in the domaneuver function - start
risk is [0.5089752663421547, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.996699333190918, -6.177647113800049, 4.708447456359863, 13.373743057250977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
added car with id 0 to grantlist. current grantlist:  {0: [10.333333333333332, 'left']}
Doing maneuver
maneuver_negotiatir.py finish the do maneuver function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.66671967506
y: -7.6324262619
theta: 1.58440446854
speed: 0.094015493989
id: 0
t: 124
xxx after update is x: 3.3955385685
y: -7.45684337616
theta: 1.54777622223
speed: 0.0803919807076
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:125


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: 3.3955385685
y: -7.45684337616
theta: 1.54777622223
speed: 0.0803919807076
id: 0
t: 125
xxx after update is x: 3.42126560211
y: -7.67646741867
theta: 1.53821516037
speed: 0.542688250542
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.42126560211
y: -7.67646741867
theta: 1.53821516037
speed: 0.542688250542
id: 0
t: 126
xxx after update is x: 2.5801358223
y: -7.76032400131
theta: 1.50471258163
speed: 0.3918595016
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:127




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: 2.5801358223
y: -7.76032400131
theta: 1.50471258163
speed: 0.3918595016
id: 0
t: 127
xxx after update is x: 3.34496188164
y: -7.36356878281
theta: 1.49311280251
speed: 0.500511229038
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: 3.34496188164
y: -7.36356878281
theta: 1.49311280251
speed: 0.500511229038
id: 0
t: 128
xxx after update is x: 3.30678677559
y: -7.56439733505
theta: 1.64096188545
speed: 0.574793040752
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9230495107799207, 0.9994753142032802]
222 self.state_dicts[msg.id][msg.t] is (-3.5980634689331055, -9.366560935974121, 4.660686492919922, 13.574222564697266)
if we have all measurements for a certain tinction, finish the n times spin:129

xxx before update is x: -2.8146469593
y: -8.65858364105
theta: 4.88340950012
speed: 13.3440351486
id: 1
t: 128
xxx after update is x: -3.59806346893
y: -9.36656093597
theta: 4.66068649292
speed: 13.5742225647
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.59806346893
y: -9.36656093597
theta: 4.66068649292
speed: 13.5742225647
id: 1
t: 129
xxx after update is x: -3.41476726532
y: -10.6515789032
theta: 4.87163925171
speed: 14.073592186
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:130




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131


xxx before update is x: -3.41476726532
y: -10.6515789032
theta: 4.87163925171
speed: 14.073592186
id: 1
t: 130
xxx after update is x: -3.33811402321
y: -10.3038682938
theta: 4.75122642517
speed: 14.0477581024
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.82222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: -3.33811402321
y: -10.3038682938
theta: 4.75122642517
speed: 14.0477581024
id: 1
t: 131
xxx after update is x: -2.95852088928
y: -11.7431154251
theta: 4.65526390076
speed: 13.6444940567
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133


xxx before update is x: -2.95852088928
y: -11.7431154251
theta: 4.65526390076
speed: 13.6444940567
id: 1
t: 132
xxx after update is x: -3.35630989075
y: -11.6066608429
theta: 4.8056435585
speed: 13.5454053879
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134


xxx before update is x: -3.35630989075
y: -11.6066608429
theta: 4.8056435585
speed: 13.5454053879
id: 1
t: 133
xxx after update is x: -3.26235437393
y: -11.9926509857
theta: 4.6849822998
speed: 13.6853265762
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7440969483418675, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (3.013826608657837, -7.1984333992004395, 1.6151559352874756, 2.6072378158569336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.26235437393
y: -11.9926509857
theta: 4.6849822998
speed: 13.6853265762
id: 1
t: 134
xxx after update is x: -3.89844036102
y: -13.2423601151
theta: 4.74464797974
speed: 14.1784801483
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:135




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: -3.89844036102
y: -13.2423601151
theta: 4.7446me-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: 3.30678677559
y: -7.56439733505
theta: 1.64096188545
speed: 0.574793040752
id: 0
t: 129
xxx after update is x: 3.4076693058
y: -7.09477043152
theta: 1.45014810562
speed: 1.67449939251
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131


xxx before update is x: 3.4076693058
y: -7.09477043152
theta: 1.45014810562
speed: 1.67449939251
id: 0
t: 130
xxx after update is x: 2.69291782379
y: -6.95099973679
theta: 1.56434738636
speed: 1.741507411
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


xxx before update is x: 2.69291782379
y: -6.95099973679
theta: 1.56434738636
speed: 1.741507411
id: 0
t: 131
xxx after update is x: 3.93968987465
y: -7.24776887894
theta: 1.45309078693
speed: 1.88367295265
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.86666666667






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133


xxx before update is x: 3.93968987465
y: -7.24776887894
theta: 1.45309078693
speed: 1.88367295265
id: 0
t: 132
xxx after update is x: 3.55236649513
y: -6.53985261917
theta: 1.65405678749
speed: 1.88620328903
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.55236649513
y: -6.53985261917
theta: 1.65405678749
speed: 1.88620328903
id: 0
t: 133
xxx after update is x: 3.01382660866
y: -7.1984333992
theta: 1.61515593529
speed: 2.60723781586
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134


aaaaaa
risk is [0.3657658255780186, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2623543739318848, -11.992650985717773, 4.6849822998046875, 13.68532657623291)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: 3.01382660866
y: -7.1984333992
theta: 1.61515593529
speed: 2.60723781586
id: 0
t: 134
xxx after update is x: 2.62695646286
y: -7.02350091934
theta: 1.6833575964
speed: 2.4963991642
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136


xxx before update is x: 2.62695646286
y: -7.02350091934
theta: 1.6833575964
speed: 2.4963991642
id: 0
t: 135
xxx after update is x: 3.23375153542
y: -6.57794380188
theta: 1.60491657257
speed: 3.32074379921
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man4797974
speed: 14.1784801483
id: 1
t: 135
xxx after update is x: -3.91679430008
y: -13.7040109634
theta: 4.62571191788
speed: 13.6806173325
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: -3.91679430008
y: -13.7040109634
theta: 4.62571191788
speed: 13.6806173325
id: 1
t: 136
xxx after update is x: -3.14719939232
y: -14.0425825119
theta: 4.86840486526
speed: 13.6655187607
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [3.60035521918117e-19, 0.46879999999999805]
222 self.state_dicts[msg.id][msg.t] is (3.219559907913208, -7.690278053283691, 1.4830435514450073, 3.101426601409912)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14719939232
y: -14.0425825119
theta: 4.86840486526
speed: 13.6655187607
id: 1
t: 137
xxx after update is x: -3.02870869637
y: -15.1168394089
theta: 4.86074256897
speed: 13.7880439758
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: -3.02870869637
y: -15.1168394089
theta: 4.86074256897
speed: 13.7880439758
id: 1
t: 138
xxx after update is x: -3.3689520359
y: -15.7616386414
theta: 4.78536272049
speed: 14.1539812088
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.17777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: -3.3689520359
y: -15.7616386414
theta: 4.78536272049
speed: 14.1539812088
id: 1
t: 139
xxx after update is x: -2.92725300789
y: -16.7967987061
theta: 4.66615486145
speed: 13.5352907181
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.92725300789
y: -16.7967987061
theta: 4.66615486145
speed: 13.5352907181
id: 1
t: 140
xxx after update is x: -3.07307910919
y: -17.3362178802
theta: 4.78715896606
speed: 13.6777868271
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:141


risk is [1.0694257506473367e-34, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (3.5036122798919678, -6.460000514984131, 1.712965488433838, 4.10084342956543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: -3.07307910919
y: -17.3362178802
theta: 4.78715896606
speed: 13.6777868271
id: 1
t: 141
xxx after update is x: -2.92247056961
y: -17.5734920502
theta: 4.73810005188
speed: 14.2403516769
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros _init:
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: 3.23375153542
y: -6.57794380188
theta: 1.60491657257
speed: 3.32074379921
id: 0
t: 136
xxx after update is x: 3.21955990791
y: -7.69027805328
theta: 1.48304355145
speed: 3.10142660141
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.21955990791
y: -7.69027805328
theta: 1.48304355145
speed: 3.10142660141
id: 0
t: 137
xxx after update is x: 3.38799762726
y: -6.57064056396
theta: 1.47270226479
speed: 3.00083947182
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: 3.38799762726
y: -6.57064056396
theta: 1.47270226479
speed: 3.00083947182
id: 0
t: 138
xxx after update is x: 3.15839362144
y: -6.67567920685
theta: 1.65049016476
speed: 3.78198432922
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.677940146743028e-11, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3689520359039307, -15.761638641357422, 4.785362720489502, 14.15398120880127)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.15839362144
y: -6.67567920685
theta: 1.65049016476
speed: 3.78198432922
id: 0
t: 139
xxx after update is x: 3.26542663574
y: -6.36823511124
theta: 1.54550814629
speed: 4.16448497772
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:140


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.22222222222






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: 3.26542663574
y: -6.36823511124
theta: 1.54550814629
speed: 4.16448497772
id: 0
t: 140
xxx after update is x: 3.50361227989
y: -6.46000051498
theta: 1.71296548843
speed: 4.10084342957
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.50361227989
y: -6.46000051498
theta: 1.71296548843
speed: 4.10084342957
id: 0
t: 141
xxx after update is x: 2.80360555649
y: -5.78670215607
theta: 1.62100577354
speed: 4.36467218399
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:142




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.80360555649
y: -5.78670215607
theta: 1.62100577354
speed: 4.36467218399
id: 0
t: 142
xxx after update is x: 2.9777879715
y: -5.41557168961
theta: 1.41741323471
speed: 4.48448896408
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:143




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: 2.9777879715
y: -5.41557168961
theta: 1.41741323471
speed: 4.48448896408
id: 0
t: 143
funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: -2.92247056961
y: -17.5734920502
theta: 4.73810005188
speed: 14.2403516769
id: 1
t: 142
xxx after update is x: -3.27947092056
y: -18.1364974976
theta: 4.67740106583
speed: 13.9990158081
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: -3.27947092056
y: -18.1364974976
theta: 4.67740106583
speed: 13.9990158081
id: 1
t: 143
xxx after update is x: -2.90142416954
y: -19.0173053741
theta: 4.5896859169
speed: 13.4323577881
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 6.4
!!!threading.Timer
tgarnt done


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.90142416954
y: -19.0173053741
theta: 4.5896859169
speed: 13.4323577881
id: 1
t: 144
xxx after update is x: -2.8182349205
y: -19.375043869
theta: 4.76278114319
speed: 13.7632246017
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:145


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [8.545173009408073e-94, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (2.7384033203125, -5.351416110992432, 1.6029237508773804, 5.456966400146484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.8182349205
y: -19.375043869
theta: 4.76278114319
speed: 13.7632246017
id: 1
t: 145
xxx after update is x: -3.48180246353
y: -19.9513645172
theta: 4.82159757614
speed: 13.5702400208
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:146




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.48180246353
y: -19.9513645172
theta: 4.82159757614
speed: 13.5702400208
id: 1
t: 146
xxx after update is x: -2.98212957382
y: -20.4192314148
theta: 4.71345853806
speed: 14.1268978119
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:147


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.53333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


xxx before update is x: -2.98212957382
y: -20.4192314148
theta: 4.71345853806
speed: 14.1268978119
id: 1
t: 147
xxx after update is x: -2.87232279778
y: -21.9300079346
theta: 4.70660924911
speed: 13.4129619598
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.87232279778
y: -21.9300079346
theta: 4.70660924911
speed: 13.4129619598
id: 1
t: 148
xxx after update is x: -3.19840908051
y: -21.9349632263
theta: 4.51676988602
speed: 14.0955467224
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx after update is x: 3.14960217476
y: -5.58256340027
theta: 1.78128170967
speed: 5.02578496933
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [4.194928922378857e-79, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9014241695404053, -19.017305374145508, 4.589685916900635, 13.432357788085938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.14960217476
y: -5.58256340027
theta: 1.78128170967
speed: 5.02578496933
id: 0
t: 144
xxx after update is x: 2.73840332031
y: -5.35141611099
theta: 1.60292375088
speed: 5.45696640015
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:145




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: 2.73840332031
y: -5.35141611099
theta: 1.60292375088
speed: 5.45696640015
id: 0
t: 145
xxx after update is x: 3.25040650368
y: -4.80924224854
theta: 1.7314312458
speed: 5.47010469437
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.25040650368
y: -4.80924224854
theta: 1.7314312458
speed: 5.47010469437
id: 0
t: 146
xxx after update is x: 2.74043703079
y: -4.42536211014
theta: 1.70610928535
speed: 6.01875352859
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:147




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.74043703079
y: -4.42536211014
theta: 1.70610928535
speed: 6.01875352859
id: 0
t: 147
xxx after update is x: 2.70178627968
y: -4.46950387955
theta: 1.77699995041
speed: 6.07864570618
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:148


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.57777777778






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: 2.70178627968
y: -4.46950387955
theta: 1.77699995041
speed: 6.07864570618
id: 0
t: 148
xxx after update is x: 3.29352211952
y: -4.75427722931
theta: 1.75515961647
speed: 6.46229076385
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.6228703213110004e-146, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.198409080505371, -21.93496322631836, 4.516769886016846, 14.09554672241211)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: 3.29352211952
y: -4.75427722931
theta: 1.75515961647
speed: 6.46229076385
id: 0
t: 149
xxx after update is x: 2.69620156288
y: -3.98867940903
theta: 1.70530223846
speed: 6.32965278625
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.69620156288
y: -3.98867940903
theta: 1.70530223846
spleave the update function 
in spin function, finish the n times spin:149


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [3.678351367185864e-172, 0.4895999999999979]
222 self.state_dicts[msg.id][msg.t] is (3.2935221195220947, -4.754277229309082, 1.755159616470337, 6.4622907638549805)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: -3.19840908051
y: -21.9349632263
theta: 4.51676988602
speed: 14.0955467224
id: 1
t: 149
xxx after update is x: -3.36950588226
y: -21.8216438293
theta: 4.72758102417
speed: 13.9920597076
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: -3.36950588226
y: -21.8216438293
theta: 4.72758102417
speed: 13.9920597076
id: 1
t: 150
xxx after update is x: -2.97702765465
y: -22.6756649017
theta: 4.6085100174
speed: 13.6880760193
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.97702765465
y: -22.6756649017
theta: 4.6085100174
speed: 13.6880760193
id: 1
t: 151
xxx after update is x: -3.73965716362
y: -23.9477787018
theta: 4.67232894897
speed: 13.8866519928
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:152




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: -3.73965716362
y: -23.9477787018
theta: 4.67232894897
speed: 13.8866519928
id: 1
t: 152
xxx after update is x: -3.48540687561
y: -24.0477771759
theta: 4.81081438065
speed: 13.939239502
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
aaaaaa
aaaaaabbbbb
risk is [1.4611766578797496e-244, 0.481599999999998]
222 self.state_dicts[msg.id][msg.t] is (2.6393325328826904, -2.7199394702911377, 1.9839062690734863, 7.431153297424316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: -3.48540687561
y: -24.0477771759
theta: 4.81081438065
speed: 13.939239502
id: 1
t: 153
xxx after update is x: -2.64945244789
y: -24.8604354858
theta: 4.59403657913
speed: 13.7267112732
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.64945244789
y: -24.8604354858
theta: 4.59403657913
speed: 13.7267112732
id: 1
t: 154
xxx after update is x: -3.48773527145
y: -25.4469337463
theta: 4.69678926468
speed: 14.1144666672
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.88888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py ineed: 6.32965278625
id: 0
t: 150
xxx after update is x: 3.4970240593
y: -3.9254450798
theta: 1.75340676308
speed: 7.11310529709
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:151




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: 3.4970240593
y: -3.9254450798
theta: 1.75340676308
speed: 7.11310529709
id: 0
t: 151
xxx after update is x: 3.05123996735
y: -3.56195449829
theta: 1.95126700401
speed: 7.14361333847
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.0030138632037355e-244, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.739657163619995, -23.947778701782227, 4.672328948974609, 13.886651992797852)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.05123996735
y: -3.56195449829
theta: 1.95126700401
speed: 7.14361333847
id: 0
t: 152
xxx after update is x: 2.63933253288
y: -2.71993947029
theta: 1.98390626907
speed: 7.43115329742
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:153




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: 2.63933253288
y: -2.71993947029
theta: 1.98390626907
speed: 7.43115329742
id: 0
t: 153
xxx after update is x: 2.41382288933
y: -2.28948426247
theta: 2.11439776421
speed: 7.98360013962
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.41382288933
y: -2.28948426247
theta: 2.11439776421
speed: 7.98360013962
id: 0
t: 154
xxx after update is x: 1.93844926357
y: -2.48881435394
theta: 2.138235569
speed: 8.18933868408
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.88888888889






self.maneuver_requested left
xxx before update is x: 1.93844926357
y: -2.48881435394
theta: 2.138235569
speed: 8.18933868408
id: 0
t: 155
xxx after update is x: 2.02953457832
y: -1.93620812893
theta: 2.16918802261
speed: 8.17010974884
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
maneuver_negotiatir.py in the try maneuver function update -. sfinish
risk is [2.47471084e-316, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.287235736846924, -26.16204833984375, 4.736865997314453, 13.6766357421875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.02953457832
y: -1.93620812893
theta: 2.16918802261
speed: 8.17010974884
id: 0
t: 156
xxx after update is x: 2.00903177261
y: -2.44456458092
theta: 2.29802322388
speed: 8.546459198
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 sel the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: -3.48773527145
y: -25.4469337463
theta: 4.69678926468
speed: 14.1144666672
id: 1
t: 155
xxx after update is x: -3.28723573685
y: -26.1620483398
theta: 4.73686599731
speed: 13.6766357422
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157


xxx before update is x: -3.28723573685
y: -26.1620483398
theta: 4.73686599731
speed: 13.6766357422
id: 1
t: 156
xxx after update is x: -3.00317120552
y: -27.0654602051
theta: 4.74068117142
speed: 13.7919282913
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (2.0090317726135254, -2.4445645809173584, 2.298023223876953, 8.546459197998047)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: -3.00317120552
y: -27.0654602051
theta: 4.74068117142
speed: 13.7919282913
id: 1
t: 157
xxx after update is x: -3.3994717598
y: -27.1180381775
theta: 4.6343164444
speed: 13.5422029495
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: -3.3994717598
y: -27.1180381775
theta: 4.6343164444
speed: 13.5422029495
id: 1
t: 158
xxx after update is x: -3.07013034821
y: -27.8682918549
theta: 4.65998840332
speed: 13.7154493332
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: -3.07013034821
y: -27.8682918549
theta: 4.65998840332
speed: 13.7154493332
id: 1
t: 159
xxx after update is x: -3.2209610939
y: -28.9621181488
theta: 4.8046336174
speed: 13.7037782669
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (1.8226850032806396, -0.13464562594890594, 2.1287405490875244, 9.118496894836426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: -3.2209610939
y: -28.9621181488
theta: 4.8046336174
speed: 13.7037782669
id: 1
t: 160
xxx after update is x: -3.31104660034
y: -28.6943054199
theta: 4.71789169312
speed: 13.7698364258
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.31104660034
y: -28.6943054199
theta: 4.71789169312
speed: 13.7698364258
id: 1
t: 161
xxx after update is x: -3.13404655457
y: -29.6052436829
theta: 4.66195821762
speed: 13.9759969711
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162


maneuver_nf.man_init:
xxx before update is x: 2.00903177261
y: -2.44456458092
theta: 2.29802322388
speed: 8.546459198
id: 0
t: 157
xxx after update is x: 2.40904545784
y: -1.62160074711
theta: 2.41206598282
speed: 8.93750286102
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:158




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: 2.40904545784
y: -1.62160074711
theta: 2.41206598282
speed: 8.93750286102
id: 0
t: 158
xxx after update is x: 1.97331750393
y: -1.20625925064
theta: 2.2555642128
speed: 8.99713420868
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: 1.97331750393
y: -1.20625925064
theta: 2.2555642128
speed: 8.99713420868
id: 0
t: 159
xxx after update is x: 1.82268500328
y: -0.134645625949
theta: 2.12874054909
speed: 9.11849689484
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.220961093902588, -28.96211814880371, 4.804633617401123, 13.703778266906738)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 1.82268500328
y: -0.134645625949
theta: 2.12874054909
speed: 9.11849689484
id: 0
t: 160
xxx after update is x: 0.949120104313
y: -0.764746367931
theta: 2.15714859962
speed: 9.71953582764
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:161




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 0.949120104313
y: -0.764746367931
theta: 2.15714859962
speed: 9.71953582764
id: 0
t: 161
xxx after update is x: 0.819555342197
y: 0.146568223834
theta: 2.43373727798
speed: 9.99845218658
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: 0.819555342197
y: 0.146568223834
theta: 2.43373727798
speed: 9.99845218658
id: 0
t: 162
xxx after update is x: 0.938359737396
y: 0.144691228867
theta: 2.38847661018
speed: 10.5245923996
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.24444444444






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: 0.938359737396
y: 0.144691228867
theta: 2.38847661018
speed: 10.5245923996
id: 0
t: 163
xxx after update is x: 0.27850663662
y: 0.149378582835
theta: 2.49036002159
speed: 10.6142864227
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0085408687591553, -31.100322723388672, 4.7745256423950195, 13.79019832611084)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update functionegotiatir.py in the try maneuver function update -. strat

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163


xxx before update is x: -3.13404655457
y: -29.6052436829
theta: 4.66195821762
speed: 13.9759969711
id: 1
t: 162
xxx after update is x: -3.44699954987
y: -30.3593635559
theta: 4.82268190384
speed: 13.7212619781
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion

current clock is 7.24444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


xxx before update is x: -3.44699954987
y: -30.3593635559
theta: 4.82268190384
speed: 13.7212619781
id: 1
t: 163
xxx after update is x: -3.00854086876
y: -31.1003227234
theta: 4.7745256424
speed: 13.7901983261
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (0.27850663661956787, 0.14937858283519745, 2.4903600215911865, 10.614286422729492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: -3.00854086876
y: -31.1003227234
theta: 4.7745256424
speed: 13.7901983261
id: 1
t: 164
xxx after update is x: -3.04799747467
y: -31.591381073
theta: 4.62979030609
speed: 14.1948547363
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


xxx before update is x: -3.04799747467
y: -31.591381073
theta: 4.62979030609
speed: 14.1948547363
id: 1
t: 165
xxx after update is x: -2.9738035202
y: -32.2592697144
theta: 4.81187772751
speed: 14.0361814499
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -2.9738035202
y: -32.2592697144
theta: 4.81187772751
speed: 14.0361814499
id: 1
t: 166
xxx after update is x: -3.32196354866
y: -33.4995689392
theta: 4.74134063721
speed: 14.0581684113
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.32196354866
y: -33.4995689392
theta: 4.74134063721
speed: 14.0581684113
id: 1
t: 167
xxx after update is x: -3.31869506836
y: -33.8437919617
theta: 4.63953590393
speed: 14.0959787369
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: -3.31869506836
y: -33.8437919617
theta: 4.63953590393
speed: 14.0959787369
id: 1
t: 168
xxx after update is x: -3.07422208786
y: -34.4101905823
theta: 4.89100694656
speed: 14.0660114288
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5119999999999982]
222 self.state_dicts[msg.id]
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165


xxx before update is x: 0.27850663662
y: 0.149378582835
theta: 2.49036002159
speed: 10.6142864227
id: 0
t: 164
xxx after update is x: 0.457660764456
y: 1.19363999367
theta: 2.4841337204
speed: 10.8477487564
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 0.457660764456
y: 1.19363999367
theta: 2.4841337204
speed: 10.8477487564
id: 0
t: 165
xxx after update is x: -0.549242258072
y: 0.687343478203
theta: 2.5107998848
speed: 11.0485439301
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


xxx before update is x: -0.549242258072
y: 0.687343478203
theta: 2.5107998848
speed: 11.0485439301
id: 0
t: 166
xxx after update is x: -1.57168328762
y: 1.73574471474
theta: 2.42264127731
speed: 11.2951555252
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: -1.57168328762
y: 1.73574471474
theta: 2.42264127731
speed: 11.2951555252
id: 0
t: 167
xxx after update is x: -1.94536042213
y: 1.5445330143
theta: 2.58822035789
speed: 11.4340629578
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.318695068359375, -33.84379196166992, 4.639535903930664, 14.095978736877441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: -1.94536042213
y: 1.5445330143
theta: 2.58822035789
speed: 11.4340629578
id: 0
t: 168
xxx after update is x: -1.53267109394
y: 1.30179727077
theta: 2.60586428642
speed: 11.9257059097
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -1.53267109394
y: 1.30179727077
theta: 2.60586428642
speed: 11.9257059097
id: 0
t: 169
xxx after update is x: -1.75488042831
y: 2.14303517342
theta: 2.58238339424
speed: 11.8949041367
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:170




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: -1.75488042831
y: 2.14303517342
theta: 2.58238339424
speed: 11.8949041367
id: 0
t: 170
xxx after update is x: -2.69950437546
y: 2.42092776299
theta: 2.82874894142
speed: 12.1907129288
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.6






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: -2.69950437546
y: 2.42092776299
t[msg.t] is (-1.5326710939407349, 1.3017972707748413, 2.6058642864227295, 11.925705909729004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170


xxx before update is x: -3.07422208786
y: -34.4101905823
theta: 4.89100694656
speed: 14.0660114288
id: 1
t: 169
xxx after update is x: -3.2380335331
y: -34.6362228394
theta: 4.8401517868
speed: 14.1986684799
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.55555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: -3.2380335331
y: -34.6362228394
theta: 4.8401517868
speed: 14.1986684799
id: 1
t: 170
xxx after update is x: -3.48458480835
y: -35.4586372375
theta: 4.74046850204
speed: 13.9595241547
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4895999999999979]
222 self.state_dicts[msg.id][msg.t] is (-2.6995043754577637, 2.4209277629852295, 2.828748941421509, 12.190712928771973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: -3.48458480835
y: -35.4586372375
theta: 4.74046850204
speed: 13.9595241547
id: 1
t: 171
xxx after update is x: -3.60750102997
y: -36.1795578003
theta: 4.83014822006
speed: 13.6892442703
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -3.60750102997
y: -36.1795578003
theta: 4.83014822006
speed: 13.6892442703
id: 1
t: 172
xxx after update is x: -3.21671128273
y: -36.7860031128
theta: 4.56867265701
speed: 13.278427124
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: -3.21671128273
y: -36.7860031128
theta: 4.56867265701
speed: 13.278427124
id: 1
t: 173
xxx after update is x: -3.28418660164
y: -37.650718689
theta: 4.68296766281
speed: 13.6677293777
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28418660164
y: -37.650718689
theta: 4.68296766281
speed: 13.6677293777
id: 1
t: 174
xxx after update is x: -3.45740914345
y: -38.1668319702
theta: 4.61789703369
speed: 13.5855932236
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (-4.974311351776123, 3.4944052696228027, 2.9036998748779297, 13.191490173339844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update functheta: 2.82874894142
speed: 12.1907129288
id: 0
t: 171
xxx after update is x: -2.91551375389
y: 1.95757746696
theta: 2.91486215591
speed: 12.1958408356
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.6075010299682617, -36.17955780029297, 4.830148220062256, 13.689244270324707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -2.91551375389
y: 1.95757746696
theta: 2.91486215591
speed: 12.1958408356
id: 0
t: 172
xxx after update is x: -3.69909906387
y: 2.31220531464
theta: 2.96833658218
speed: 12.3184118271
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -3.69909906387
y: 2.31220531464
theta: 2.96833658218
speed: 12.3184118271
id: 0
t: 173
xxx after update is x: -3.95570516586
y: 2.90649342537
theta: 2.83976912498
speed: 12.5739955902
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:174




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -3.95570516586
y: 2.90649342537
theta: 2.83976912498
speed: 12.5739955902
id: 0
t: 174
xxx after update is x: -4.97431135178
y: 3.49440526962
theta: 2.90369987488
speed: 13.1914901733
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


xxx before update is x: -4.97431135178
y: 3.49440526962
theta: 2.90369987488
speed: 13.1914901733
id: 0
t: 175
xxx after update is x: -5.20762634277
y: 3.26752662659
theta: 2.94733548164
speed: 13.5106916428
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.446408271789551, -38.57894515991211, 4.661456108093262, 14.134591102600098)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -5.20762634277
y: 3.26752662659
theta: 2.94733548164
speed: 13.5106916428
id: 0
t: 176
xxx after update is x: -6.06301546097
y: 3.27359700203
theta: 2.97023868561
speed: 13.5950479507
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:177




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178


xxx before update is x: -6.06301546097
y: 3.27359700203
theta: 2.97023868561
speed: 13.5950479507
id: 0
t: 177
xxx after update is x: -6.61654806137
y: 3.4167535305
theta: 2.9951198101
speed: 13.6629810333
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -6.61654806137
y: 3.4167535305
theta: 2.9951198101
speed: 13.6629810333
id: 0
t: 178
xxx after update is x: -7.47923278809
y: 3.0534965992
theta: 3.12984013557
speed: 13.8942928314
id: 0
t: 179
maneuver_negotiatir.py finish the update agent stion
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176


xxx before update is x: -3.45740914345
y: -38.1668319702
theta: 4.61789703369
speed: 13.5855932236
id: 1
t: 175
xxx after update is x: -3.44640827179
y: -38.5789451599
theta: 4.66145610809
speed: 14.1345911026
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.44640827179
y: -38.5789451599
theta: 4.66145610809
speed: 14.1345911026
id: 1
t: 176
xxx after update is x: -3.2974793911
y: -38.5834159851
theta: 4.67146539688
speed: 13.9243516922
id: 1
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:177




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.2974793911
y: -38.5834159851
theta: 4.67146539688
speed: 13.9243516922
id: 1
t: 177
xxx after update is x: -3.07381486893
y: -39.675617218
theta: 4.76221990585
speed: 13.5996494293
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:178


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.91111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.07381486893
y: -39.675617218
theta: 4.76221990585
speed: 13.5996494293
id: 1
t: 178
xxx after update is x: -3.44960403442
y: -41.090511322
theta: 4.61118125916
speed: 14.0296802521
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:179


Received -->>: 
current clock is 7.95555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 7.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '7.95555555556', 'Position': ['(-7.4792327880859375', ' 3.0534965991973877', ' 3.129840135574341)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,7.95555555556,(-7.4792327880859375, 3.0534965991973877, 3.129840135574341),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -3.44960403442
y: -41.090511322
theta: 4.61118125916
speed: 14.0296802521
id: 1
t: 179
xxx after update is x: -3.92065167427
y: -40.5053100586
theta: 4.60949516296
speed: 13.8135042191
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (-7.986275672912598, 3.635474920272827, 3.1063966751098633, 14.150115013122559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181


xxx before update is x: -3.92065167427
y: -40.5053100586
theta: 4.60949516296
speed: 13.8135042191
id: 1
t: 180
xxx after update is x: -3.12168955803
y: -42.4213562012
theta: 4.51ate from ros funtion
leave the update function 
in spin function, finish the n times spin:179


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.95555555556






self.maneuver_requested left
RELEASE,0,7.95555555556,(-7.4792327880859375, 3.0534965991973877, 3.129840135574341),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 7.95555555556
self.communication_details == 0
sending RELEASE,0,7.95555555556,(-7.4792327880859375, 3.0534965991973877, 3.129840135574341),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -7.47923278809
y: 3.0534965992
theta: 3.12984013557
speed: 13.8942928314
id: 0
t: 179
xxx after update is x: -7.98627567291
y: 3.63547492027
theta: 3.10639667511
speed: 14.1501150131
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -7.98627567291
y: 3.63547492027
theta: 3.10639667511
speed: 14.1501150131
id: 0
t: 180
xxx after update is x: -8.08308982849
y: 3.23586058617
theta: 3.1076669693
speed: 13.6686401367
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:181


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.121689558029175, -42.421356201171875, 4.516934871673584, 14.019469261169434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -8.08308982849
y: 3.23586058617
theta: 3.1076669693
speed: 13.6686401367
id: 0
t: 181
xxx after update is x: -9.12895679474
y: 3.01906490326
theta: 3.19809269905
speed: 13.6072978973
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:182




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -9.12895679474
y: 3.01906490326
theta: 3.19809269905
speed: 13.6072978973
id: 0
t: 182
xxx after update is x: -9.29603004456
y: 3.10052227974
theta: 3.12789821625
speed: 14.1088657379
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:183




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184


xxx before update is x: -9.29603004456
y: 3.10052227974
theta: 3.12789821625
speed: 14.1088657379
id: 0
t: 183
xxx after update is x: -10.3100357056
y: 3.79595756531
theta: 3.15409946442
speed: 13.7035160065
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.359344720840454, -43.44830322265625, 4.582032203674316, 13.844399452209473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -10.3100357056
y: 3.79595756531
theta: 3.15409946442
speed: 13.7035160065
id: 0
t: 184
xxx after update is x: -10.5994291306
y: 3.80243349075
theta: 3.11890935898
speed: 13.6965503693
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state fr693487167
speed: 14.0194692612
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182


xxx before update is x: -3.12168955803
y: -42.4213562012
theta: 4.51693487167
speed: 14.0194692612
id: 1
t: 181
xxx after update is x: -3.14774560928
y: -42.3003501892
theta: 4.63475322723
speed: 13.6761779785
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -3.14774560928
y: -42.3003501892
theta: 4.63475322723
speed: 13.6761779785
id: 1
t: 182
xxx after update is x: -3.2731192112
y: -43.000743866
theta: 4.68692874908
speed: 14.0134801865
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:184


xxx before update is x: -3.2731192112
y: -43.000743866
theta: 4.68692874908
speed: 14.0134801865
id: 1
t: 183
xxx after update is x: -3.35934472084
y: -43.4483032227
theta: 4.58203220367
speed: 13.8443994522
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5167999999999984]
222 self.state_dicts[msg.id][msg.t] is (-10.310035705566406, 3.795957565307617, 3.154099464416504, 13.703516006469727)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.35934472084
y: -43.4483032227
theta: 4.58203220367
speed: 13.8443994522
id: 1
t: 184
xxx after update is x: -3.01539158821
y: -44.0598526001
theta: 4.73642492294
speed: 13.903960228
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -3.01539158821
y: -44.0598526001
theta: 4.73642492294
speed: 13.903960228
id: 1
t: 185
xxx after update is x: -3.42522597313
y: -44.7215805054
theta: 4.9014878273
speed: 13.7161388397
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.26666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -3.42522597313
y: -44.7215805054
theta: 4.9014878273
speed: 13.7161388397
id: 1
t: 186
xxx after update is x: -2.91405630112
y: -45.3457145691
theta: 4.68679141998
speed: 13.9699726105
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 8.31111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.31111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '8.31111111111', 'Position': ['(-12.023966789245605', ' 3.6229732036590576', ' 3.199660062789917)'], om ros funtion
leave the update function 
in spin function, finish the n times spin:185




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -10.5994291306
y: 3.80243349075
theta: 3.11890935898
speed: 13.6965503693
id: 0
t: 185
xxx after update is x: -11.0970239639
y: 3.49870610237
theta: 3.17027330399
speed: 13.8759632111
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -11.0970239639
y: 3.49870610237
theta: 3.17027330399
speed: 13.8759632111
id: 0
t: 186
xxx after update is x: -12.0239667892
y: 3.62297320366
theta: 3.19966006279
speed: 14.0290575027
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.31111111111






self.maneuver_requested left
RELEASE,0,8.31111111111,(-12.023966789245605, 3.6229732036590576, 3.199660062789917),14,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.31111111111
self.communication_details == 0
sending RELEASE,0,8.31111111111,(-12.023966789245605, 3.6229732036590576, 3.199660062789917),14,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -12.0239667892
y: 3.62297320366
theta: 3.19966006279
speed: 14.0290575027
id: 0
t: 187
xxx after update is x: -12.5038604736
y: 4.10259771347
theta: 3.22719764709
speed: 14.0904788971
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.5441620349884033, -46.102569580078125, 4.819577217102051, 14.129666328430176)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -12.5038604736
y: 4.10259771347
theta: 3.22719764709
speed: 14.0904788971
id: 0
t: 188
xxx after update is x: -13.1671056747
y: 3.72384476662
theta: 3.11926841736
speed: 13.6892871857
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -13.1671056747
y: 3.72384476662
theta: 3.11926841736
speed: 13.6892871857
id: 0
t: 189
xxx after update is x: -14.2089977264
y: 3.9440741539
theta: 3.14198923111
speed: 13.6214456558
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191


xxx before update is x: -14.2089977264
y: 3.9440741539
theta: 3.14198923111
speed: 13.6214456558
id: 0
t: 190
xxx after update is x: -14.1778841019
y: 3.00809383392
theta: 3.13523674011
speed: 13.9105005264
id: 0
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192

'Type': 'RELEASE'}
car 1 received RELEASE,0,8.31111111111,(-12.023966789245605, 3.6229732036590576, 3.199660062789917),14,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (-12.023966789245605, 3.6229732036590576, 3.199660062789917, 14.029057502746582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -2.91405630112
y: -45.3457145691
theta: 4.68679141998
speed: 13.9699726105
id: 1
t: 187
xxx after update is x: -2.54416203499
y: -46.1025695801
theta: 4.8195772171
speed: 14.1296663284
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -2.54416203499
y: -46.1025695801
theta: 4.8195772171
speed: 14.1296663284
id: 1
t: 188
xxx after update is x: -3.16496729851
y: -45.8374061584
theta: 4.79419517517
speed: 13.6869506836
id: 1
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190


xxx before update is x: -3.16496729851
y: -45.8374061584
theta: 4.79419517517
speed: 13.6869506836
id: 1
t: 189
xxx after update is x: -3.14910078049
y: -47.0164680481
theta: 4.79975366592
speed: 13.9680118561
id: 1
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14910078049
y: -47.0164680481
theta: 4.79975366592
speed: 13.9680118561
id: 1
t: 190
xxx after update is x: -2.92893385887
y: -47.6275672913
theta: 4.67469787598
speed: 13.745677948
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-14.177884101867676, 3.00809383392334, 3.1352367401123047, 13.910500526428223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -2.92893385887
y: -47.6275672913
theta: 4.67469787598
speed: 13.745677948
id: 1
t: 191
xxx after update is x: -3.0622959137
y: -48.0601196289
theta: 4.62746429443
speed: 13.454410553
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.0622959137
y: -48.0601196289
theta: 4.62746429443
speed: 13.454410553
id: 1
t: 192
xxx after update is x: -3.72342276573
y: -49.3264503479
theta: 4.64686918259
speed: 13.5096311569
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:193


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.57777777778






self.maneuver_requested None


going to t
xxx before update is x: -14.1778841019
y: 3.00809383392
theta: 3.13523674011
speed: 13.9105005264
id: 0
t: 191
xxx after update is x: -15.163564682
y: 3.29002523422
theta: 3.10927438736
speed: 14.0105819702
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.062295913696289, -48.06011962890625, 4.627464294433594, 13.454410552978516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -15.163564682
y: 3.29002523422
theta: 3.10927438736
speed: 14.0105819702
id: 0
t: 192
xxx after update is x: -15.6150999069
y: 3.68152046204
theta: 3.10830616951
speed: 14.0014667511
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194


xxx before update is x: -15.6150999069
y: 3.68152046204
theta: 3.10830616951
speed: 14.0014667511
id: 0
t: 193
xxx after update is x: -16.6335449219
y: 3.60611176491
theta: 3.23665857315
speed: 13.6064167023
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.62222222222






self.maneuver_requested left
RELEASE,0,8.62222222222,(-16.633544921875, 3.606111764907837, 3.2366585731506348),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.62222222222
self.communication_details == 0
sending RELEASE,0,8.62222222222,(-16.633544921875, 3.606111764907837, 3.2366585731506348),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -16.6335449219
y: 3.60611176491
theta: 3.23665857315
speed: 13.6064167023
id: 0
t: 194
xxx after update is x: -16.9188938141
y: 3.6032538414
theta: 2.9927444458
speed: 13.9231033325
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196


xxx before update is x: -16.9188938141
y: 3.6032538414
theta: 2.9927444458
speed: 13.9231033325
id: 0
t: 195
xxx after update is x: -17.1404762268
y: 3.0683016777
theta: 3.28032922745
speed: 13.9829025269
id: 0
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2565622329711914, -50.41897201538086, 4.985403060913086, 14.1217041015625)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -17.1404762268
y: 3.0683016777
theta: 3.28032922745
speed: 13.9829025269
id: 0
t: 196
xxx after update is x: -18.3041782379
y: 3.5171289444
theta: 3.22509646416
speed: 13.825586319
id: 0
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198


xxx before update ishe update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194


xxx before update is x: -3.72342276573
y: -49.3264503479
theta: 4.64686918259
speed: 13.5096311569
id: 1
t: 193
xxx after update is x: -2.63285088539
y: -49.7413635254
theta: 4.85926818848
speed: 13.8452100754
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 8.62222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.62222222222', 'Position': ['(-16.633544921875', ' 3.606111764907837', ' 3.2366585731506348)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.62222222222,(-16.633544921875, 3.606111764907837, 3.2366585731506348),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -2.63285088539
y: -49.7413635254
theta: 4.85926818848
speed: 13.8452100754
id: 1
t: 194
xxx after update is x: -3.49442458153
y: -50.1974639893
theta: 4.79828071594
speed: 14.1081476212
id: 1
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5295999999999987]
222 self.state_dicts[msg.id][msg.t] is (-16.918893814086914, 3.6032538414001465, 2.9927444458007812, 13.923103332519531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.49442458153
y: -50.1974639893
theta: 4.79828071594
speed: 14.1081476212
id: 1
t: 195
xxx after update is x: -3.25656223297
y: -50.4189720154
theta: 4.98540306091
speed: 14.1217041016
id: 1
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:196




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.25656223297
y: -50.4189720154
theta: 4.98540306091
speed: 14.1217041016
id: 1
t: 196
xxx after update is x: -3.62067961693
y: -51.4045906067
theta: 4.76274347305
speed: 13.9109745026
id: 1
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198


xxx before update is x: -3.62067961693
y: -51.4045906067
theta: 4.76274347305
speed: 13.9109745026
id: 1
t: 197
xxx after update is x: -3.30911016464
y: -51.4795303345
theta: 4.7714214325
speed: 13.8899116516
id: 1
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199


xxx before update is x: -3.30911016464
y: -51.4795303345
theta: 4.7714214325
speed: 13.8899116516
id: 1
t: 198
xxx after update is x: -3.64209270477
y: -52.6674079895
theta: 4.62863349915
speed: 13.9924697876
id: 1
t: 199
maneuver_negotiatir.py  x: -18.3041782379
y: 3.5171289444
theta: 3.22509646416
speed: 13.825586319
id: 0
t: 197
xxx after update is x: -19.0219688416
y: 3.38543009758
theta: 3.21275782585
speed: 14.1847286224
id: 0
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -19.0219688416
y: 3.38543009758
theta: 3.21275782585
speed: 14.1847286224
id: 0
t: 198
xxx after update is x: -19.9024543762
y: 3.02848386765
theta: 3.07025074959
speed: 13.8632335663
id: 0
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:199




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:200




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:201


xxx before update is x: -19.9024543762
y: 3.02848386765
theta: 3.07025074959
speed: 13.8632335663
id: 0
t: 199
xxx after update is x: -21.2520637512
y: 2.97852540016
theta: 3.12531590462
speed: 14.0085687637
id: 0
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -21.2520637512
y: 2.97852540016
theta: 3.12531590462
speed: 14.0085687637
id: 0
t: 200
xxx after update is x: -20.9650478363
y: 3.20158648491
theta: 3.18080377579
speed: 13.7504177094
id: 0
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -20.9650478363
y: 3.20158648491
theta: 3.18080377579
speed: 13.7504177094
id: 0
t: 201
xxx after update is x: -21.0713291168
y: 3.53817105293
theta: 3.0606648922
speed: 14.2020988464
id: 0
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1851203441619873, -54.63774108886719, 4.592310905456543, 13.868477821350098)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.97777777778






self.maneuver_requested left
RELEASE,0,8.97777777778,(-21.07132911682129, 3.5381710529327393, 3.0606648921966553),14,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.97777777778
self.communication_details == 0
sending RELEASE,0,8.97777777778,(-21.07132911682129, 3.5381710529327393, 3.0606648921966553),14,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203


xxx before update is x: -21.0713291168
y: 3.53817105293
theta: 3.0606648922
speed: 14.2020988464
id: 0
t: 202
xxx after update is x: -22.2883968353
y: 3.24875736237
theta: 3.24312758446
speed: 14.027305603
id: 0
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:204


xxx before update is x: -22.2883968353
y: 3.24875736237
theta: 3.24312758446
speed: 14.027305603
id: 0
t: 203
xxx after update is x: -22.6021900177
y: 3.44038248062
theta: 3.12134456635
speed: 14.0314950943
id: 0
t: 204
maneuver_negotiatir.py finishfinish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.46559999999999807]
222 self.state_dicts[msg.id][msg.t] is (-19.902454376220703, 3.0284838676452637, 3.0702507495880127, 13.86323356628418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200


xxx before update is x: -3.64209270477
y: -52.6674079895
theta: 4.62863349915
speed: 13.9924697876
id: 1
t: 199
xxx after update is x: -3.06430220604
y: -53.1651992798
theta: 4.65441608429
speed: 14.2725286484
id: 1
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06430220604
y: -53.1651992798
theta: 4.65441608429
speed: 14.2725286484
id: 1
t: 200
xxx after update is x: -3.15510869026
y: -54.000164032
theta: 4.676653862
speed: 13.8035144806
id: 1
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.93333333333






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.15510869026
y: -54.000164032
theta: 4.676653862
speed: 13.8035144806
id: 1
t: 201
xxx after update is x: -3.18512034416
y: -54.6377410889
theta: 4.59231090546
speed: 13.8684778214
id: 1
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202


maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48639999999999795]
222 self.state_dicts[msg.id][msg.t] is (-21.07132911682129, 3.5381710529327393, 3.0606648921966553, 14.202098846435547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 8.97777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.97777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '8.97777777778', 'Position': ['(-21.07132911682129', ' 3.5381710529327393', ' 3.0606648921966553)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.97777777778,(-21.07132911682129, 3.5381710529327393, 3.0606648921966553),14,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203


xxx before update is x: -3.18512034416
y: -54.6377410889
theta: 4.59231090546
speed: 13.8684778214
id: 1
t: 202
xxx after update is x: -2.99745082855
y: -54.7467193604
theta: 4.60474348068
speed: 13.9310874939
id: 1
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204


xxx before update is x: -2.99745082855
y: -54.7467193604
theta: 4.60474348068
speed: 13.9310874939
id: 1
t: 203
xxx after update is x: -3.50152683258
y: -55.7169647217
theta: 4.6900138855
speed: 13.5920600891
id: 1
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.50152683258
y: -55.7169647217
theta: 4.6900138855
speed: 13.5920600891
id: 1
t: 204
xxx after update is x: -3.25926208496
y: -56.5260505676
theta: 4.52569818497
speed: 13.6645030975
id: 1
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206


xxx before update is x: -3.25926208496
y: -56.5260505676
theta: 4.52569818497
speed: 13.6645030975
id: 1
t: 205
xxx after update is x: -2.76718497276
y: -57.1537094116
theta: 4.74716663361
speed: 13.9233827591
id: 1
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5247999999999986]
222 self.state_dicts[msg.id][msg.t] is (-23.73360824584961, 3.414496898651123, 3.115934371948242, 13.650434494018555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -2.76718497276
y: -57.1537094116
theta: 4.74716663361
speed: 13.9233827591
id: 1
t: 206
xxx after update is x: -3.20760393143
y: -57.6073455811
theta: 4.70778560638
speed: 13.792930603
id: 1
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.20760393143
y: -57.6073455811
theta: 4.70778560638
speed: 13.792930603
id: 1
t: 207
xxx after update is x: -3.37213110924
y: -58.269493103
theta: 4.7851896286
speed: 13.9983558655
id: 1
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:208




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.37213110924
y: -58.269493103
theta: 4.7851896286
speed: 13.9983558655
id: 1
t: 208
xxx after update is x: -2.85848450661
y: -58.8541908264
theta: 4.83387994766
speed: 13.629732132
id: 1
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.28888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:210


xxx before update is x: -2.85848450661
y: -58.8541908264
theta: 4.83387994766
speed: 13.629732132
id: 1
t: 209
xxx after update is x: -3.00213170052
y: -59.5473632812
theta: 4.80346298218
speed: 14.0213737488
id: 1
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 9.33333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '9.33333333333', 'Position': ['(-26.376529693603516', ' 3.0742955207824707', ' 3.195354700088501)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.33333333333,(-26.376529693603516, 3.0742955207824707, 3.195 the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:205


xxx before update is x: -22.6021900177
y: 3.44038248062
theta: 3.12134456635
speed: 14.0314950943
id: 0
t: 204
xxx after update is x: -23.1239681244
y: 3.70270061493
theta: 3.11549425125
speed: 13.8092460632
id: 0
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206


xxx before update is x: -23.1239681244
y: 3.70270061493
theta: 3.11549425125
speed: 13.8092460632
id: 0
t: 205
xxx after update is x: -23.7336082458
y: 3.41449689865
theta: 3.11593437195
speed: 13.650434494
id: 0
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -23.7336082458
y: 3.41449689865
theta: 3.11593437195
speed: 13.650434494
id: 0
t: 206
xxx after update is x: -24.8450126648
y: 3.08176136017
theta: 3.14597630501
speed: 13.9140872955
id: 0
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.207603931427002, -57.60734558105469, 4.707785606384277, 13.792930603027344)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208


xxx before update is x: -24.8450126648
y: 3.08176136017
theta: 3.14597630501
speed: 13.9140872955
id: 0
t: 207
xxx after update is x: -24.8372058868
y: 3.26609945297
theta: 3.09978818893
speed: 13.6587076187
id: 0
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209


xxx before update is x: -24.8372058868
y: 3.26609945297
theta: 3.09978818893
speed: 13.6587076187
id: 0
t: 208
xxx after update is x: -25.4398288727
y: 2.9027826786
theta: 3.09897041321
speed: 13.8139486313
id: 0
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210


xxx before update is x: -25.4398288727
y: 2.9027826786
theta: 3.09897041321
speed: 13.8139486313
id: 0
t: 209
xxx after update is x: -26.3765296936
y: 3.07429552078
theta: 3.19535470009
speed: 14.0181913376
id: 0
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.33333333333






self.maneuver_requested left
RELEASE,0,9.33333333333,(-26.376529693603516, 3.0742955207824707, 3.195354700088501),14,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.33333333333
self.communication_details == 0
sending RELEASE,0,9.33333333333,(-26.376529693603516, 3.0742955207824707, 3.195354700088501),14,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211


xxx before update is x: -26.3765296936
y: 3.07429552354700088501),14,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-26.376529693603516, 3.0742955207824707, 3.195354700088501, 14.01819133758545)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211


xxx before update is x: -3.00213170052
y: -59.5473632812
theta: 4.80346298218
speed: 14.0213737488
id: 1
t: 210
xxx after update is x: -3.38436579704
y: -59.4514541626
theta: 4.76740503311
speed: 13.6673555374
id: 1
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212


xxx before update is x: -3.38436579704
y: -59.4514541626
theta: 4.76740503311
speed: 13.6673555374
id: 1
t: 211
xxx after update is x: -3.40666770935
y: -60.379108429
theta: 4.68023061752
speed: 13.7279634476
id: 1
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213


xxx before update is x: -3.40666770935
y: -60.379108429
theta: 4.68023061752
speed: 13.7279634476
id: 1
t: 212
xxx after update is x: -3.57900452614
y: -60.9513893127
theta: 4.69479703903
speed: 14.1355686188
id: 1
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:214


xxx before update is x: -3.57900452614
y: -60.9513893127
theta: 4.69479703903
speed: 14.1355686188
id: 1
t: 213
xxx after update is x: -3.2820482254
y: -62.2645645142
theta: 4.72161626816
speed: 14.1163291931
id: 1
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.479999999999998]
222 self.state_dicts[msg.id][msg.t] is (-28.605844497680664, 3.5593104362487793, 3.170461893081665, 14.0701904296875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215


xxx before update is x: -3.2820482254
y: -62.2645645142
theta: 4.72161626816
speed: 14.1163291931
id: 1
t: 214
xxx after update is x: -3.37544488907
y: -62.703163147
theta: 4.5992975235
speed: 13.6135845184
id: 1
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:216


xxx before update is x: -3.37544488907
y: -62.703163147
theta: 4.5992975235
speed: 13.6135845184
id: 1
t: 215
xxx after update is x: -2.7758872509
y: -63.5862236023
theta: 4.66066837311
speed: 13.8762922287
id: 1
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217


xxx before update is x: -2.7758872509
y: -63.5862236023
theta: 4.66066837311
speed: 13.8762922287
id: 1
t: 216
xxx aft078
theta: 3.19535470009
speed: 14.0181913376
id: 0
t: 210
xxx after update is x: -26.2874565125
y: 3.06380867958
theta: 3.07081961632
speed: 13.8639240265
id: 0
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3843657970428467, -59.451454162597656, 4.767405033111572, 13.66735553741455)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:212


xxx before update is x: -26.2874565125
y: 3.06380867958
theta: 3.07081961632
speed: 13.8639240265
id: 0
t: 211
xxx after update is x: -27.4286422729
y: 3.30886387825
theta: 3.05227375031
speed: 13.9186182022
id: 0
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -27.4286422729
y: 3.30886387825
theta: 3.05227375031
speed: 13.9186182022
id: 0
t: 212
xxx after update is x: -28.2765674591
y: 3.19274258614
theta: 3.31342053413
speed: 13.6918735504
id: 0
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:213




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:214


xxx before update is x: -28.2765674591
y: 3.19274258614
theta: 3.31342053413
speed: 13.6918735504
id: 0
t: 213
xxx after update is x: -28.6058444977
y: 3.55931043625
theta: 3.17046189308
speed: 14.0701904297
id: 0
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215


xxx before update is x: -28.6058444977
y: 3.55931043625
theta: 3.17046189308
speed: 14.0701904297
id: 0
t: 214
xxx after update is x: -29.9611415863
y: 2.94324278831
theta: 3.00811815262
speed: 13.9338750839
id: 0
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3754448890686035, -62.703163146972656, 4.599297523498535, 13.613584518432617)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216


xxx before update is x: -29.9611415863
y: 2.94324278831
theta: 3.00811815262
speed: 13.9338750839
id: 0
t: 215
xxx after update is x: -30.0095157623
y: 3.34812474251
theta: 3.03683519363
speed: 13.8631124496
id: 0
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217


xxx before update is x: -30.0095157623
y: 3.34812474251
theta: 3.03683519363
speed: 13.8631124496
id: 0
t: 216
xxx after update is x: -30.8022651672
y: 3.06100678444
theta: 3.00362348557
speed: 13.8408269882
id: 0
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218


xxx before update is x: -30.8022651672
y: 3.06100678444
theta: 3.00362348557
speed: 13.8408269882
id: 0
t: 217
xxx after update is x: -30.9802417755
y: 3.1304731369
theta: 3.084453344er update is x: -2.84758877754
y: -64.2997055054
theta: 4.64565324783
speed: 14.123670578
id: 1
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.64444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5071999999999981]
222 self.state_dicts[msg.id][msg.t] is (-30.802265167236328, 3.061006784439087, 3.0036234855651855, 13.840826988220215)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218


Received -->>: 
current clock is 9.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '9.68888888889', 'Position': ['(-30.980241775512695', ' 3.1304731369018555', ' 3.0844533443450928)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.68888888889,(-30.980241775512695, 3.1304731369018555, 3.0844533443450928),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -2.84758877754
y: -64.2997055054
theta: 4.64565324783
speed: 14.123670578
id: 1
t: 217
xxx after update is x: -3.52401328087
y: -64.7901153564
theta: 4.78411722183
speed: 13.7435235977
id: 1
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:219


xxx before update is x: -3.52401328087
y: -64.7901153564
theta: 4.78411722183
speed: 13.7435235977
id: 1
t: 218
xxx after update is x: -3.07641935349
y: -65.1982498169
theta: 4.71336221695
speed: 13.9395647049
id: 1
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:220


xxx before update is x: -3.07641935349
y: -65.1982498169
theta: 4.71336221695
speed: 13.9395647049
id: 1
t: 219
xxx after update is x: -2.81965351105
y: -65.5689697266
theta: 4.61073589325
speed: 13.8384141922
id: 1
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.81965351105
y: -65.5689697266
theta: 4.61073589325
speed: 13.8384141922
id: 1
t: 220
xxx after update is x: -3.63163042068
y: -66.2452392578
theta: 4.66934347153
speed: 13.8067207336
id: 1
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:221


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-33.193931579589844, 3.2364954948425293, 3.120326519012451, 14.011519432067871)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -3.63163042068
y: -66.2452392578
theta: 4.66934347153
speed: 13.806720733635
speed: 13.6799659729
id: 0
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.68888888889






self.maneuver_requested left
RELEASE,0,9.68888888889,(-30.980241775512695, 3.1304731369018555, 3.0844533443450928),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.68888888889
self.communication_details == 0
sending RELEASE,0,9.68888888889,(-30.980241775512695, 3.1304731369018555, 3.0844533443450928),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -30.9802417755
y: 3.1304731369
theta: 3.08445334435
speed: 13.6799659729
id: 0
t: 218
xxx after update is x: -31.7405757904
y: 3.09821081161
theta: 3.05697321892
speed: 13.4365367889
id: 0
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:219


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0764193534851074, -65.19824981689453, 4.713362216949463, 13.93956470489502)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220


xxx before update is x: -31.7405757904
y: 3.09821081161
theta: 3.05697321892
speed: 13.4365367889
id: 0
t: 219
xxx after update is x: -32.5426979065
y: 3.46925806999
theta: 3.1166806221
speed: 13.966258049
id: 0
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221


xxx before update is x: -32.5426979065
y: 3.46925806999
theta: 3.1166806221
speed: 13.966258049
id: 0
t: 220
xxx after update is x: -33.1939315796
y: 3.23649549484
theta: 3.12032651901
speed: 14.0115194321
id: 0
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -33.1939315796
y: 3.23649549484
theta: 3.12032651901
speed: 14.0115194321
id: 0
t: 221
xxx after update is x: -34.0458450317
y: 3.55722761154
theta: 3.17348241806
speed: 13.7075052261
id: 0
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223


xxx before update is x: -34.0458450317
y: 3.55722761154
theta: 3.17348241806
speed: 13.7075052261
id: 0
t: 222
xxx after update is x: -34.4249382019
y: 2.78396844864
theta: 3.00585079193
speed: 13.8179426193
id: 0
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-4.025672912597656, -67.63758850097656, 4.793299674987793, 14.078083992004395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -34.4249382019
y: 2.78396844864
theta: 3.00585079193
speed: 13.8179426193
id: 0
t: 223
xxx after update is x: -35.0955238342
y: 3.35799121857
theta: 3.1314535141
speed: 13.7285881042
id: 0
t: 224
maneuver_negotiatir.py finish the update agent
id: 1
t: 221
xxx after update is x: -3.34774136543
y: -66.4868240356
theta: 4.52332115173
speed: 13.8829421997
id: 1
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34774136543
y: -66.4868240356
theta: 4.52332115173
speed: 13.8829421997
id: 1
t: 222
xxx after update is x: -4.0256729126
y: -67.637588501
theta: 4.79329967499
speed: 14.078083992
id: 1
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:223




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:224


xxx before update is x: -4.0256729126
y: -67.637588501
theta: 4.79329967499
speed: 14.078083992
id: 1
t: 223
xxx after update is x: -3.16827392578
y: -67.7340087891
theta: 4.64844322205
speed: 13.785900116
id: 1
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -3.16827392578
y: -67.7340087891
theta: 4.64844322205
speed: 13.785900116
id: 1
t: 224
xxx after update is x: -3.86984062195
y: -68.9357223511
theta: 4.54389619827
speed: 13.7460317612
id: 1
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.0






self.maneuver_requested None
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-35.81880569458008, 3.457461357116699, 3.047457695007324, 13.90683650970459)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 10.0




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.0', 'Position': ['(-35.81880569458008', ' 3.457461357116699', ' 3.047457695007324)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.0,(-35.81880569458008, 3.457461357116699, 3.047457695007324),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.86984062195
y: -68.9357223511
theta: 4.54389619827
speed: 13.7460317612
id: 1
t: 225
xxx after update is x: -3.00257229805
y: -69.270652771
theta: 4.63504362106
speed: 14.1456346512
id: 1
t: 226
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:226




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:227


xxx before update is x: -3.00257229805
y: -69.270652771
theta: 4.63504362106
speed: 14.1456346512
id: 1
t: 226
xxx after update is x: -2.91797661781
y: -70.4314727783
theta: 4.62694835663
speed: 13.9447317123
id: 1
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:228


xxx before state from ros funtion
leave the update function 
in spin function, finish the n times spin:224




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -35.0955238342
y: 3.35799121857
theta: 3.1314535141
speed: 13.7285881042
id: 0
t: 224
xxx after update is x: -35.8188056946
y: 3.45746135712
theta: 3.04745769501
speed: 13.9068365097
id: 0
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.0






self.maneuver_requested left
RELEASE,0,10.0,(-35.81880569458008, 3.457461357116699, 3.047457695007324),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(-35.81880569458008, 3.457461357116699, 3.047457695007324),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -35.8188056946
y: 3.45746135712
theta: 3.04745769501
speed: 13.9068365097
id: 0
t: 225
xxx after update is x: -36.2396278381
y: 2.90516757965
theta: 3.05372810364
speed: 13.7470264435
id: 0
t: 226
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:226




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:227


xxx before update is x: -36.2396278381
y: 2.90516757965
theta: 3.05372810364
speed: 13.7470264435
id: 0
t: 226
xxx after update is x: -36.7141494751
y: 3.4880862236
theta: 3.03129076958
speed: 13.9183502197
id: 0
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:228


xxx before update is x: -36.7141494751
y: 3.4880862236
theta: 3.03129076958
speed: 13.9183502197
id: 0
t: 227
xxx after update is x: -37.1939353943
y: 3.25923299789
theta: 3.0277338028
speed: 13.5222072601
id: 0
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.982779026031494, -71.38436889648438, 4.504447937011719, 13.919578552246094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -37.1939353943
y: 3.25923299789
theta: 3.0277338028
speed: 13.5222072601
id: 0
t: 228
xxx after update is x: -38.1094474792
y: 3.41427612305
theta: 3.06714630127
speed: 14.1936531067
id: 0
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:229




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -38.1094474792
y: 3.41427612305
theta: 3.06714630127
speed: 14.1936531067
id: 0
t: 229
xxx after update is x: -38.8049621582
y: 3.40558075905
theta: 2.93822383881
speed: 13.6996908188
id: 0
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:231


xxx before update is x: -38.8049621 update is x: -2.91797661781
y: -70.4314727783
theta: 4.62694835663
speed: 13.9447317123
id: 1
t: 227
xxx after update is x: -2.98277902603
y: -71.3843688965
theta: 4.50444793701
speed: 13.9195785522
id: 1
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:229


xxx before update is x: -2.98277902603
y: -71.3843688965
theta: 4.50444793701
speed: 13.9195785522
id: 1
t: 228
xxx after update is x: -3.50974607468
y: -71.165435791
theta: 4.74375152588
speed: 13.901676178
id: 1
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48799999999999794]
222 self.state_dicts[msg.id][msg.t] is (-38.10944747924805, 3.414276123046875, 3.0671463012695312, 14.193653106689453)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -3.50974607468
y: -71.165435791
theta: 4.74375152588
speed: 13.901676178
id: 1
t: 229
xxx after update is x: -3.56222391129
y: -72.1271972656
theta: 4.94102525711
speed: 13.7822332382
id: 1
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:231


xxx before update is x: -3.56222391129
y: -72.1271972656
theta: 4.94102525711
speed: 13.7822332382
id: 1
t: 230
xxx after update is x: -3.11722540855
y: -72.4895324707
theta: 4.70672988892
speed: 13.5900182724
id: 1
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.11722540855
y: -72.4895324707
theta: 4.70672988892
speed: 13.5900182724
id: 1
t: 231
xxx after update is x: -3.45125889778
y: -72.6974945068
theta: 4.61586427689
speed: 14.2674655914
id: 1
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:232


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.3111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:233


xxx before update is x: -3.45125889778
y: -72.6974945068
theta: 4.61586427689
speed: 14.2674655914
id: 1
t: 232
xxx after update is x: -3.0939719677
y: -73.607383728
theta: 4.62657594681
speed: 13.741109848
id: 1
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5343999999999989]
Received -->>: 
current clock is 10.3555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.3555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.3555555556', 'Position': ['(-40.68423843383789', ' 3.1877520084381104', ' 3.0548229217529297)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.3555555556,(-40.68423843383789, 3.1877520084381104, 3.0548229217529297),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing582
y: 3.40558075905
theta: 2.93822383881
speed: 13.6996908188
id: 0
t: 230
xxx after update is x: -38.9796028137
y: 3.25298833847
theta: 3.24161553383
speed: 14.1563882828
id: 0
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:232


xxx before update is x: -38.9796028137
y: 3.25298833847
theta: 3.24161553383
speed: 14.1563882828
id: 0
t: 231
xxx after update is x: -39.4873428345
y: 3.39976620674
theta: 3.15933442116
speed: 13.8202476501
id: 0
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:233


xxx before update is x: -39.4873428345
y: 3.39976620674
theta: 3.15933442116
speed: 13.8202476501
id: 0
t: 232
xxx after update is x: -40.6842384338
y: 3.18775200844
theta: 3.05482292175
speed: 13.6093082428
id: 0
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0939719676971436, -73.60738372802734, 4.626575946807861, 13.741109848022461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.3555555556






self.maneuver_requested left
RELEASE,0,10.3555555556,(-40.68423843383789, 3.1877520084381104, 3.0548229217529297),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.3555555556
self.communication_details == 0
sending RELEASE,0,10.3555555556,(-40.68423843383789, 3.1877520084381104, 3.0548229217529297),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:234


xxx before update is x: -40.6842384338
y: 3.18775200844
theta: 3.05482292175
speed: 13.6093082428
id: 0
t: 233
xxx after update is x: -41.4072494507
y: 3.30571174622
theta: 3.20669746399
speed: 13.5619487762
id: 0
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -41.4072494507
y: 3.30571174622
theta: 3.20669746399
speed: 13.5619487762
id: 0
t: 234
xxx after update is x: -41.661655426
y: 3.49099040031
theta: 3.06212568283
speed: 13.8242425919
id: 0
t: 235
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:235




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:236


xxx before update is x: -41.661655426
y: 3.49099040031
theta: 3.06212568283
speed: 13.8242425919
id: 0
t: 235
xxx after update is x: -42.5692024231
y: 2.93184494972
theta: 3.11175012589
speed: 14.2646093369
id: 0
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:237


xxx before update is x: -42.5692024231
y: 2.93184494972
theta: 3.11175012589
speed: 14.2646093369
id: 0
t: 236
xxx after update is x: -43.1726837158
y: 2.9296848774
theta: 3.03157281876
speed: 13.7368516922
id: 0
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222  function, it's a long code, finish1




222 self.state_dicts[msg.id][msg.t] is (-40.68423843383789, 3.1877520084381104, 3.0548229217529297, 13.609308242797852)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:234


xxx before update is x: -3.0939719677
y: -73.607383728
theta: 4.62657594681
speed: 13.741109848
id: 1
t: 233
xxx after update is x: -3.33171701431
y: -74.1360549927
theta: 4.72241449356
speed: 13.7989664078
id: 1
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:235


xxx before update is x: -3.33171701431
y: -74.1360549927
theta: 4.72241449356
speed: 13.7989664078
id: 1
t: 234
xxx after update is x: -3.42941474915
y: -74.9005737305
theta: 4.81757736206
speed: 13.5716791153
id: 1
t: 235
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:236


xxx before update is x: -3.42941474915
y: -74.9005737305
theta: 4.81757736206
speed: 13.5716791153
id: 1
t: 235
xxx after update is x: -2.51626324654
y: -75.3596115112
theta: 4.79570627213
speed: 13.8100347519
id: 1
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:237


xxx before update is x: -2.51626324654
y: -75.3596115112
theta: 4.79570627213
speed: 13.8100347519
id: 1
t: 236
xxx after update is x: -3.57983136177
y: -76.1953735352
theta: 4.77219057083
speed: 13.7879810333
id: 1
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.475199999999998]
222 self.state_dicts[msg.id][msg.t] is (-43.17268371582031, 2.92968487739563, 3.0315728187561035, 13.736851692199707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.57983136177
y: -76.1953735352
theta: 4.77219057083
speed: 13.7879810333
id: 1
t: 237
xxx after update is x: -3.54922938347
y: -76.6727218628
theta: 4.67232322693
speed: 13.8388690948
id: 1
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.54922938347
y: -76.6727218628
theta: 4.67232322693
speed: 13.8388690948
id: 1
t: 238
xxx after update is x: -3.54956150055
y: -77.2040786743
theta: 4.5804400444
speed: 13.9072599411
id: 1
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:240


xxx before update is x: -3.54956150055
y: -77.2040786743
theta: 4.5804400444
speed: 13.9072599411
id: 1
t: 239
xxx after update is x: -3.57506918907
y: -77.2114562988
theta: 4.78082561493
speed: 14.0660610199
id: 1
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tryself.state_dicts[msg.id][msg.t] is (-3.57983136177063, -76.19537353515625, 4.772190570831299, 13.787981033325195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -43.1726837158
y: 2.9296848774
theta: 3.03157281876
speed: 13.7368516922
id: 0
t: 237
xxx after update is x: -43.7599983215
y: 2.93327713013
theta: 3.04269886017
speed: 13.7369661331
id: 0
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -43.7599983215
y: 2.93327713013
theta: 3.04269886017
speed: 13.7369661331
id: 0
t: 238
xxx after update is x: -44.6214447021
y: 3.19286203384
theta: 3.09680461884
speed: 13.8873844147
id: 0
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:240


xxx before update is x: -44.6214447021
y: 3.19286203384
theta: 3.09680461884
speed: 13.8873844147
id: 0
t: 239
xxx after update is x: -44.7475776672
y: 3.43706417084
theta: 3.25453495979
speed: 13.8764925003
id: 0
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -44.7475776672
y: 3.43706417084
theta: 3.25453495979
speed: 13.8764925003
id: 0
t: 240
xxx after update is x: -45.355266571
y: 2.78821873665
theta: 3.11755943298
speed: 13.8949279785
id: 0
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.7111111111






self.maneuver_requested left
RELEASE,0,10.7111111111,(-45.35526657104492, 2.7882187366485596, 3.1175594329833984),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.7111111111
self.communication_details == 0
sending RELEASE,0,10.7111111111,(-45.35526657104492, 2.7882187366485596, 3.1175594329833984),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
leave the update function 
in spin function, finish the n times spin:241


maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3536322116851807, -78.05266571044922, 4.694075107574463, 13.799039840698242)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -45.355266571
y: 2.78821873665
theta: 3.11755943298
speed: 13.8949279785
id: 0
t: 241
xxx after update is x: -45.8204917908
y: 3.07597637177
theta: 3.16910767555
speed: 13.9287939072
id: 0
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:242




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:243


xxx before update is x: -45.8204917908
y: 3.07597637177
theta: 3.16910767555
speed: 13.9287939072
id: 0
t: 242
xxx after update is x: -46.7827949524
y: 3.66072440147
theta: 3.1559214592
speed: 14.0747117996
id: 0
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py  maneuver function update -. strat
current clock is 10.6666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:241


Received -->>: 
current clock is 10.6666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.6666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.7111111111', 'Position': ['(-45.35526657104492', ' 2.7882187366485596', ' 3.1175594329833984)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.7111111111,(-45.35526657104492, 2.7882187366485596, 3.1175594329833984),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -3.57506918907
y: -77.2114562988
theta: 4.78082561493
speed: 14.0660610199
id: 1
t: 240
xxx after update is x: -3.35363221169
y: -78.0526657104
theta: 4.69407510757
speed: 13.7990398407
id: 1
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5119999999999982]
222 self.state_dicts[msg.id][msg.t] is (-45.35526657104492, 2.7882187366485596, 3.1175594329833984, 13.894927978515625)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:242


xxx before update is x: -3.35363221169
y: -78.0526657104
theta: 4.69407510757
speed: 13.7990398407
id: 1
t: 241
xxx after update is x: -3.11460375786
y: -79.5364151001
theta: 4.71951818466
speed: 14.0635509491
id: 1
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:243


xxx before update is x: -3.11460375786
y: -79.5364151001
theta: 4.71951818466
speed: 14.0635509491
id: 1
t: 242
xxx after update is x: -2.96833753586
y: -79.709777832
theta: 4.78372335434
speed: 13.8787908554
id: 1
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:244


xxx before update is x: -2.96833753586
y: -79.709777832
theta: 4.78372335434
speed: 13.8787908554
id: 1
t: 243
xxx after update is x: -3.46520900726
y: -80.3519744873
theta: 4.81462192535
speed: 13.9047994614
id: 1
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-47.285945892333984, 3.319453716278076, 3.023956537246704, 13.95224380493164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.46520900726
y: -80.3519744873
theta: 4.81462192535
speed: 13.9047994614
id: 1
t: 244
xxx after update is x: -3.31695437431
y: -81.4276809692
theta: 4.87707805634
speed: 14.2785673141
id: 1
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:245




going to the upin the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -46.7827949524
y: 3.66072440147
theta: 3.1559214592
speed: 14.0747117996
id: 0
t: 243
xxx after update is x: -47.2859458923
y: 3.31945371628
theta: 3.02395653725
speed: 13.9522438049
id: 0
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:244




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:245


xxx before update is x: -47.2859458923
y: 3.31945371628
theta: 3.02395653725
speed: 13.9522438049
id: 0
t: 244
xxx after update is x: -47.69190979
y: 3.01199769974
theta: 3.29186725616
speed: 13.9082231522
id: 0
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3169543743133545, -81.42768096923828, 4.877078056335449, 14.27856731414795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -47.69190979
y: 3.01199769974
theta: 3.29186725616
speed: 13.9082231522
id: 0
t: 245
xxx after update is x: -48.9113464355
y: 3.34503173828
theta: 3.11707854271
speed: 13.871219635
id: 0
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:246




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:247


xxx before update is x: -48.9113464355
y: 3.34503173828
theta: 3.11707854271
speed: 13.871219635
id: 0
t: 246
xxx after update is x: -49.6574859619
y: 3.41006064415
theta: 3.16721582413
speed: 14.0004482269
id: 0
t: 247
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:248


xxx before update is x: -49.6574859619
y: 3.41006064415
theta: 3.16721582413
speed: 14.0004482269
id: 0
t: 247
xxx after update is x: -49.7020835876
y: 3.63564610481
theta: 3.25137066841
speed: 13.8156776428
id: 0
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested left
RELEASE,0,11.0222222222,(-49.702083587646484, 3.635646104812622, 3.251370668411255),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.0222222222
self.communication_details == 0
sending RELEASE,0,11.0222222222,(-49.702083587646484, 3.635646104812622, 3.251370668411255),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:249


xxx before update is x: -49.7020835876
y: 3.63564610481
theta: 3.25137066841
speed: 13.8156776428
id: 0
t: 248
xxx after update is x: -50.7455215454
y: 2.88453888893
theta: 3.02916622162
speed: 14.1122598648
id: 0
t: 249
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -50.7455215454
y: 2.88453888893
theta: 3.02916622162
speed: 14.1122598648
id: 0
t: 249
xxx after update is x: -50.4779472351
y: 3.61144089699
theta: 3.11871433258
speed: 13.7566814423
id:date function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:246


xxx before update is x: -3.31695437431
y: -81.4276809692
theta: 4.87707805634
speed: 14.2785673141
id: 1
t: 245
xxx after update is x: -2.64465737343
y: -81.9725723267
theta: 4.38650417328
speed: 13.7106781006
id: 1
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.64465737343
y: -81.9725723267
theta: 4.38650417328
speed: 13.7106781006
id: 1
t: 246
xxx after update is x: -3.38372564316
y: -82.2193450928
theta: 4.68016433716
speed: 13.8953838348
id: 1
t: 247
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:247


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:248


xxx before update is x: -3.38372564316
y: -82.2193450928
theta: 4.68016433716
speed: 13.8953838348
id: 1
t: 247
xxx after update is x: -2.8645260334
y: -82.2975082397
theta: 4.81342077255
speed: 13.9692926407
id: 1
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.479999999999998]
222 self.state_dicts[msg.id][msg.t] is (-49.702083587646484, 3.635646104812622, 3.251370668411255, 13.815677642822266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.0222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 11.0222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.0222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '11.0222222222', 'Position': ['(-49.702083587646484', ' 3.635646104812622', ' 3.251370668411255)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.0222222222,(-49.702083587646484, 3.635646104812622, 3.251370668411255),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:249


xxx before update is x: -2.8645260334
y: -82.2975082397
theta: 4.81342077255
speed: 13.9692926407
id: 1
t: 248
xxx after update is x: -3.47093963623
y: -83.6764755249
theta: 4.68654680252
speed: 13.9460172653
id: 1
t: 249
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.47093963623
y: -83.6764755249
theta: 4.68654680252
speed: 13.9460172653
id: 1
t: 249
xxx after update is x: -3.63503932953
y: -83.8428268433
theta: 4.78738498688
speed: 13.7543401718
id: 1
t: 250
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:250




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:251


xxx before update is x: -3.63503932953
y: -83.8428268433
theta: 4.78738498688
speed: 13.7543401718
id: 1
t: 250
xxx after update is x: -3.50608038902
y: -84.6090011597 0
t: 250
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:250




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:251


xxx before update is x: -50.4779472351
y: 3.61144089699
theta: 3.11871433258
speed: 13.7566814423
id: 0
t: 250
xxx after update is x: -51.7635116577
y: 3.25377845764
theta: 2.97304058075
speed: 13.7354412079
id: 0
t: 251
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.506080389022827, -84.60900115966797, 4.787034511566162, 14.074877738952637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -51.7635116577
y: 3.25377845764
theta: 2.97304058075
speed: 13.7354412079
id: 0
t: 251
xxx after update is x: -52.2304611206
y: 3.50447583199
theta: 3.11628913879
speed: 13.7535791397
id: 0
t: 252
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:252




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -52.2304611206
y: 3.50447583199
theta: 3.11628913879
speed: 13.7535791397
id: 0
t: 252
xxx after update is x: -53.0884056091
y: 3.22452068329
theta: 3.13677477837
speed: 14.0914030075
id: 0
t: 253
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:253




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -53.0884056091
y: 3.22452068329
theta: 3.13677477837
speed: 14.0914030075
id: 0
t: 253
xxx after update is x: -53.614692688
y: 3.4043738842
theta: 3.08787560463
speed: 13.8984584808
id: 0
t: 254
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:254




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:255


xxx before update is x: -53.614692688
y: 3.4043738842
theta: 3.08787560463
speed: 13.8984584808
id: 0
t: 254
xxx after update is x: -53.6556282043
y: 3.75106859207
theta: 2.90953302383
speed: 13.6309137344
id: 0
t: 255
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2460319995880127, -87.11251068115234, 4.7712082862854, 13.850308418273926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -53.6556282043
y: 3.75106859207
theta: 2.90953302383
speed: 13.6309137344
id: 0
t: 255
xxx after update is x: -54.5825576782
y: 2.94170618057
theta: 3.27743506432
speed: 13.7013263702
id: 0
t: 256
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:256


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.3777777778






self.maneuver_requested left
RELEASE,0,11.3777777778,(-54.582557678222656, 2.9417061805725098, 3.277435064315796),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.3777777778
self.communication_details == 0
sending RELEASE,0,11.3777777778,(-54.582557678222656, 2.9417061805725098, 3.277435064315796),13,1,2.93333333333,0
theta: 4.78703451157
speed: 14.074877739
id: 1
t: 251
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:252


xxx before update is x: -3.50608038902
y: -84.6090011597
theta: 4.78703451157
speed: 14.074877739
id: 1
t: 251
xxx after update is x: -3.65635299683
y: -85.6967391968
theta: 4.57355928421
speed: 14.0575962067
id: 1
t: 252
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-52.23046112060547, 3.5044758319854736, 3.1162891387939453, 13.753579139709473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.65635299683
y: -85.6967391968
theta: 4.57355928421
speed: 14.0575962067
id: 1
t: 252
xxx after update is x: -3.14661073685
y: -86.3536376953
theta: 4.53921747208
speed: 14.1350946426
id: 1
t: 253
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:253




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14661073685
y: -86.3536376953
theta: 4.53921747208
speed: 14.1350946426
id: 1
t: 253
xxx after update is x: -3.68080091476
y: -86.7219085693
theta: 4.78524875641
speed: 13.7804107666
id: 1
t: 254
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:254




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:255


xxx before update is x: -3.68080091476
y: -86.7219085693
theta: 4.78524875641
speed: 13.7804107666
id: 1
t: 254
xxx after update is x: -3.24603199959
y: -87.1125106812
theta: 4.77120828629
speed: 13.8503084183
id: 1
t: 255
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5647999999999997]
222 self.state_dicts[msg.id][msg.t] is (-53.6556282043457, 3.751068592071533, 2.9095330238342285, 13.630913734436035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:256


xxx before update is x: -3.24603199959
y: -87.1125106812
theta: 4.77120828629
speed: 13.8503084183
id: 1
t: 255
xxx after update is x: -3.15205001831
y: -88.220161438
theta: 4.83415460587
speed: 13.8759679794
id: 1
t: 256
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.3777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 11.3777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.3777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '11.3777777778', 'Position': ['(-54.582557678222656', ' 2.9417061805725098', ' 3.277435064315796)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.3777777778,(-54.582557678222656, 2.9417061805725098, 3.277435064315796),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:257


xxx before update is x: -3.15205001831
y: -88.220161438
theta: 4.83415460587
speed: 13.8759679794
id: 1
t: 256
xxx after update is x: -3.29217910767
y: -88.4182357788
theta: 4.64815950394
speed: 13.5019302368
id: 1
t: 257
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:258


xxx before update is x: -3.29217910767
y: -88.4182357788
theta: 4.64815950394
speed: 13.5019302368
id: 1
t: 257
xxx after update is x: -3.55986833572
y: -89.2290725708
theta: 4.65839099884
speed: 14.0413722992
id: 1
t: 258
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:259


xxx before update is x: -3.55986833572
y: -89.2290725708
theta: 4.65839099884
speed: 14.0413722992
id: 1
t: 258
xxx after update is x: -3.11305308342
y: -89.3305053711
theta: 4.6376490593
speed: 13.7143802643
id: 1
t: 259
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-56.50524139404297, 3.023728132247925, 3.272139310836792, 14.12775993347168)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:260


xxx before update is x: -3.11305308342
y: -89.3305053711
theta: 4.6376490593
speed: 13.7143802643
id: 1
t: 259
xxx after update is x: -2.922935009
y: -90.2238616943
theta: 4.73675251007
speed: 14.198800087
id: 1
t: 260
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:261


xxx before update is x: -2.922935009
y: -90.2238616943
theta: 4.73675251007
speed: 14.198800087
id: 1
t: 260
xxx after update is x: -3.59678244591
y: -90.5389709473
theta: 4.62427711487
speed: 14.0702695847
id: 1
t: 261
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:262


xxx before update is x: -3.59678244591
y: -90.5389709473
theta: 4.62427711487
speed: 14.0702695847
id: 1
t: 261
xxx after update is x: -3.56905794144
y: -91.5703811646
theta: 4.77371740341
speed: 13.812046051
id: 1
t: 262
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4959999999999979]
222 self.state_dicts[msg.id][msg.t] is (-58.3215217590332, 3.294670820236206, 3.0948667526245117, 13.557701110839844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56905794144
y: -91.5703811646
theta: 4.77371740341
speed: 13.812046051
id: 1
t: 262
xxx after update is x: -3.52837157249
y: -92.4242706299
theta: 4.60967063904
speed: 13.690674 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:257


xxx before update is x: -54.5825576782
y: 2.94170618057
theta: 3.27743506432
speed: 13.7013263702
id: 0
t: 256
xxx after update is x: -55.0901374817
y: 3.16315984726
theta: 3.02989125252
speed: 13.9499635696
id: 0
t: 257
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:258


xxx before update is x: -55.0901374817
y: 3.16315984726
theta: 3.02989125252
speed: 13.9499635696
id: 0
t: 257
xxx after update is x: -55.8789367676
y: 2.72839307785
theta: 3.02241611481
speed: 14.0101575851
id: 0
t: 258
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:259


xxx before update is x: -55.8789367676
y: 2.72839307785
theta: 3.02241611481
speed: 14.0101575851
id: 0
t: 258
xxx after update is x: -56.505241394
y: 3.02372813225
theta: 3.27213931084
speed: 14.1277599335
id: 0
t: 259
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1130530834198, -89.33050537109375, 4.637649059295654, 13.714380264282227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -56.505241394
y: 3.02372813225
theta: 3.27213931084
speed: 14.1277599335
id: 0
t: 259
xxx after update is x: -57.4193725586
y: 3.02826762199
theta: 3.14367818832
speed: 13.6701889038
id: 0
t: 260
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:260




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:261


xxx before update is x: -57.4193725586
y: 3.02826762199
theta: 3.14367818832
speed: 13.6701889038
id: 0
t: 260
xxx after update is x: -57.5029258728
y: 3.74101805687
theta: 3.09499263763
speed: 14.075006485
id: 0
t: 261
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:262


xxx before update is x: -57.5029258728
y: 3.74101805687
theta: 3.09499263763
speed: 14.075006485
id: 0
t: 261
xxx after update is x: -58.321521759
y: 3.29467082024
theta: 3.09486675262
speed: 13.5577011108
id: 0
t: 262
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:263


xxx before update is x: -58.321521759
y: 3.29467082024
theta: 3.09486675262
speed: 13.5577011108
id: 0
t: 262
xxx after update is x: -59.2854919434
y: 2.83713459969
theta: 3.1274061203
speed: 14.042391777
id: 0
t: 263
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.528371572494507, -92.42427062988281, 4.609670639038086, 13.690674781799316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state functio7818
id: 1
t: 263
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:263


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.6888888889






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:264


xxx before update is x: -3.52837157249
y: -92.4242706299
theta: 4.60967063904
speed: 13.6906747818
id: 1
t: 263
xxx after update is x: -3.04308700562
y: -93.1854629517
theta: 4.77791929245
speed: 13.6391334534
id: 1
t: 264
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 11.7333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.7333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '11.7333333333', 'Position': ['(-59.88658142089844', ' 3.182037353515625', ' 3.227971315383911)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.7333333333,(-59.88658142089844, 3.182037353515625, 3.227971315383911),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:265


xxx before update is x: -3.04308700562
y: -93.1854629517
theta: 4.77791929245
speed: 13.6391334534
id: 1
t: 264
xxx after update is x: -3.31867957115
y: -93.2727432251
theta: 4.76254844666
speed: 13.988196373
id: 1
t: 265
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:266


xxx before update is x: -3.31867957115
y: -93.2727432251
theta: 4.76254844666
speed: 13.988196373
id: 1
t: 265
xxx after update is x: -3.58748102188
y: -93.750328064
theta: 4.50126075745
speed: 13.655257225
id: 1
t: 266
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-60.504817962646484, 3.6739699840545654, 3.2560997009277344, 13.823728561401367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:267


xxx before update is x: -3.58748102188
y: -93.750328064
theta: 4.50126075745
speed: 13.655257225
id: 1
t: 266
xxx after update is x: -2.87660193443
y: -94.9718475342
theta: 4.71003198624
speed: 13.8752832413
id: 1
t: 267
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:268


xxx before update is x: -2.87660193443
y: -94.9718475342
theta: 4.71003198624
speed: 13.8752832413
id: 1
t: 267
xxx after update is x: -2.88054227829
y: -95.3617630005
theta: 4.6796002388
speed: 13.7221632004
id: 1
t: 268
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spn


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:264


xxx before update is x: -59.2854919434
y: 2.83713459969
theta: 3.1274061203
speed: 14.042391777
id: 0
t: 263
xxx after update is x: -59.8865814209
y: 3.18203735352
theta: 3.22797131538
speed: 13.5172080994
id: 0
t: 264
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.7333333333






self.maneuver_requested left
RELEASE,0,11.7333333333,(-59.88658142089844, 3.182037353515625, 3.227971315383911),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.7333333333
self.communication_details == 0
sending RELEASE,0,11.7333333333,(-59.88658142089844, 3.182037353515625, 3.227971315383911),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:265


xxx before update is x: -59.8865814209
y: 3.18203735352
theta: 3.22797131538
speed: 13.5172080994
id: 0
t: 264
xxx after update is x: -59.5347862244
y: 3.36285662651
theta: 3.17924427986
speed: 14.1303710938
id: 0
t: 265
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:266


xxx before update is x: -59.5347862244
y: 3.36285662651
theta: 3.17924427986
speed: 14.1303710938
id: 0
t: 265
xxx after update is x: -60.5048179626
y: 3.67396998405
theta: 3.25609970093
speed: 13.8237285614
id: 0
t: 266
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:267


xxx before update is x: -60.5048179626
y: 3.67396998405
theta: 3.25609970093
speed: 13.8237285614
id: 0
t: 266
xxx after update is x: -61.6671676636
y: 2.90266799927
theta: 3.07917428017
speed: 14.0234003067
id: 0
t: 267
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8766019344329834, -94.97184753417969, 4.710031986236572, 13.875283241271973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:268


xxx before update is x: -61.6671676636
y: 2.90266799927
theta: 3.07917428017
speed: 14.0234003067
id: 0
t: 267
xxx after update is x: -61.8557014465
y: 3.37784314156
theta: 3.19422340393
speed: 14.017829895
id: 0
t: 268
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:269


xxx before update is x: -61.8557014465
y: 3.37784314156
theta: 3.19422340393
speed: 14.017829895
id: 0
t: 268
xxx after update is x: -62.9882278442
y: 3.01582860947
theta: 3.42785477638
speed: 14.0365190506
id: 0
t: 269
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:270


xxx before update is x: -62.9882278442
y: 3.01582860947
theta: 3.42785477638
speed: 14.0365190in:269

xxx before update is x: -2.88054227829
y: -95.3617630005
theta: 4.6796002388
speed: 13.7221632004
id: 1
t: 268
xxx after update is x: -3.01870560646
y: -95.8147659302
theta: 4.65471839905
speed: 13.906293869
id: 1
t: 269
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4959999999999979]
222 self.state_dicts[msg.id][msg.t] is (-62.98822784423828, 3.0158286094665527, 3.4278547763824463, 14.036519050598145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:270


xxx before update is x: -3.01870560646
y: -95.8147659302
theta: 4.65471839905
speed: 13.906293869
id: 1
t: 269
xxx after update is x: -3.10287833214
y: -96.2438583374
theta: 4.8016037941
speed: 13.8980665207
id: 1
t: 270
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:271


xxx before update is x: -3.10287833214
y: -96.2438583374
theta: 4.8016037941
speed: 13.8980665207
id: 1
t: 270
xxx after update is x: -2.69103980064
y: -97.0462036133
theta: 4.8204870224
speed: 13.7707767487
id: 1
t: 271
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.0444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:272


Received -->>: 
current clock is 12.0444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.0444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.0444444444', 'Position': ['(-63.15831756591797', ' 3.0183780193328857', ' 3.1195592880249023)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.0444444444,(-63.15831756591797, 3.0183780193328857, 3.1195592880249023),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -2.69103980064
y: -97.0462036133
theta: 4.8204870224
speed: 13.7707767487
id: 1
t: 271
xxx after update is x: -3.70242905617
y: -97.6945495605
theta: 4.79372501373
speed: 13.9135961533
id: 1
t: 272
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:273


xxx before update is x: -3.70242905617
y: -97.6945495605
theta: 4.79372501373
speed: 13.9135961533
id: 1
t: 272
xxx after update is x: -3.22348737717
y: -98.2487869263
theta: 4.77363872528
speed: 13.9531393051
id: 1
t: 273
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.22348737717
y: -98.2487869263
theta: 4.77363872528
speed: 13.9531393051
id: 1
t: 273
xxx after update is x: -3.25937342644
y: -98.8717498779
theta: 4.79243135452
speed: 13.7847442627
id: 1
t: 274
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin506
id: 0
t: 269
xxx after update is x: -62.9153747559
y: 2.96612358093
theta: 3.2026488781
speed: 13.5611457825
id: 0
t: 270
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -62.9153747559
y: 2.96612358093
theta: 3.2026488781
speed: 13.5611457825
id: 0
t: 270
xxx after update is x: -63.1583175659
y: 3.01837801933
theta: 3.11955928802
speed: 13.794254303
id: 0
t: 271
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:271




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:272


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.0444444444






self.maneuver_requested left
RELEASE,0,12.0444444444,(-63.15831756591797, 3.0183780193328857, 3.1195592880249023),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.0444444444
self.communication_details == 0
sending RELEASE,0,12.0444444444,(-63.15831756591797, 3.0183780193328857, 3.1195592880249023),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: -63.1583175659
y: 3.01837801933
theta: 3.11955928802
speed: 13.794254303
id: 0
t: 271
xxx after update is x: -64.1821594238
y: 3.2942738533
theta: 3.18556714058
speed: 13.6860723495
id: 0
t: 272
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.7024290561676025, -97.69454956054688, 4.79372501373291, 13.913596153259277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -64.1821594238
y: 3.2942738533
theta: 3.18556714058
speed: 13.6860723495
id: 0
t: 272
xxx after update is x: -65.8527526855
y: 3.2301132679
theta: 3.16314983368
speed: 13.9350557327
id: 0
t: 273
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:273




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -65.8527526855
y: 3.2301132679
theta: 3.16314983368
speed: 13.9350557327
id: 0
t: 273
xxx after update is x: -65.4426879883
y: 3.42131662369
theta: 2.99074888229
speed: 13.6159305573
id: 0
t: 274
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:274




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -65.4426879883
y: 3.42131662369
theta: 2.99074888229
speed: 13.6159305573
id: 0
t: 274
xxx after update is x: -66.3192596436
y: 2.9968650341
theta: 3.1037735939
speed: 13.8473682404
id: 0
t: 275
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:275




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:276


xxx before update is x: -66.3192596436
y: 2.9968650341
theta: 3.1037735939
speed: 13.8473682404
id: 0
t: 275
xxx after update is x: -66.8780517578
y: 3.2601890564
theta: 3.14141130447
speed: 13.7790079117
id: 0
t: 276
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5776422023773193, -100.05592346:274


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5183999999999984]
222 self.state_dicts[msg.id][msg.t] is (-65.44268798828125, 3.421316623687744, 2.990748882293701, 13.615930557250977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:275


xxx before update is x: -3.25937342644
y: -98.8717498779
theta: 4.79243135452
speed: 13.7847442627
id: 1
t: 274
xxx after update is x: -2.64018583298
y: -99.1379928589
theta: 4.88797855377
speed: 13.9706916809
id: 1
t: 275
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:276


xxx before update is x: -2.64018583298
y: -99.1379928589
theta: 4.88797855377
speed: 13.9706916809
id: 1
t: 275
xxx after update is x: -3.57764220238
y: -100.055923462
theta: 4.75996112823
speed: 13.6911611557
id: 1
t: 276
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:277


xxx before update is x: -3.57764220238
y: -100.055923462
theta: 4.75996112823
speed: 13.6911611557
id: 1
t: 276
xxx after update is x: -3.78951072693
y: -100.771308899
theta: 4.82396507263
speed: 14.029042244
id: 1
t: 277
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5103999999999982]
222 self.state_dicts[msg.id][msg.t] is (-67.79003143310547, 2.9890851974487305, 3.1963918209075928, 13.976137161254883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:278


xxx before update is x: -3.78951072693
y: -100.771308899
theta: 4.82396507263
speed: 14.029042244
id: 1
t: 277
xxx after update is x: -3.12670350075
y: -101.547355652
theta: 4.78078794479
speed: 13.6812791824
id: 1
t: 278
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12670350075
y: -101.547355652
theta: 4.78078794479
speed: 13.6812791824
id: 1
t: 278
xxx after update is x: -3.06373739243
y: -101.788948059
theta: 4.67556810379
speed: 13.9256820679
id: 1
t: 279
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:279


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.4






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 12.4




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.4
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.4', 'Position': ['(-69.19210815429688', ' 3.5589284896850586', ' 3.268463134765625)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.4,(-69.19210815429688, 3.5589284896850586, 3.268463134765625),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
target191406, 4.759961128234863, 13.691161155700684)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -66.8780517578
y: 3.2601890564
theta: 3.14141130447
speed: 13.7790079117
id: 0
t: 276
xxx after update is x: -67.7900314331
y: 2.98908519745
theta: 3.19639182091
speed: 13.9761371613
id: 0
t: 277
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:277




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:278


xxx before update is x: -67.7900314331
y: 2.98908519745
theta: 3.19639182091
speed: 13.9761371613
id: 0
t: 277
xxx after update is x: -68.4142456055
y: 2.95649766922
theta: 3.1798415184
speed: 13.7581319809
id: 0
t: 278
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:279


xxx before update is x: -68.4142456055
y: 2.95649766922
theta: 3.1798415184
speed: 13.7581319809
id: 0
t: 278
xxx after update is x: -69.1921081543
y: 3.55892848969
theta: 3.26846313477
speed: 13.8648815155
id: 0
t: 279
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.4






self.maneuver_requested left
RELEASE,0,12.4,(-69.19210815429688, 3.5589284896850586, 3.268463134765625),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.4
self.communication_details == 0
sending RELEASE,0,12.4,(-69.19210815429688, 3.5589284896850586, 3.268463134765625),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:280


xxx before update is x: -69.1921081543
y: 3.55892848969
theta: 3.26846313477
speed: 13.8648815155
id: 0
t: 279
xxx after update is x: -69.0550765991
y: 3.36767172813
theta: 3.04458117485
speed: 13.8842010498
id: 0
t: 280
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:281


xxx before update is x: -69.0550765991
y: 3.36767172813
theta: 3.04458117485
speed: 13.8842010498
id: 0
t: 280
xxx after update is x: -70.2872390747
y: 3.22489094734
theta: 3.28386688232
speed: 14.1235389709
id: 0
t: 281
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2885682582855225, -103.6248779296875, 4.714596271514893, 14.0506591796875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -70.2872390747
y: 3.22489094734
theta: 3.28386688232
speed: 14.1235389709
id: 0
t: 281
xxx after update is x: -70.8628768921
y: 2.83506989479
theta: 2.94208192825
speed: 13.752409935
id: 0
t: 282
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:282




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -speed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:280


xxx before update is x: -3.06373739243
y: -101.788948059
theta: 4.67556810379
speed: 13.9256820679
id: 1
t: 279
xxx after update is x: -3.04418683052
y: -102.15272522
theta: 4.69044065475
speed: 13.5987968445
id: 1
t: 280
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:281


xxx before update is x: -3.04418683052
y: -102.15272522
theta: 4.69044065475
speed: 13.5987968445
id: 1
t: 280
xxx after update is x: -3.28856825829
y: -103.62487793
theta: 4.71459627151
speed: 14.0506591797
id: 1
t: 281
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:282


xxx before update is x: -3.28856825829
y: -103.62487793
theta: 4.71459627151
speed: 14.0506591797
id: 1
t: 281
xxx after update is x: -3.12277173996
y: -104.332710266
theta: 4.85693597794
speed: 13.6152353287
id: 1
t: 282
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-70.86287689208984, 2.8350698947906494, 2.942081928253174, 13.752409934997559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:283


xxx before update is x: -3.12277173996
y: -104.332710266
theta: 4.85693597794
speed: 13.6152353287
id: 1
t: 282
xxx after update is x: -3.72490239143
y: -104.171722412
theta: 4.68267011642
speed: 13.8620376587
id: 1
t: 283
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.72490239143
y: -104.171722412
theta: 4.68267011642
speed: 13.8620376587
id: 1
t: 283
xxx after update is x: -3.41823291779
y: -105.259483337
theta: 4.78878450394
speed: 13.9143476486
id: 1
t: 284
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:284


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:285


xxx before update is x: -3.41823291779
y: -105.259483337
theta: 4.78878450394
speed: 13.9143476486
id: 1
t: 284
xxx after update is x: -3.35081291199
y: -105.316871643
theta: 4.90028619766
speed: 14.2278032303
id: 1
t: 285
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4415999999999982]
222 self.state_dicts[msg.id][msg.t] is (-73.0561294555664, 3.8989293575286865, 3.152536153793335, 13.962895393371582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.35081291199
y: -105.316871643
theta: 4.90028619766
speed: 14.2278032303
id: 1
t: 285
xxx after update is x: -3.20204591751
y: -105.918670654
theta: 4.63161182404
speed: 13.9688186646
id: 1
t: 286
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:286




going to the update function
sim.py in the70.8628768921
y: 2.83506989479
theta: 2.94208192825
speed: 13.752409935
id: 0
t: 282
xxx after update is x: -71.4996643066
y: 3.55409908295
theta: 3.17324447632
speed: 13.824300766
id: 0
t: 283
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:283




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:284


xxx before update is x: -71.4996643066
y: 3.55409908295
theta: 3.17324447632
speed: 13.824300766
id: 0
t: 283
xxx after update is x: -71.259727478
y: 2.95604419708
theta: 2.98097610474
speed: 14.384598732
id: 0
t: 284
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:285


xxx before update is x: -71.259727478
y: 2.95604419708
theta: 2.98097610474
speed: 14.384598732
id: 0
t: 284
xxx after update is x: -73.0561294556
y: 3.89892935753
theta: 3.15253615379
speed: 13.9628953934
id: 0
t: 285
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -73.0561294556
y: 3.89892935753
theta: 3.15253615379
speed: 13.9628953934
id: 0
t: 285
xxx after update is x: -73.2937545776
y: 3.05730271339
theta: 3.21911931038
speed: 13.9429788589
id: 0
t: 286
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:286


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2020459175109863, -105.91867065429688, 4.6316118240356445, 13.968818664550781)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:287


xxx before update is x: -73.2937545776
y: 3.05730271339
theta: 3.21911931038
speed: 13.9429788589
id: 0
t: 286
xxx after update is x: -73.606842041
y: 3.58951926231
theta: 3.09885406494
speed: 13.8223581314
id: 0
t: 287
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.7555555556






self.maneuver_requested left
RELEASE,0,12.7555555556,(-73.60684204101562, 3.5895192623138428, 3.0988540649414062),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.7555555556
self.communication_details == 0
sending RELEASE,0,12.7555555556,(-73.60684204101562, 3.5895192623138428, 3.0988540649414062),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -73.606842041
y: 3.58951926231
theta: 3.09885406494
speed: 13.8223581314
id: 0
t: 287
xxx after update is x: -74.5298538208
y: 3.3246819973
theta: 2.99521803856
speed: 14.0541553497
id: 0
t: 288
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:288




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:289


xxx before update is x: -74.5298538208
y: 3.3246819973
theta: 2.99521803856
speed: 14.0541553497
id: 0
t: 288
xxx after update is x: -75.3180389404
y: 3.30791687965
theta: 3.22696232796
speed: 13.7789258957
id: 0
t: 289
maneuver_negotiatir.p sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:287


xxx before update is x: -3.20204591751
y: -105.918670654
theta: 4.63161182404
speed: 13.9688186646
id: 1
t: 286
xxx after update is x: -3.71192741394
y: -107.234825134
theta: 4.76838922501
speed: 13.7424440384
id: 1
t: 287
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.7555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 12.7555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.7555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.7555555556', 'Position': ['(-73.60684204101562', ' 3.5895192623138428', ' 3.0988540649414062)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.7555555556,(-73.60684204101562, 3.5895192623138428, 3.0988540649414062),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.71192741394
y: -107.234825134
theta: 4.76838922501
speed: 13.7424440384
id: 1
t: 287
xxx after update is x: -3.07556724548
y: -107.913894653
theta: 4.82706785202
speed: 14.1096420288
id: 1
t: 288
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:288


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.07556724548
y: -107.913894653
theta: 4.82706785202
speed: 14.1096420288
id: 1
t: 288
xxx after update is x: -3.32816052437
y: -108.080360413
theta: 4.57602500916
speed: 13.9093675613
id: 1
t: 289
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:289


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48639999999999795]
222 self.state_dicts[msg.id][msg.t] is (-75.31803894042969, 3.3079168796539307, 3.2269623279571533, 13.778925895690918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:290


xxx before update is x: -3.32816052437
y: -108.080360413
theta: 4.57602500916
speed: 13.9093675613
id: 1
t: 289
xxx after update is x: -3.05761408806
y: -108.777069092
theta: 4.61542844772
speed: 13.6875534058
id: 1
t: 290
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:291


xxx before update is x: -3.05761408806
y: -108.777069092
theta: 4.61542844772
speed: 13.6875534058
id: 1
t: 290
xxx after update is x: -2.68215608597
y: -109.439888
theta: 4.71141862869
speed: 14.1002893448
id: 1
t: 291
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:292


xxx before update is x: -2.68215608597
y: -109.439888
theta: 4.71141862869
speed: 14.1002893448
id: 1
t: 291
xxx after update is x: -2.85148453712
y: -110.596595764
theta: 4.79074239731
speey finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:290


xxx before update is x: -75.3180389404
y: 3.30791687965
theta: 3.22696232796
speed: 13.7789258957
id: 0
t: 289
xxx after update is x: -74.9693908691
y: 3.44038772583
theta: 3.17002773285
speed: 13.8815746307
id: 0
t: 290
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:291


xxx before update is x: -74.9693908691
y: 3.44038772583
theta: 3.17002773285
speed: 13.8815746307
id: 0
t: 290
xxx after update is x: -76.2519226074
y: 3.69823622704
theta: 3.21201252937
speed: 13.9206638336
id: 0
t: 291
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -76.2519226074
y: 3.69823622704
theta: 3.21201252937
speed: 13.9206638336
id: 0
t: 291
xxx after update is x: -77.2361297607
y: 3.15770339966
theta: 3.28293633461
speed: 13.7492704391
id: 0
t: 292
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:292


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.851484537124634, -110.59659576416016, 4.79074239730835, 14.2381591796875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:293


xxx before update is x: -77.2361297607
y: 3.15770339966
theta: 3.28293633461
speed: 13.7492704391
id: 0
t: 292
xxx after update is x: -77.6932678223
y: 3.42123198509
theta: 3.12216162682
speed: 13.7937755585
id: 0
t: 293
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:294


xxx before update is x: -77.6932678223
y: 3.42123198509
theta: 3.12216162682
speed: 13.7937755585
id: 0
t: 293
xxx after update is x: -78.0680007935
y: 3.32365250587
theta: 3.16243243217
speed: 14.0704088211
id: 0
t: 294
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:295


xxx before update is x: -78.0680007935
y: 3.32365250587
theta: 3.16243243217
speed: 14.0704088211
id: 0
t: 294
xxx after update is x: -78.9653701782
y: 2.98739409447
theta: 3.19439649582
speed: 14.1440382004
id: 0
t: 295
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.1111111111






self.maneuver_requested left
RELEASE,0,13.1111111111,(-78.96537017822266, 2.987394094467163, 3.194396495819092),14,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 13.1111111111
self.communication_details == 0
sending RELEASE,0,13.1111111111,(-78.96537017822266, 2.987394094467163, 3.194396495819092),14,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:296


xxx before update is x: -78.9653701782
y: 2.98d: 14.2381591797
id: 1
t: 292
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.85148453712
y: -110.596595764
theta: 4.79074239731
speed: 14.2381591797
id: 1
t: 292
xxx after update is x: -3.64344453812
y: -110.444633484
theta: 4.75112724304
speed: 14.1513309479
id: 1
t: 293
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:293


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.64344453812
y: -110.444633484
theta: 4.75112724304
speed: 14.1513309479
id: 1
t: 293
xxx after update is x: -3.55933690071
y: -111.761177063
theta: 4.62553310394
speed: 13.5764017105
id: 1
t: 294
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:294


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.0666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.55933690071
y: -111.761177063
theta: 4.62553310394
speed: 13.5764017105
id: 1
t: 294
xxx after update is x: -3.70915007591
y: -111.80506897
theta: 4.68788814545
speed: 13.906917572
id: 1
t: 295
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 13.1111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 13.1111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '13.1111111111', 'Position': ['(-78.96537017822266', ' 2.987394094467163', ' 3.194396495819092)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,13.1111111111,(-78.96537017822266, 2.987394094467163, 3.194396495819092),14,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




leave the update function 
in spin function, finish the n times spin:295


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5247999999999986]
222 self.state_dicts[msg.id][msg.t] is (-78.96537017822266, 2.987394094467163, 3.194396495819092, 14.144038200378418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.70915007591
y: -111.80506897
theta: 4.68788814545
speed: 13.906917572
id: 1
t: 295
xxx after update is x: -3.29851078987
y: -112.719299316
theta: 4.71667528152
speed: 14.0360078812
id: 1
t: 296
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:296




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29851078987
y: -112.719299316
theta: 4.71667528152
speed: 14.0360078812
id: 1
t: 296
xxx after update is x: -3.94194364548
y: -113.594749451
theta: 4.63872146606
speed: 13.5187034607
id: 1
t: 297
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:297




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.94194364548
y: -113.594749451
theta: 4.63872146606
speed: 13.5187034607
id: 1
t: 297
xxx after update 739409447
theta: 3.19439649582
speed: 14.1440382004
id: 0
t: 295
xxx after update is x: -79.1167602539
y: 3.58996844292
theta: 3.21027207375
speed: 13.6023635864
id: 0
t: 296
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:297


xxx before update is x: -79.1167602539
y: 3.58996844292
theta: 3.21027207375
speed: 13.6023635864
id: 0
t: 296
xxx after update is x: -80.2287216187
y: 3.46645665169
theta: 3.12122869492
speed: 14.0266342163
id: 0
t: 297
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:298


xxx before update is x: -80.2287216187
y: 3.46645665169
theta: 3.12122869492
speed: 14.0266342163
id: 0
t: 297
xxx after update is x: -80.7838287354
y: 3.62046027184
theta: 3.22365856171
speed: 13.8035964966
id: 0
t: 298
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:299


xxx before update is x: -80.7838287354
y: 3.62046027184
theta: 3.22365856171
speed: 13.8035964966
id: 0
t: 298
xxx after update is x: -81.2251052856
y: 3.29387044907
theta: 3.1941921711
speed: 14.0493526459
id: 0
t: 299
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:300


xxx before update is x: -81.2251052856
y: 3.29387044907
theta: 3.1941921711
speed: 14.0493526459
id: 0
t: 299
xxx after update is x: -81.9311676025
y: 3.44819498062
theta: 3.2441971302
speed: 13.6763124466
id: 0
t: 300
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.459484577178955, -115.66732025146484, 4.706608772277832, 13.741413116455078)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:301


xxx before update is x: -81.9311676025
y: 3.44819498062
theta: 3.2441971302
speed: 13.6763124466
id: 0
t: 300
xxx after update is x: -82.1891403198
y: 3.07470703125
theta: 3.03116941452
speed: 13.8523225784
id: 0
t: 301
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:302


xxx before update is x: -82.1891403198
y: 3.07470703125
theta: 3.03116941452
speed: 13.8523225784
id: 0
t: 301
xxx after update is x: -82.7110900879
y: 3.04888820648
theta: 3.23946928978
speed: 13.8808794022
id: 0
t: 302
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:303


xxx before update is x: -82.7110900879
y: 3.04888820648
theta: 3.23946928978
speed: 13.8808794022
id: 0
t: 302
xxx after update is x: -84.0050430298
y: 3.01461029053
theta: 2.97712230682
speed: 14.0224142075
id: 0
t: 303
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.4666666667






self.maneuver_requested left
RELEASE,0,13.4666666667,(-84.005043029is x: -3.25948429108
y: -114.093544006
theta: 4.62269926071
speed: 13.924580574
id: 1
t: 298
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:298




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:299


xxx before update is x: -3.25948429108
y: -114.093544006
theta: 4.62269926071
speed: 13.924580574
id: 1
t: 298
xxx after update is x: -3.15263938904
y: -114.648513794
theta: 4.68467617035
speed: 13.530919075
id: 1
t: 299
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:300


xxx before update is x: -3.15263938904
y: -114.648513794
theta: 4.68467617035
speed: 13.530919075
id: 1
t: 299
xxx after update is x: -3.45948457718
y: -115.667320251
theta: 4.70660877228
speed: 13.7414131165
id: 1
t: 300
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (-81.93116760253906, 3.448194980621338, 3.244197130203247, 13.676312446594238)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:301


xxx before update is x: -3.45948457718
y: -115.667320251
theta: 4.70660877228
speed: 13.7414131165
id: 1
t: 300
xxx after update is x: -3.09484910965
y: -115.805641174
theta: 4.75699472427
speed: 13.7875185013
id: 1
t: 301
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.09484910965
y: -115.805641174
theta: 4.75699472427
speed: 13.7875185013
id: 1
t: 301
xxx after update is x: -3.49164772034
y: -116.114715576
theta: 4.79759550095
speed: 13.8812580109
id: 1
t: 302
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:302


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.4222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:303


xxx before update is x: -3.49164772034
y: -116.114715576
theta: 4.79759550095
speed: 13.8812580109
id: 1
t: 302
xxx after update is x: -3.25650286674
y: -116.630722046
theta: 4.67554330826
speed: 13.6442317963
id: 1
t: 303
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 13.4666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 13.4666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '13.4666666667', 'Position': ['(-84.00504302978516', ' 3.0146102905273438', ' 2.9771223068237305)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,13.4666666667,(-84.00504302978516, 3.0146102905273438, 2.9771223068237305),14,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:304


xxx before update is x: -3.25650286674
y: -116.630722046
theta: 4.67554330826
speed: 13.6442317963
id: 1
t: 303
xxx after update is x: -3.03566384315
y: -117.431373596
theta: 4.89346456528
speed: 14.0592021942
id: 1
t: 304
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:305


xxx before update is x: -3.03566384315
y: -117.431373596
theta: 4.89346456528
speed: 14.0592021942
id: 1
t: 304
xxx after update is x: -2.79359912872
y: -118.231285095
theta: 4.86956310272
speed: 13.6787433624
id: 1
t: 305
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5295999999999987]
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.5555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 13.5555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 13.5555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '13.5555555556', 'Position': ['(-85.37615966796875', ' 3.7203574180603027', ' 3.1346025466918945)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,13.5555555556,(-85.37615966796875, 3.7203574180603027, 3.1346025466918945),13,1,2.93333333333,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:306


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.5555555556






self.maneuver_requested None
78516, 3.0146102905273438, 2.9771223068237305),14,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 13.4666666667
self.communication_details == 0
sending RELEASE,0,13.4666666667,(-84.00504302978516, 3.0146102905273438, 2.9771223068237305),14,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -84.0050430298
y: 3.01461029053
theta: 2.97712230682
speed: 14.0224142075
id: 0
t: 303
xxx after update is x: -84.2409896851
y: 3.0359210968
theta: 3.20961070061
speed: 13.9459295273
id: 0
t: 304
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:304




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:305


xxx before update is x: -84.2409896851
y: 3.0359210968
theta: 3.20961070061
speed: 13.9459295273
id: 0
t: 304
xxx after update is x: -85.376159668
y: 3.72035741806
theta: 3.13460254669
speed: 13.5358581543
id: 0
t: 305
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.7935991287231445, -118.23128509521484, 4.869563102722168, 13.678743362426758)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.5555555556






self.maneuver_requested left
RELEASE,0,13.5555555556,(-85.37615966796875, 3.7203574180603027, 3.1346025466918945),13,1,2.93333333333,0
maneuver_negotiatir.py start the update_agent_message
current clock is 13.5555555556
self.communication_details == 0
sending RELEASE,0,13.5555555556,(-85.37615966796875, 3.7203574180603027, 3.1346025466918945),13,1,2.93333333333,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:306


... logging to /home/lu/.ros/log/2d994634-ffac-11e8-9ca8-000c291801fc/roslaunch-ubuntu-82408.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:33225/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [82418][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 2d994634-ffac-11e8-9ca8-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [82431][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [82444][0m
[1mprocess[rviz-3]: started with pid [82449][0m
[1mprocess[car0-4]: started with pid [82450][0m
[1mprocess[car1-5]: started with pid [82451][0m
[1mprocess[cloud-6]: started with pid [82453][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
