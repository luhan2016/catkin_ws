sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.851788043976


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
 

222 self.state_dicts[msg.id][msg.t] is (3.815293073654175, -74.6091537475586, 1.4417725801467896, 13.75279712677002)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f2089c04a70>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f2089c25e18>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (3.798985004425049, -73.92169189453125, 1.4495254755020142, 13.914360046386719)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4084851736209155, 0.3141095442776548]
222 self.state_dicts[msg.id][msg.t] is (2.9701638221740723, -71.85218811035156, 1.3911375999450684, 14.065564155578613)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6


maneuver_negotiatir.py start the update agent state from ros funtion
masim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.973680019379


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
222 self.state_dicts[msg.id][msg.t] is (-3.3066983222961426, 64.45730590820312, 4.718835830688477, 13.850719451904297)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f878c606878>
leave the update function 
in spin function, finish the n times spin:1


self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f878c625710>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
222 self.state_dicts[msg.id][msg.t] is (-3.186448335647583, 63.87872314453125, 4.629837989807129, 13.785599708557129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.30109893650609587, 0.4355432113603043]
222 self.state_dicts[msg.id][msg.t] is (-3.448068141937256, 62.027252197265625, 4.900427341461182, 13.725506782531738)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update functneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:8




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3800595756898996, 0]
222 self.state_dicts[msg.id][msg.t] is (2.774569034576416, -69.25625610351562, 1.634070634841919, 13.953948974609375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.21059179306
y: 59.7126197815
theta: 4.50811672211
speed: 13.9492454529
id: 1
t: 9
current clock is .t / rate/slowdown
0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3563960192799539, 0]
222 self.state_dicts[msg.id][msg.t] is (2.8309645652770996, -67.54190826416016, 1.5718320608139038, 14.015542030334473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:13




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin funcion
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.77456903458
y: -69.2562561035
theta: 1.63407063484
speed: 13.9539489746
id: 0
t: 9
current clock is .t / rate/slowdown
0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3196009883206449, 0.37427032082779466]
222 self.state_dicts[msg.id][msg.t] is (-3.349388837814331, 58.6390266418457, 4.8982930183410645, 13.812276840209961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.33692587409232133, 0.326481447423159]
222 self.state_dicts[msg.id][msg.t] is (-3.278327226638794, 55.58534240722656, 4.712039947509766, 14.007957458496094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.75969338417
y: -64.2259597778
theta: 1.64550709724
speed: 13.620800972
id: 0
t: 17
current clock is .t / rate/slowdown
0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3397756156173712, 0.3245300959420642]
222 self.state_dicts[msg.id][msg.t] is (-3.100280284881592, 52.15851593017578, 4.63510274887085, 13.368046760559082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:23


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.75687932968
y: -59.8483657837
theta: 1.71689724922
speed: 13.8988142014
id: 0
t: 24
current clock is .t / rate/slowdown
1.06666666667
maneuver_negotiatir.py this is get potion, finish the n times spin:15

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.27832722664
y: 55.5853424072
theta: 4.71203994751
speed: 14.0079574585
id: 1
t: 15
current clock is .t / rate/slowdown
0.666666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2750270615839754, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7859573364257812, -63.421539306640625, 1.4864403009414673, 14.042927742004395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.23032426834
y: 50.0507659912
theta: 4.77101945877
speed: 13.8695316315
id: 1
t: 24
current clock is .t / rate/slowdown
1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:25


aaaaaa
aaaaaabbbbb
maneuver_negotiatir.py in the try maneuver function update -. strat
risk is [0.3919279154074659, 0]
222 self.state_dicts[msg.id][msg.t] is (3.096614122390747, -60.23036575317383, 1.452679991722107, 13.533096313476562)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.06558966637
y: 47.9343338013
theta: 4.73922491074
speed: 13.7523412704
id: 1
t: 28
current clock is .t / rate/slowdown
1.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30


maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32


maneuver_negotiatir.py start the update agent state from sotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.39771175385
y: -57.4059944153
theta: 1.78930842876
speed: 14.101937294
id: 0
t: 28
current clock is .t / rate/slowdown
1.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.34778399152742845, 0.3765604947777666]
222 self.state_dicts[msg.id][msg.t] is (-3.245340347290039, 41.70322799682617, 4.773947715759277, 13.564814567565918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
lros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.41246123879489177, 0]
222 self.state_dicts[msg.id][msg.t] is (3.454141616821289, -51.211830139160156, 1.5282803773880005, 13.775031089782715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9730581619069834, 0]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.4519078731536865, -50.22477722167969, 1.6264982223510742, 14.125205039978027)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6847657995231777, 1.0000000000000007]
222 self.state_dicts[msg.id][msg.t] is (2.736865758895874, -48.299034118652344, 1.6972095966339111, 13.717766761779785)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.14200210571
y: 38.1406288147
theta: 4.6537771225
speed: 13.7565526962
id: 1
t: 38
current clock is .t / rate/slowdown
1.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.05419493727321846, 0.9999999999999998]
222 self.state_dicts[msg.id][msg.t] is (3.564614772796631, -48.288394927978516, 1.505745530128479, 14.361333847045898)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update functeave the update function 
in spin function, finish the n times spin:34


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36


aaaaaa
risk is [0.5353301169362933, 0.0042203494052516655]
222 self.state_dicts[msg.id][msg.t] is (-3.4240317344665527, 38.904296875, 4.8009419441223145, 13.805234909057617)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.15592846283846623, 0.02323344911055358]
222 self.state_dicts[msg.id][msg.t] is (-3.4992423057556152, 38.59623336791992, 4.854945659637451, 13.856511116027832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.5646147728
y: -48.288394928
theta: 1.50574553013
speed: 14.361333847
id: 0
t: 38
current clock is .t / rate/slowdown
1.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.5574112167842598, 0.6449336707537229]
222 self.state_dicts[msg.id][msg.t] is (-3.054605722427368, 37.06913757324219, 4.601095676422119, 13.930405616760254)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update functionion maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:39




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.07803309232430787, 0.9999999999999993]
222 self.state_dicts[msg.id][msg.t] is (3.11328387260437, -46.46308135986328, 1.557673454284668, 13.998503684997559)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:41


aaaaaa
aaaaaabbbbb
risk is [0.4604025843097327, 0.9999999999999998]
222 self.state_dicts[msg.id][msg.t] is (3.3195979595184326, -46.23540115356445, 1.5680278539657593, 14.07260513305664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2822451442773512, 1.000000000000001]
222 self.state_dicts[msg.id][msg.t] is (3.3344407081604004, -45.3342399597168, 1.5405423641204834, 13.936256408691406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.27600385033087305, 1.0000000000000004]
222 self.state_dicts[msg.id][msg.t] is (2.9904966354370117, -43.978275299072266, 1.7185425758361816, 13.962841987609863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.70055127144
y: 32.8567466736
theta: 4.73676252365
speed: 14.013080 maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:42


aaaaaa
risk is [0.49096623979796433, 0.24364816398480818]
222 self.state_dicts[msg.id][msg.t] is (-2.9017815589904785, 35.070899963378906, 4.6662421226501465, 13.587125778198242)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6281178160499292, 0.10279137063752769]
222 self.state_dicts[msg.id][msg.t] is (-2.7985422611236572, 34.123172760009766, 4.7616753578186035, 13.958617210388184)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.99049663544
y: -43.9782752991
theta: 1.71854257584
speed: 13.9628419876
id: 0
t: 45
current clock is .t / rate/slowdown
2.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.46293050348596476, 0.3281495880008052]
222 self.state_dicts[msg.id][msg.t] is (-3.7005512714385986, 32.856746673583984, 4.736762523651123, 14.013080596923828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:48


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.29995855319156534, 0.2134641799233989]
222 self.state_dicts[msg.id][msg.t] is (-3.3270955085754395, 31.119749069213867, 4.647337913515969
id: 1
t: 46
current clock is .t / rate/slowdown
2.04444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48


aaaaaa
aaaaaabbbbb
risk is [0.2957456385107867, 0.9999999999999994]
222 self.state_dicts[msg.id][msg.t] is (2.8150110244750977, -41.920677185058594, 1.715988039970398, 13.611984252929688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.36045551185754926, 1.000000000000001]
222 self.state_dicts[msg.id][msg.t] is (3.229339838027954, -40.627105712890625, 1.5151214599609375, 13.702049255371094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4175731785523939, 0.9999999999999996]
222 self.state_dicts[msg.id][msg.t] is (3.2876598834991455, -38.904239654541016, 1.7317496538162231, 13.834466934204102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:53


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.46041464806
y: 28.6516647339
theta: 4.77982378006
speed: 13.8695631027
id: 1
t: 53
current clock is .t / rate/slowdown
2.35555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negot3184, 13.889248847961426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3965750373710425, 0.25349083103489456]
222 self.state_dicts[msg.id][msg.t] is (-3.34179425239563, 28.971662521362305, 4.721396446228027, 14.092965126037598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.23060250282
y: -38.7735977173
theta: 1.52271997929
speed: 13.8786497116
id: 0
t: 53
current clock is .t / rate/slowdown
2.35555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:54


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.37024475777424837, 0.44822742569397356]
222 self.state_dicts[msg.id][msg.t] is (-3.1464316844940186, 26.774633407592773, 4.642101764678955, 14.0725736618042)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:57




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times siatir.py get the velocity

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.33237724549864656, 0.9999999999999989]
222 self.state_dicts[msg.id][msg.t] is (2.874767780303955, -37.416297912597656, 1.5922423601150513, 14.059616088867188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2805796447211055, 0.9999999999999993]
222 self.state_dicts[msg.id][msg.t] is (3.350423574447632, -35.7401237487793, 1.8187724351882935, 13.95263385772705)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3273765128676437, 1.0000000000000007]
222 self.state_dicts[msg.id][msg.t] is (3.5088307857513428, -34.412254333496094, 1.4817265272140503, 13.534165382385254)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.04399752617
y: 24.1299304962
theta: 4.96960067749
speed: 13.478761673
id: 1
t: 61
current clock is .t / ratpin:58

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [0.3450677699137311, 0.33760918024598924]
222 self.state_dicts[msg.id][msg.t] is (-2.9116952419281006, 25.925352096557617, 4.655119895935059, 13.605694770812988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50883078575
y: -34.4122543335
theta: 1.48172652721
speed: 13.5341653824
id: 0
t: 61
current clock is .t / rate/slowdown
2.71111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:62


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:63


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.40939376324909393, 0.3078906134257701]
222 self.state_dicts[msg.id][msg.t] is (-3.207693099975586, 22.100173950195312, 4.688127517700195, 14.089503288269043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:64


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:66


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:67


mae/slowdown
2.71111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:62




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3385433229614634, 1.000000000000001]
222 self.state_dicts[msg.id][msg.t] is (2.7824792861938477, -32.935142517089844, 1.4483850002288818, 14.01478385925293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.39775559003795125, 1.0000000000000018]
222 self.state_dicts[msg.id][msg.t] is (3.237823724746704, -30.976560592651367, 1.5712401866912842, 13.918269157409668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3337380421484163, 1.0000000000000004]
222 self.state_dicts[msg.id][msg.t] is (3.531768798828125, -30.01009750366211, 1.2900673151016235, 13.7152738571167)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has neuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3088362734343629, 0.13841524332169128]
222 self.state_dicts[msg.id][msg.t] is (-3.479034900665283, 20.307605743408203, 4.718252182006836, 13.398411750793457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:68


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.53176879883
y: -30.0100975037
theta: 1.2900673151
speed: 13.7152738571
id: 0
t: 68
current clock is .t / rate/slowdown
3.02222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:69


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:70


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.42961532713391326, 0.0666393521196293]
222 self.state_dicts[msg.id][msg.t] is (-3.1708741188049316, 17.723909378051758, 4.814510345458984, 13.715287208557129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:71


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:72


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:73


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4061400147505074, 0.05836055982499078]
222 self.state_dicts[msg.id][msg.t] is (-3.4206998348236084, 16.287883758544922, 4.904840469360352, 13.57052993774414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:74


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:75


maneuver_negotiatir.py start the update agent sx, y, theta, speed, id and t
x: -3.31307768822
y: 18.6027889252
theta: 4.79282999039
speed: 13.9590501785
id: 1
t: 69
current clock is .t / rate/slowdown
3.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.34395426009962177, 1.0000000000000002]
222 self.state_dicts[msg.id][msg.t] is (3.7638065814971924, -27.444929122924805, 1.6200560331344604, 13.764883995056152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.37004661844002273, 0.9999999999999998]
222 self.state_dicts[msg.id][msg.t] is (3.1183407306671143, -26.58002281188965, 1.7969049215316772, 13.669836044311523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.42875740945877944, 1.0]
222 self.state_dicts[msg.id][msg.t] is (3.5505690574645996, -24.411842346191406, 1.6374577283859253, 13.186179161071777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, tate from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:76


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.33949422836
y: -24.2617168427
theta: 1.45790290833
speed: 13.4076404572
id: 0
t: 76
current clock is .t / rate/slowdown
3.37777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:77


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4786083177816398, 0.0187925870086251]
222 self.state_dicts[msg.id][msg.t] is (-3.562584638595581, 13.510476112365723, 4.735013961791992, 13.477231979370117)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:78


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:79




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:80


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:81


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4149954511231107, 0.031168580476424877]
222 self.state_dicts[msg.id][msg.t] is (-3.36221981048584, 11.638596534729004, 4.66185998916626, 14.167819023132324)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:82


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:83


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.2676741545727454, 0.029560014164633643]
222 self.state_dicts[msg.id][msg.t] is (-3.4900496006011963, 9.66099739074707, 4.713408470153809, 13.887351036071777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
y, theta, speed, id and tmaneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

x: -3.5625846386
y: 13.5104761124
theta: 4.73501396179
speed: 13.4772319794
id: 1
t: 77
current clock is .t / rate/slowdown
3.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.44898713749867436, 0.9999999999999998]
222 self.state_dicts[msg.id][msg.t] is (3.0718634128570557, -22.760555267333984, 1.3921945095062256, 12.027921676635742)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.39848049812286895, 1.0000000000000002]
222 self.state_dicts[msg.id][msg.t] is (2.8502066135406494, -21.993295669555664, 1.4176572561264038, 12.120555877685547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2574385430815834, 0.9999999999999999]
222 self.state_dicts[msg.id][msg.t] is (3.7789149284362793, -21.654146194458008, 1.6620466709136963, 11.413341522216797)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:83




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -4.07295513153
y: 9.32380962372
theta: 4.79351043701
speed: 14.0332918167
id: 1
t: 

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44983363152
y: -20.0651111603
theta: 1.61186301708
speed: 11.5733613968
id: 0
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$

-------------------------------------------------------------------------------------------------------------------------
maneuver_negotiatir.py in the trymaneuver function - start
1.self.status is 1
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44983363152
y: -20.0651111603
theta: 1.61186301708
speed: 11.5733613968
id: 0
t: 84
current clock is .t / rate/slowdown
3.73333333333
!!!!after check statue the self.tag is [3.7333333333333334, 0]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)



maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44983363152
y: -20.0651111603
theta: 1.61186301708
speed: 11.5733613968
id: 0
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.688888888888889, True, ['1']]
3.68888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish


self.agent_state[0] is 3.73333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.68888888889
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']


message is :GET,0,3.73333333333,(3.449833631515503, -20.06511116027832, 1.6118630170822144),11,1,3.73333333333,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0


!!!!change state to get









GET,0,3.73333333333,(3.449833631515503, -20.06511116027832, 1.6118630170822144),11,1,3.73333333333,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44983363152
y: -20.0651111603
theta: 1.61186301708
speed: 11.5733613968
id: 0
t: 84
current clock is .t / rate/slowdown
3.73333333333
self.communication_details == 0


sending GET,0,3.73333333333,(3.449833631515503, -20.06511116027832, 1.6118630170822144),11,1,3.73333333333,0,left to car 1 from car 0




maneuver_negotiatir.py finish the update_agent_message
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
finish try maneuver

maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.753013134
y: -19.3586292267
theta: 1.53181350231
speed: 11.1359882355
id: 0
t: 85
current clock is .t / rate/slowdown84maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -4.07295513153
y: 9.32380962372
theta: 4.79351043701
speed: 14.0332918167
id: 1
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

current clock is .t / rate/slowdown
3.73333333333











maneuver_negotiatir.py message_processing, it's a long code, start...





maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -4.07295513153
y: 9.32380962372
theta: 4.79351043701
speed: 14.0332918167
id: 1
t: 84
current clock is .t / rate/slowdown
3.73333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.73333333333', 'Sender': '0', 'Time': '3.73333333333', 'IntendedCourse': 'left', 'Position': ['3.449833631515503', ' -20.06511116027832', ' 1.6118630170822144'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'} 


car 1 received GET,0,3.73333333333,(3.449833631515503, -20.06511116027832, 1.6118630170822144),11,1,3.73333333333,0,left from  car0
status: 1




maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.165925925926
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.85225450299
sender last entering time is:  1.85225450299
sender last leaving time is:  4.254379437
my entering time is:  0.297240218833
my leaving time is:  1.50855451174
i have left the intersection:  False
not conflicted because sender enters after i leave
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted











maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT










self.grantID is 0





GRANT,1,3.73333333333,(-4.072955131530762, 9.323809623718262, 4.793510437011719),14,1,0,0

aaaaaa
aaaaaabbbbb

risk is [0.44771649622626797, 1.0]
222 self.state_dicts[msg.id][msg.t] is (3.449833631515503, -20.06511116027832, 1.6118630170822144, 11.57336139678955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



added car with id 0 to grantlist. current grantlist:  {0: [8.555555555555555, 'left']}



maneuver_negotiatir.py start the update_agent_message



maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.06866621971
y: 8.49242305756
theta: 4.67406606674
speed: 13.4891996384
id: 1
t: 85
current clock is .t / rate/slowdown
3.77777777778


self.communication_details == 0



sending GRANT,1,3.73333333333,(-4.072955131530762, 9.323809623718262, 4.793510437011719),14,1,0,0 to car 0 from car 1



maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
















maneuver_negotiatir.py in the message processing function, it's a long code, finish


















going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros f
3.77777777778





maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.753013134
y: -19.3586292267
theta: 1.53181350231
speed: 11.1359882355
id: 0
t: 85
current clock is .t / rate/slowdown
3.77777777778


maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1


maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '3.73333333333', 'Position': ['(-4.072955131530762', ' 9.323809623718262', ' 4.793510437011719)'], 'Type': 'GRANT'}


car 0 received GRANT,1,3.73333333333,(-4.072955131530762, 9.323809623718262, 4.793510437011719),14,1,0,0 from  car1
status: 2



maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.7333333333333334, True, ['1']]
3.73333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish






maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.7333333333333334, True, '1']






maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])







maneuver_negotiatir.py message_processing,Received a grant or deny and status == get

maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1



last


stopped retry timer



maneuver_negotiatir.py message_processing, self.last()




!!WW change status to execute







maneuver_negotiatir.py in the domaneuver function - start



added car with id 0 to grantlist. current grantlist:  {0: [8.6, 'left']}
Doing maneuver



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87


aaaaaa
risk is [0.537256140885756, 0.9985769711158492]
222 self.state_dicts[msg.id][msg.t] is (-2.91843318939209, 7.161471366882324, 4.518622398376465, 13.508223533630371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.25267156720867406, 0.9996743871061828]
222 self.state_dicts[msg.id][msg.t] is (-3.140071392059326, 6.340703964233398, 4.709383964538574, 14.029930114746094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


maneuver_negotiatir.py start the update agent state from ros funtion
muntion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:86




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
aaaaaaxxxxxx
risk is [0.32327463674661805, 0.0]
222 self.state_dicts[msg.id][msg.t] is (4.099203586578369, -18.624826431274414, 1.5671684741973877, 10.630378723144531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89


aaaaaa
aaaaaabbbbb
risk is [0.5746162431937513, 0.0]
222 self.state_dicts[msg.id][msg.t] is (3.0414435863494873, -17.45802116394043, 1.5158202648162842, 10.338357925415039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3532101889529275, 0.0]
222 self.state_dicts[msg.id][msg.t] is (3.7891910076141357, -16.881181716918945, 1.7385997772216797, 9.316720962524414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.24379014969
y: 4.103723526
theta: 4.65262317657
speed: 14.0256204605
id: 1
t: 92
current clock is .t / rate/slowdown
4.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
simaneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.78919100761
y: -16.8811817169
theta: 1.73859977722
speed: 9.31672096252
id: 0
t: 91
current clock is .t / rate/slowdown
4.04444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.19657559895233676, 0.9841263669153303]
222 self.state_dicts[msg.id][msg.t] is (-3.2437901496887207, 4.103723526000977, 4.652623176574707, 14.025620460510254)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.18418376154685867, 0.9983509204614557]
222 self.state_dicts[msg.id][msg.t] is (-3.191007375717163, 2.3040499687194824, 4.782050609588623, 14.06922721862793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:97


aaaaaa
risk is [0.4990673998754553, 0.9999999999999993]
222 self.state_dicts[msg.id][msg.t] is (-3.639897346496582, 0.9037521481513977, 4.732958793640137, 13.990926742553711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the updat.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6543431534190405, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (3.7484142780303955, -15.682718276977539, 1.4335613250732422, 9.102025985717773)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.49200168114317244, 0.4607999999999981]
222 self.state_dicts[msg.id][msg.t] is (3.3023626804351807, -14.459370613098145, 1.5186059474945068, 8.21316909790039)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.5765303296052195, 0.46879999999999805]
222 self.state_dicts[msg.id][msg.t] is (3.090731382369995, -13.436297416687012, 1.5505248308181763, 7.748278617858887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.14644193649
y: -0.777053296566
theta: 4.62779951096
speed: 14.0498332977
id: 1
t: 100
current clock is .t / rate/slowdown
4.44444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id =e agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:98




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.86413359642
y: -13.8056774139
theta: 1.51722431183
speed: 7.81479549408
id: 0
t: 99
current clock is .t / rate/slowdown
4.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.4231153825687816, 0.9834603916098001]
222 self.state_dicts[msg.id][msg.t] is (-3.14644193649292, -0.7770532965660095, 4.6277995109558105, 14.049833297729492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.27543644569288434, 0.9855102839834619]
222 self.state_dicts[msg.id][msg.t] is (-3.4663264751434326, -3.179443120956421, 4.549724102020264, 14.111286163330078)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:104




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3420063249859955, 0.9997554008391065]
222 self.state_dicts[msg.id][msg.t] is (-3.2886345386505127, -4.160918235778809, 4.791158676147461, 13.95950984954= 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:101




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4165510760831984, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (3.3731980323791504, -12.357341766357422, 1.4906939268112183, 7.4276556968688965)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.37331590300096457, 0.49919999999999787]
222 self.state_dicts[msg.id][msg.t] is (3.2244455814361572, -11.477615356445312, 1.5187315940856934, 6.27520227432251)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.21268463135
y: -5.30049419403
theta: 4.73415708542
speed: 13.9823923111
id: 1
t: 108
current clock is .t / rate/slowdown
4.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin834)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.14150357246
y: -11.6800432205
theta: 1.65653264523
speed: 6.0462975502
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110


aaaaaa
risk is [0.6765304009361935, 0.9896244628395231]
222 self.state_dicts[msg.id][msg.t] is (-3.293152332305908, -6.5571513175964355, 4.803436756134033, 13.770190238952637)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.32630800815397215, 0.9987757119751459]
222 self.state_dicts[msg.id][msg.t] is (-2.6656720638275146, -9.00610637664795, 4.86007022857666, 13.810978889465332)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.sp:109

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6449933286221731, 0.46559999999999807]
222 self.state_dicts[msg.id][msg.t] is (3.7027037143707275, -10.792091369628906, 1.4833158254623413, 5.492831230163574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6895403032788252, 0.4927999999999979]
222 self.state_dicts[msg.id][msg.t] is (2.78682804107666, -10.195263862609863, 1.513107419013977, 5.529317855834961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.22858200602575682, 0.48799999999999794]
222 self.state_dicts[msg.id][msg.t] is (2.95621919631958, -9.594477653503418, 1.46281898021698, 5.413258075714111)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.73900961876
y: -9.66491889954
theta: 4.67987442017
speed: 13.9416427612
id: 1
t: 115
current clock is .t / rate/slowdown
5.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.pyeed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.95621919632
y: -9.5944776535
theta: 1.46281898022
speed: 5.41325807571
id: 0
t: 115
current clock is .t / rate/slowdown
5.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.005105710930296844, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.550652027130127, -10.296342849731445, 4.87726354598999, 13.904566764831543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0001408600731720162, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2302510738372803, -12.116146087646484, 4.501559257507324, 13.9268217086792)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.550820853475993e-10, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4751296043395996, -13.8125638961792, 4.736595153808594, 13.458290100097656)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_neg finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.016185322543447924, 0.49919999999999787]
222 self.state_dicts[msg.id][msg.t] is (3.2621569633483887, -8.617451667785645, 1.5244441032409668, 5.756154537200928)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:118




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [7.871861913793478e-05, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (2.736227512359619, -8.007645606994629, 1.5586947202682495, 5.181735515594482)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.47512960434
y: -13.8125638962
theta: 4.73659515381
speed: 13.4582901001
id: 1
t: 122
current clock is .t / rate/slowdown
5.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin fuotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.88166642189
y: -7.35802602768
theta: 1.56786525249
speed: 5.86732625961
id: 0
t: 122
current clock is .t / rate/slowdown
5.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
maneuver_negotiatir.py in the try maneuver function update -. strat
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:123




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:124




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:125




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:126




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [2.5217001198365457e-42, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.327549457550049, -17.977779388427734, 4.823899269104004, 14.046795845031738)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.3954506245543645e-54, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.713007926940918, -19.66806411743164, 4.821585178375244, 13.72656536102295)
if we have all measurements fnction, finish the n times spin:124


maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
aaaaaabbbbb
risk is [0.005649630871368602, 0.5007999999999979]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (3.4182162284851074, -6.683454990386963, 1.6727523803710938, 6.447384357452393)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [2.071997376622673e-43, 0.48479999999999795]
222 self.state_dicts[msg.id][msg.t] is (3.3672032356262207, -5.9872236251831055, 1.5586156845092773, 7.042052268981934)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [3.9701448622331674e-274, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (3.124246597290039, -5.065835475921631, 1.7151633501052856, 7.198991298675537)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:131




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [1.0716751419402362e-295, 0.5071999999999981]
222 self.state_dicts[msg.id][msg.t] is (3.3234095573425293, -4.618813514709473, 1.7236272096633911, 7.397221088409or a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.32340955734
y: -4.61881351471
theta: 1.72362720966
speed: 7.39722108841
id: 0
t: 132
current clock is .t / rate/slowdown
5.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [5e-324, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2636232376098633, -20.70874786376953, 4.625474452972412, 13.826375007629395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2516589164733887, -22.965299606323242, 4.655419826507568, 13.964831352233887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:137




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:139


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9610462188720703, -24.81584358215332, 4.627378940582275, 13.7435026168823424)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.79518485069
y: -20.1907272339
theta: 4.9065823555
speed: 13.5763130188
id: 1
t: 132
current clock is .t / rate/slowdown
5.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [1.0623297e-316, 0.5199999999999985]
222 self.state_dicts[msg.id][msg.t] is (2.597781181335449, -3.477180242538452, 1.9214781522750854, 7.882058143615723)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5007999999999979]
222 self.state_dicts[msg.id][msg.t] is (2.167598247528076, -2.9374215602874756, 2.0173451900482178, 8.875761032104492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48479999999999795]
222 self.state_dicts[msg.id][msg.t] is (1.8155525922775269, -2.4120771884918213, 2.06512713432312, 9.518502235412598)
if we have all measurements for a certain time-stamp perfor24)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:140


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1.68653678894
y: -1.80130040646
theta: 2.30078697205
speed: 9.08374786377
id: 0
t: 140
current clock is .t / rate/slowdown
6.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2288658618927, -25.44251251220703, 4.690074920654297, 13.838334083557129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.047457695007324, -27.712757110595703, 4.73816442489624, 13.730439186096191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.104694128036499, -28.828969955444336, 4.85499382019043, 13.789454460144043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finishm risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.12356829643
y: -25.2982959747
theta: 4.82457017899
speed: 13.8276576996
id: 1
t: 140
current clock is .t / rate/slowdown
6.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5007999999999979]
222 self.state_dicts[msg.id][msg.t] is (1.3581284284591675, -1.676613688468933, 2.1992757320404053, 9.61922836303711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5343999999999989]
222 self.state_dicts[msg.id][msg.t] is (1.526133418083191, -1.3622535467147827, 2.3118839263916016, 10.309080123901367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4927999999999979]
222 self.state_dicts[msg.id][msg.t] is (1.3212116956710815, -0.2542777359485626, 2.3912696838378906, 10.5634765625)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5167999999999984]
222 self.state_dicts[msg.id][msg.t] is (0.3264619708061218, 0.5559165477752686, 2.648247003555298, 10.882198333740234)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.14021849632
y: -29.5995101929
theta: 4.59363269806
speed: 13.9868078232
id: 1
t: 147
current clock is .t / rate/slowdown
6.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48479999999999795]
222 self.state_dicts[msg.id][msg.t] is (-0.5365882515907288, 1.2782373428344727, 2.757443428039551, 11.201288223266602)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4959999999999979]
222 self.state_dicts[msg.id][msg.t] is (-2.0697948932647705, 2.100393533706665, 2.699580430984497, 11.85109806060791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
ri the n times spin:147

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:148


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -0.293479681015
y: 1.05594134331
theta: 2.51545286179
speed: 11.2739696503
id: 0
t: 148
current clock is .t / rate/slowdown
6.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.424696922302246, -30.906932830810547, 4.678178310394287, 13.90781307220459)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:151




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:152


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5234766006469727, -32.667598724365234, 4.686264514923096, 13.457573890686035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.497023582458496, -33.775569915771484, 4.640931606292725, 13.884140968322754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update funcsk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-2.9596173763275146, 1.6575168371200562, 2.8283677101135254, 12.325211524963379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
222 self.state_dicts[msg.id][msg.t] is (-3.829484224319458, 3.037407636642456, 2.5804712772369385, 12.595306396484375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.51923584938
y: -34.2087249756
theta: 4.80822134018
speed: 13.9371862411
id: 1
t: 155
current clock is .t / rate/slowdown
6.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5247999999999986]
222 self.state_dicts[msg.id][msg.t] is (-4.152383327484131, 2.360003709793091, 2.894498348236084, 13.294615745544434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (-5.560160160064697, 2.9003779888153076, 2.9764561653137207, 13.974896430969238)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
ltion maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:155




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.93083643913
y: 3.16670393944
theta: 2.72243118286
speed: 13.0293483734
id: 0
t: 156
current clock is .t / rate/slowdown
6.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.899064540863037, -35.743080139160156, 4.556490898132324, 14.227892875671387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.6488771438598633, -36.95038986206055, 4.69887113571167, 13.96740436553955)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function




















maneuver_negotiatir.py message_processing,!!dwd change status to NORMAL





















maneuver_negotiatir.py in the message processing function, it's a long code, finish























going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0397684574127197, -38.81639862060547, 4.871676445007324, 14.04453182220459)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spineave the update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:160


removed car with id 0 from grantlist. currentgrantlist: {}
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-6.9572038650512695, 3.201551675796509, 3.0606613159179688, 14.068560600280762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5215999999999985]
222 self.state_dicts[msg.id][msg.t] is (-7.18190336227417, 3.3529815673828125, 3.0913257598876953, 13.615330696105957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.64849710464
y: -39.4968070984
theta: 4.67387056351
speed: 13.7249536514
id: 1
t: 163
current clock is .t / rate/slowdown
7.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5167999999999984]
222 self.state_dicts[msg.id][msg.t] is (-9.894586563110352, 3.318772315979004, 3.186643600463867, 13.556246757507324)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < s:162

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -8.7572555542
y: 3.46210384369
theta: 3.27582359314
speed: 14.0773601532
id: 0
t: 163
current clock is .t / rate/slowdown
7.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:164


maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3954529762268066, -39.45838165283203, 4.7114434242248535, 13.364899635314941)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.998889446258545, -41.04671096801758, 4.6969380378723145, 14.204996109008789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1038663387298584, -42.389251708984375, 4.706265449523926, 13.70390510559082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin funcelf.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5071999999999981]
222 self.state_dicts[msg.id][msg.t] is (-11.045467376708984, 4.151402950286865, 3.2004148960113525, 13.510627746582031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-12.835836410522461, 3.9796459674835205, 3.1082980632781982, 13.545013427734375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5151999999999983]
222 self.state_dicts[msg.id][msg.t] is (-13.25542163848877, 2.988490104675293, 3.1376500129699707, 13.722139358520508)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.20715522766
y: -44.092464447
theta: 4.85726070404
speed: 13.7201795578
id: 1
t: 171
current clock is .t / rate/slowdown
7.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174


maneuver_negotiatir.ption, finish the n times spin:170

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.594226837158203, -43.626243591308594, 4.620734691619873, 13.828800201416016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -13.2554216385
y: 2.98849010468
theta: 3.13765001297
speed: 13.7221393585
id: 0
t: 171
current clock is .t / rate/slowdown
7.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:174


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.7192068099975586, -46.17251968383789, 4.671771049499512, 13.984196662902832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.814343214035034, -48.37298583984375, 4.636402130126953, 13.949655532836914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update funcy start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-15.527267456054688, 3.1907880306243896, 3.0687947273254395, 13.832441329956055)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175


maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
222 self.state_dicts[msg.id][msg.t] is (-16.955251693725586, 3.959251880645752, 3.121424913406372, 13.922869682312012)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (-18.488374710083008, 3.6972482204437256, 3.210176706314087, 13.934910774230957)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.97717213631
y: -48.9254760742
theta: 4.55268478394
speed: 13.5764770508
id: 1
t: 179
current clock is .t / rate/slowdown
7.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.tion maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:178




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -18.4883747101
y: 3.69724822044
theta: 3.21017670631
speed: 13.9349107742
id: 0
t: 179
current clock is .t / rate/slowdown
7.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.015521764755249, -49.974388122558594, 4.6103949546813965, 14.25430965423584)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:181


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:182


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.881826639175415, -50.80233383178711, 4.6082563400268555, 13.630863189697266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0095114707946777, -53.3907356262207, 4.546870231628418, 13.710807800292969)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.manid == 1):
leave the update function 
in spin function, finish the n times spin:181


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (-19.07636260986328, 3.262336254119873, 3.2210707664489746, 13.703088760375977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (-20.597665786743164, 2.731257915496826, 2.976954936981201, 13.934065818786621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:184


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5247999999999986]
222 self.state_dicts[msg.id][msg.t] is (-21.36661148071289, 3.353273630142212, 3.2429895401000977, 13.838930130004883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:185


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.32911396027
y: -53.8082351685
theta: 4.58528995514
speed: 14.0713605881
id: 1
t: 186
current clock is .t / rate/slowdown
8.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-23.389076232910156, 2.9188015460968018, 3.1416430473327637, 13.8282470703125)
if we have all measurements for a certain time-stamp perform risk estimation
sel_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:186




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -23.3890762329
y: 2.9188015461
theta: 3.14164304733
speed: 13.8282470703
id: 0
t: 187
current clock is .t / rate/slowdown
8.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.561246395111084, -54.706886291503906, 4.99885368347168, 14.026071548461914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:190


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4211232662200928, -55.633506774902344, 4.62039041519165, 14.090771675109863)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.7307021617889404, -58.023075103759766, 4.605620384216309, 13.730669975280762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < sef.fm:Falsemaneuver_negotiatir.py in the try maneuver function update -. strat

 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.479999999999998]
222 self.state_dicts[msg.id][msg.t] is (-24.692367553710938, 3.3827106952667236, 3.162379503250122, 13.644103050231934)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:191


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.46879999999999805]
222 self.state_dicts[msg.id][msg.t] is (-25.90528678894043, 3.1167476177215576, 3.13454008102417, 13.983386993408203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:192




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5151999999999983]
222 self.state_dicts[msg.id][msg.t] is (-27.27775001525879, 3.566092014312744, 3.033684730529785, 14.342963218688965)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.35653686523
y: -58.5554122925
theta: 4.57708263397
speed: 13.7682180405
id: 1
t: 194
current clock is .t / rate/slowdown
8.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the updalf.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -27.2777500153
y: 3.56609201431
theta: 3.03368473053
speed: 14.3429632187
id: 0
t: 194
current clock is .t / rate/slowdown
8.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:197


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0519866943359375, -60.89690017700195, 4.677803993225098, 13.614143371582031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:199


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.179131031036377, -61.578067779541016, 4.517259120941162, 14.173077583312988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:200




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
mante function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48639999999999795]
222 self.state_dicts[msg.id][msg.t] is (-28.508573532104492, 3.6029157638549805, 3.144251585006714, 13.901435852050781)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.479999999999998]
222 self.state_dicts[msg.id][msg.t] is (-31.177248001098633, 3.532501220703125, 3.2337210178375244, 14.116000175476074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:200




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.46719999999999806]
222 self.state_dicts[msg.id][msg.t] is (-31.8996524810791, 3.638352155685425, 3.1016428470611572, 13.59919261932373)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.96364569664
y: -63.6866149902
theta: 4.61657905579
speed: 13.958609581
id: 1
t: 2euver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -32.3247413635
y: 2.94253587723
theta: 3.14463973045
speed: 14.0924263
id: 0
t: 202
current clock is .t / rate/slowdown
8.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3403029441833496, -64.34148406982422, 4.68853235244751, 13.759147644042969)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:204


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2127137184143066, -65.50020599365234, 4.733412265777588, 13.552035331726074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1610100269317627, -67.63745880126953, 4.803595066070557, 13.83212661743164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent st02
current clock is .t / rate/slowdown
8.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.475199999999998]
222 self.state_dicts[msg.id][msg.t] is (-33.34783935546875, 2.8078794479370117, 3.137662649154663, 13.7193021774292)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4639999999999981]
222 self.state_dicts[msg.id][msg.t] is (-34.53776550292969, 3.611618757247925, 3.1602976322174072, 13.886666297912598)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-35.646392822265625, 3.851837158203125, 3.0623865127563477, 13.884254455566406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:208


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:209


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.476799999999998]
222 self.state_dicts[msg.id][msg.t] is (-37.47441482543945, 3.1634790897369385, 3.208099126815796, 13.898616790771484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the updaate from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -37.8404464722
y: 3.16192221642
theta: 3.1974158287
speed: 13.9531803131
id: 0
t: 210
current clock is .t / rate/slowdown
9.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5304441452026367, -69.31254577636719, 4.693457126617432, 13.600770950317383)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:212


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:213


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:214


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.6369361877441406, -71.86750030517578, 4.8327460289001465, 13.716384887695312)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218


maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -41.8124885559
y: 3.85483360291
theta: 2.984333992
speed: 13.7976675034
id: 0
t: 217
current clock is .t / rate/slowdown
9.64444444444
maneuver_negotiatirte function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:210


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.04017925262
y: -68.5720748901
theta: 4.70111465454
speed: 14.244137764
id: 1
t: 210
current clock is .t / rate/slowdown
9.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.46879999999999805]
222 self.state_dicts[msg.id][msg.t] is (-39.124237060546875, 2.714958906173706, 3.300163507461548, 13.784406661987305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:215


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4399999999999982]
222 self.state_dicts[msg.id][msg.t] is (-40.45642852783203, 2.629305124282837, 3.085012435913086, 13.338017463684082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:216


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5103999999999982]
222 self.state_dicts[msg.id][msg.t] is (-41.8124885559082, 3.8548336029052734, 2.9843339920043945, 13.797667503356934)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.8217523098
y: -73.6148529053
theta: 4.68927240372
speed: 13.4288711548
id: 1
t: 218
current clock is .t / rate/slowdown
9.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:219


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:220


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-43.88363265991211, 3.372497797012329, 3.133735418319702, 13.871500015258789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:222


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5119999999999982]
222 self.state_dicts[msg.id][msg.t] is (-45.13489532470703, 3.430450677871704, 3.104246139526367, 14.191593170166016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:223


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.45599999999999813]
222 self.state_dicts[msg.id][msg.t] is (-45.76809310913086, 3.425873041152954, 3.1956472396850586, 13.980348587036133)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, fini.py this is get posotion function, it's important for me to read other car's locationmaneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8217523097991943, -73.61485290527344, 4.689272403717041, 13.428871154785156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:219


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.706047773361206, -75.07034301757812, 4.78375244140625, 14.143061637878418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:222




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:224


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.704502582550049, -76.88667297363281, 4.6717095375061035, 14.065296173095703)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -47.0772895813
y: 3.429438591
theta: 3.22146463394
speed: 14.2664728165
id: 0
t: 225
current clock is .t / rate/slowdown
10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going tsh the n times spin:224

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:226


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.61066293716
y: -78.0999832153
theta: 4.66971445084
speed: 13.8475065231
id: 1
t: 226
current clock is .t / rate/slowdown
10.0444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-47.899559020996094, 3.208782911300659, 3.276442527770996, 13.854352951049805)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4575999999999981]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.61066293716
y: -78.0999832153
theta: 4.66971445084
speed: 13.8475065231
id: 1
t: 226
current clock is .t / rate/slowdown
10.0444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:227


o the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:226


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:227


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -48.040763855
y: 3.12639427185
theta: 3.13705277443
speed: 13.8049488068
id: 0
t: 227
current clock is .t / rate/slowdown
10.0888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:228


... logging to /home/lu/.ros/log/e56796a6-ff1d-11e8-af00-000c291801fc/roslaunch-ubuntu-18733.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:46131/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [18743][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to e56796a6-ff1d-11e8-af00-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [18756][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [18759][0m
[1mprocess[rviz-3]: started with pid [18775][0m
[1mprocess[car0-4]: started with pid [18776][0m
[1mprocess[car1-5]: started with pid [18779][0m
[1mprocess[cloud-6]: started with pid [18784][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
