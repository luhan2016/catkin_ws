// Generated by gencpp from file virtual_blinker/Path.msg
// DO NOT EDIT!


#ifndef VIRTUAL_BLINKER_MESSAGE_PATH_H
#define VIRTUAL_BLINKER_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <virtual_blinker/Position.h>

namespace virtual_blinker
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : path()
    , id(0)  {
    }
  Path_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::virtual_blinker::Position_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::virtual_blinker::Position_<ContainerAllocator> >::other >  _path_type;
  _path_type path;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::virtual_blinker::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::virtual_blinker::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::virtual_blinker::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::virtual_blinker::Path > PathPtr;
typedef boost::shared_ptr< ::virtual_blinker::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::virtual_blinker::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::virtual_blinker::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace virtual_blinker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'virtual_blinker': ['/home/lu/catkin_ws/src/virtual_blinker/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::virtual_blinker::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual_blinker::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual_blinker::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual_blinker::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_blinker::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_blinker::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::virtual_blinker::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9264079b9c004a5176752540b97220c3";
  }

  static const char* value(const ::virtual_blinker::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9264079b9c004a51ULL;
  static const uint64_t static_value2 = 0x76752540b97220c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::virtual_blinker::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "virtual_blinker/Path";
  }

  static const char* value(const ::virtual_blinker::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::virtual_blinker::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position[] path\n\
int32 id\n\
================================================================================\n\
MSG: virtual_blinker/Position\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::virtual_blinker::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::virtual_blinker::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::virtual_blinker::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::virtual_blinker::Path_<ContainerAllocator>& v)
  {
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::virtual_blinker::Position_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIRTUAL_BLINKER_MESSAGE_PATH_H
