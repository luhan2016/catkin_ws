
sim.py in the sim.py main function


sim.py in the sim.py car function 
self.id is 0
sim.py call from the state_sub_topics


in the sim.py spin function 
diff 0.588936090469

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
88888888888888888888888888update stop 8888888888888888888888888

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:
run maneuver negotiator

-----------------------------------------------------------------------------------------------------------------negotiator. py init-----------

maneuver_negotiatir.py in the maneuver negotiator. py init function - - start

99999999999999999999999999999999999clock 99999999999999999999999999999999999999999999
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
9999999999999999999999999999999999 clock9999999999999999999999999999999999999999999999


maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish

---------------------------------------------------------------------------------------------------------------negotiator. py init---------------

*******************************************************************************************initialize function -- start************************

maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start

/////////////
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function
///////////////


maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish

*******************************************************************************************initialize function -- finish************************

maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)


88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
88888888888888888888888update start 8888888888888888888888888888

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
88888888888888888888888update start 8888888888888888888888888888

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
88888888888888888888888update start 8888888888888888888888888888

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
88888888888888888888888update start 8888888888888888888888888888

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function

if we have all measurements for a certain time-stamp perform risk estimation

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
88888888888888888888888update start 8888888888888888888888888888

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
88888888888888888888888update start 8888888888888888888888888888

maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
88888888888888888888888update start 8888888888888888888888888888



ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo the second car starts
msim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
sim.py call from the state_sub_topics
in the sim.py spin function 
diff 0.495688915253


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
88888888888888888888888update start 8888888888888888888888888888

88888888888888888888888update start 8888888888888888888888888888
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
88888888888888888888888update start 8888888888888888888888888888

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start


9999999999999999999999999999999999 clock9999999999999999999999999999999999999999999999
call clock function
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is .t / rate/slowdown
0.0
9999999999999999999999999999999999 clock9999999999999999999999999999999999999999999999


maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function


if we haaneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function


if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.12318897247
y: -79.6349868774
theta: 1.55738973618
speed: 13.8646869659
id: 0
t: 8
current clock is .t / rate/slowdown
0.355555555556


maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.24656605721
y: -75.401008606
theta: 1.53079116344
speed: 13.6159915924
id: 0
t: 15
current clock is .t / rate/slowdown
0.666666666667
maneuver_negotiatir.py this is get posove all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.12044930458
y: 59.3284950256
theta: 4.85558891296
speed: 13.821559906
id: 1
t: 9
current clock is .t / rate/slowdown
0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:14
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update functiotion function, it's important for me to read other car's locationmaneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:23
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.14996933937
y: -70.8076400757
theta: 1.58840417862
speed: 13.5629901886
id: 0
t: 24
current clock is .t / rate/slowdown
1.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finishn 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.41421890259
y: 53.5895385742
theta: 4.54880046844
speed: 13.7200031281
id: 1
t: 18
current clock is .t / rate/slowdown
0.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:24
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.13733792305
y: 49.21118927
theta: 4.81584787369
speed: 14.1338624954
id: 1
t: 26
current clock is .t / rate/slowdown
1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:27
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.845089674
y: 44.4308128357
theta: 4.80077838898
speed: 14.3192749023
id: 1
t: 33
current clock is .t / rate/slowdown
1.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function  the n times spin:25maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:31
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm statecallback mmmmmmm
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.86772108078
y: -65.4372406006
theta: 1.46027505398
speed: 13.6825008392
id: 0
t: 31
current clock is .t / rate/slowdown
1.37777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:33
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:35
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.18124365807
y: -60.7347564697
theta: 1.58365273476
speed: 13.8935317993
id: 0
t: 39
current clock is .t / rate/slowdown
1.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:42
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:36
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:37
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:41
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback functionmaneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.58620595932
y: 40.2769622803
theta: 4.71059417725
speed: 13.9305973053
id: 1
t: 41
current clock is .t / rate/slowdown
1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:42
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish tin the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:47
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.99536800385
y: -55.5532875061
theta: 1.53466105461
speed: 13.9936590195
id: 0
t: 47
current clock is .t / rate/slowdown
2.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:48
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:49
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:52
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53
maneuver_negotiatir.py stahe update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:45
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:46
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:49
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.45670700073
y: 34.9248504639
theta: 4.69451951981
speed: 14.2547187805
id: 1
t: 49
current clock is .t / rate/slowdown
2.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:54
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.1375067234
y: 30.1810646057
theta: 4.73935890198
speed: 14.1273851395
id: 1
t: 56
current clock is .t / rate/slowdown
2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:58
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:59
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:62
maneuver_negotiatir.pyrt the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:54
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:55
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.07248616219
y: -51.3596458435
theta: 1.69430208206
speed: 13.9707965851
id: 0
t: 55
current clock is .t / rate/slowdown
2.44444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:58
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:60
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:62
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44313573837
y: -47.2097473145
theta: 1.69207632542
speed: 13.6403408051
id: 0
t: 62
current clock is .t / rate/slowdown
2.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:63
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:64
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:65
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:66
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:67
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:69
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:70
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.30394005775
y: -41.8700027466
theta: 1.60177326202
speed: 14.3217086792
id: 0
t: 70
current clock is .t / rate/slowdown
3.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get  start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:63
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:64
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.18359971046
y: 25.8844184875
theta: 4.53285121918
speed: 13.6563816071
id: 1
t: 64
current clock is .t / rate/slowdown
2.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:65
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:66
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:67
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:69
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:70
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:71
maneuver_negotiatir.py start the update agent state from ros funtthe velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:71
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:72
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:73
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:74
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:75
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:76
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:77
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:78
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 2.92800521851
y: -37.0977249146
theta: 1.47299194336
speed: 13.7094831467
id: 0
t: 78
current clock is .t / rate/slowdown
3.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:79
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback funcion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:72
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.95795059204
y: 20.2457561493
theta: 4.54624319077
speed: 14.1682624817
id: 1
t: 72
current clock is .t / rate/slowdown
3.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:73
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:74
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:75
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:76
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:77
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:78
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:79
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.34650969505
y: 16.8680763245
theta: 4.72644281387
speed: 13.7687397003
id: 1
t: 79
current clock is .t / rate/slowdown
3.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:80
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:81
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:82
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:83
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:84
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:85
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:86
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:87
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.91985535622
y: 11.6319103241
theta: 4.66520690918
speed: 13.9747018814
id: 1
t: 87
current clock is .t / rate/slowdown
3.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < setion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:80
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:81
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:82
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:83
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:84
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:85
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:86
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.21858787537
y: -32.3210906982
theta: 1.49139404297
speed: 13.6547412872
id: 0
t: 85
current clock is .t / rate/slowdown
3.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:87
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times splf.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:88
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:89
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:90
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:91
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:92
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:93
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:94
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.96984434128
y: 6.26649856567
theta: 4.6947889328
speed: 13.6078147888
id: 1
t: 95
current clock is .t / rate/slowdown
4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:96
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update functionin:88
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:91
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:92
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:93
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.31338715553
y: -27.5716953278
theta: 1.4941650629
speed: 13.7920703888
id: 0
t: 93
current clock is .t / rate/slowdown
4.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:94
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:96
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:97
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:98
maneuver_negotiatir.py start the update agent state from ros funt maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:97
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:98
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:99
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:100
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:101
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:102
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:103
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.23324084282
y: 1.70767271519
theta: 4.82646274567
speed: 13.8718671799
id: 1
t: 103
current clock is .t / rate/slowdown
4.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:104
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:105
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:106
maneuver_negotiatir.py start theion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:99
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:100
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:101
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.45417976379
y: -23.2469005585
theta: 1.5958673954
speed: 12.2639541626
id: 0
t: 101
current clock is .t / rate/slowdown
4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:102
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:103
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:104
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:105
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:106
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver
maneuver_negotiatir.py in the trymaneuver function - startleave the update function 
in spin function, finish the n times spin:107
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

1.self.status is 1
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50553011894
y: -19.3027896881
theta: 1.51606976986
speed: 11.073931694
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
!!!!after check statue the self.tag is [4.7555555555555555, 0]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50553011894
y: -19.3027896881
theta: 1.51606976986
speed: 11.073931694
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.666666666666667, True, ['1']]
4.66666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.75555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.66666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.75555555556,(3.5055301189422607, -19.30278968811035, 1.516069769859314),11,1,4.75555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,4.75555555556,(3.5055301189422607, -19.30278968811035, 1.516069769859314),11,1,4.75555555556,0,left
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50553011894
y: -19.3027896881
theta: 1.51606976986
speed: 11.073931694
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
self.communication_details == 0
sending GET,0,4.75555555556,(3.5055301189422607, -19.30278968811035, 1.516069769859314),11,1,4.75555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50553011894
y: -19.3027896881
theta: 1.51606976986
speed: 11.073931694
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.50553011894
y: -19.3027896881
theta: 1.51606976986
speed: 11.073931694
id: 0
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.75555555556', 'Position': ['(-3.233240842819214', ' 1.7076727151870728', ' 4.826462745666504)'], 'Type': 'GRANT'}
car 0 received GRANT,1,4.75555555556,(-3.233240842819214, 1.7076727151870728, 4.826462745666504),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.7555555555555555, True, ['1']]
4.75555555556
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negot update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:107
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.88379740715
y: -1.31501579285
theta: 4.79529809952
speed: 13.8829030991
id: 1
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.88379740715
y: -1.31501579285
theta: 4.79529809952
speed: 13.8829030991
id: 1
t: 107
current clock is .t / rate/slowdown
4.75555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '4.75555555556', 'Sender': '0', 'Time': '4.75555555556', 'IntendedCourse': 'left', 'Position': ['3.5055301189422607', ' -19.30278968811035', ' 1.516069769859314'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,4.75555555556,(3.5055301189422607, -19.30278968811035, 1.516069769859314),11,1,4.75555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.211358024692
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.82861536381
sender last entering time is:  1.82861536381
sender last leaving time is:  4.16166905986
my entering time is:  0.211358024692
my leaving time is:  0.660232443162
i have left the intersection:  False
not conflicted because sender enters after i leave
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,4.75555555556,(-3.233240842819214, 1.7076727151870728, 4.826462745666504),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [9.622222222222222, 'left']}
maneuver_negotiatir.py start the update_agent_message
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.88379740715
y: -1.31501579285
theta: 4.79529809952
speed: 13.8829030991
id: 1
t: 107
current clock is .t / rate/slowdown
4.75555555556
self.communication_details == 0
sending GRANT,1,4.75555555556,(-3.233240842819214, 1.7076727151870728, 4.826462745666504),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:108
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:109
maneuver_negotiatir.py start the update agent state from ros funtion
miatir.py message_processing,in request processing, new membership =  [4.7555555555555555, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
!!WW change status to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [9.533333333333333, 'left']}
Doing maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:108
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:109
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.49638986588
y: -18.7877559662
theta: 1.60361373425
speed: 10.7539978027
id: 0
t: 109
current clock is .t / rate/slowdown
4.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:110
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:111
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:112
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:113
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:114
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in aneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:110
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.25742173195
y: -2.60683226585
theta: 4.67886972427
speed: 14.0512313843
id: 1
t: 110
current clock is .t / rate/slowdown
4.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:111
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:112
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:113
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:114
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:115
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:116
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:117
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish ththe sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:115
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:116
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.17484283447
y: -15.6577157974
theta: 1.72393679619
speed: 9.02108669281
id: 0
t: 116
current clock is .t / rate/slowdown
5.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:117
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:118
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:119
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:120
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:121
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:122
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:123
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:124
maneuver_negotiatir.py start the n times spin:118maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.57362055779
y: -7.95920801163
theta: 4.7144446373
speed: 13.8358917236
id: 1
t: 118
current clock is .t / rate/slowdown
5.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:119
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:120
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:121
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:122
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:123
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:124
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:125
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:126
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.2929418087
y: -12.9745998383
theta: 4.41738557816
speed: 14.1042528152
id: 1
t: 126
current clock is .e update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.2423593998
y: -12.9349184036
theta: 1.51797068119
speed: 7.12744140625
id: 0
t: 124
current clock is .t / rate/slowdown
5.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:125
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:126
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:127
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:128
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:129
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:130
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:131
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:132
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.2340760231
y: -10.1518259048
theta: 1.57561159134
speed: 5.49097490311
id: 0
t: 132
current clt / rate/slowdown
5.6
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:127
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:128
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:129
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:130
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:131
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:132
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:133
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:134
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.83557534218
y: -17.505361557
theta: 4.53356552124
speed: 14.1914510727
id: 1
t: 134
current clock is .t / rate/slowdown
5.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
tock is .t / rate/slowdown
5.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:133
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:134
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:135
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:136
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:137
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:138
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:139
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.80807876587
y: -8.63482189178
theta: 1.64830267429
speed: 5.45945978165
id: 0
t: 139
current clock is .t / rate/slowdown
6.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:140
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxargetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:135
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:136
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:137
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:138
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:139
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:140
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:141
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.07290267944
y: -22.2477436066
theta: 4.7559967041
speed: 13.9590787888
id: 1
t: 141
current clock is .t / rate/slowdown
6.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:142
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:143
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have alxxxxxxx
leave the update function 
in spin function, finish the n times spin:141
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:142
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:143
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:144
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:145
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:146
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:147
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.44936084747
y: -6.58469724655
theta: 1.62276351452
speed: 6.19859838486
id: 0
t: 147
current clock is .t / rate/slowdown
6.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:148
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:149
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < sel measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:144
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:145
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:146
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:147
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:148
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:149
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.01963996887
y: -27.4617843628
theta: 4.82294082642
speed: 13.772819519
id: 1
t: 149
current clock is .t / rate/slowdown
6.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:150
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:151
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:152
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in thelf.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:150
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:151
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:152
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:153
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:154
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:155
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 3.20930719376
y: -4.31012678146
theta: 2.0347738266
speed: 8.51126003265
id: 0
t: 155
current clock is .t / rate/slowdown
6.88888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:156
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:157
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:158
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n t sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:153
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:154
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:155
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:156
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:157
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.01904630661
y: -31.8501377106
theta: 4.73542308807
speed: 14.1493740082
id: 1
t: 157
current clock is .t / rate/slowdown
6.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:158
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:159
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:160
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:161
maneuver_negotiatir.py start times spin:159maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:160
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:161
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:162
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:163
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: 1.62681603432
y: -1.36935591698
theta: 2.22154283524
speed: 9.47562503815
id: 0
t: 163
current clock is .t / rate/slowdown
7.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:164
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:165
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:166
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:167
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targethe update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:162
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:163
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:164
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.18449401855
y: -35.8083610535
theta: 4.66215991974
speed: 13.7348575592
id: 1
t: 164
current clock is .t / rate/slowdown
7.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:165
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:166
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:167
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:168
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:169
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < sespeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:168
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:169
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:170
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -1.2124761343
y: 1.22375237942
theta: 2.61763834953
speed: 11.2048692703
id: 0
t: 170
current clock is .t / rate/slowdown
7.55555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:171
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:172
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:173
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:174
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:175
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:176
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finilf.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:170
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:171
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:172
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.64838218689
y: -41.6856956482
theta: 4.76118946075
speed: 14.023223877
id: 1
t: 172
current clock is .t / rate/slowdown
7.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:173
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:174
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:175
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:176
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:177
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:178
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < sesh the n times spin:177maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:178
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -4.36955022812
y: 2.74742102623
theta: 2.99266862869
speed: 13.1911029816
id: 0
t: 178
current clock is .t / rate/slowdown
7.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:179
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:180
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:181
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:182
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py message_processing,!!dwd change status to NORMAL
maneuver_negotiatir.py in the message processing function, it's a long code, finish
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:183
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:184
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:185
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in tlf.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:179
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:180
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.31233072281
y: -46.7794952393
theta: 4.758228302
speed: 13.9703321457
id: 1
t: 180
current clock is .t / rate/slowdown
8.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:181
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:182
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:183
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:184
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:185
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:186
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:187
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback he sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:186
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -9.18159103394
y: 3.70551776886
theta: 3.19162535667
speed: 13.9430074692
id: 0
t: 186
current clock is .t / rate/slowdown
8.26666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:187
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:188
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:189
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:190
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:191
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:192
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:193
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -14.0516653061
y: 3.0function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.14845776558
y: -50.3916931152
theta: 4.78345441818
speed: 13.5001039505
id: 1
t: 187
current clock is .t / rate/slowdown
8.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:188
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:189
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:190
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:191
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:192
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:193
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:194
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:195
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.12222957611
y: -55.3529510498
theta: 4.6840929985
speed: 14.0929908752
id: 1
t: 195
current clock is .t / rate/slowdown
8.66666663044223785
theta: 3.17884922028
speed: 13.4974679947
id: 0
t: 193
current clock is .t / rate/slowdown
8.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:194
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:195
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:196
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:197
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:198
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:199
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:200
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:201
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -18.4244689941
y: 3.82305693626
theta: 3.08922505379
speed: 13.7900066376
id: 0
t: 201
current clock is .t / rate/slowdown
8.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_6667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:196
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:198
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:199
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:200
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:201
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:202
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:203
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.07077264786
y: -60.4397354126
theta: 4.77674674988
speed: 13.8627328873
id: 1
t: 203
current clock is .t / rate/slowdown
9.02222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the accelernegotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:202
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:203
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:204
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:205
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:206
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:207
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:208
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:209
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -23.3511581421
y: 2.80832099915
theta: 2.99661636353
speed: 14.1833686829
id: 0
t: 209
current clock is .t / rate/slowdown
9.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:210
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update ageation
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:204
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:205
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:206
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:207
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:208
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:209
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:210
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:211
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.75282716751
y: -64.2655258179
theta: 4.72363471985
speed: 13.6852464676
id: 1
t: 210
current clock is .t / rate/slowdown
9.33333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py fnt state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:211
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:212
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:213
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:214
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:215
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:216
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:217
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -28.2180919647
y: 3.4058163166
theta: 3.03696417809
speed: 13.6883811951
id: 0
t: 217
current clock is .t / rate/slowdown
9.64444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:218
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:219
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py iinish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:212
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:213
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:214
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:215
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:216
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:217
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:218
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.82759523392
y: -69.9639434814
theta: 4.76569795609
speed: 13.882188797
id: 1
t: 218
current clock is .t / rate/slowdown
9.68888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:219
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:220
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sn the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:220
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:221
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:222
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:223
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:224
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:225
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -33.4779472351
y: 2.98366618156
theta: 3.17338943481
speed: 14.1312799454
id: 0
t: 225
current clock is .t / rate/slowdown
10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:226
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:227
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:228
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we im.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:221
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:222
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:223
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:224
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:225
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:226
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.17868423462
y: -74.7745437622
theta: 4.680727005
speed: 14.2260007858
id: 1
t: 226
current clock is .t / rate/slowdown
10.0444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:227
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:228
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:229
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:229
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:230
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:231
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:232
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -37.7214851379
y: 2.79255771637
theta: 3.06341934204
speed: 13.7617645264
id: 0
t: 232
current clock is .t / rate/slowdown
10.3111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:233
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:234
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:235
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:236
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:237
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certathe update function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:230
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:231
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:232
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:233
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:234
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.24554562569
y: -79.290222168
theta: 4.91081809998
speed: 13.9783763885
id: 1
t: 234
current clock is .t / rate/slowdown
10.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:235
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:236
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:237
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:238
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements fin time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:239
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:240
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -42.9939575195
y: 3.30467057228
theta: 3.18774867058
speed: 13.9550800323
id: 0
t: 240
current clock is .t / rate/slowdown
10.6666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:241
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:242
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:243
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:244
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:245
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:246
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in or a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:239
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:240
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:241
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:242
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.97336125374
y: -84.5870437622
theta: 4.62477397919
speed: 13.6685094833
id: 1
t: 242
current clock is .t / rate/slowdown
10.7555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:243
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:244
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:245
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:246
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:247
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.pthe sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:247
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:248
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -47.2557106018
y: 3.43219733238
theta: 3.08249521255
speed: 13.755358696
id: 0
t: 248
current clock is .t / rate/slowdown
11.0222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:249
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:250
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:251
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:252
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:253
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:254
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:255
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funty finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:248
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:249
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.19280076027
y: -88.3486480713
theta: 4.76379346848
speed: 13.6662559509
id: 1
t: 249
current clock is .t / rate/slowdown
11.0666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:250
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:251
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:252
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:253
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:254
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:255
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update functiion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:256
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -52.0389823914
y: 2.67282342911
theta: 3.15438079834
speed: 13.8512830734
id: 0
t: 255
current clock is .t / rate/slowdown
11.3333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:257
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:258
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:259
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:260
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:261
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:262
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:263
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -56.8112564087
y: 3.31731462479
theta: 3.13101601601
speed: 14.150472641
id: 0
t: 263
current clock is .t / rate/slowdown
11.6888888889
maneuver_negotiatir.py this is get on 
in spin function, finish the n times spin:256
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:257
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.50412583351
y: -93.6030426025
theta: 4.73166513443
speed: 14.2906675339
id: 1
t: 257
current clock is .t / rate/slowdown
11.4222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:258
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:259
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:260
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:261
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:262
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:263
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:264
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxposotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:264
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:265
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:266
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:267
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:268
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:269
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:270
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:271
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -61.3571090698
y: 2.94857621193
theta: 3.14913654327
speed: 13.8323144913
id: 0
t: 271
current clock is .t / rate/slowdown
12.0444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spixxx
leave the update function 
in spin function, finish the n times spin:265
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.70522093773
y: -98.1766586304
theta: 4.79196310043
speed: 13.9892368317
id: 1
t: 265
current clock is .t / rate/slowdown
11.7777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:266
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:267
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:268
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:269
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:270
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:271
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:272
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.32252812386
y: -103.342079163
theta: 4.72366142273
speed: 13.4810800552
id: 1
t: 272
current clock is .t / rate/slowdown
12.0888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:273
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:274
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:275
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:276
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:277
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:278
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:279
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:280
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.1059679985
y: -107.431564331
theta: 4.70766544342
speed: 13.8644800186
id: 1
t: 280
current clock is .t / rate/slowdown
12.4444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the upn:272maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:273
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:274
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:275
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:276
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:277
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:278
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:279
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -66.4428710938
y: 3.18741345406
theta: 3.06822133064
speed: 13.9895992279
id: 0
t: 279
current clock is .t / rate/slowdown
12.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:280
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:281
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_nedate function maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:281
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:282
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:283
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:284
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:285
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:286
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:287
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:288
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -3.01592254639
y: -112.648048401
theta: 4.68986749649
speed: 13.5314426422
id: 1
t: 288
current clock is .t / rate/slowdown
12.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:289
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:290
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.pygotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:282
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:283
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:284
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:285
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:286
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:287
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -70.6837234497
y: 3.10235953331
theta: 3.26575827599
speed: 14.0822477341
id: 0
t: 285
current clock is .t / rate/slowdown
12.6666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:288
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:289
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:290
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:291
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:292
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:293
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:294
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:295
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -76.4161071777
y: 3.11514639854
theta: 3.00549888611
speed: 13.5731611252
id: 0
t: 295
current clock is .t / rate/slowdown
13.1111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:296
 in the sim.py statecallback function
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:291
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:292
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:293
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:294
maneuver_negotiatir.py start the update agent state from ros funtion
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function
sim.py in the sim.py statecallback function
if we have all measurements for a certain time-stamp perform risk estimation
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.92833065987
y: -116.688911438
theta: 4.64679861069
speed: 13.9967031479
id: 1
t: 294
current clock is .t / rate/slowdown
13.0666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the try maneuver function update -. strat
maneuver_negotiatir.py in the clock function
maneuver_negotiatir.py in the clock function  the ros_measurements has x, y, theta, speed, id and t
x: -2.92833065987
y: -116.688911438
theta: 4.64679861069
speed: 13.9967031479
id: 1
t: 294
current clock is .t / rate/slowdown
13.0666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:295
... logging to /home/lu/.ros/log/4a4d1be8-fba1-11e8-8a22-000c291801fc/roslaunch-ubuntu-19848.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:43253/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [19858][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 4a4d1be8-fba1-11e8-8a22-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [19871][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [19887][0m
[1mprocess[rviz-3]: started with pid [19889][0m
[1mprocess[car0-4]: started with pid [19890][0m
[1mprocess[car1-5]: started with pid [19891][0m
[1mprocess[cloud-6]: started with pid [19892][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
