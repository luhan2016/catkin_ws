sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.0325310230255
222 self.state_dicts[msg.id][msg.t] is (3.16528058052063, -64.14640045166016, 1.5414822101593018, 13.79800033569336)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2


222 self.state_dicts[msg.id][msg.t] is (2.9968976974487305, -63.25368118286133, 1.7633211612701416, 13.923054695129395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f7f4daf5998>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f7f4db18d88>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3


maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (3.1748690605163574, -63.01430892944336, 1.608646273612976, 13.776673316955566)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.33862161636
y: 71.8961029053
theta: 4.68954849243
speed: 13.7629623413
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:5




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6


xxx before update is x: -3.33862161636
y: 71.8961029053
theta: 4.68954849243
speed: 13.7629623413
id: 1
t: 5
xxx after update is x: -3.13334965706
y: 72.161605835
theta: 4.66650056839
speed: 14.1048593521
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7


xxx before update is x: -3.13334965706
y: 72.161605835
theta: 4.66650056839
speed: 14.1048593521
id: 1
t: 6
xxx after update is x: -3.34142827988
y: 70.85937sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 0.0164570808411


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1


222 self.state_dicts[msg.id][msg.t] is (-3.548396587371826, 74.67642211914062, 4.562275409698486, 13.954933166503906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f2a403e9488>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f2a40407248>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2


maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
222 self.state_dicts[msg.id][msg.t] is (-3.057771921157837, 73.97200012207031, 4.561434268951416, 13.943202018737793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.28491306305
y: -62.2162322998
theta: 1.64684689045
speed: 13.9493789673
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:5




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6


xxx before update is x: 3.28491306305
y: -62.2162322998
theta: 1.64684689045
speed: 13.9493789673
id: 0
t: 5
xxx after update is x: 3.53152489662
y: -61.7018928528
theta: 1.6077144146
speed: 14.4316234589
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7


xxx before update is x: 3.53152489662
y: -61.7018928528
theta: 1.6077144146
speed: 14.4316234589
id: 0
t: 6
xxx after update is x: 3.25366902351
y: -61.0865707397
theta: 1.54723095894
speed: 14.1537828445
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx5
theta: 4.70769119263
speed: 13.5967559814
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8


xxx before update is x: -3.34142827988
y: 70.859375
theta: 4.70769119263
speed: 13.5967559814
id: 1
t: 7
xxx after update is x: -3.28244590759
y: 70.6363754272
theta: 4.85468196869
speed: 14.2047328949
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: -3.28244590759
y: 70.6363754272
theta: 4.85468196869
speed: 14.2047328949
id: 1
t: 8
xxx after update is x: -3.29210996628
y: 69.1196060181
theta: 4.74929475784
speed: 13.8720588684
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.39439512901841023, 0.25363896307168826]
222 self.state_dicts[msg.id][msg.t] is (3.097459077835083, -58.49351119995117, 1.6267598867416382, 13.786253929138184)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29210996628
y: 69.1196060181
theta: 4.74929475784
speed: 13.8720588684
id: 1
t: 9
xxx after update is x: -3.16881012917
y: 69.1436462402
theta: 4.77362060547
speed: 13.680232048
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:10


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.444444444444






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16881012917
y: 69.1436462402
theta: 4.77362060547
speed: 13.680232048
id: 1
t: 10
xxx after update is x: -2.8983464241
y: 68.591217041
theta: 4.73727607727
speed: 13.7733011246
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:11


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: -2.8983464241
y: 68.591217041
theta: 4.73727607727
speed: 13.7733011246
id: 1
t: 11
xxx after update is x: -3.25390291214
y: 67.9353179932
theta: 4.74824953079
speed: 13.9772615433
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: -3.25390291214
y: 67.9353179932
theta: 4.74824953079
speed: 13.9772615433
id: 1
t: 12
xxx after update is x: -3.12181019783
y: 67.5912857056
theta: 4.74238777161
speed: 13.6059350967
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12181019783
y: 67.5912857056
theta: 4.74238777161
speed: 13.6059350967
id: 1
t: 13
xxx after update is x: -3.33481431007
y: 66.5847930908
theta: 4.73720884323
speed: 13.5613470078
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:14


aaaaaa
aaaaaabbbbb
risk is [0.31992805717164186, 0]
222 self.state_dicts[msg.id][msg.t] is (3.262
xxx before update is x: 3.25366902351
y: -61.0865707397
theta: 1.54723095894
speed: 14.1537828445
id: 0
t: 7
xxx after update is x: 3.56317734718
y: -60.082824707
theta: 1.66965103149
speed: 13.3560323715
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:8




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9


xxx before update is x: 3.56317734718
y: -60.082824707
theta: 1.66965103149
speed: 13.3560323715
id: 0
t: 8
xxx after update is x: 3.09745907784
y: -58.4935112
theta: 1.62675988674
speed: 13.7862539291
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.375786265652084, 0.3556896806595774]
222 self.state_dicts[msg.id][msg.t] is (-3.292109966278076, 69.1196060180664, 4.749294757843018, 13.872058868408203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.4






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10


xxx before update is x: 3.09745907784
y: -58.4935112
theta: 1.62675988674
speed: 13.7862539291
id: 0
t: 9
xxx after update is x: 3.0990998745
y: -58.2675209045
theta: 1.54272329807
speed: 14.0506210327
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11


xxx before update is x: 3.0990998745
y: -58.2675209045
theta: 1.54272329807
speed: 14.0506210327
id: 0
t: 10
xxx after update is x: 3.13402915001
y: -57.923866272
theta: 1.6522487402
speed: 13.6605138779
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12


xxx before update is x: 3.13402915001
y: -57.923866272
theta: 1.6522487402
speed: 13.6605138779
id: 0
t: 11
xxx after update is x: 2.99456858635
y: -57.1358413696
theta: 1.47615861893
speed: 13.7078056335
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13


xxx before update is x: 2.99456858635
y: -57.1358413696
theta: 1.47615861893
speed: 13.7078056335
id: 0
t: 12
xxx after update is x: 3.11102151871
y: -56.7282562256
theta: 1.623041749
speed: 14.1487979889
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.11102151871
y: -56.7282562256
theta: 1.623041749
speed: 14.1487979889
id: 0
t: 13
xxx after update is x: 3.26272249222
y: -56.363155365
theta: 1.47746706009
speed: 13.7501583099
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:14




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: 3.26272249222
y: -56.363155365
theta: 1.47746706009
speed: 13.7501583099
id: 0
t: 14
xxx after update is x: 3.75371050835
y: -55.9105377197
theta: 1.53978443146
speed: 13.838095665
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funti7224922180176, -56.363155364990234, 1.4774670600891113, 13.750158309936523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15


xxx before update is x: -3.33481431007
y: 66.5847930908
theta: 4.73720884323
speed: 13.5613470078
id: 1
t: 14
xxx after update is x: -3.09119439125
y: 65.4936294556
theta: 4.66114711761
speed: 13.9948759079
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: -3.09119439125
y: 65.4936294556
theta: 4.66114711761
speed: 13.9948759079
id: 1
t: 15
xxx after update is x: -2.98794555664
y: 65.3521728516
theta: 4.78228616714
speed: 14.2283973694
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: -2.98794555664
y: 65.3521728516
theta: 4.78228616714
speed: 14.2283973694
id: 1
t: 16
xxx after update is x: -3.06364226341
y: 64.2463378906
theta: 4.75874328613
speed: 14.0263853073
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: -3.06364226341
y: 64.2463378906
theta: 4.75874328613
speed: 14.0263853073
id: 1
t: 17
xxx after update is x: -3.44845509529
y: 63.7382240295
theta: 4.85984945297
speed: 13.9369268417
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2821380579602564, 0]
222 self.state_dicts[msg.id][msg.t] is (3.0188701152801514, -54.32609939575195, 1.5227211713790894, 14.072423934936523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.8






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: -3.44845509529
y: 63.7382240295
theta: 4.85984945297
speed: 13.9369268417
id: 1
t: 18
xxx after update is x: -3.51520037651
y: 62.8343696594
theta: 4.69174957275
speed: 13.791765213
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.51520037651
y: 62.8343696594
theta: 4.69174957275
speed: 13.791765213
id: 1
t: 19
xxx after update is x: -3.23624658585
y: 62.4585494995
theta: 4.58390283585
speed: 13.6476354599
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: -3.23624658585
y: 62.4585494995
theta: 4.58390283585
speed: 13.6476354599
id: 1
t: 20
xxx after update is x: -3.89556002617
y: 62.087802887
theta: 4.7614159584
speed: 13.6648302078
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion


going on


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:16


xxx before update is x: 3.75371050835
y: -55.9105377197
theta: 1.53978443146
speed: 13.838095665
id: 0
t: 15
xxx after update is x: 3.19784927368
y: -54.9370498657
theta: 1.63374912739
speed: 13.8196516037
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.36463119307550557, 0.3927040391349566]
222 self.state_dicts[msg.id][msg.t] is (-2.987945556640625, 65.3521728515625, 4.782286167144775, 14.228397369384766)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:17


xxx before update is x: 3.19784927368
y: -54.9370498657
theta: 1.63374912739
speed: 13.8196516037
id: 0
t: 16
xxx after update is x: 3.62207078934
y: -54.6792068481
theta: 1.53988099098
speed: 13.8618793488
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 0.755555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:18


xxx before update is x: 3.62207078934
y: -54.6792068481
theta: 1.53988099098
speed: 13.8618793488
id: 0
t: 17
xxx after update is x: 3.01887011528
y: -54.3260993958
theta: 1.52272117138
speed: 14.0724239349
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:19


xxx before update is x: 3.01887011528
y: -54.3260993958
theta: 1.52272117138
speed: 14.0724239349
id: 0
t: 18
xxx after update is x: 3.44356918335
y: -53.3495597839
theta: 1.51381754875
speed: 13.7601423264
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:20


xxx before update is x: 3.44356918335
y: -53.3495597839
theta: 1.51381754875
speed: 13.7601423264
id: 0
t: 19
xxx after update is x: 3.45650815964
y: -52.3167076111
theta: 1.70021021366
speed: 13.6485376358
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:21


xxx before update is x: 3.45650815964
y: -52.3167076111
theta: 1.70021021366
speed: 13.6485376358
id: 0
t: 20
xxx after update is x: 3.11144042015
y: -51.9114723206
theta: 1.59139549732
speed: 13.8448381424
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:22


xxx before update is x: 3.11144042015
y: -51.9114723206
theta: 1.59139549732
speed: 13.8448381424
id: 0
t: 21
xxx after update is x: 3.57382154465
y: -51.6955299377
theta: 1.56768751144
speed: 13.7209329605
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.57382154465
y: -51.6955299377
theta: 1.56768751144
speed: 13.7209329605
id: 0
t: 22
xxx after update is x: 2.88230133057
y: -50.5256080627
theta: 1.64753329754
speed: 13.5922002792
id: 0
tto the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.89556002617
y: 62.087802887
theta: 4.7614159584
speed: 13.6648302078
id: 1
t: 21
xxx after update is x: -3.29994630814
y: 61.7904510498
theta: 4.70038747787
speed: 13.8691062927
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:22




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29994630814
y: 61.7904510498
theta: 4.70038747787
speed: 13.8691062927
id: 1
t: 22
xxx after update is x: -3.70818567276
y: 60.9493522644
theta: 4.59951925278
speed: 13.7272348404
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24


xxx before update is x: -3.70818567276
y: 60.9493522644
theta: 4.59951925278
speed: 13.7272348404
id: 1
t: 23
xxx after update is x: -3.33362817764
y: 60.2963180542
theta: 4.7208647728
speed: 13.8971576691
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32958362518637185, 0]
222 self.state_dicts[msg.id][msg.t] is (2.5425281524658203, -49.68338394165039, 1.534926414489746, 13.68509292602539)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: -3.33362817764
y: 60.2963180542
theta: 4.7208647728
speed: 13.8971576691
id: 1
t: 24
xxx after update is x: -3.29060029984
y: 59.7039680481
theta: 4.64517354965
speed: 14.2606954575
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: -3.29060029984
y: 59.7039680481
theta: 4.64517354965
speed: 14.2606954575
id: 1
t: 25
xxx after update is x: -3.20124340057
y: 58.4202194214
theta: 4.75344181061
speed: 14.0947399139
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.15555555556






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.20124340057
y: 58.4202194214
theta: 4.75344181061
speed: 14.0947399139
id: 1
t: 26
xxx after update is x: -3.03356289864
y: 58.4388389587
theta: 4.56877183914
speed: 13.6763753891
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:27




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.03356289864
y: 58.4388389587
theta: 4.56877183914
speed: 13.6763753891
id: 1
t: 27
xxx after update is x: -3.35667347908
y: 56.5638084412
theta: 4.73349618912
speed: 14.0203552246
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:28




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.35667347908
y: 56.5638084412
theta: 4.73349618912
speed: 14.0203552246
: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:23




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.88230133057
y: -50.5256080627
theta: 1.64753329754
speed: 13.5922002792
id: 0
t: 23
xxx after update is x: 2.54252815247
y: -49.6833839417
theta: 1.53492641449
speed: 13.685092926
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:24


aaaaaa
risk is [0.31545484498484155, 0.30511346612405404]
222 self.state_dicts[msg.id][msg.t] is (-3.3336281776428223, 60.29631805419922, 4.720864772796631, 13.897157669067383)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:25


xxx before update is x: 2.54252815247
y: -49.6833839417
theta: 1.53492641449
speed: 13.685092926
id: 0
t: 24
xxx after update is x: 2.95533752441
y: -49.36926651
theta: 1.71280169487
speed: 13.7198839188
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.11111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:26


xxx before update is x: 2.95533752441
y: -49.36926651
theta: 1.71280169487
speed: 13.7198839188
id: 0
t: 25
xxx after update is x: 3.38003349304
y: -49.3374900818
theta: 1.34345543385
speed: 13.7568073273
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:27


xxx before update is x: 3.38003349304
y: -49.3374900818
theta: 1.34345543385
speed: 13.7568073273
id: 0
t: 26
xxx after update is x: 3.08807015419
y: -48.7926254272
theta: 1.35980391502
speed: 13.8381261826
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:28


xxx before update is x: 3.08807015419
y: -48.7926254272
theta: 1.35980391502
speed: 13.8381261826
id: 0
t: 27
xxx after update is x: 3.0482313633
y: -47.0084114075
theta: 1.53965270519
speed: 13.981883049
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:29


xxx before update is x: 3.0482313633
y: -47.0084114075
theta: 1.53965270519
speed: 13.981883049
id: 0
t: 28
xxx after update is x: 3.41194868088
y: -47.1863746643
theta: 1.60777044296
speed: 14.1209058762
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: 3.41194868088
y: -47.1863746643
theta: 1.60777044296
speed: 14.1209058762
id: 0
t: 29
xxx after update is x: 3.1755156517
y: -46.485874176
theta: 1.47702908516
speed: 13.8661813736
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3id: 1
t: 28
xxx after update is x: -3.09682750702
y: 57.3974456787
theta: 4.87112617493
speed: 14.0870704651
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:29




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30


xxx before update is x: -3.09682750702
y: 57.3974456787
theta: 4.87112617493
speed: 14.0870704651
id: 1
t: 29
xxx after update is x: -3.00414657593
y: 56.7995986938
theta: 4.70336532593
speed: 13.8660488129
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.33770326688019475, 0]
222 self.state_dicts[msg.id][msg.t] is (3.175515651702881, -46.48587417602539, 1.4770290851593018, 13.866181373596191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31


xxx before update is x: -3.00414657593
y: 56.7995986938
theta: 4.70336532593
speed: 13.8660488129
id: 1
t: 30
xxx after update is x: -3.6993637085
y: 56.1663894653
theta: 4.72492551804
speed: 13.9206695557
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3407622710956044, 0]
222 self.state_dicts[msg.id][msg.t] is (2.6805107593536377, -45.631656646728516, 1.46132493019104, 13.51563549041748)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: -3.6993637085
y: 56.1663894653
theta: 4.72492551804
speed: 13.9206695557
id: 1
t: 31
xxx after update is x: -3.17875337601
y: 55.0627784729
theta: 4.6403799057
speed: 13.6258850098
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33


xxx before update is x: -3.17875337601
y: 55.0627784729
theta: 4.6403799057
speed: 13.6258850098
id: 1
t: 32
xxx after update is x: -2.76707577705
y: 54.7975082397
theta: 4.6947145462
speed: 14.3139076233
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: -2.76707577705
y: 54.7975082397
theta: 4.6947145462
speed: 14.3139076233
id: 1
t: 33
xxx after update is x: -3.03140544891
y: 53.6953125
theta: 4.67885446548
speed: 13.7051153183
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.51111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: -3.03140544891
y: 53.6953125
theta: 4.67885446548
speed: 13.7051153183
id: 1
t: 34
xxx after update is x: -2.5699493885
y: 53.2717132568
theta: 4.78695678711
speed: 13.9668769836
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before u1

xxx before update is x: 3.1755156517
y: -46.485874176
theta: 1.47702908516
speed: 13.8661813736
id: 0
t: 30
xxx after update is x: 2.68051075935
y: -45.6316566467
theta: 1.46132493019
speed: 13.5156354904
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [0.4569879171812085, 0.3690142761500126]
222 self.state_dicts[msg.id][msg.t] is (-3.6993637084960938, 56.16638946533203, 4.724925518035889, 13.920669555664062)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:32


xxx before update is x: 2.68051075935
y: -45.6316566467
theta: 1.46132493019
speed: 13.5156354904
id: 0
t: 31
xxx after update is x: 3.06980419159
y: -45.2555084229
theta: 1.63906097412
speed: 14.0464515686
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.06980419159
y: -45.2555084229
theta: 1.63906097412
speed: 14.0464515686
id: 0
t: 32
xxx after update is x: 3.86084771156
y: -44.7839202881
theta: 1.49265301228
speed: 13.7527599335
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:33


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.46666666667






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:34


xxx before update is x: 3.86084771156
y: -44.7839202881
theta: 1.49265301228
speed: 13.7527599335
id: 0
t: 33
xxx after update is x: 3.54229140282
y: -43.849105835
theta: 1.73681569099
speed: 13.7240695953
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:35


xxx before update is x: 3.54229140282
y: -43.849105835
theta: 1.73681569099
speed: 13.7240695953
id: 0
t: 34
xxx after update is x: 3.38170146942
y: -42.984790802
theta: 1.58022880554
speed: 13.9164438248
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.38170146942
y: -42.984790802
theta: 1.58022880554
speed: 13.9164438248
id: 0
t: 35
xxx after update is x: 2.74262070656
y: -42.8925094604
theta: 1.33682346344
speed: 14.1391839981
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.74262070656
y: -42.8925094604
theta: 1.33682346344
speed: 14.1391839981
id: 0
t: 36
xxx after update is x: 3.06815838814
y: -41.7251167297
theta: 1.57258570194
speed: 14.2981958389
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:37


aaaaaa
risk is [0.4761527374386736, 0.3645929573688932]
222 self.state_dicts[msg.id][msg.t] is (-3.512006998062134, 52.5058708190918, 4.672828197479248, 13.988739013671875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:38


xxx befpdate is x: -2.5699493885
y: 53.2717132568
theta: 4.78695678711
speed: 13.9668769836
id: 1
t: 35
xxx after update is x: -3.46613669395
y: 52.3761100769
theta: 4.8086066246
speed: 13.8815355301
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:36


aaaaaa
aaaaaabbbbb
risk is [0.35643483997271724, 0]
222 self.state_dicts[msg.id][msg.t] is (2.7426207065582275, -42.89250946044922, 1.3368234634399414, 14.13918399810791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37


xxx before update is x: -3.46613669395
y: 52.3761100769
theta: 4.8086066246
speed: 13.8815355301
id: 1
t: 36
xxx after update is x: -3.51200699806
y: 52.5058708191
theta: 4.67282819748
speed: 13.9887390137
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38


xxx before update is x: -3.51200699806
y: 52.5058708191
theta: 4.67282819748
speed: 13.9887390137
id: 1
t: 37
xxx after update is x: -3.37139821053
y: 51.7451629639
theta: 4.66956853867
speed: 13.676897049
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: -3.37139821053
y: 51.7451629639
theta: 4.66956853867
speed: 13.676897049
id: 1
t: 38
xxx after update is x: -3.54748439789
y: 50.6210098267
theta: 4.57259511948
speed: 14.290514946
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: -3.54748439789
y: 50.6210098267
theta: 4.57259511948
speed: 14.290514946
id: 1
t: 39
xxx after update is x: -3.63456654549
y: 49.9298171997
theta: 4.74294614792
speed: 13.9939899445
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32387909757121175, 0]
222 self.state_dicts[msg.id][msg.t] is (3.275083303451538, -40.330684661865234, 1.442763090133667, 13.759054183959961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41


xxx before update is x: -3.63456654549
y: 49.9298171997
theta: 4.74294614792
speed: 13.9939899445
id: 1
t: 40
xxx after update is x: -2.60868620872
y: 49.4552001953
theta: 4.57942342758
speed: 13.3738880157
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.82222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.60868620872
y: 49.4552001953
theta: 4.57942342758
speed: 13.3738880157
id: 1
t: 41
xxx after update is x: -2.93058276176
y: 49.3105773926
theta: 4.58573484421
speed: 14.1113872528
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py ore update is x: 3.06815838814
y: -41.7251167297
theta: 1.57258570194
speed: 14.2981958389
id: 0
t: 37
xxx after update is x: 3.52786779404
y: -41.6208496094
theta: 1.39146745205
speed: 13.5765666962
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:39


xxx before update is x: 3.52786779404
y: -41.6208496094
theta: 1.39146745205
speed: 13.5765666962
id: 0
t: 38
xxx after update is x: 2.98126482964
y: -41.181098938
theta: 1.42692005634
speed: 13.8483896255
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:40


xxx before update is x: 2.98126482964
y: -41.181098938
theta: 1.42692005634
speed: 13.8483896255
id: 0
t: 39
xxx after update is x: 3.27508330345
y: -40.3306846619
theta: 1.44276309013
speed: 13.759054184
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.27508330345
y: -40.3306846619
theta: 1.44276309013
speed: 13.759054184
id: 0
t: 40
xxx after update is x: 2.76322460175
y: -39.5541038513
theta: 1.48351621628
speed: 13.7008333206
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:41


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 1.82222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.76322460175
y: -39.5541038513
theta: 1.48351621628
speed: 13.7008333206
id: 0
t: 41
xxx after update is x: 3.23652601242
y: -39.1753883362
theta: 1.7643699646
speed: 14.1574764252
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: 3.23652601242
y: -39.1753883362
theta: 1.7643699646
speed: 14.1574764252
id: 0
t: 42
xxx after update is x: 3.01351451874
y: -37.9893760681
theta: 1.55420386791
speed: 14.1273431778
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.3582346021697668, 0.34967960723594993]
222 self.state_dicts[msg.id][msg.t] is (-3.6526706218719482, 48.654693603515625, 4.748153209686279, 14.063241004943848)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: 3.01351451874
y: -37.9893760681
theta: 1.55420386791
speed: 14.1273431778
id: 0
t: 43
xxx after update is x: 3.91147232056
y: -38.233707428
theta: 1.70256257057
speed: 14.3798189163
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.91147232056
y: -38.233707428
theta: 1.70256257057
speed: 14.3798189163
id: 0
t: 44
xxx after update is x: 3.37167072296
y: -36.894947052
theta: 1.52875816822
speed: 13.6257972717
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:45




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43


xxx before update is x: -2.93058276176
y: 49.3105773926
theta: 4.58573484421
speed: 14.1113872528
id: 1
t: 42
xxx after update is x: -3.65267062187
y: 48.6546936035
theta: 4.74815320969
speed: 14.0632410049
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44


xxx before update is x: -3.65267062187
y: 48.6546936035
theta: 4.74815320969
speed: 14.0632410049
id: 1
t: 43
xxx after update is x: -3.26284360886
y: 47.8692588806
theta: 4.67412853241
speed: 14.0118942261
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.38385469272936057, 0]
222 self.state_dicts[msg.id][msg.t] is (3.9114723205566406, -38.233707427978516, 1.7025625705718994, 14.3798189163208)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45


xxx before update is x: -3.26284360886
y: 47.8692588806
theta: 4.67412853241
speed: 14.0118942261
id: 1
t: 44
xxx after update is x: -3.93649077415
y: 47.5879974365
theta: 4.84433412552
speed: 13.8841686249
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46


xxx before update is x: -3.93649077415
y: 47.5879974365
theta: 4.84433412552
speed: 13.8841686249
id: 1
t: 45
xxx after update is x: -3.42901134491
y: 46.126914978
theta: 4.7913517952
speed: 13.8437404633
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: -3.42901134491
y: 46.126914978
theta: 4.7913517952
speed: 13.8437404633
id: 1
t: 46
xxx after update is x: -3.18764734268
y: 45.610710144
theta: 4.81393146515
speed: 13.8899583817
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.18764734268
y: 45.610710144
theta: 4.81393146515
speed: 13.8899583817
id: 1
t: 47
xxx after update is x: -3.57556295395
y: 45.5202713013
theta: 4.86590242386
speed: 13.7799978256
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48


aaaaaa
aaaaaabbbbb
risk is [0.4464726736465533, 0]
222 self.state_dicts[msg.id][msg.t] is (2.992083787918091, -35.6867790222168, 1.5182359218597412, 14.215348243713379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.57556295395
y: 45.5202713013
theta: 4.86590242386
speed: 13.7799978256
id: 1
t: 48
xxx after update is x: -3.8323431015
y: 44.5089759827
theta: 4.72680330276
speed: 13.3638124466
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.17777777778






self.maneuver_requested None


going to the uin the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.37167072296
y: -36.894947052
theta: 1.52875816822
speed: 13.6257972717
id: 0
t: 45
xxx after update is x: 2.97875618935
y: -36.8342552185
theta: 1.44720137119
speed: 13.9492235184
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:46




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:47


xxx before update is x: 2.97875618935
y: -36.8342552185
theta: 1.44720137119
speed: 13.9492235184
id: 0
t: 46
xxx after update is x: 3.3731534481
y: -35.7156829834
theta: 1.52172684669
speed: 13.678612709
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.3731534481
y: -35.7156829834
theta: 1.52172684669
speed: 13.678612709
id: 0
t: 47
xxx after update is x: 2.99208378792
y: -35.6867790222
theta: 1.51823592186
speed: 14.2153482437
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 2.99208378792
y: -35.6867790222
theta: 1.51823592186
speed: 14.2153482437
id: 0
t: 48
xxx after update is x: 3.26153635979
y: -34.374130249
theta: 1.55779767036
speed: 14.1232223511
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.17777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: 3.26153635979
y: -34.374130249
theta: 1.55779767036
speed: 14.1232223511
id: 0
t: 49
xxx after update is x: 2.88894081116
y: -34.0131988525
theta: 1.47084379196
speed: 13.7356290817
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: 2.88894081116
y: -34.0131988525
theta: 1.47084379196
speed: 13.7356290817
id: 0
t: 50
xxx after update is x: 3.70405125618
y: -32.9800338745
theta: 1.57675230503
speed: 14.056189537
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.29999950481311344, 0.4264921277188831]
222 self.state_dicts[msg.id][msg.t] is (-2.7198758125305176, 43.266632080078125, 4.788942337036133, 14.096360206604004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:52


xxx before update is x: 3.70405125618
y: -32.9800338745
theta: 1.57675230503
speed: 14.056189537
id: 0
t: 51
xxx after update is x: 3.43099689484
y: -32.9417610168
theta: 1.51915359497
speed: 13.5699300766
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: 3.43099689484
y: -32.9417610168
theta: 1.51915359497
speed: 13.5699300766
id: 0
t: 52
xxx after update is x: 3.42662072182
y: -32.496471405
theta: 1.6819177pdate function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50


xxx before update is x: -3.8323431015
y: 44.5089759827
theta: 4.72680330276
speed: 13.3638124466
id: 1
t: 49
xxx after update is x: -3.53079986572
y: 44.7331886292
theta: 4.76598548889
speed: 13.5601854324
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51


xxx before update is x: -3.53079986572
y: 44.7331886292
theta: 4.76598548889
speed: 13.5601854324
id: 1
t: 50
xxx after update is x: -2.71987581253
y: 43.2666320801
theta: 4.78894233704
speed: 14.0963602066
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.71987581253
y: 43.2666320801
theta: 4.78894233704
speed: 14.0963602066
id: 1
t: 51
xxx after update is x: -2.93168520927
y: 42.9007835388
theta: 4.6184835434
speed: 13.4412384033
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:52


aaaaaa
aaaaaabbbbb
risk is [0.31815736131272593, 0]
222 self.state_dicts[msg.id][msg.t] is (3.430996894836426, -32.9417610168457, 1.5191535949707031, 13.569930076599121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53


xxx before update is x: -2.93168520927
y: 42.9007835388
theta: 4.6184835434
speed: 13.4412384033
id: 1
t: 52
xxx after update is x: -3.42720079422
y: 42.0596733093
theta: 4.70581912994
speed: 14.1069135666
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.42720079422
y: 42.0596733093
theta: 4.70581912994
speed: 14.1069135666
id: 1
t: 53
xxx after update is x: -2.854139328
y: 41.3760719299
theta: 4.51920509338
speed: 13.9257364273
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:54




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55


xxx before update is x: -2.854139328
y: 41.3760719299
theta: 4.51920509338
speed: 13.9257364273
id: 1
t: 54
xxx after update is x: -3.27216529846
y: 41.5715637207
theta: 4.80601215363
speed: 13.7299194336
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.27216529846
y: 41.5715637207
theta: 4.80601215363
speed: 13.7299194336
id: 1
t: 55
xxx after update is x: -2.85113048553
y: 40.6134262085
theta: 4.62272453308
speed: 13.9259109497
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:56




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.85113048553
y: 40.6134262085
theta: 4.62272453308
speed: 13.9259109497
id: 1
t: 56
xxx after update is x: -3.27929282188
y: 39.2905578613
theta: 4.76040792465
speed: 13.9708204269
id: 1
t: 57
maneuver_negotiatir.py f866
speed: 13.6875658035
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:54


xxx before update is x: 3.42662072182
y: -32.496471405
theta: 1.6819177866
speed: 13.6875658035
id: 0
t: 53
xxx after update is x: 3.58300709724
y: -32.0024757385
theta: 1.63243055344
speed: 13.9421129227
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.58300709724
y: -32.0024757385
theta: 1.63243055344
speed: 13.9421129227
id: 0
t: 54
xxx after update is x: 3.45078063011
y: -31.1545124054
theta: 1.43537557125
speed: 13.8327035904
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:55




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:56


xxx before update is x: 3.45078063011
y: -31.1545124054
theta: 1.43537557125
speed: 13.8327035904
id: 0
t: 55
xxx after update is x: 3.86293196678
y: -30.3741931915
theta: 1.5291121006
speed: 13.5155029297
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.48888888889






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:57


xxx before update is x: 3.86293196678
y: -30.3741931915
theta: 1.5291121006
speed: 13.5155029297
id: 0
t: 56
xxx after update is x: 2.83756995201
y: -29.5425453186
theta: 1.46594452858
speed: 13.7112979889
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.3039270680658361, 0.3779366201041627]
222 self.state_dicts[msg.id][msg.t] is (-3.2792928218841553, 39.290557861328125, 4.7604079246521, 13.970820426940918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: 2.83756995201
y: -29.5425453186
theta: 1.46594452858
speed: 13.7112979889
id: 0
t: 57
xxx after update is x: 3.58885979652
y: -29.3279514313
theta: 1.60650908947
speed: 14.3332643509
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:59


xxx before update is x: 3.58885979652
y: -29.3279514313
theta: 1.60650908947
speed: 14.3332643509
id: 0
t: 58
xxx after update is x: 3.43078351021
y: -28.8051605225
theta: 1.44346797466
speed: 13.7745084763
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.43078351021
y: -28.8051605225
theta: 1.44346797466
speed: 13.7745084763
id: 0
t: 59
xxx after update is x: 3.08266568184
y: -28.1154537201
theta: 1.36193883419
speed: 14.1467552185
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:60




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: 3.0826656inish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:57


aaaaaa
aaaaaabbbbb
risk is [0.4689375533386204, 0]
222 self.state_dicts[msg.id][msg.t] is (2.8375699520111084, -29.542545318603516, 1.465944528579712, 13.711297988891602)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.53333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58


xxx before update is x: -3.27929282188
y: 39.2905578613
theta: 4.76040792465
speed: 13.9708204269
id: 1
t: 57
xxx after update is x: -3.24873971939
y: 38.8464927673
theta: 4.66469478607
speed: 13.7918157578
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.24873971939
y: 38.8464927673
theta: 4.66469478607
speed: 13.7918157578
id: 1
t: 58
xxx after update is x: -3.27695131302
y: 38.7908248901
theta: 4.92987918854
speed: 13.8572225571
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:59




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60


xxx before update is x: -3.27695131302
y: 38.7908248901
theta: 4.92987918854
speed: 13.8572225571
id: 1
t: 59
xxx after update is x: -3.07605433464
y: 37.9727058411
theta: 4.89147663116
speed: 14.0587482452
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61


xxx before update is x: -3.07605433464
y: 37.9727058411
theta: 4.89147663116
speed: 14.0587482452
id: 1
t: 60
xxx after update is x: -3.23867487907
y: 37.6763687134
theta: 4.67363643646
speed: 13.5899372101
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: -3.23867487907
y: 37.6763687134
theta: 4.67363643646
speed: 13.5899372101
id: 1
t: 61
xxx after update is x: -3.06438112259
y: 37.2732391357
theta: 4.76556110382
speed: 14.0910587311
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06438112259
y: 37.2732391357
theta: 4.76556110382
speed: 14.0910587311
id: 1
t: 62
xxx after update is x: -3.29771304131
y: 35.8611488342
theta: 4.74277210236
speed: 14.1209583282
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:63


aaaaaa
aaaaaabbbbb
risk is [0.3552217244506127, 0]
222 self.state_dicts[msg.id][msg.t] is (3.435189723968506, -25.816082000732422, 1.4603626728057861, 13.577031135559082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: -3.29771304131
y: 35.8611488342
theta: 4.7428184
y: -28.1154537201
theta: 1.36193883419
speed: 14.1467552185
id: 0
t: 60
xxx after update is x: 3.57417225838
y: -27.4388389587
theta: 1.59041416645
speed: 13.7877922058
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:62


xxx before update is x: 3.57417225838
y: -27.4388389587
theta: 1.59041416645
speed: 13.7877922058
id: 0
t: 61
xxx after update is x: 3.10827040672
y: -26.635679245
theta: 1.65397906303
speed: 13.8837862015
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:63


xxx before update is x: 3.10827040672
y: -26.635679245
theta: 1.65397906303
speed: 13.8837862015
id: 0
t: 62
xxx after update is x: 3.43518972397
y: -25.8160820007
theta: 1.46036267281
speed: 13.5770311356
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:64


xxx before update is x: 3.43518972397
y: -25.8160820007
theta: 1.46036267281
speed: 13.5770311356
id: 0
t: 63
xxx after update is x: 3.15312981606
y: -24.9820671082
theta: 1.62802708149
speed: 13.1768865585
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.84444444444






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:65


xxx before update is x: 3.15312981606
y: -24.9820671082
theta: 1.62802708149
speed: 13.1768865585
id: 0
t: 64
xxx after update is x: 3.36722040176
y: -24.9589595795
theta: 1.65588998795
speed: 13.2895898819
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: 3.36722040176
y: -24.9589595795
theta: 1.65588998795
speed: 13.2895898819
id: 0
t: 65
xxx after update is x: 3.54453969002
y: -24.2121372223
theta: 1.46173036098
speed: 12.9934825897
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.36921129503054345, 0.3330227935463939]
222 self.state_dicts[msg.id][msg.t] is (-3.7302141189575195, 33.97686767578125, 4.923959732055664, 14.204554557800293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: 3.54453969002
y: -24.2121372223
theta: 1.46173036098
speed: 12.9934825897
id: 0
t: 66
xxx after update is x: 2.6833384037
y: -24.0023460388
theta: 1.48867273331
speed: 13.0765352249
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.6833384037
y: -24.0023460388
theta: 1.48867273331
speed: 13.0765352249
id: 0
t: 67
xxx after update is x: 3.04302740097
y: -23.1261405945
theta: 1.54305362701
speed: 12.2812404633
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:68




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.0477210236
speed: 14.1209583282
id: 1
t: 63
xxx after update is x: -2.75850248337
y: 35.3044281006
theta: 4.78871107101
speed: 13.6082134247
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.75850248337
y: 35.3044281006
theta: 4.78871107101
speed: 13.6082134247
id: 1
t: 64
xxx after update is x: -3.32366156578
y: 35.0399856567
theta: 4.82855272293
speed: 14.086473465
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:65


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 2.88888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66


xxx before update is x: -3.32366156578
y: 35.0399856567
theta: 4.82855272293
speed: 14.086473465
id: 1
t: 65
xxx after update is x: -3.73021411896
y: 33.9768676758
theta: 4.92395973206
speed: 14.2045545578
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67


xxx before update is x: -3.73021411896
y: 33.9768676758
theta: 4.92395973206
speed: 14.2045545578
id: 1
t: 66
xxx after update is x: -3.13022303581
y: 34.0349693298
theta: 4.72762346268
speed: 13.9041252136
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68


xxx before update is x: -3.13022303581
y: 34.0349693298
theta: 4.72762346268
speed: 13.9041252136
id: 1
t: 67
xxx after update is x: -3.03496408463
y: 32.7458724976
theta: 4.82083892822
speed: 13.9516029358
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.37229363146323374, 0]
222 self.state_dicts[msg.id][msg.t] is (3.043027400970459, -23.126140594482422, 1.5430536270141602, 12.281240463256836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69


xxx before update is x: -3.03496408463
y: 32.7458724976
theta: 4.82083892822
speed: 13.9516029358
id: 1
t: 68
xxx after update is x: -3.13282585144
y: 32.6720695496
theta: 4.63666200638
speed: 13.86439991
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70


xxx before update is x: -3.13282585144
y: 32.6720695496
theta: 4.63666200638
speed: 13.86439991
id: 1
t: 69
xxx after update is x: -2.82613825798
y: 31.9507331848
theta: 4.5540356636
speed: 13.8080806732
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: -2.82613825798
y: 31.9507331848
theta: 4.5540356636
speed: 13.8080806732
id: 1
t: 70
xxx after update is x: -3.59371519089
y: 30.9382610321
theta: 4.63729667664
speed: 14.0251283646
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros302740097
y: -23.1261405945
theta: 1.54305362701
speed: 12.2812404633
id: 0
t: 68
xxx after update is x: 3.53608703613
y: -22.9726066589
theta: 1.58623194695
speed: 12.3755607605
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:69




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.53608703613
y: -22.9726066589
theta: 1.58623194695
speed: 12.3755607605
id: 0
t: 69
xxx after update is x: 3.19340443611
y: -21.5059833527
theta: 1.42899978161
speed: 12.0970039368
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:70




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:71


xxx before update is x: 3.19340443611
y: -21.5059833527
theta: 1.42899978161
speed: 12.0970039368
id: 0
t: 70
xxx after update is x: 3.40420722961
y: -21.4324607849
theta: 1.51712453365
speed: 11.7236566544
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: 3.40420722961
y: -21.4324607849
theta: 1.51712453365
speed: 11.7236566544
id: 0
t: 71
xxx after update is x: 3.45937514305
y: -21.0857124329
theta: 1.46234095097
speed: 11.4669809341
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.2






self.maneuver_requested None
risk is [0.39963576652416255, 0.262508828828188]
222 self.state_dicts[msg.id][msg.t] is (-3.4031176567077637, 30.59684944152832, 4.749104022979736, 13.700126647949219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 3.45937514305
y: -21.0857124329
theta: 1.46234095097
speed: 11.4669809341
id: 0
t: 72
xxx after update is x: 3.08849835396
y: -20.8782100677
theta: 1.64734649658
speed: 11.2711868286
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:73




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$


maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 1
current clock is 3.24444444444
!!!!after check statue the self.tag is [3.2444444444444445, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.24444444444

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.24444444444,(3.08849835395813, -20.878210067749023, 1.6473464965820312),11,1,3.24444444444,0,left
!!!!change state to get
GET,0,3.24444444444,(3.08849835395813, -20.878210067749023, 1.6473464965820312),11,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.24444444444
self.communication_details == 0
sending GET,0,3.24444444444,(3.08849835395813, -20.878210067749023, 1.6473464965820312),11,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the up funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72


xxx before update is x: -3.59371519089
y: 30.9382610321
theta: 4.63729667664
speed: 14.0251283646
id: 1
t: 71
xxx after update is x: -3.40311765671
y: 30.5968494415
theta: 4.74910402298
speed: 13.7001266479
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.2






self.maneuver_requested None
xxx before update is x: -3.40311765671
y: 30.5968494415
theta: 4.74910402298
speed: 13.7001266479
id: 1
t: 72
xxx after update is x: -3.18144392967
y: 29.7033424377
theta: 4.83767652512
speed: 13.8668451309
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:73


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: -3.18144392967
y: 29.7033424377
theta: 4.83767652512
speed: 13.8668451309
id: 1
t: 73
xxx after update is x: -3.30566310883
y: 29.5657196045
theta: 4.77693080902
speed: 13.8085432053
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 3.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '3.24444444444', 'IntendedCourse': 'left', 'Position': ['3.08849835395813', ' -20.878210067749023', ' 1.6473464965820312'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,3.24444444444,(3.08849835395813, -20.878210067749023, 1.6473464965820312),11,1,3.24444444444,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.144197530864
sender travel direction is:  north
sender earliest entering time is:  1.90321556324
sender last entering time is:  2.2708762354
sender last leaving time is:  4.41668249106
my entering time is:  1.73648489794
my leaving time is:  4.40877226502
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.28888888889
self.communication_details == 0
sending DENY,1,3.28888888889,(-3.4031176567077637, 30.59684944152832, 4.749104022979736),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




aaaaaa
aaaaaabbbbb
risk is [0.3853700735529348, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5659728050231934, -19.682222366333008, 1.638716220855713, 11.016432762145996)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75


xxx before update is x: -3.30566310883
y: 29.5657196045
theta: 4.77693080902
speed: 13.8085432053
id: 1
t: 74
xxx after update is x: -3.16412091255
y: 28.9351844788
theta: 4.70575046539
speed: 13.5690698624
id: 1
t: 75
maneuver_negdate_agent_message self.man_init:
leave the update function 
in spin function, finish the n times spin:74


xxx before update is x: 3.08849835396
y: -20.8782100677
theta: 1.64734649658
speed: 11.2711868286
id: 0
t: 73
xxx after update is x: 3.56597280502
y: -19.6822223663
theta: 1.63871622086
speed: 11.0164327621
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion

finish try maneuver
Received -->>: 
current clock is 3.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.28888888889', 'Position': ['(-3.4031176567077637', ' 30.59684944152832', ' 4.749104022979736)'], 'Type': 'DENY'}
car 0 received DENY,1,3.28888888889,(-3.4031176567077637, 30.59684944152832, 4.749104022979736),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.2444444444444445, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.56597280502
y: -19.6822223663
theta: 1.63871622086
speed: 11.0164327621
id: 0
t: 74
xxx after update is x: 2.92006707191
y: -19.910785675
theta: 1.57214188576
speed: 11.1428003311
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:75




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: 2.92006707191
y: -19.910785675
theta: 1.57214188576
speed: 11.1428003311
id: 0
t: 75
xxx after update is x: 2.64531564713
y: -18.5512599945
theta: 1.56350266933
speed: 10.6305179596
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: 2.64531564713
y: -18.5512599945
theta: 1.56350266933
speed: 10.6305179596
id: 0
t: 76
xxx after update is x: 3.23732852936
y: -18.1736984253
theta: 1.73207819462
speed: 10.2482089996
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.1770802371282455, 0.42563967205016573]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: 3.23732852936
y: -18.1736984253
theta: 1.73207819462
speed: 10.2482089996
id: 0
t: 77
xxx after update is x: 2.93900775909
y: -17.6239643097
theta: 1.50358521938
speed: 9.87850379944
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.453669309616089, 27.039762496948242, 4.6070942878723145, 13.994589805603027)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: 2.9390077otiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76


xxx before update is x: -3.16412091255
y: 28.9351844788
theta: 4.70575046539
speed: 13.5690698624
id: 1
t: 75
xxx after update is x: -2.92711877823
y: 28.7536277771
theta: 4.50218391418
speed: 13.8403234482
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77


xxx before update is x: -2.92711877823
y: 28.7536277771
theta: 4.50218391418
speed: 13.8403234482
id: 1
t: 76
xxx after update is x: -2.96918487549
y: 28.2684459686
theta: 4.87216806412
speed: 14.2088460922
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.09814637745579381, 0]
222 self.state_dicts[msg.id][msg.t] is (3.23732852935791, -18.17369842529297, 1.732078194618225, 10.248208999633789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78


xxx before update is x: -2.96918487549
y: 28.2684459686
theta: 4.87216806412
speed: 14.2088460922
id: 1
t: 77
xxx after update is x: -3.45366930962
y: 27.0397624969
theta: 4.60709428787
speed: 13.9945898056
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79


xxx before update is x: -3.45366930962
y: 27.0397624969
theta: 4.60709428787
speed: 13.9945898056
id: 1
t: 78
xxx after update is x: -3.30466413498
y: 25.9808673859
theta: 4.59106016159
speed: 13.9504556656
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: -3.30466413498
y: 25.9808673859
theta: 4.59106016159
speed: 13.9504556656
id: 1
t: 79
xxx after update is x: -3.17573404312
y: 25.5709285736
theta: 4.46502876282
speed: 14.0452899933
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 3.55555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.55555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '3.55555555556', 'Position': ['(2.887273073196411', ' -17.252960205078125', ' 1.5620145797729492)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.55555555556,(2.887273073196411, -17.252960205078125, 1.5620145797729492),9,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: -3.17573404312
y: 25.5709285736
theta: 4.46502876282
speed: 14.0452899933
id: 1
t: 80
xxx after update is x: -2.89670300484
y: 24.6485996246
theta: 4.78058815002
speed: 13.9373636246
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is5909
y: -17.6239643097
theta: 1.50358521938
speed: 9.87850379944
id: 0
t: 78
xxx after update is x: 3.49891090393
y: -17.343120575
theta: 1.21900713444
speed: 10.0669155121
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80


xxx before update is x: 3.49891090393
y: -17.343120575
theta: 1.21900713444
speed: 10.0669155121
id: 0
t: 79
xxx after update is x: 2.8872730732
y: -17.2529602051
theta: 1.56201457977
speed: 9.51681900024
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.55555555556






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.511111111111111, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 3.55555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.51111111111
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,3.55555555556,(2.887273073196411, -17.252960205078125, 1.5620145797729492),9,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 3.55555555556
self.communication_details == 0
sending RELEASE,0,3.55555555556,(2.887273073196411, -17.252960205078125, 1.5620145797729492),9,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81


xxx before update is x: 2.8872730732
y: -17.2529602051
theta: 1.56201457977
speed: 9.51681900024
id: 0
t: 80
xxx after update is x: 2.90268206596
y: -16.6141395569
theta: 1.46606016159
speed: 9.80041980743
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: 2.90268206596
y: -16.6141395569
theta: 1.46606016159
speed: 9.80041980743
id: 0
t: 81
xxx after update is x: 3.52866077423
y: -16.7165126801
theta: 1.58830595016
speed: 9.82601356506
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: 3.52866077423
y: -16.7165126801
theta: 1.58830595016
speed: 9.82601356506
id: 0
t: 82
xxx after update is x: 3.1119863987
y: -16.1885852814
theta: 1.64357423782
speed: 9.18251514435
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: 3.1119863987
y: -16.1885852814
theta: 1.64357423782
speed: 9.18251514435
id: 0
t: 83
xxx after update is x: 3.28744983673
y: -15.4298400879
theta: 1.47125244141
speed: 9.16898155212
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.11669635993803124, 0.405611165064902]
222 self.state_dicts[msg.id][msg.t] is (-2.745617628097534, 23.54629135131836, 4.697779655456543, 13.638309478759766)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.p 3.6






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82


xxx before update is x: -2.89670300484
y: 24.6485996246
theta: 4.78058815002
speed: 13.9373636246
id: 1
t: 81
xxx after update is x: -3.34459710121
y: 24.4224758148
theta: 4.79397296906
speed: 13.7681951523
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.1324887639324235, 0]
222 self.state_dicts[msg.id][msg.t] is (3.528660774230957, -16.71651268005371, 1.588305950164795, 9.826013565063477)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83


xxx before update is x: -3.34459710121
y: 24.4224758148
theta: 4.79397296906
speed: 13.7681951523
id: 1
t: 82
xxx after update is x: -3.91324925423
y: 24.1010627747
theta: 4.69084644318
speed: 13.9569377899
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84


xxx before update is x: -3.91324925423
y: 24.1010627747
theta: 4.69084644318
speed: 13.9569377899
id: 1
t: 83
xxx after update is x: -2.7456176281
y: 23.5462913513
theta: 4.69777965546
speed: 13.6383094788
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.7456176281
y: 23.5462913513
theta: 4.69777965546
speed: 13.6383094788
id: 1
t: 84
xxx after update is x: -3.73339533806
y: 22.2028236389
theta: 4.75754642487
speed: 13.8123626709
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: -3.73339533806
y: 22.2028236389
theta: 4.75754642487
speed: 13.8123626709
id: 1
t: 85
xxx after update is x: -3.59920763969
y: 21.9805259705
theta: 4.70980215073
speed: 13.9400939941
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.39243488738329185, 0]
222 self.state_dicts[msg.id][msg.t] is (3.242166757583618, -15.100180625915527, 1.6593674421310425, 8.344449043273926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.59920763969
y: 21.9805259705
theta: 4.70980215073
speed: 13.9400939941
id: 1
t: 86
xxx after update is x: -3.0757420063
y: 21.7278785706
theta: 4.69811534882
speed: 13.587934494
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: -3.0757420063
y: 21.7278785706
theta: 4.69811534882
speed: 13.587934494
id: 1
t: 87
xxx after update is x: -2.7387638092
y: 21.0645961761
theta: 4.54547595978
speed: 14.0668115616
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
Recy in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.28744983673
y: -15.4298400879
theta: 1.47125244141
speed: 9.16898155212
id: 0
t: 84
xxx after update is x: 3.40259051323
y: -15.0539178848
theta: 1.60866522789
speed: 8.93351745605
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86


xxx before update is x: 3.40259051323
y: -15.0539178848
theta: 1.60866522789
speed: 8.93351745605
id: 0
t: 85
xxx after update is x: 3.24216675758
y: -15.1001806259
theta: 1.65936744213
speed: 8.34444904327
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.24216675758
y: -15.1001806259
theta: 1.65936744213
speed: 8.34444904327
id: 0
t: 86
xxx after update is x: 3.29202818871
y: -14.3151769638
theta: 1.582239151
speed: 7.91167211533
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88


xxx before update is x: 3.29202818871
y: -14.3151769638
theta: 1.582239151
speed: 7.91167211533
id: 0
t: 87
xxx after update is x: 3.31184768677
y: -13.7553663254
theta: 1.59101581573
speed: 8.24457359314
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 3.91111111111

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [3.8666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.91111111111,(3.311847686767578, -13.755366325378418, 1.5910158157348633),8,1,3.24444444444,0,left
!!!!change state to get
GET,0,3.91111111111,(3.311847686767578, -13.755366325378418, 1.5910158157348633),8,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 3.91111111111
self.communication_details == 0
sending GET,0,3.91111111111,(3.311847686767578, -13.755366325378418, 1.5910158157348633),8,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.91111111111






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
finish try maneuver
Received -->>: 
current clock is 3.91111111111




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 3.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.91111111111', 'Position': ['(-2.896703004837036', ' 24.64859962463379', ' 4.780588150024414)'], 'Type': 'DENY'}
car 0 received DENY,1,3.91111111111,(-2.896703004837036, 24.64859962463379, 4.780588150024414),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membershieived -->>: 
current clock is 3.91111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 3.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '3.91111111111', 'IntendedCourse': 'left', 'Position': ['3.311847686767578', ' -13.755366325378418', ' 1.5910158157348633'], 'TagID': '0', 'Type': 'GET', 'Velocity': '8'}
car 1 received GET,0,3.91111111111,(3.311847686767578, -13.755366325378418, 1.5910158157348633),8,1,3.24444444444,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.173827160494
sender travel direction is:  north
sender earliest entering time is:  1.20008908181
sender last entering time is:  2.17382716049
sender last leaving time is:  4.54712541692
my entering time is:  1.15047808518
my leaving time is:  3.20712900986
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 3.91111111111
self.communication_details == 0
sending DENY,1,3.91111111111,(-2.896703004837036, 24.64859962463379, 4.780588150024414),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 3.91111111111






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: -2.7387638092
y: 21.0645961761
theta: 4.54547595978
speed: 14.0668115616
id: 1
t: 88
xxx after update is x: -3.28345417976
y: 19.9824504852
theta: 4.92231845856
speed: 13.745839119
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: -3.28345417976
y: 19.9824504852
theta: 4.92231845856
speed: 13.745839119
id: 1
t: 89
xxx after update is x: -2.93863081932
y: 19.3828334808
theta: 4.71843147278
speed: 13.7317657471
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3527027751671821, 0]
222 self.state_dicts[msg.id][msg.t] is (3.5355277061462402, -13.075396537780762, 1.5908583402633667, 7.679336071014404)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: -2.93863081932
y: 19.3828334808
theta: 4.71843147278
speed: 13.7317657471
id: 1
t: 90
xxx after update is x: -3.26763153076
y: 18.6281051636
theta: 4.66976881027
speed: 13.7406101227
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: -3.26763153076
y: 18.6281051636
theta: 4.66976881027
speed: 13.7406101227
id: 1
t: 91
xxx after update is x: -3.59343886375
y: 18.0597782135
theta: 4.73430871964
speed: 13.9806404114
id: 1
t: 92
maneuver_negotiatp is [3.8666666666666667, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.8666666666666667, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89


xxx before update is x: 3.31184768677
y: -13.7553663254
theta: 1.59101581573
speed: 8.24457359314
id: 0
t: 88
xxx after update is x: 3.35297060013
y: -13.7028856277
theta: 1.55695164204
speed: 8.1683177948
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90


xxx before update is x: 3.35297060013
y: -13.7028856277
theta: 1.55695164204
speed: 8.1683177948
id: 0
t: 89
xxx after update is x: 3.53552770615
y: -13.0753965378
theta: 1.59085834026
speed: 7.67933607101
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91


xxx before update is x: 3.53552770615
y: -13.0753965378
theta: 1.59085834026
speed: 7.67933607101
id: 0
t: 90
xxx after update is x: 2.87733125687
y: -12.6968202591
theta: 1.49707913399
speed: 7.51687955856
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92


xxx before update is x: 2.87733125687
y: -12.6968202591
theta: 1.49707913399
speed: 7.51687955856
id: 0
t: 91
xxx after update is x: 3.42996549606
y: -12.1299648285
theta: 1.56246232986
speed: 7.11704826355
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.2615334586308604, 0.4239659871555387]
222 self.state_dicts[msg.id][msg.t] is (-3.5934388637542725, 18.059778213500977, 4.73430871963501, 13.980640411376953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93


xxx before update is x: 3.42996549606
y: -12.1299648285
theta: 1.56246232986
speed: 7.11704826355
id: 0
t: 92
xxx after update is x: 2.90807366371
y: -11.9669742584
theta: 1.52681791782
speed: 6.84227180481
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.90807366371
y: -11.9669742584
theta: 1.52681791782
speed: 6.84227180481
id: 0
t: 93
xxx after update is x: 2.99727034569
y: -11.8299217224
theta: 1.36541330814
speed: 6.70949649811
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.99727034569
y: -11.8299217224
theta: 1.36541330814
speed: 6.70949649811
id: 0
t: 94
xxx after update is x: 2.57455635071
y: -11.9705924988
theta: 1.50525939465
speed: 6.63292789459
id: 0
t: 95
maneuver_negotiatir.py finish the updir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.59343886375
y: 18.0597782135
theta: 4.73430871964
speed: 13.9806404114
id: 1
t: 92
xxx after update is x: -2.9250869751
y: 17.7247657776
theta: 4.61691570282
speed: 13.4557256699
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.9250869751
y: 17.7247657776
theta: 4.61691570282
speed: 13.4557256699
id: 1
t: 93
xxx after update is x: -3.0970056057
y: 17.4657344818
theta: 4.65211582184
speed: 13.9838581085
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94


aaaaaa
aaaaaabbbbb
risk is [0.4257145923631691, 0]
222 self.state_dicts[msg.id][msg.t] is (2.997270345687866, -11.82992172241211, 1.3654133081436157, 6.70949649810791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95


xxx before update is x: -3.0970056057
y: 17.4657344818
theta: 4.65211582184
speed: 13.9838581085
id: 1
t: 94
xxx after update is x: -2.97853398323
y: 16.2776927948
theta: 4.641477108
speed: 14.1832208633
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: -2.97853398323
y: 16.2776927948
theta: 4.641477108
speed: 14.1832208633
id: 1
t: 95
xxx after update is x: -2.91206240654
y: 15.7270936966
theta: 4.7155714035
speed: 13.8842420578
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 4.26666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.26666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '6', 'Sender': '0', 'TagID': '1', 'Time': '4.26666666667', 'Position': ['(3.380535364151001', ' -11.479568481445312', ' 1.477094292640686)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.26666666667,(3.380535364151001, -11.479568481445312, 1.477094292640686),6,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.26666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: -2.91206240654
y: 15.7270936966
theta: 4.7155714035
speed: 13.8842420578
id: 1
t: 96
xxx after update is x: -3.10611200333
y: 14.9698581696
theta: 4.68554973602
speed: 14.1867818832
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.10611200333
y: 14.9698581696
theta: 4.68554973602
speed: 14.1867818832
id: 1
t: 97
xxx after update is x: -3.23359584808
y: 14.7227334976
theta: 4.6012468338
speed: 13.9707326889
id: 1
t: 98
maneuver_negotiatir.py finish the update agate agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96


xxx before update is x: 2.57455635071
y: -11.9705924988
theta: 1.50525939465
speed: 6.63292789459
id: 0
t: 95
xxx after update is x: 3.38053536415
y: -11.4795684814
theta: 1.47709429264
speed: 6.21327877045
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.26666666667






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.177777777777778, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.26666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.17777777778
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.26666666667,(3.380535364151001, -11.479568481445312, 1.477094292640686),6,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.26666666667
self.communication_details == 0
sending RELEASE,0,4.26666666667,(3.380535364151001, -11.479568481445312, 1.477094292640686),6,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97


xxx before update is x: 3.38053536415
y: -11.4795684814
theta: 1.47709429264
speed: 6.21327877045
id: 0
t: 96
xxx after update is x: 3.16950559616
y: -11.551486969
theta: 1.45758140087
speed: 6.35071849823
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.16950559616
y: -11.551486969
theta: 1.45758140087
speed: 6.35071849823
id: 0
t: 97
xxx after update is x: 3.25142455101
y: -10.581278801
theta: 1.52058970928
speed: 5.65392160416
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:98




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: 3.25142455101
y: -10.581278801
theta: 1.52058970928
speed: 5.65392160416
id: 0
t: 98
xxx after update is x: 2.91995072365
y: -10.5317363739
theta: 1.65168821812
speed: 5.64514064789
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.33111713473384036, 0.03374686579402898]
222 self.state_dicts[msg.id][msg.t] is (-3.4869024753570557, 14.077982902526855, 4.795574188232422, 13.764288902282715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.91995072365
y: -10.5317363739
theta: 1.65168821812
speed: 5.64514064789
id: 0
t: 99
xxx after update is x: 3.01569104195
y: -10.2530889511
theta: 1.58138930798
speed: 5.14224004745
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:100




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spinent state from ros funtion
leave the update function 
in spin function, finish the n times spin:98




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99


xxx before update is x: -3.23359584808
y: 14.7227334976
theta: 4.6012468338
speed: 13.9707326889
id: 1
t: 98
xxx after update is x: -3.48690247536
y: 14.0779829025
theta: 4.79557418823
speed: 13.7642889023
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3826868608200601, 0]
222 self.state_dicts[msg.id][msg.t] is (2.9199507236480713, -10.531736373901367, 1.6516882181167603, 5.645140647888184)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.48690247536
y: 14.0779829025
theta: 4.79557418823
speed: 13.7642889023
id: 1
t: 99
xxx after update is x: -3.58763432503
y: 12.8205852509
theta: 4.59187650681
speed: 13.686085701
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:100




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101


xxx before update is x: -3.58763432503
y: 12.8205852509
theta: 4.59187650681
speed: 13.686085701
id: 1
t: 100
xxx after update is x: -3.27312541008
y: 12.242102623
theta: 4.71962833405
speed: 14.3795032501
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: -3.27312541008
y: 12.242102623
theta: 4.71962833405
speed: 14.3795032501
id: 1
t: 101
xxx after update is x: -3.36015248299
y: 11.8757867813
theta: 4.64287567139
speed: 13.9836626053
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: -3.36015248299
y: 11.8757867813
theta: 4.64287567139
speed: 13.9836626053
id: 1
t: 102
xxx after update is x: -2.53798699379
y: 11.7061824799
theta: 4.83870458603
speed: 13.9743337631
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.39742931503225337, 0]
222 self.state_dicts[msg.id][msg.t] is (3.2208468914031982, -9.09749698638916, 1.5535129308700562, 4.682509422302246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 4.57777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '4.57777777778', 'IntendedCourse': 'left', 'Position': ['3.2208468914031982', ' -9.09749698638916', ' 1.5535129308700562'], 'TagID': '0', 'Type': 'GET', 'Velocity': '4'}
car 1 received GET,0,4.57777777778,(3.2208468914031982, -9.09749698638916, 1.5535129308700562),4,1,3.24444444444,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.203456790124
sender travel direction is:  north
sender earliest ente:101

xxx before update is x: 3.01569104195
y: -10.2530889511
theta: 1.58138930798
speed: 5.14224004745
id: 0
t: 100
xxx after update is x: 3.12691140175
y: -10.5237474442
theta: 1.53761768341
speed: 5.03381729126
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102


xxx before update is x: 3.12691140175
y: -10.5237474442
theta: 1.53761768341
speed: 5.03381729126
id: 0
t: 101
xxx after update is x: 3.76196622849
y: -9.72070789337
theta: 1.58418238163
speed: 4.58641624451
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103


xxx before update is x: 3.76196622849
y: -9.72070789337
theta: 1.58418238163
speed: 4.58641624451
id: 0
t: 102
xxx after update is x: 3.2208468914
y: -9.09749698639
theta: 1.55351293087
speed: 4.6825094223
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 4.57777777778

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.533333333333333, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.57777777778,(3.2208468914031982, -9.09749698638916, 1.5535129308700562),4,1,3.24444444444,0,left
!!!!change state to get
GET,0,4.57777777778,(3.2208468914031982, -9.09749698638916, 1.5535129308700562),4,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 4.57777777778
self.communication_details == 0
sending GET,0,4.57777777778,(3.2208468914031982, -9.09749698638916, 1.5535129308700562),4,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: 3.2208468914
y: -9.09749698639
theta: 1.55351293087
speed: 4.6825094223
id: 0
t: 103
xxx after update is x: 3.49427127838
y: -9.5493183136
theta: 1.66991114616
speed: 4.2223367691
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.62222222222






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
finish try maneuver
Received -->>: 
current clock is 4.62222222222




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 4.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.57777777778', 'Position': ['(-2.912062406539917', ' 15.727093696594238', ' 4.715571403503418)'], 'Type': 'DENY'}
car 0 received DENY,1,4.57777777778,(-2.912062406539917, 15.727093696594238, 4.715571403503418),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.5777777777777775, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py mering time is: 

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104


xxx before update is x: -2.53798699379
y: 11.7061824799
theta: 4.83870458603
speed: 13.9743337631
id: 1
t: 103
xxx after update is x: -3.3125770092
y: 11.0231018066
theta: 4.67606019974
speed: 13.8247947693
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
 0.530041213351
sender last entering time is:  2.20345679012
sender last leaving time is:  4.57675504655
my entering time is:  0.509857484229
my leaving time is:  1.89625817833
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 4.62222222222
self.communication_details == 0
sending DENY,1,4.57777777778,(-2.912062406539917, 15.727093696594238, 4.715571403503418),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.62222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.3125770092
y: 11.0231018066
theta: 4.67606019974
speed: 13.8247947693
id: 1
t: 104
xxx after update is x: -3.34959721565
y: 10.0630044937
theta: 4.58555269241
speed: 13.7786016464
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34959721565
y: 10.0630044937
theta: 4.58555269241
speed: 13.7786016464
id: 1
t: 105
xxx after update is x: -3.04824852943
y: 9.52305984497
theta: 4.75969648361
speed: 14.1985359192
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.04824852943
y: 9.52305984497
theta: 4.75969648361
speed: 14.1985359192
id: 1
t: 106
xxx after update is x: -3.47315263748
y: 9.04287528992
theta: 4.89644575119
speed: 14.0237922668
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: -3.47315263748
y: 9.04287528992
theta: 4.89644575119
speed: 14.0237922668
id: 1
t: 107
xxx after update is x: -4.00047779083
y: 8.19978713989
theta: 4.66698455811
speed: 13.9770832062
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6548913011803107, 0]
222 self.state_dicts[msg.id][msg.t] is (3.141645669937134, -8.561190605163574, 1.6823979616165161, 3.475905179977417)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: -4.00047779083
y: 8.19978713989
theta: 4.66698455811
speed: 13.9770832062
id: 1
t: 108
xxx after update is x: -3.32133769989
y: 8.07766151428
theta: 4.8389954567
speed: 14.2909011841
id: 1
tssage_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.5777777777777775, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. sfinish
risk is [0.5196211060183796, 0.020998976848432944]
222 self.state_dicts[msg.id][msg.t] is (-3.31257700920105, 11.023101806640625, 4.676060199737549, 13.82479476928711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105


xxx before update is x: 3.49427127838
y: -9.5493183136
theta: 1.66991114616
speed: 4.2223367691
id: 0
t: 104
xxx after update is x: 3.01040935516
y: -9.21179676056
theta: 1.39391934872
speed: 4.02500677109
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:106


xxx before update is x: 3.01040935516
y: -9.21179676056
theta: 1.39391934872
speed: 4.02500677109
id: 0
t: 105
xxx after update is x: 3.10862731934
y: -9.11255836487
theta: 1.52208936214
speed: 3.88518857956
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107


xxx before update is x: 3.10862731934
y: -9.11255836487
theta: 1.52208936214
speed: 3.88518857956
id: 0
t: 106
xxx after update is x: 2.97554516792
y: -8.85804080963
theta: 1.71487975121
speed: 3.40440225601
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108


xxx before update is x: 2.97554516792
y: -8.85804080963
theta: 1.71487975121
speed: 3.40440225601
id: 0
t: 107
xxx after update is x: 3.14164566994
y: -8.56119060516
theta: 1.68239796162
speed: 3.47590517998
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109


xxx before update is x: 3.14164566994
y: -8.56119060516
theta: 1.68239796162
speed: 3.47590517998
id: 0
t: 108
xxx after update is x: 3.4106836319
y: -8.79703807831
theta: 1.57270181179
speed: 3.48976993561
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6295049214372641, 0.010184399146326921]
222 self.state_dicts[msg.id][msg.t] is (-3.3213376998901367, 8.077661514282227, 4.838995456695557, 14.290901184082031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.4106836319
y: -8.79703807831
theta: 1.57270181179
speed: 3.48976993561
id: 0
t: 109
xxx after update is x: 3.93854999542
y: -8.06960868835
theta: 1.64240944386
speed: 3.29877853394
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:110




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:111


xxx bef: 109
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110


xxx before update is x: -3.32133769989
y: 8.07766151428
theta: 4.8389954567
speed: 14.2909011841
id: 1
t: 109
xxx after update is x: -3.02085280418
y: 6.94450569153
theta: 4.77999544144
speed: 13.6456031799
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111


xxx before update is x: -3.02085280418
y: 6.94450569153
theta: 4.77999544144
speed: 13.6456031799
id: 1
t: 110
xxx after update is x: -3.19265151024
y: 6.35561847687
theta: 4.6764216423
speed: 13.7844190598
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.93333333333






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112


xxx before update is x: -3.19265151024
y: 6.35561847687
theta: 4.6764216423
speed: 13.7844190598
id: 1
t: 111
xxx after update is x: -3.61860013008
y: 5.55512332916
theta: 4.56762266159
speed: 14.1999292374
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 4.97777777778




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 4.97777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '3', 'Sender': '0', 'TagID': '1', 'Time': '4.93333333333', 'Position': ['(3.110750913619995', ' -8.121105194091797', ' 1.614510178565979)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.93333333333,(3.110750913619995, -8.121105194091797, 1.614510178565979),3,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: -3.61860013008
y: 5.55512332916
theta: 4.56762266159
speed: 14.1999292374
id: 1
t: 112
xxx after update is x: -3.2910990715
y: 4.92925357819
theta: 4.78290748596
speed: 13.6415262222
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6220264838009061, 0]
222 self.state_dicts[msg.id][msg.t] is (3.1417768001556396, -7.716059684753418, 1.5107468366622925, 1.9639039039611816)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: -3.2910990715
y: 4.92925357819
theta: 4.78290748596
speed: 13.6415262222
id: 1
t: 113
xxx after update is x: -3.54602146149
y: 5.01934194565
theta: 4.71726751328
speed: 14.1044073105
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115


xxx before update is x: -3.54602146149
y: 5.01934194565
theta: 4.71726751328
speed: 14.1044073105
id: 1
t: 114
xxx after update is x: -3.23447ore update is x: 3.93854999542
y: -8.06960868835
theta: 1.64240944386
speed: 3.29877853394
id: 0
t: 110
xxx after update is x: 3.11075091362
y: -8.12110519409
theta: 1.61451017857
speed: 3.17756390572
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 4.93333333333






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [4.933333333333334, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 4.93333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.93333333333
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,4.93333333333,(3.110750913619995, -8.121105194091797, 1.614510178565979),3,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 4.93333333333
self.communication_details == 0
sending RELEASE,0,4.93333333333,(3.110750913619995, -8.121105194091797, 1.614510178565979),3,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.11075091362
y: -8.12110519409
theta: 1.61451017857
speed: 3.17756390572
id: 0
t: 111
xxx after update is x: 2.95931529999
y: -8.32267570496
theta: 1.54903650284
speed: 2.36914491653
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:112


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113


xxx before update is x: 2.95931529999
y: -8.32267570496
theta: 1.54903650284
speed: 2.36914491653
id: 0
t: 112
xxx after update is x: 3.14177680016
y: -7.71605968475
theta: 1.51074683666
speed: 1.96390390396
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114


xxx before update is x: 3.14177680016
y: -7.71605968475
theta: 1.51074683666
speed: 1.96390390396
id: 0
t: 113
xxx after update is x: 2.93260550499
y: -7.48353004456
theta: 1.62711346149
speed: 2.03956842422
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.93260550499
y: -7.48353004456
theta: 1.62711346149
speed: 2.03956842422
id: 0
t: 114
xxx after update is x: 3.28327488899
y: -7.75181674957
theta: 1.65201115608
speed: 1.97651124001
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:115


risk is [0.433203849153676, 0.04336554652547547]
222 self.state_dicts[msg.id][msg.t] is (-3.234471321105957, 3.994753122329712, 4.856048107147217, 13.666566848754883)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: 3.28327488899
y: -7.75181674957
theta: 1.65201115608
speed: 1.97651124001
id: 0
t: 115
xxx after update is x: 2.91130614281
y: -7.91536855698
theta: 1.54684269428
speed: 1.74508941174
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion


g132111
y: 3.99475312233
theta: 4.85604810715
speed: 13.6665668488
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116


xxx before update is x: -3.23447132111
y: 3.99475312233
theta: 4.85604810715
speed: 13.6665668488
id: 1
t: 115
xxx after update is x: -3.01086974144
y: 3.37844610214
theta: 4.69045829773
speed: 13.7947301865
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5521346790817928, 0]
222 self.state_dicts[msg.id][msg.t] is (2.911306142807007, -7.915368556976318, 1.5468426942825317, 1.7450894117355347)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.01086974144
y: 3.37844610214
theta: 4.69045829773
speed: 13.7947301865
id: 1
t: 116
xxx after update is x: -3.27151918411
y: 2.54780220985
theta: 4.7380194664
speed: 14.0620079041
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:117




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:118


xxx before update is x: -3.27151918411
y: 2.54780220985
theta: 4.7380194664
speed: 14.0620079041
id: 1
t: 117
xxx after update is x: -3.0942440033
y: 1.96663141251
theta: 4.72616147995
speed: 13.7964334488
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119


xxx before update is x: -3.0942440033
y: 1.96663141251
theta: 4.72616147995
speed: 13.7964334488
id: 1
t: 118
xxx after update is x: -3.32626795769
y: 0.955729603767
theta: 4.94297599792
speed: 13.60871315
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 5.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '5.28888888889', 'IntendedCourse': 'left', 'Position': ['3.5916292667388916', ' -7.746481418609619', ' 1.5450776815414429'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.235061728395
sender travel direction is:  north
sender earliest entering time is:  0.521698210494
sender last entering time is:  2.2350617284
sender last leaving time is:  4.60835998482
my entering time is:  0.235061728395
my leaving time is:  0.847429815422
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
current clock is 5.28888888889
self.communication_details == 0
sending DENY,1,5.28888888889,(-3.1926515102386475, 6.355618476867676, 4.676421642303467),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message




maneuver_negotiatir.py in the message processing function, it's a long code,oing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117


xxx before update is x: 2.91130614281
y: -7.91536855698
theta: 1.54684269428
speed: 1.74508941174
id: 0
t: 116
xxx after update is x: 2.86465835571
y: -7.26508569717
theta: 1.58087456226
speed: 0.746314823627
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118


xxx before update is x: 2.86465835571
y: -7.26508569717
theta: 1.58087456226
speed: 0.746314823627
id: 0
t: 117
xxx after update is x: 3.47579813004
y: -7.68099975586
theta: 1.6002856493
speed: 1.31231427193
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function  xxx before update is x: 3.47579813004
y: -7.68099975586
theta: 1.6002856493
speed: 1.31231427193
id: 0
t: 118
xxx after update is x: 3.59162926674
y: -7.74648141861
theta: 1.54507768154
speed: 0.637157261372
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:119


maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.28888888889

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0,left
!!!!change state to get
GET,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 5.28888888889
self.communication_details == 0
sending GET,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
current clock is 5.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '5.28888888889', 'Position': ['(-3.1926515102386475', ' 6.355618476867676', ' 4.676421642303467)'], 'Type': 'DENY'}
car 0 received DENY,1,5.28888888889,(-3.1926515102386475, 6.355618476867676, 4.676421642303467),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.2444444444444445, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.28888888889






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R res finish1



maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.28888888889






self.maneuver_requested None

maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 5.28888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '5.28888888889', 'Position': ['(3.5916292667388916', ' -7.746481418609619', ' 1.5450776815414429)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.32626795769
y: 0.955729603767
theta: 4.94297599792
speed: 13.60871315
id: 1
t: 119
xxx after update is x: -2.61560058594
y: 0.395024001598
theta: 4.74089241028
speed: 13.6184587479
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: -2.61560058594
y: 0.395024001598
theta: 4.74089241028
speed: 13.6184587479
id: 1
t: 120
xxx after update is x: -3.2805249691
y: 1.05720806122
theta: 4.67703485489
speed: 13.803021431
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5930328919724308, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3760018348693848, -7.674609184265137, 1.5634467601776123, 0.31411314010620117)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122


xxx before update is x: -3.2805249691
y: 1.05720806122
theta: 4.67703485489
speed: 13.803021431
id: 1
t: 121
xxx after update is x: -2.96097779274
y: -0.449161738157
theta: 4.71312999725
speed: 14.154299736
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123


xxx before update is x: -2.96097779274
y: -0.449161738157
theta: 4.71312999725
speed: 14.154299736
id: 1
t: 122
xxx after update is x: -3.85532283783
y: -0.583152830601
theta: 4.66661977768
speed: 14.1093235016
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.85532283783
y: -0.583152830601
theta: 4.66661977768
speed: 14.1093235016
id: 1
t: 123
xxx after update is x: -3.62493991852
y: -1.40592467785
theta: 4.83061695099
speed: 13.9893665314
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:124




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: -3.62493991852
y: -1.40592467785
theta: 4.83061695099
speed: 13.9893665314
id: 1
t: 124
xxx after update is x: -3.11610293388
y: -2.23313045502
theta: 4.56063556671
spponse set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.2444444444444445, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 5.28888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.24444444444
self.TMan is 5
self.agents_to_ask is ['1']
stopped retry timer
!!!!change state to TRYGET
RELEASE,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 5.28888888889
self.communication_details == 0
sending RELEASE,0,5.28888888889,(3.5916292667388916, -7.746481418609619, 1.5450776815414429),0,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.59162926674
y: -7.74648141861
theta: 1.54507768154
speed: 0.637157261372
id: 0
t: 119
xxx after update is x: 3.3471930027
y: -7.22882699966
theta: 1.5808596611
speed: 0.957644581795
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121


xxx before update is x: 3.3471930027
y: -7.22882699966
theta: 1.5808596611
speed: 0.957644581795
id: 0
t: 120
xxx after update is x: 3.37600183487
y: -7.67460918427
theta: 1.56344676018
speed: 0.314113140106
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122


xxx before update is x: 3.37600183487
y: -7.67460918427
theta: 1.56344676018
speed: 0.314113140106
id: 0
t: 121
xxx after update is x: 3.58485484123
y: -7.82404232025
theta: 1.5441904068
speed: 0.0482686944306
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5809413810284665, 0.04890841944828748]
222 self.state_dicts[msg.id][msg.t] is (-2.960977792739868, -0.44916173815727234, 4.713129997253418, 14.15429973602295)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.58485484123
y: -7.82404232025
theta: 1.5441904068
speed: 0.0482686944306
id: 0
t: 122
xxx after update is x: 3.14988231659
y: -7.49567937851
theta: 1.75855183601
speed: 0.394366055727
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:123




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.14988231659
y: -7.49567937851
theta: 1.75855183601
speed: 0.394366055727
id: 0
t: 123
xxx after update is x: 3.13428735733
y: -7.5363368988
theta: 1.54052710533
speed: -0.246872201562
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:124




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125


xxx before update is x: 3.13428735733
y: -7.5363368988
theta: 1.54052710533
speed: -0.246872201562
id: 0
t: 124
xxx after update is x: 3.15634250641
y: -7.43412256241
theta: 1.68298399448
speed: 0.142220512033
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: 3.15634250641
y: -7.43412256241
theta: 1.68298399448
speed: 0.142220512033
id: 0
t: 125
xxx after update is x: 3.32207393646
y: -7.6396484375
theta: 1.56711804867
speed: -0.016174511984
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: 3.32207393646
y: -7.6396484375
theta: 1.56711804867
speed: -0.016174511984
id: 0
t: 126
xxx after update is x: 3.60506987572
y: -7.21659755707
theta: 1.64906084538
speed: -0.00451500993222
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.7539325310867625, 2.6011440551496073e-05]
222 self.state_dicts[msg.id][msg.t] is (-3.486433506011963, -3.4172205924987793, 4.781413555145264, 13.992176055908203)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$

1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
current clock is 5.64444444444

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.6, True, ['1']]
maneuver_negotiatir.py get membership, in the get_MR function, finish

( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.64444444444,(3.605069875717163, -7.216597557067871, 1.649060845375061),0,1,3.24444444444,0,left
!!!!change state to get
GET,0,5.64444444444,(3.605069875717163, -7.216597557067871, 1.649060845375061),0,1,3.24444444444,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 5.64444444444
self.communication_details == 0
sending GET,0,5.64444444444,(3.605069875717163, -7.216597557067871, 1.649060845375061),0,1,3.24444444444,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.64444444444






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0


going to the update function
sim.py in the sim.py update function 
Received -->>: 
current clock is 5.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...0




current clock is 5.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '5.64444444444', 'Position': ['(-3.486433506011963', ' -3.4172205924987793', ' 4.781413555145264)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.64444444444,(-3.486433506011963, -3.4172205924987793, 4.781413555145264),13,1,0,0 from  car1
status: 2

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [5.644444444444445, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.644444444444445, True, '']
maneuver_negotiatir.py message_processing,in request processing, new R = set([])




maneuver_negotiatir.py in the message processing function, it's a long code, finish0




finish teed: 14.3876514435
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126


xxx before update is x: -3.11610293388
y: -2.23313045502
theta: 4.56063556671
speed: 14.3876514435
id: 1
t: 125
xxx after update is x: -3.08401179314
y: -3.18681168556
theta: 4.73554754257
speed: 13.6369304657
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6643397743299329, 0]
222 self.state_dicts[msg.id][msg.t] is (3.3220739364624023, -7.6396484375, 1.5671180486679077, -0.01617451198399067)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127


xxx before update is x: -3.08401179314
y: -3.18681168556
theta: 4.73554754257
speed: 13.6369304657
id: 1
t: 126
xxx after update is x: -3.48643350601
y: -3.4172205925
theta: 4.78141355515
speed: 13.9921760559
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.64444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
Received -->>: 
current clock is 5.64444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 5.64444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '3.24444444444', 'Sender': '0', 'Time': '5.64444444444', 'IntendedCourse': 'left', 'Position': ['3.605069875717163', ' -7.216597557067871', ' 1.649060845375061'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,5.64444444444,(3.605069875717163, -7.216597557067871, 1.649060845375061),0,1,3.24444444444,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.250864197531
maneuver_negotiatir.py sender travel direction is none
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.64444444444,(-3.486433506011963, -3.4172205924987793, 4.781413555145264),13,1,0,0


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128


xxx before update is x: -3.48643350601
y: -3.4172205925
theta: 4.78141355515
speed: 13.9921760559
id: 1
t: 127
xxx after update is x: -2.9656791687
y: -3.99269461632
theta: 4.74398756027
speed: 13.6575889587
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
added car with id 0 to grantlist. current grantlist:  {0: [10.377777777777778, 'left']}
maneuver_negotiatir.py start the update_agent_message
current clock is 5.68888888889
self.communication_details == 0
sending GRANT,1,5.64444444444,(-3.486433506011963, -3.4172205924987793, 4.781413555145264),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
current clock is 5.68888888889




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: -2.9656791687
y: -3.99269461632
theta: 4.743987ry maneuver
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: 3.60506987572
y: -7.21659755707
theta: 1.64906084538
speed: -0.00451500993222
id: 0
t: 127
xxx after update is x: 3.65301966667
y: -7.22001361847
theta: 1.59025597572
speed: -0.0297535937279
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:128




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129


xxx before update is x: 3.65301966667
y: -7.22001361847
theta: 1.59025597572
speed: -0.0297535937279
id: 0
t: 128
xxx after update is x: 3.24030947685
y: -7.87683057785
theta: 1.42531251907
speed: 0.0188536141068
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: 3.24030947685
y: -7.87683057785
theta: 1.42531251907
speed: 0.0188536141068
id: 0
t: 129
xxx after update is x: 3.94622659683
y: -7.13693332672
theta: 1.37521445751
speed: 0.0371934063733
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.94622659683
y: -7.13693332672
theta: 1.37521445751
speed: 0.0371934063733
id: 0
t: 130
xxx after update is x: 3.56414532661
y: -7.5775642395
theta: 1.48620128632
speed: 0.0408234186471
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:131




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.56414532661
y: -7.5775642395
theta: 1.48620128632
speed: 0.0408234186471
id: 0
t: 131
xxx after update is x: 3.56051945686
y: -7.04176712036
theta: 1.54348802567
speed: -0.292114466429
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:132




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.56051945686
y: -7.04176712036
theta: 1.54348802567
speed: -0.292114466429
id: 0
t: 132
xxx after update is x: 2.83402776718
y: -7.55377101898
theta: 1.65765523911
speed: 0.0274799037725
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:133


aaaaaa
risk is [0.5020980282570333, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.0699195861816406, -7.391861915588379, 4.688365936279297, 14.252825736999512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.83402776718
y: -7.55377101898
theta: 1.65765523911
speed: 0.0274799037725
id: 0
t: 133
xxx after update is x: 3.05083441734
y: -7.92532777786
theta: 1.49974060059
speed: -0.059507638216
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135


xxx before update is x: 3.05083441734
y: -7.92532777786
theta: 1.49974060059
speed: -0.059507638216
id: 0
t: 134
xxx after update is x: 2.67699122429
y: -7.717956027
speed: 13.6575889587
id: 1
t: 128
xxx after update is x: -4.10699796677
y: -4.43993282318
theta: 4.74625968933
speed: 13.6798372269
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130


xxx before update is x: -4.10699796677
y: -4.43993282318
theta: 4.74625968933
speed: 13.6798372269
id: 1
t: 129
xxx after update is x: -3.56357717514
y: -4.99492120743
theta: 4.74751138687
speed: 13.9313812256
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6179332535992508, 0.9994231484560983]
222 self.state_dicts[msg.id][msg.t] is (3.9462265968322754, -7.136933326721191, 1.3752144575119019, 0.037193406373262405)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131


xxx before update is x: -3.56357717514
y: -4.99492120743
theta: 4.74751138687
speed: 13.9313812256
id: 1
t: 130
xxx after update is x: -3.34169149399
y: -5.69139385223
theta: 4.63016557693
speed: 13.7744150162
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34169149399
y: -5.69139385223
theta: 4.63016557693
speed: 13.7744150162
id: 1
t: 131
xxx after update is x: -3.26912617683
y: -6.58041238785
theta: 4.69036245346
speed: 13.9404993057
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:132




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.26912617683
y: -6.58041238785
theta: 4.69036245346
speed: 13.9404993057
id: 1
t: 132
xxx after update is x: -3.06991958618
y: -7.39186191559
theta: 4.68836593628
speed: 14.252825737
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:133




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06991958618
y: -7.39186191559
theta: 4.68836593628
speed: 14.252825737
id: 1
t: 133
xxx after update is x: -3.13254404068
y: -7.72005939484
theta: 4.84044504166
speed: 13.7874536514
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:134




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 5.95555555556






self.maneuver_requested None
xxx before update is x: -3.13254404068
y: -7.72005939484
theta: 4.84044504166
speed: 13.7874536514
id: 1
t: 134
xxx after update is x: -3.07513546944
y: -8.56411266327
theta: 4.6439743042
speed: 14.1752634048
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb
risk is [0.7011930551105974, 0.9908906435375535]
222 self.state_dicts[msg.id][msg.t] is (2.6769912242889404, -7.71791410446167, 1.5591762065887451, -0.07316534966230392)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxx1410446
theta: 1.55917620659
speed: -0.0731653496623
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.0






self.maneuver_requested left
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last

maneuver_negotiatir.py get membership, in the get_MR function, start
membership is [6.0, True, []]
maneuver_negotiatir.py get membership, in the get_MR function, finish

self.agent_state[0] is 6.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 6.0
self.TMan is 5
Empty
self.agents_to_ask is []
stopped retry timer
deny not in message
maneuver_negotiatir.py in the domaneuver function - start


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.67699122429
y: -7.71791410446
theta: 1.55917620659
speed: -0.0731653496623
id: 0
t: 135
xxx after update is x: 3.02285337448
y: -7.04009866714
theta: 1.7316236496
speed: -0.308513432741
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:136


added car with id 0 to grantlist. current grantlist:  {0: [10.644444444444446, 'left']}
Doing maneuver
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.02285337448
y: -7.04009866714
theta: 1.7316236496
speed: -0.308513432741
id: 0
t: 136
xxx after update is x: 3.71151947975
y: -7.18405389786
theta: 1.60502338409
speed: -0.35523891449
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:137




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.71151947975
y: -7.18405389786
theta: 1.60502338409
speed: -0.35523891449
id: 0
t: 137
xxx after update is x: 3.29222822189
y: -8.09738445282
theta: 1.6288112402
speed: 0.460717946291
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: 3.29222822189
y: -8.09738445282
theta: 1.6288112402
speed: 0.460717946291
id: 0
t: 138
xxx after update is x: 3.07644557953
y: -7.12415838242
theta: 1.60593926907
speed: 0.154612466693
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.44689988396432817, 0.9983641798925285]
222 self.state_dicts[msg.id][msg.t] is (-3.2103734016418457, -11.111075401306152, 4.848785877227783, 13.940722465515137)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: 3.07644557953
y: -7.12415838242
theta: 1.60593926907
speed: 0.154612466693
id: 0
t: 139
xxx after update is x: 3.24480843544
y: -7.48606014252
theta: 1.73592674732
speed: 1.36729049683
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: 3.24480843544
y: -7.48606014252
theta: 1.73592674732
speed: 1.36729049683
id: 0
t: 140
xxx after update is x: 3.213xxxxxx
(self.id == 1):
xxx before update is x: -3.07513546944
y: -8.56411266327
theta: 4.6439743042
speed: 14.1752634048
id: 1
t: 135
xxx after update is x: -3.29348874092
y: -9.42025661469
theta: 4.60871267319
speed: 14.0400028229
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:136




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137


xxx before update is x: -3.29348874092
y: -9.42025661469
theta: 4.60871267319
speed: 14.0400028229
id: 1
t: 136
xxx after update is x: -3.96116781235
y: -9.10734272003
theta: 4.58804607391
speed: 13.583489418
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.96116781235
y: -9.10734272003
theta: 4.58804607391
speed: 13.583489418
id: 1
t: 137
xxx after update is x: -3.04312825203
y: -9.89657020569
theta: 4.86780548096
speed: 13.6971101761
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:138




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139


xxx before update is x: -3.04312825203
y: -9.89657020569
theta: 4.86780548096
speed: 13.6971101761
id: 1
t: 138
xxx after update is x: -3.21037340164
y: -11.1110754013
theta: 4.84878587723
speed: 13.9407224655
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140


xxx before update is x: -3.21037340164
y: -11.1110754013
theta: 4.84878587723
speed: 13.9407224655
id: 1
t: 139
xxx after update is x: -3.2597887516
y: -11.2605133057
theta: 4.70881080627
speed: 13.8081760406
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9296702046961763, 0.08464995476851649]
Stops!
222 self.state_dicts[msg.id][msg.t] is (3.2448084354400635, -7.48606014251709, 1.7359267473220825, 1.3672904968261719)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141


xxx before update is x: -3.2597887516
y: -11.2605133057
theta: 4.70881080627
speed: 13.8081760406
id: 1
t: 140
xxx after update is x: -3.0845887661
y: -11.8502426147
theta: 4.83344554901
speed: 13.8626708984
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: -3.0845887661
y: -11.8502426147
theta: 4.83344554901
speed: 13.8626708984
id: 1
t: 141
xxx after update is x: -3.19952726364
y: -12.0445289612
theta: 4.65279054642
speed: 14.301451683
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.31111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143


xxx before update is x: -3.19952726364
y: -12.0445289612
theta: 474726295
y: -7.45148897171
theta: 1.5229549408
speed: 0.780077517033
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142


xxx before update is x: 3.21374726295
y: -7.45148897171
theta: 1.5229549408
speed: 0.780077517033
id: 0
t: 141
xxx after update is x: 2.94504237175
y: -7.46896266937
theta: 1.57943725586
speed: 1.26300311089
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.94504237175
y: -7.46896266937
theta: 1.57943725586
speed: 1.26300311089
id: 0
t: 142
xxx after update is x: 3.69336748123
y: -6.92856359482
theta: 1.47035157681
speed: 1.48089039326
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:143




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.35555555556






self.maneuver_requested left
xxx before update is x: 3.69336748123
y: -6.92856359482
theta: 1.47035157681
speed: 1.48089039326
id: 0
t: 143
xxx after update is x: 3.4807267189
y: -7.43428039551
theta: 1.68307733536
speed: 1.91650402546
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:144


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.4807267189
y: -7.43428039551
theta: 1.68307733536
speed: 1.91650402546
id: 0
t: 144
xxx after update is x: 3.17855477333
y: -7.36247587204
theta: 1.55752980709
speed: 2.39222741127
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:145


aaaaaa
risk is [0.8538506486865372, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.486757278442383, -14.520424842834473, 4.5464606285095215, 13.980666160583496)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: 3.17855477333
y: -7.36247587204
theta: 1.55752980709
speed: 2.39222741127
id: 0
t: 145
xxx after update is x: 3.24826288223
y: -6.76567649841
theta: 1.49930000305
speed: 2.41591310501
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.24826288223
y: -6.76567649841
theta: 1.49930000305
speed: 2.41591310501
id: 0
t: 146
xxx after update is x: 3.12762403488
y: -7.60700702667
theta: 1.84280180931
speed: 2.76069307327
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:147




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.12762403488
y: -7.60700702667
theta: 1.84280180931
speed: 2.76069307327
id: 0
t: 147
xxx after update is x: 3.28201627731
y: -6.66786193848
theta: 1.63875365257
speed: 2.85242581367
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:148




going to the update function
sim.py in th.65279054642
speed: 14.301451683
id: 1
t: 142
xxx after update is x: -3.69436860085
y: -13.447479248
theta: 4.74322843552
speed: 13.9708185196
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144


xxx before update is x: -3.69436860085
y: -13.447479248
theta: 4.74322843552
speed: 13.9708185196
id: 1
t: 143
xxx after update is x: -3.26373314857
y: -13.7025747299
theta: 4.62471628189
speed: 14.186709404
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145


xxx before update is x: -3.26373314857
y: -13.7025747299
theta: 4.62471628189
speed: 14.186709404
id: 1
t: 144
xxx after update is x: -3.48675727844
y: -14.5204248428
theta: 4.54646062851
speed: 13.9806661606
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [9.604098708978633e-05, 0.481599999999998]
222 self.state_dicts[msg.id][msg.t] is (3.1785547733306885, -7.362475872039795, 1.5575298070907593, 2.3922274112701416)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146


xxx before update is x: -3.48675727844
y: -14.5204248428
theta: 4.54646062851
speed: 13.9806661606
id: 1
t: 145
xxx after update is x: -3.39781951904
y: -15.2132778168
theta: 4.77222537994
speed: 14.0565872192
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147


xxx before update is x: -3.39781951904
y: -15.2132778168
theta: 4.77222537994
speed: 14.0565872192
id: 1
t: 146
xxx after update is x: -3.53580451012
y: -15.6534395218
theta: 4.70948886871
speed: 13.8250551224
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148


xxx before update is x: -3.53580451012
y: -15.6534395218
theta: 4.70948886871
speed: 13.8250551224
id: 1
t: 147
xxx after update is x: -2.79803180695
y: -15.9228315353
theta: 4.67218971252
speed: 13.708990097
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
current clock is 6.57777777778
************normalize weight**********************
!!!threading.Timer
tgarnt done
aaaaaa
aaaaaabbbbb
risk is [7.806794605335416e-18, 0.5007999999999979]
222 self.state_dicts[msg.id][msg.t] is (3.2820162773132324, -6.6678619384765625, 1.6387536525726318, 2.8524258136749268)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149


xxx before update is x: -2.79803180695
y: -15.9228315353
theta: 4.67218971252
speed: 13.708990097
id: 1
t: 148
xxx after update is x: -3.64963579178
y: -17.1222667694
theta: 4.67994594574
speed: 13.7596511841
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: -3.64963579178
y: -17.1222667694
theta: 4.67994594574
speed: 13.7596511841
id: 1
t: 149
xxx after update is x: -2.95916390419
y: -18.0078086853
theta: 4.73192119598
speed: 13.8497028351
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.66666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.95916390419
y: -18.0078086853
theta: 4.73192119598
speed: 13.8497028351
id: 1
t: 150
xxx after update is x: -3.64990663528
y: -18.3525428772
theta: 4.83454227448
speed: 14.2499332428
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:151


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [2.433413780616853e-13, 0.5199999999999985]
222 self.state_dicts[msg.id][msg.t] is (3.197575092315674, -6.000059604644775, 1.4887266159057617, 3.7654333114624023)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: -3.64990663528
y: -18.3525428772
theta: 4.83454227448
speed: 14.2499332428
id: 1
t: 151
xxx after update is x: -3.30240869522
y: -19.1421756744
theta: 4.65492010117
speed: 13.9952764511
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153


xxx before update is x: -3.30240869522
y: -19.1421756744
theta: 4.65492010117
speed: 13.9952764511
id: 1
t: 152
xxx after update is x: -3.36531352997
y: -19.3781852722
theta: 4.68988990784
speed: 13.7069530487
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.36531352997
y: -19.3781852722
theta: 4.68988990784
speed: 13.7069530487
id: 1
t: 153
xxx after update is x: -3.27441191673
y: -20.2101364136
theta: 4.66163396835
speed: 13.9720802307
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:154


maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
tgarnt done
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: -3.27441191673
y: -20.2101364136
theta: 4.66163396835
speed: 13.9720802307
id: 1
t: 154
xxx after update is x: -2.78088545799
y: -20.9123191833
theta: 4.80547809601
speed: 14.1490497589
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [4.9433850707138254e-82, 0.48639999999999795]
222 self.state_dicts[msg.id][msg.t] is (3.6927196979522705, -5.4653706550598145, 1.6316581964492798, 4.559046268463135)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1e sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.28201627731
y: -6.66786193848
theta: 1.63875365257
speed: 2.85242581367
id: 0
t: 148
xxx after update is x: 3.57319760323
y: -7.03422832489
theta: 1.51902735233
speed: 3.05839657784
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:149




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150


xxx before update is x: 3.57319760323
y: -7.03422832489
theta: 1.51902735233
speed: 3.05839657784
id: 0
t: 149
xxx after update is x: 3.26617860794
y: -6.20599460602
theta: 1.58511817455
speed: 2.99179697037
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151


xxx before update is x: 3.26617860794
y: -6.20599460602
theta: 1.58511817455
speed: 2.99179697037
id: 0
t: 150
xxx after update is x: 3.19757509232
y: -6.00005960464
theta: 1.48872661591
speed: 3.76543331146
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [5.955768468785946e-13, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.649906635284424, -18.352542877197266, 4.834542274475098, 14.249933242797852)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 6.71111111111






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152


xxx before update is x: 3.19757509232
y: -6.00005960464
theta: 1.48872661591
speed: 3.76543331146
id: 0
t: 151
xxx after update is x: 2.79410982132
y: -6.49995613098
theta: 1.6758184433
speed: 4.3757019043
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.79410982132
y: -6.49995613098
theta: 1.6758184433
speed: 4.3757019043
id: 0
t: 152
xxx after update is x: 3.30553078651
y: -6.43164825439
theta: 1.62457823753
speed: 4.00216341019
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:153




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154


xxx before update is x: 3.30553078651
y: -6.43164825439
theta: 1.62457823753
speed: 4.00216341019
id: 0
t: 153
xxx after update is x: 3.88961958885
y: -5.73504829407
theta: 1.68114101887
speed: 4.42844820023
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:155


xxx before update is x: 3.88961958885
y: -5.73504829407
theta: 1.68114101887
speed: 4.42844820023
id: 0
t: 154
xxx after update is x: 3.69271969795
y: -5.46537065506
theta: 1.63165819645
speed: 4.55904626846
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: 3.6927196979):
leave the update function 
in spin function, finish the n times spin:156


xxx before update is x: -2.78088545799
y: -20.9123191833
theta: 4.80547809601
speed: 14.1490497589
id: 1
t: 155
xxx after update is x: -3.16455984116
y: -21.4462013245
theta: 4.71949481964
speed: 13.9909296036
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16455984116
y: -21.4462013245
theta: 4.71949481964
speed: 13.9909296036
id: 1
t: 156
xxx after update is x: -3.62860965729
y: -21.7785301208
theta: 4.61171960831
speed: 14.1380643845
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: -3.62860965729
y: -21.7785301208
theta: 4.61171960831
speed: 14.1380643845
id: 1
t: 157
xxx after update is x: -3.40592694283
y: -22.3203601837
theta: 4.4893913269
speed: 13.7078781128
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.02222222222






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: -3.40592694283
y: -22.3203601837
theta: 4.4893913269
speed: 13.7078781128
id: 1
t: 158
xxx after update is x: -3.59699440002
y: -23.2789134979
theta: 4.62371492386
speed: 14.307138443
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [9.012267453293655e-123, 0.5215999999999985]
222 self.state_dicts[msg.id][msg.t] is (2.8455817699432373, -4.91983699798584, 1.5139695405960083, 5.5789713859558105)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.59699440002
y: -23.2789134979
theta: 4.62371492386
speed: 14.307138443
id: 1
t: 159
xxx after update is x: -3.83955717087
y: -23.3185501099
theta: 4.58071565628
speed: 14.1608800888
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:160




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: -3.83955717087
y: -23.3185501099
theta: 4.58071565628
speed: 14.1608800888
id: 1
t: 160
xxx after update is x: -3.20485877991
y: -24.3391819
theta: 4.74648141861
speed: 13.8500585556
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.20485877991
y: -24.3391819
theta: 4.74648141861
speed: 13.8500585556
id: 1
t: 161
xxx after update is x: -2.56155371666
y: -24.9582576752
theta: 4.67266130447
speed: 13.9444198608
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the5
y: -5.46537065506
theta: 1.63165819645
speed: 4.55904626846
id: 0
t: 155
xxx after update is x: 3.34337902069
y: -5.50020074844
theta: 1.71605539322
speed: 5.09847354889
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [1.5203857320269285e-78, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.164559841156006, -21.44620132446289, 4.719494819641113, 13.99092960357666)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.34337902069
y: -5.50020074844
theta: 1.71605539322
speed: 5.09847354889
id: 0
t: 156
xxx after update is x: 3.61507058144
y: -5.26769113541
theta: 1.53205418587
speed: 5.34356403351
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158


xxx before update is x: 3.61507058144
y: -5.26769113541
theta: 1.53205418587
speed: 5.34356403351
id: 0
t: 157
xxx after update is x: 3.50355482101
y: -5.05101585388
theta: 1.51553213596
speed: 5.60677433014
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159


xxx before update is x: 3.50355482101
y: -5.05101585388
theta: 1.51553213596
speed: 5.60677433014
id: 0
t: 158
xxx after update is x: 2.84558176994
y: -4.91983699799
theta: 1.5139695406
speed: 5.57897138596
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.06666666667






self.maneuver_requested left
aaaaaa
risk is [1.8733739187430506e-150, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.596994400024414, -23.278913497924805, 4.623714923858643, 14.307138442993164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160


xxx before update is x: 2.84558176994
y: -4.91983699799
theta: 1.5139695406
speed: 5.57897138596
id: 0
t: 159
xxx after update is x: 2.93244194984
y: -4.23039245605
theta: 1.79497003555
speed: 6.18232107162
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161


xxx before update is x: 2.93244194984
y: -4.23039245605
theta: 1.79497003555
speed: 6.18232107162
id: 0
t: 160
xxx after update is x: 2.9832868576
y: -4.44442224503
theta: 1.70422780514
speed: 6.33548164368
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:162


xxx before update is x: 2.9832868576
y: -4.44442224503
theta: 1.70422780514
speed: 6.33548164368
id: 0
t: 161
xxx after update is x: 3.39195036888
y: -4.31792926788
theta: 1.9326120615
speed: 6.44558238983
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the upda n times spin:163

xxx before update is x: -2.56155371666
y: -24.9582576752
theta: 4.67266130447
speed: 13.9444198608
id: 1
t: 162
xxx after update is x: -3.24408316612
y: -26.014383316
theta: 4.79929304123
speed: 14.2045221329
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
aaaaaabbbbb
risk is [1.3378633378448731e-184, 0.5167999999999984]
222 self.state_dicts[msg.id][msg.t] is (2.948822259902954, -4.12705659866333, 1.7323864698410034, 7.184250831604004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.24408316612
y: -26.014383316
theta: 4.79929304123
speed: 14.2045221329
id: 1
t: 163
xxx after update is x: -3.34459280968
y: -26.6930446625
theta: 4.81688261032
speed: 13.7446660995
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:164




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34459280968
y: -26.6930446625
theta: 4.81688261032
speed: 13.7446660995
id: 1
t: 164
xxx after update is x: -3.16072440147
y: -27.2075920105
theta: 4.70133304596
speed: 13.6982755661
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:165


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.33333333333






self.maneuver_requested None
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16072440147
y: -27.2075920105
theta: 4.70133304596
speed: 13.6982755661
id: 1
t: 165
xxx after update is x: -2.66544890404
y: -28.3675918579
theta: 4.69765853882
speed: 13.8000068665
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.66544890404
y: -28.3675918579
theta: 4.69765853882
speed: 13.8000068665
id: 1
t: 166
xxx after update is x: -3.03867077827
y: -28.733543396
theta: 4.67094278336
speed: 14.1764526367
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.03867077827
y: -28.733543396
theta: 4.67094278336
speed: 14.1764526367
id: 1
t: 167
xxx after update is x: -3.41472458839
y: -28.9705295563
theta: 4.71714925766
speed: 13.8654050827
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
leave the update function 
in spin function, finish the n times spin:168


aaaaaa
aaaaaabbbbb
risk is [1.106205533906914e-306, 0.5279999999999987]
222 self.state_dicts[msg.id][msg.t] is (1.8619590997695923, -1.976159930229187, 2.1368532180786133, 8.664436340332031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: -3.41472458839
y: -28.9705295563
theta: 4.71714925766
speed: 13.8654050827
id: 1
t: 168
xxx after update is x: -3.52888464928
y: -29.5033798218
theta: 4.87766361237
speed: 14.2122564316
id: 1
t: 169
maneuver_negotiatir.py te function xxx before update is x: 3.39195036888
y: -4.31792926788
theta: 1.9326120615
speed: 6.44558238983
id: 0
t: 162
xxx after update is x: 2.9488222599
y: -4.12705659866
theta: 1.73238646984
speed: 7.1842508316
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:163




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.9488222599
y: -4.12705659866
theta: 1.73238646984
speed: 7.1842508316
id: 0
t: 163
xxx after update is x: 2.97887277603
y: -3.78345346451
theta: 2.05969333649
speed: 7.39468812943
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:164


aaaaaa
risk is [1.340742743086481e-184, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.344592809677124, -26.693044662475586, 4.816882610321045, 13.74466609954834)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.97887277603
y: -3.78345346451
theta: 2.05969333649
speed: 7.39468812943
id: 0
t: 164
xxx after update is x: 2.91172647476
y: -3.12410402298
theta: 1.95241093636
speed: 7.05266332626
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:165




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.91172647476
y: -3.12410402298
theta: 1.95241093636
speed: 7.05266332626
id: 0
t: 165
xxx after update is x: 2.01605677605
y: -2.56118202209
theta: 1.87785220146
speed: 7.57580709457
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167


xxx before update is x: 2.01605677605
y: -2.56118202209
theta: 1.87785220146
speed: 7.57580709457
id: 0
t: 166
xxx after update is x: 2.37969398499
y: -2.57181668282
theta: 1.93790769577
speed: 8.01651096344
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.42222222222






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168


xxx before update is x: 2.37969398499
y: -2.57181668282
theta: 1.93790769577
speed: 8.01651096344
id: 0
t: 167
xxx after update is x: 1.86195909977
y: -1.97615993023
theta: 2.13685321808
speed: 8.66443634033
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:169


xxx before update is x: 1.86195909977
y: -1.97615993023
theta: 2.13685321808
speed: 8.66443634033
id: 0
t: 168
xxx after update is x: 2.32728409767
y: -2.44698739052
theta: 2.01801633835
speed: 8.27827644348
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.5288846492767334, -29.503379821777344, 4.877663612365723, 14.21225643157959)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170


xxx before update is x: -3.52888464928
y: -29.5033798218
theta: 4.87766361237
speed: 14.2122564316
id: 1
t: 169
xxx after update is x: -3.4954636097
y: -30.001537323
theta: 4.9276599884
speed: 14.2299852371
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: -3.4954636097
y: -30.001537323
theta: 4.9276599884
speed: 14.2299852371
id: 1
t: 170
xxx after update is x: -3.45966291428
y: -30.3473300934
theta: 4.79245615005
speed: 14.010884285
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (1.5405654907226562, -1.4682010412216187, 2.3403730392456055, 9.003384590148926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: -3.45966291428
y: -30.3473300934
theta: 4.79245615005
speed: 14.010884285
id: 1
t: 171
xxx after update is x: -3.42043304443
y: -31.5891799927
theta: 4.83237695694
speed: 13.961186409
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173


xxx before update is x: -3.42043304443
y: -31.5891799927
theta: 4.83237695694
speed: 13.961186409
id: 1
t: 172
xxx after update is x: -3.67250943184
y: -31.6259212494
theta: 4.7446269989
speed: 13.9887008667
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.67250943184
y: -31.6259212494
theta: 4.7446269989
speed: 13.9887008667
id: 1
t: 173
xxx after update is x: -3.64708518982
y: -32.3597717285
theta: 4.74200248718
speed: 14.0487880707
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:174


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5263999999999986]
222 self.state_dicts[msg.id][msg.t] is (0.6396807432174683, -0.6501232981681824, 2.476586103439331, 9.782156944274902)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175


xxx before update is x: -3.64708518982
y: -32.3597717285
theta: 4.74200248718
speed: 14.0487880707
id: 1
t: 174
xxx after update is x: -2.62242841721
y: -32.8661079407
theta: 4.68543624878
speed: 14.0036354065
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.77777777778






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -2.62242841721
y: -32.8661079407
theta: 4.68543624878
speed: 14.00363py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170


xxx before update is x: 2.32728409767
y: -2.44698739052
theta: 2.01801633835
speed: 8.27827644348
id: 0
t: 169
xxx after update is x: 1.9353222847
y: -1.20515787601
theta: 2.02646613121
speed: 8.85836029053
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171


xxx before update is x: 1.9353222847
y: -1.20515787601
theta: 2.02646613121
speed: 8.85836029053
id: 0
t: 170
xxx after update is x: 1.54056549072
y: -1.46820104122
theta: 2.34037303925
speed: 9.00338459015
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172


xxx before update is x: 1.54056549072
y: -1.46820104122
theta: 2.34037303925
speed: 9.00338459015
id: 0
t: 171
xxx after update is x: 1.46908783913
y: -0.676581382751
theta: 2.15189814568
speed: 9.44950580597
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 1.46908783913
y: -0.676581382751
theta: 2.15189814568
speed: 9.44950580597
id: 0
t: 172
xxx after update is x: 1.08731329441
y: -0.266908019781
theta: 2.47593808174
speed: 9.74952316284
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.6725094318389893, -31.62592124938965, 4.744626998901367, 13.988700866699219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174


xxx before update is x: 1.08731329441
y: -0.266908019781
theta: 2.47593808174
speed: 9.74952316284
id: 0
t: 173
xxx after update is x: 0.639680743217
y: -0.650123298168
theta: 2.47658610344
speed: 9.78215694427
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 0.639680743217
y: -0.650123298168
theta: 2.47658610344
speed: 9.78215694427
id: 0
t: 174
xxx after update is x: 0.561899125576
y: 0.0641664862633
theta: 2.42150425911
speed: 10.0120134354
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 7.77777777778






self.maneuver_requested left
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176


xxx before update is x: 0.561899125576
y: 0.0641664862633
theta: 2.42150425911
speed: 10.0120134354
id: 0
t: 175
xxx after update is x: 0.575896084309
y: 0.295457333326
theta: 2.49625825882
speed: 10.2408390045
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: 0.575896084309
y: 0.2954573354065
id: 1
t: 175
xxx after update is x: -3.52574825287
y: -33.6917915344
theta: 4.78230381012
speed: 13.6501588821
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:176




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177


xxx before update is x: -3.52574825287
y: -33.6917915344
theta: 4.78230381012
speed: 13.6501588821
id: 1
t: 176
xxx after update is x: -3.34636092186
y: -34.4950065613
theta: 4.74888324738
speed: 13.9226493835
id: 1
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5439999999999992]
222 self.state_dicts[msg.id][msg.t] is (0.12157314270734787, 1.0400307178497314, 2.539478302001953, 10.673506736755371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178


xxx before update is x: -3.34636092186
y: -34.4950065613
theta: 4.74888324738
speed: 13.9226493835
id: 1
t: 177
xxx after update is x: -3.39387154579
y: -34.9382286072
theta: 4.80955982208
speed: 13.9358711243
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179


xxx before update is x: -3.39387154579
y: -34.9382286072
theta: 4.80955982208
speed: 13.9358711243
id: 1
t: 178
xxx after update is x: -3.12045121193
y: -35.7676315308
theta: 4.85527086258
speed: 13.7644090652
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -3.12045121193
y: -35.7676315308
theta: 4.85527086258
speed: 13.7644090652
id: 1
t: 179
xxx after update is x: -3.28110933304
y: -35.7436981201
theta: 4.69449234009
speed: 13.6161899567
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28110933304
y: -35.7436981201
theta: 4.69449234009
speed: 13.6161899567
id: 1
t: 180
xxx after update is x: -3.44919395447
y: -36.8454627991
theta: 4.78614664078
speed: 14.000998497
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:181


************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182


xxx before update is x: -3.44919395447
y: -36.8454627991
theta: 4.78614664078
speed: 14.000998497
id: 1
t: 181
xxx after update is x: -3.62070512772
y: -37.4206428528
theta: 4.62243747711
speed: 13.5549449921
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.46559999999999807]
222 self.state_dicts[msg.id][msg.t] is (-2.212224006652832, 1.8470479249954224, 2.689943552017212, 12.047365188598633)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n3326
theta: 2.49625825882
speed: 10.2408390045
id: 0
t: 176
xxx after update is x: 0.121573142707
y: 1.04003071785
theta: 2.539478302
speed: 10.6735067368
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.346360921859741, -34.4950065612793, 4.748883247375488, 13.922649383544922)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:178


xxx before update is x: 0.121573142707
y: 1.04003071785
theta: 2.539478302
speed: 10.6735067368
id: 0
t: 177
xxx after update is x: -0.730261981487
y: 1.56715524197
theta: 2.48968291283
speed: 10.4188871384
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179


xxx before update is x: -0.730261981487
y: 1.56715524197
theta: 2.48968291283
speed: 10.4188871384
id: 0
t: 178
xxx after update is x: -0.668023049831
y: 1.95953190327
theta: 2.51328134537
speed: 11.1711797714
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180


xxx before update is x: -0.668023049831
y: 1.95953190327
theta: 2.51328134537
speed: 11.1711797714
id: 0
t: 179
xxx after update is x: -1.12481617928
y: 1.2985098362
theta: 2.71542263031
speed: 11.3505239487
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -1.12481617928
y: 1.2985098362
theta: 2.71542263031
speed: 11.3505239487
id: 0
t: 180
xxx after update is x: -1.71842467785
y: 1.67826747894
theta: 2.51446080208
speed: 11.6821689606
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:181




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:182


xxx before update is x: -1.71842467785
y: 1.67826747894
theta: 2.51446080208
speed: 11.6821689606
id: 0
t: 181
xxx after update is x: -2.21222400665
y: 1.847047925
theta: 2.68994355202
speed: 12.0473651886
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.08888888889






self.maneuver_requested left


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183


xxx before update is x: -2.21222400665
y: 1.847047925
theta: 2.68994355202
speed: 12.0473651886
id: 0
t: 182
xxx after update is x: -2.72215008736
y: 1.91447591782
theta: 2.66337871552
speed: 11.8326349258
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.6274702548980713, -37.63287353515625, 4.8316731452941895, 14.011762619018555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n tim times spin:183

xxx before update is x: -3.62070512772
y: -37.4206428528
theta: 4.62243747711
speed: 13.5549449921
id: 1
t: 182
xxx after update is x: -2.6274702549
y: -37.6328735352
theta: 4.83167314529
speed: 14.011762619
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.13333333333






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:184


xxx before update is x: -2.6274702549
y: -37.6328735352
theta: 4.83167314529
speed: 14.011762619
id: 1
t: 183
xxx after update is x: -3.23411369324
y: -38.4498443604
theta: 4.67901706696
speed: 14.0369558334
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23411369324
y: -38.4498443604
theta: 4.67901706696
speed: 14.0369558334
id: 1
t: 184
xxx after update is x: -3.19779491425
y: -39.5930137634
theta: 4.70024299622
speed: 13.8124361038
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185


risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-3.3143928050994873, 2.8278968334198, 2.599565029144287, 12.390522956848145)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -3.19779491425
y: -39.5930137634
theta: 4.70024299622
speed: 13.8124361038
id: 1
t: 185
xxx after update is x: -3.43254566193
y: -40.2882881165
theta: 4.75797843933
speed: 13.9353342056
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:187


xxx before update is x: -3.43254566193
y: -40.2882881165
theta: 4.75797843933
speed: 13.9353342056
id: 1
t: 186
xxx after update is x: -3.14617991447
y: -40.1346092224
theta: 4.77984333038
speed: 14.3576021194
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -3.14617991447
y: -40.1346092224
theta: 4.77984333038
speed: 14.3576021194
id: 1
t: 187
xxx after update is x: -3.26857972145
y: -41.2951431274
theta: 4.67111110687
speed: 13.5713243484
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (-5.480038166046143, 3.5797812938690186, 2.9309730529785156, 13.691808700561523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -3.26857972145
y: -41.2951431274
theta: 4.67111110687
speed: 13.5713243484
id: 1
t: 188
xxx after update is x: -2.92469668388
y: -41.8058929443
theta: 4.72538566589
speed: 13.8308210373
id: 1
t: 189
maneuver_negoes spin:184

xxx before update is x: -2.72215008736
y: 1.91447591782
theta: 2.66337871552
speed: 11.8326349258
id: 0
t: 183
xxx after update is x: -3.22693920135
y: 2.99363040924
theta: 2.77272319794
speed: 12.6378335953
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion



going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185


xxx before update is x: -3.22693920135
y: 2.99363040924
theta: 2.77272319794
speed: 12.6378335953
id: 0
t: 184
xxx after update is x: -3.3143928051
y: 2.82789683342
theta: 2.59956502914
speed: 12.3905229568
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186


xxx before update is x: -3.3143928051
y: 2.82789683342
theta: 2.59956502914
speed: 12.3905229568
id: 0
t: 185
xxx after update is x: -3.94283866882
y: 2.17650389671
theta: 2.95582675934
speed: 13.2237167358
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -3.94283866882
y: 2.17650389671
theta: 2.95582675934
speed: 13.2237167358
id: 0
t: 186
xxx after update is x: -5.01027679443
y: 2.54546141624
theta: 2.95467662811
speed: 12.7754259109
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:187


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1461799144744873, -40.13460922241211, 4.779843330383301, 14.3576021194458)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188


xxx before update is x: -5.01027679443
y: 2.54546141624
theta: 2.95467662811
speed: 12.7754259109
id: 0
t: 187
xxx after update is x: -5.48003816605
y: 3.57978129387
theta: 2.93097305298
speed: 13.6918087006
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189


xxx before update is x: -5.48003816605
y: 3.57978129387
theta: 2.93097305298
speed: 13.6918087006
id: 0
t: 188
xxx after update is x: -6.1590051651
y: 3.23336911201
theta: 2.92530727386
speed: 13.8801059723
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:190


xxx before update is x: -6.1590051651
y: 3.23336911201
theta: 2.92530727386
speed: 13.8801059723
id: 0
t: 189
xxx after update is x: -6.4880771637
y: 2.74508595467
theta: 2.86752462387
speed: 13.5327005386
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.44444444444






self.maneuver_requested left
RELEASE,0,8.44444444444,(-6.488077163696289, 2.7450859546661377, 2.8675246238708496),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.44444444444
self.communication_details == 0
sending RELEASE,0,8.44444444444,(-6.488077163696289, 2.7450859546661377, 2.8675246238708496),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function updtiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190


xxx before update is x: -2.92469668388
y: -41.8058929443
theta: 4.72538566589
speed: 13.8308210373
id: 1
t: 189
xxx after update is x: -3.02402567863
y: -42.3128395081
theta: 4.82190561295
speed: 14.0460977554
id: 1
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 8.44444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.44444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.44444444444', 'Position': ['(-6.488077163696289', ' 2.7450859546661377', ' 2.8675246238708496)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.44444444444,(-6.488077163696289, 2.7450859546661377, 2.8675246238708496),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.02402567863
y: -42.3128395081
theta: 4.82190561295
speed: 14.0460977554
id: 1
t: 190
xxx after update is x: -3.14665746689
y: -42.9289779663
theta: 4.72264814377
speed: 14.051115036
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191


************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.48888888889






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-6.991012096405029, 3.0456597805023193, 3.133838653564453, 13.669896125793457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14665746689
y: -42.9289779663
theta: 4.72264814377
speed: 14.051115036
id: 1
t: 191
xxx after update is x: -3.44408655167
y: -43.7599487305
theta: 4.67226839066
speed: 13.7538452148
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:192




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -3.44408655167
y: -43.7599487305
theta: 4.67226839066
speed: 13.7538452148
id: 1
t: 192
xxx after update is x: -3.02177906036
y: -43.9513435364
theta: 4.80241680145
speed: 13.687458992
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.02177906036
y: -43.9513435364
theta: 4.80241680145
speed: 13.687458992
id: 1
t: 193
xxx after update is x: -3.10747170448
y: -44.7886962891
theta: 4.66668891907
speed: 13.9835767746
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:194


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
222 self.state_dicts[msg.id][msg.t] is (-8.922755241394043, 3.0725481510162354, 3.0130956172943115, 14.357897758483887)
if we have all measurements for a certain time-stamp perform riate -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -6.4880771637
y: 2.74508595467
theta: 2.86752462387
speed: 13.5327005386
id: 0
t: 190
xxx after update is x: -6.99101209641
y: 3.0456597805
theta: 3.13383865356
speed: 13.6698961258
id: 0
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1466574668884277, -42.928977966308594, 4.7226481437683105, 14.051115036010742)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192


xxx before update is x: -6.99101209641
y: 3.0456597805
theta: 3.13383865356
speed: 13.6698961258
id: 0
t: 191
xxx after update is x: -7.80058288574
y: 3.79372668266
theta: 3.01862478256
speed: 13.9506092072
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193


xxx before update is x: -7.80058288574
y: 3.79372668266
theta: 3.01862478256
speed: 13.9506092072
id: 0
t: 192
xxx after update is x: -8.67926597595
y: 3.69516468048
theta: 3.04451489449
speed: 14.1530714035
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -8.67926597595
y: 3.69516468048
theta: 3.04451489449
speed: 14.1530714035
id: 0
t: 193
xxx after update is x: -8.92275524139
y: 3.07254815102
theta: 3.01309561729
speed: 14.3578977585
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:194




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -8.92275524139
y: 3.07254815102
theta: 3.01309561729
speed: 14.3578977585
id: 0
t: 194
xxx after update is x: -9.60594558716
y: 2.78005027771
theta: 3.02787971497
speed: 14.4298391342
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2669565677642822, -44.92649459838867, 4.770064830780029, 13.884787559509277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196


xxx before update is x: -9.60594558716
y: 2.78005027771
theta: 3.02787971497
speed: 14.4298391342
id: 0
t: 195
xxx after update is x: -10.3759183884
y: 4.03500795364
theta: 3.25680875778
speed: 13.986951828
id: 0
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -10.3759183884
y: 4.03500795364
theta: 3.25680875778
speed: 13.986951828
id: 0
t: 196
xxx after update is x: -10.9352321625
y: 3.5360648632
theta: 3.14577674866
speed: 13.9469327927
id: 0
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the sk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195


xxx before update is x: -3.10747170448
y: -44.7886962891
theta: 4.66668891907
speed: 13.9835767746
id: 1
t: 194
xxx after update is x: -3.26695656776
y: -44.9264945984
theta: 4.77006483078
speed: 13.8847875595
id: 1
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196


xxx before update is x: -3.26695656776
y: -44.9264945984
theta: 4.77006483078
speed: 13.8847875595
id: 1
t: 195
xxx after update is x: -2.7346072197
y: -46.2378387451
theta: 4.46795606613
speed: 13.8414087296
id: 1
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197


xxx before update is x: -2.7346072197
y: -46.2378387451
theta: 4.46795606613
speed: 13.8414087296
id: 1
t: 196
xxx after update is x: -3.39621829987
y: -46.3885917664
theta: 4.70674371719
speed: 13.8209266663
id: 1
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-10.935232162475586, 3.536064863204956, 3.1457767486572266, 13.946932792663574)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198


xxx before update is x: -3.39621829987
y: -46.3885917664
theta: 4.70674371719
speed: 13.8209266663
id: 1
t: 197
xxx after update is x: -2.93422985077
y: -47.1153526306
theta: 4.6379199028
speed: 13.8200187683
id: 1
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 8.8




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 8.8
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '8.8', 'Position': ['(-11.1681489944458', ' 3.4628067016601562', ' 3.0617358684539795)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.8,(-11.1681489944458, 3.4628067016601562, 3.0617358684539795),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.8






self.maneuver_requested None
xxx before update is x: -2.93422985077
y: -47.1153526306
theta: 4.6379199028
speed: 13.8200187683
id: 1
t: 198
xxx after update is x: -3.5830309391
y: -47.5633201599
theta: 4.54694747925
speed: 14.0648326874
id: 1
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200


xxx before update is x: -3.5830309391
y: -47.5633201599
theta: 4.54694747925
speed: 14.0648326874
id: 1
t: 199
xxx after update update function xxx before update is x: -10.9352321625
y: 3.5360648632
theta: 3.14577674866
speed: 13.9469327927
id: 0
t: 197
xxx after update is x: -11.1681489944
y: 3.46280670166
theta: 3.06173586845
speed: 13.8766355515
id: 0
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:198


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 8.8






self.maneuver_requested left
RELEASE,0,8.8,(-11.1681489944458, 3.4628067016601562, 3.0617358684539795),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 8.8
self.communication_details == 0
sending RELEASE,0,8.8,(-11.1681489944458, 3.4628067016601562, 3.0617358684539795),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -11.1681489944
y: 3.46280670166
theta: 3.06173586845
speed: 13.8766355515
id: 0
t: 198
xxx after update is x: -11.9049568176
y: 3.61489796638
theta: 3.15082621574
speed: 14.1752166748
id: 0
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:199




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:200


xxx before update is x: -11.9049568176
y: 3.61489796638
theta: 3.15082621574
speed: 14.1752166748
id: 0
t: 199
xxx after update is x: -13.1842107773
y: 3.56456661224
theta: 3.27629232407
speed: 14.0627069473
id: 0
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.483330488204956, -48.33766555786133, 4.9134063720703125, 13.752413749694824)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -13.1842107773
y: 3.56456661224
theta: 3.27629232407
speed: 14.0627069473
id: 0
t: 200
xxx after update is x: -13.1793622971
y: 3.28586912155
theta: 3.09999537468
speed: 14.0039052963
id: 0
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202


xxx before update is x: -13.1793622971
y: 3.28586912155
theta: 3.09999537468
speed: 14.0039052963
id: 0
t: 201
xxx after update is x: -14.1355686188
y: 3.3214597702
theta: 3.16300487518
speed: 13.983915329
id: 0
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:203


xxx before update is x: -14.1355686188
y: 3.3214597702
theta: 3.16300487518
speed: 13.983915329
id: 0
t: 202
xxx after update is x: -14.2764940262
y: 3.77152109146
theta: 3.14739227295
speed: 13.8552312851
id: 0
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:204


xxx before update is x: -14.2764940262
y: 3.77152109146
theta: 3.14739227295
speed: 13.8552312851
id: 0
t: 203
xxx after update is x: -15.1813907623
y: 3.2696788311
theta: 3.2377948761
speed: 13.7839822769
id: 0
t: 204
maneuver_negotiatir.py finish the update agentis x: -3.4833304882
y: -48.3376655579
theta: 4.91340637207
speed: 13.7524137497
id: 1
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:201


xxx before update is x: -3.4833304882
y: -48.3376655579
theta: 4.91340637207
speed: 13.7524137497
id: 1
t: 200
xxx after update is x: -3.32591724396
y: -48.7588615417
theta: 4.85384511948
speed: 14.0223665237
id: 1
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5007999999999979]
222 self.state_dicts[msg.id][msg.t] is (-13.179362297058105, 3.2858691215515137, 3.0999953746795654, 14.003905296325684)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:202


xxx before update is x: -3.32591724396
y: -48.7588615417
theta: 4.85384511948
speed: 14.0223665237
id: 1
t: 201
xxx after update is x: -2.88846468925
y: -49.6291160583
theta: 4.5940694809
speed: 13.8225231171
id: 1
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.88846468925
y: -49.6291160583
theta: 4.5940694809
speed: 13.8225231171
id: 1
t: 202
xxx after update is x: -3.14793419838
y: -50.2708625793
theta: 4.54357767105
speed: 13.9811267853
id: 1
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:203


removed car with id 0 from grantlist. currentgrantlist: {}
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204


xxx before update is x: -3.14793419838
y: -50.2708625793
theta: 4.54357767105
speed: 13.9811267853
id: 1
t: 203
xxx after update is x: -3.38776230812
y: -50.8833274841
theta: 4.77839756012
speed: 13.6009702682
id: 1
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-15.181390762329102, 3.269678831100464, 3.237794876098633, 13.783982276916504)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205


xxx before update is x: -3.38776230812
y: -50.8833274841
theta: 4.77839756012
speed: 13.6009702682
id: 1
t: 204
xxx after update is x: -2.63017964363
y: -51.7708587646
theta: 4.90383481979
speed: 13.890996933
id: 1
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206


xxx before update is x: -2.63017964363
y: -51.7708587646
theta: 4.90383481979
speed: 13.890996933
id: 1
t: 205
xxx after update is x: -3.29091787338
y: -52.6803245544
theta: 4.65321540833
speed: 13.8514032364
id: 1
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 9.15555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneu state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3877623081207275, -50.88332748413086, 4.778397560119629, 13.600970268249512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -15.1813907623
y: 3.2696788311
theta: 3.2377948761
speed: 13.7839822769
id: 0
t: 204
xxx after update is x: -15.5822486877
y: 3.98208045959
theta: 3.23504686356
speed: 14.1393108368
id: 0
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206


xxx before update is x: -15.5822486877
y: 3.98208045959
theta: 3.23504686356
speed: 14.1393108368
id: 0
t: 205
xxx after update is x: -16.1450748444
y: 3.16277980804
theta: 3.1615717411
speed: 14.1844778061
id: 0
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.15555555556






self.maneuver_requested left
RELEASE,0,9.15555555556,(-16.14507484436035, 3.1627798080444336, 3.161571741104126),14,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.15555555556
self.communication_details == 0
sending RELEASE,0,9.15555555556,(-16.14507484436035, 3.1627798080444336, 3.161571741104126),14,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -16.1450748444
y: 3.16277980804
theta: 3.1615717411
speed: 14.1844778061
id: 0
t: 206
xxx after update is x: -17.150636673
y: 3.70187902451
theta: 3.20038557053
speed: 13.8527317047
id: 0
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208


xxx before update is x: -17.150636673
y: 3.70187902451
theta: 3.20038557053
speed: 13.8527317047
id: 0
t: 207
xxx after update is x: -17.7254276276
y: 3.76489543915
theta: 3.26418852806
speed: 14.1761817932
id: 0
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.001941680908203, -53.24365997314453, 4.749117374420166, 13.815072059631348)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209


xxx before update is x: -17.7254276276
y: 3.76489543915
theta: 3.26418852806
speed: 14.1761817932
id: 0
t: 208
xxx after update is x: -18.4555397034
y: 2.77520179749
theta: 3.16424560547
speed: 13.9830741882
id: 0
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210


xxx before update is x: -18.4555397034
y: 2.77520179749
theta: 3.16424560547
speed: 13.9830741882
id: 0
t: 209
xxx after update is x: -18.7864532471
y: 3.46634507179
theta: 3.14787220955
speed: 14.0566749573
id: 0
t: 210
maneuver_negotiatir.py finish the update agent state fromver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '9.15555555556', 'Position': ['(-16.14507484436035', ' 3.1627798080444336', ' 3.161571741104126)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.15555555556,(-16.14507484436035, 3.1627798080444336, 3.161571741104126),14,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.15555555556






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207


xxx before update is x: -3.29091787338
y: -52.6803245544
theta: 4.65321540833
speed: 13.8514032364
id: 1
t: 206
xxx after update is x: -3.64299821854
y: -53.0733451843
theta: 4.64340639114
speed: 13.7936925888
id: 1
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4927999999999979]
222 self.state_dicts[msg.id][msg.t] is (-17.150636672973633, 3.7018790245056152, 3.200385570526123, 13.852731704711914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.64299821854
y: -53.0733451843
theta: 4.64340639114
speed: 13.7936925888
id: 1
t: 207
xxx after update is x: -3.00194168091
y: -53.2436599731
theta: 4.74911737442
speed: 13.8150720596
id: 1
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:208




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:209


xxx before update is x: -3.00194168091
y: -53.2436599731
theta: 4.74911737442
speed: 13.8150720596
id: 1
t: 208
xxx after update is x: -3.44128203392
y: -53.9801826477
theta: 4.707051754
speed: 14.3004770279
id: 1
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:210


xxx before update is x: -3.44128203392
y: -53.9801826477
theta: 4.707051754
speed: 14.3004770279
id: 1
t: 209
xxx after update is x: -3.55453109741
y: -54.7325439453
theta: 4.81584453583
speed: 14.0354290009
id: 1
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211


xxx before update is x: -3.55453109741
y: -54.7325439453
theta: 4.81584453583
speed: 14.0354290009
id: 1
t: 210
xxx after update is x: -3.36644864082
y: -54.9558410645
theta: 4.75420618057
speed: 14.108923912
id: 1
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.36644864082
y: -54.9558410645
theta: 4.75420618057
speed: 14.108923912
id: 1
t: 211
xxx after update is x: -3.47360086441
y: -56.5997428894
theta: 4.83653783798
speed: 14.1295137405
id: 1
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:212


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.515199 ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211


xxx before update is x: -18.7864532471
y: 3.46634507179
theta: 3.14787220955
speed: 14.0566749573
id: 0
t: 210
xxx after update is x: -19.48179245
y: 3.78424072266
theta: 3.15059089661
speed: 13.8083333969
id: 0
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -19.48179245
y: 3.78424072266
theta: 3.15059089661
speed: 13.8083333969
id: 0
t: 211
xxx after update is x: -20.0284404755
y: 3.34689068794
theta: 3.13011956215
speed: 14.1643352509
id: 0
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:212




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:213


xxx before update is x: -20.0284404755
y: 3.34689068794
theta: 3.13011956215
speed: 14.1643352509
id: 0
t: 212
xxx after update is x: -20.2269477844
y: 3.13681960106
theta: 3.10819816589
speed: 13.8142280579
id: 0
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -20.2269477844
y: 3.13681960106
theta: 3.10819816589
speed: 13.8142280579
id: 0
t: 213
xxx after update is x: -21.5737171173
y: 3.15473771095
theta: 3.24392938614
speed: 14.4124622345
id: 0
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:214


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.51111111111






self.maneuver_requested left
RELEASE,0,9.51111111111,(-21.57371711730957, 3.154737710952759, 3.243929386138916),14,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.51111111111
self.communication_details == 0
sending RELEASE,0,9.51111111111,(-21.57371711730957, 3.154737710952759, 3.243929386138916),14,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.981018304824829, -57.061927795410156, 4.760084629058838, 13.9982271194458)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -21.5737171173
y: 3.15473771095
theta: 3.24392938614
speed: 14.4124622345
id: 0
t: 214
xxx after update is x: -22.2810764313
y: 3.59039211273
theta: 3.23265099525
speed: 13.7196292877
id: 0
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:215




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216


xxx before update is x: -22.2810764313
y: 3.59039211273
theta: 3.23265099525
speed: 13.7196292877
id: 0
t: 215
xxx after update is x: -22.5312976837
y: 3.13164019585
theta: 2.92508792877
speed: 14.4630002975
id: 0
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217


xxx before update is x: -29999999983]
222 self.state_dicts[msg.id][msg.t] is (-20.028440475463867, 3.346890687942505, 3.130119562149048, 14.164335250854492)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213


xxx before update is x: -3.47360086441
y: -56.5997428894
theta: 4.83653783798
speed: 14.1295137405
id: 1
t: 212
xxx after update is x: -3.23206496239
y: -56.6485519409
theta: 4.61280822754
speed: 13.6408557892
id: 1
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:214


xxx before update is x: -3.23206496239
y: -56.6485519409
theta: 4.61280822754
speed: 13.6408557892
id: 1
t: 213
xxx after update is x: -2.98101830482
y: -57.0619277954
theta: 4.76008462906
speed: 13.9982271194
id: 1
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 9.51111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '9.51111111111', 'Position': ['(-21.57371711730957', ' 3.154737710952759', ' 3.243929386138916)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.51111111111,(-21.57371711730957, 3.154737710952759, 3.243929386138916),14,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.51111111111






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215


xxx before update is x: -2.98101830482
y: -57.0619277954
theta: 4.76008462906
speed: 13.9982271194
id: 1
t: 214
xxx after update is x: -3.05920124054
y: -57.4808006287
theta: 4.61643362045
speed: 14.2519807816
id: 1
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:216


xxx before update is x: -3.05920124054
y: -57.4808006287
theta: 4.61643362045
speed: 14.2519807816
id: 1
t: 215
xxx after update is x: -3.13928937912
y: -58.0630187988
theta: 4.59659051895
speed: 13.9096384048
id: 1
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (-22.53129768371582, 3.1316401958465576, 2.9250879287719727, 14.463000297546387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.13928937912
y: -58.0630187988
theta: 4.59659051895
speed: 13.9096384048
id: 1
t: 216
xxx after update is x: -3.27882862091
y: -58.3891181946
theta: 4.67686128616
speed: 13.7426156998
id: 1
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:217




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218


xxx before update is x: -3.27882862091
y: -58.3891181946
theta: 4.67686128616
speed: 13.7426156998
id: 1
t: 217
xxx after update is x: -3.22713160515
y: -60.0871353149
theta: 4.73438596725
speed: 13.7938518524
id: 1
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.22713160515
y: -60.0871353149
theta: 4.73438596725
speed: 13.7938518524
id: 1
t: 218
xxx after update is x: -3.25557780266
y: -60.2183074951
theta: 4.68653059006
speed: 13.9416618347
id: 1
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:219


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.476799999999998]
222 self.state_dicts[msg.id][msg.t] is (-23.85631561279297, 2.9300949573516846, 3.1344118118286133, 13.870909690856934)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.25557780266
y: -60.2183074951
theta: 4.68653059006
speed: 13.9416618347
id: 1
t: 219
xxx after update is x: -2.92110610008
y: -60.3993415833
theta: 4.60641145706
speed: 14.0583944321
id: 1
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:220




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221


xxx before update is x: -2.92110610008
y: -60.3993415833
theta: 4.60641145706
speed: 14.0583944321
id: 1
t: 220
xxx after update is x: -3.25044941902
y: -61.9248771667
theta: 4.70195960999
speed: 13.995675087
id: 1
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -3.25044941902
y: -61.9248771667
theta: 4.70195960999
speed: 13.995675087
id: 1
t: 221
xxx after update is x: -2.79785990715
y: -62.4381141663
theta: 4.80806064606
speed: 13.7605581284
id: 1
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 9.86666666667




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 9.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '9.82222222222', 'Position': ['(-25.537487030029297', ' 3.395420551300049', ' 3.0934882164001465)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.82222222222,(-25.537487030029297, 3.395420551300049, 3.0934882164001465),14,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.86666666667






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.47039999999999804]
222 self.state_dicts[msg.id][msg.t] is (-26.401968002319336, 3.263458728790283, 3.2270281314849854, 13.900834083557129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update 2.5312976837
y: 3.13164019585
theta: 2.92508792877
speed: 14.4630002975
id: 0
t: 216
xxx after update is x: -23.5622806549
y: 3.500436306
theta: 3.10907793045
speed: 13.8414945602
id: 0
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:218


xxx before update is x: -23.5622806549
y: 3.500436306
theta: 3.10907793045
speed: 13.8414945602
id: 0
t: 217
xxx after update is x: -23.5635147095
y: 3.59511208534
theta: 3.09008097649
speed: 13.9556045532
id: 0
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2271316051483154, -60.087135314941406, 4.734385967254639, 13.793851852416992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:219


xxx before update is x: -23.5635147095
y: 3.59511208534
theta: 3.09008097649
speed: 13.9556045532
id: 0
t: 218
xxx after update is x: -23.8563156128
y: 2.93009495735
theta: 3.13441181183
speed: 13.8709096909
id: 0
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220


xxx before update is x: -23.8563156128
y: 2.93009495735
theta: 3.13441181183
speed: 13.8709096909
id: 0
t: 219
xxx after update is x: -25.1351070404
y: 3.12817001343
theta: 3.20026922226
speed: 13.9134607315
id: 0
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221


xxx before update is x: -25.1351070404
y: 3.12817001343
theta: 3.20026922226
speed: 13.9134607315
id: 0
t: 220
xxx after update is x: -25.53748703
y: 3.3954205513
theta: 3.0934882164
speed: 14.0236968994
id: 0
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 9.82222222222






self.maneuver_requested left
RELEASE,0,9.82222222222,(-25.537487030029297, 3.395420551300049, 3.0934882164001465),14,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 9.82222222222
self.communication_details == 0
sending RELEASE,0,9.82222222222,(-25.537487030029297, 3.395420551300049, 3.0934882164001465),14,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:222


xxx before update is x: -25.53748703
y: 3.3954205513
theta: 3.0934882164
speed: 14.0236968994
id: 0
t: 221
xxx after update is x: -26.4019680023
y: 3.26345872879
theta: 3.22702813148
speed: 13.9008340836
id: 0
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223


xxx before update is x: -26.4019680023
y: 3.26345872879
theta: 3.22702813148
speed: 13.9008340836
id: 0
t: 222
xxx after update is x: -26.9006633759
y: 3.16347265244
theta: 3.07908511162
speed: 13.8357124329
id: 0
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:223


xxx before update is x: -2.79785990715
y: -62.4381141663
theta: 4.80806064606
speed: 13.7605581284
id: 1
t: 222
xxx after update is x: -3.99776220322
y: -62.5551185608
theta: 4.76147127151
speed: 13.7222824097
id: 1
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:224


xxx before update is x: -3.99776220322
y: -62.5551185608
theta: 4.76147127151
speed: 13.7222824097
id: 1
t: 223
xxx after update is x: -3.36338114738
y: -63.3239822388
theta: 4.56923341751
speed: 13.870218277
id: 1
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -3.36338114738
y: -63.3239822388
theta: 4.56923341751
speed: 13.870218277
id: 1
t: 224
xxx after update is x: -2.45424413681
y: -63.7420883179
theta: 4.69373416901
speed: 13.5832033157
id: 1
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (-28.14288902282715, 2.704617500305176, 3.1336028575897217, 14.105571746826172)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:226


xxx before update is x: -2.45424413681
y: -63.7420883179
theta: 4.69373416901
speed: 13.5832033157
id: 1
t: 225
xxx after update is x: -3.49693083763
y: -64.7132110596
theta: 4.80692958832
speed: 13.6555309296
id: 1
t: 226
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.49693083763
y: -64.7132110596
theta: 4.80692958832
speed: 13.6555309296
id: 1
t: 226
xxx after update is x: -3.71186923981
y: -65.2518234253
theta: 4.84151744843
speed: 13.75461483
id: 1
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:227




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:228


xxx before update is x: -3.71186923981
y: -65.2518234253
theta: 4.84151744843
speed: 13.75461483
id: 1
t: 227
xxx after update is x: -2.8706843853
y: -65.5900650024
theta: 4.90903806686
speed: 14.1438808441
id: 1
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:229


xxx before update is x: -2.8706843853
y: -65.5900650024
theta: 4.90903806686
speed: 14.1438808441
id: 1
t: 228
xxx after update is x: -3.32281804085
y: -65.9476623535
theta: 4.77385759354
speed: 13.7603902817
id: 1
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5135999999999983]
222 self.state_dicts[msg.id][msg.t] is (-30.6031551361084, 3.7000746726989746, 3.0072171688079834, 13.7217378616333)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is  self.state_dicts[msg.id][msg.t] is (-3.9977622032165527, -62.555118560791016, 4.761471271514893, 13.722282409667969)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:224


xxx before update is x: -26.9006633759
y: 3.16347265244
theta: 3.07908511162
speed: 13.8357124329
id: 0
t: 223
xxx after update is x: -27.8718757629
y: 3.1876604557
theta: 3.09546709061
speed: 13.8400363922
id: 0
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225


xxx before update is x: -27.8718757629
y: 3.1876604557
theta: 3.09546709061
speed: 13.8400363922
id: 0
t: 224
xxx after update is x: -28.1428890228
y: 2.70461750031
theta: 3.13360285759
speed: 14.1055717468
id: 0
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -28.1428890228
y: 2.70461750031
theta: 3.13360285759
speed: 14.1055717468
id: 0
t: 225
xxx after update is x: -28.4020195007
y: 3.08878421783
theta: 3.25221204758
speed: 13.7438249588
id: 0
t: 226
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:226




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:227


xxx before update is x: -28.4020195007
y: 3.08878421783
theta: 3.25221204758
speed: 13.7438249588
id: 0
t: 226
xxx after update is x: -29.6746616364
y: 3.09599947929
theta: 3.22218084335
speed: 13.7903404236
id: 0
t: 227
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.711869239807129, -65.25182342529297, 4.841517448425293, 13.75461483001709)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:228


xxx before update is x: -29.6746616364
y: 3.09599947929
theta: 3.22218084335
speed: 13.7903404236
id: 0
t: 227
xxx after update is x: -29.1709976196
y: 2.94466781616
theta: 3.28639101982
speed: 13.9369974136
id: 0
t: 228
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:229


xxx before update is x: -29.1709976196
y: 2.94466781616
theta: 3.28639101982
speed: 13.9369974136
id: 0
t: 228
xxx after update is x: -30.6031551361
y: 3.7000746727
theta: 3.00721716881
speed: 13.7217378616
id: 0
t: 229
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.1777777778






self.maneuver_requested left
RELEASE,0,10.1777777778,(-30.6031551361084, 3.7000746726989746, 3.0072171688079834),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.1777777778
self.communication_details == 0
sending RELEASE,0,10.1777777778,(-30.6031551361084, 3.7000746726989746, 3.0072171688079834),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py10.1777777778maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.1777777778






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -3.32281804085
y: -65.9476623535
theta: 4.77385759354
speed: 13.7603902817
id: 1
t: 229
xxx after update is x: -3.63579559326
y: -66.6430358887
theta: 4.79061889648
speed: 13.9776821136
id: 1
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion





maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.2222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.1777777778', 'Position': ['(-30.6031551361084', ' 3.7000746726989746', ' 3.0072171688079834)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.1777777778,(-30.6031551361084, 3.7000746726989746, 3.0072171688079834),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:231


xxx before update is x: -3.63579559326
y: -66.6430358887
theta: 4.79061889648
speed: 13.9776821136
id: 1
t: 230
xxx after update is x: -3.2708337307
y: -67.6568984985
theta: 4.78356552124
speed: 13.8241996765
id: 1
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:232


xxx before update is x: -3.2708337307
y: -67.6568984985
theta: 4.78356552124
speed: 13.8241996765
id: 1
t: 231
xxx after update is x: -3.67240381241
y: -68.475440979
theta: 4.7269654274
speed: 13.9454059601
id: 1
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48319999999999796]
222 self.state_dicts[msg.id][msg.t] is (-32.125770568847656, 3.1692285537719727, 3.161867380142212, 13.80897045135498)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:233


xxx before update is x: -3.67240381241
y: -68.475440979
theta: 4.7269654274
speed: 13.9454059601
id: 1
t: 232
xxx after update is x: -2.85624456406
y: -68.7632598877
theta: 4.68025970459
speed: 13.5527486801
id: 1
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:234


xxx before update is x: -2.85624456406
y: -68.7632598877
theta: 4.68025970459
speed: 13.5527486801
id: 1
t: 233
xxx after update is x: -3.14914941788
y: -69.3707580566
theta: 4.32173013687
speed: 13.7358808517
id: 1
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.14914941788
y: -69.3707580566
theta: 4.32173013687
speed: 13.7358808517
id: 1
t: 234
xxx after update is x: -3.36814689636
y: -70.0648040771
theta: 4.83877182007
speed: 14.0316858292
id: 1
t: 235
maneuver_negotiatir.py finish the upd in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:230


xxx before update is x: -30.6031551361
y: 3.7000746727
theta: 3.00721716881
speed: 13.7217378616
id: 0
t: 229
xxx after update is x: -31.0698280334
y: 3.37781858444
theta: 3.1159529686
speed: 14.0268526077
id: 0
t: 230
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:231


xxx before update is x: -31.0698280334
y: 3.37781858444
theta: 3.1159529686
speed: 14.0268526077
id: 0
t: 230
xxx after update is x: -32.2331314087
y: 2.99201321602
theta: 3.16545248032
speed: 14.1382331848
id: 0
t: 231
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.270833730697632, -67.65689849853516, 4.783565521240234, 13.824199676513672)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:232


xxx before update is x: -32.2331314087
y: 2.99201321602
theta: 3.16545248032
speed: 14.1382331848
id: 0
t: 231
xxx after update is x: -32.1257705688
y: 3.16922855377
theta: 3.16186738014
speed: 13.8089704514
id: 0
t: 232
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:233


xxx before update is x: -32.1257705688
y: 3.16922855377
theta: 3.16186738014
speed: 13.8089704514
id: 0
t: 232
xxx after update is x: -33.1989974976
y: 3.69284701347
theta: 3.31801891327
speed: 14.1685237885
id: 0
t: 233
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -33.1989974976
y: 3.69284701347
theta: 3.31801891327
speed: 14.1685237885
id: 0
t: 233
xxx after update is x: -33.9333992004
y: 3.21848392487
theta: 3.15287685394
speed: 13.799030304
id: 0
t: 234
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:234




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -33.9333992004
y: 3.21848392487
theta: 3.15287685394
speed: 13.799030304
id: 0
t: 234
xxx after update is x: -34.3779258728
y: 3.23512530327
theta: 3.1172952652
speed: 14.0773668289
id: 0
t: 235
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:235




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:236


xxx before update is x: -34.3779258728
y: 3.23512530327
theta: 3.1172952652
speed: 14.0773668289
id: 0
t: 235
xxx after update is x: -35.1959495544
y: 3.1050260067
theta: 3.14910721779
speed: 13.7283906937
id: 0
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.3386142253875732, -70.79104614257812, 4.689064979553223, 14.070796966552734)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -35.1959495544
y: 3.1050260067
theate agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:235


************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:236


xxx before update is x: -3.36814689636
y: -70.0648040771
theta: 4.83877182007
speed: 14.0316858292
id: 1
t: 235
xxx after update is x: -3.33861422539
y: -70.7910461426
theta: 4.68906497955
speed: 14.0707969666
id: 1
t: 236
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.4911999999999979]
222 self.state_dicts[msg.id][msg.t] is (-35.19594955444336, 3.1050260066986084, 3.1491072177886963, 13.72839069366455)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:237


xxx before update is x: -3.33861422539
y: -70.7910461426
theta: 4.68906497955
speed: 14.0707969666
id: 1
t: 236
xxx after update is x: -3.90182232857
y: -72.0127334595
theta: 4.90498971939
speed: 13.7667732239
id: 1
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.5333333333






self.maneuver_requested None
Received -->>: 
current clock is 10.5333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.5333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.5333333333', 'Position': ['(-35.64295196533203', ' 2.855837106704712', ' 3.3130829334259033)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.5333333333,(-35.64295196533203, 2.855837106704712, 3.3130829334259033),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.90182232857
y: -72.0127334595
theta: 4.90498971939
speed: 13.7667732239
id: 1
t: 237
xxx after update is x: -3.30926370621
y: -71.9248657227
theta: 4.651283741
speed: 13.6382875443
id: 1
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.30926370621
y: -71.9248657227
theta: 4.651283741
speed: 13.6382875443
id: 1
t: 238
xxx after update is x: -3.34792470932
y: -72.7279434204
theta: 4.70639228821
speed: 13.8472700119
id: 1
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:240


xxx before update is x: -3.34792470932
y: -72.7279434204
theta: 4.70639228821
speed: 13.8472700119
id: 1
t: 239
xxx after update is x: -3.11706256866
y: -74.0293121338
theta: 4.80670595169
speed: 13.7604646683
id: 1
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (-37.31644821166992, 3.3611764907836914, 3.124674081802368, 14.040505409240723)
if we have all ta: 3.14910721779
speed: 13.7283906937
id: 0
t: 236
xxx after update is x: -35.6429519653
y: 2.8558371067
theta: 3.31308293343
speed: 13.9474210739
id: 0
t: 237
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:237


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.5333333333






self.maneuver_requested left
RELEASE,0,10.5333333333,(-35.64295196533203, 2.855837106704712, 3.3130829334259033),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.5333333333
self.communication_details == 0
sending RELEASE,0,10.5333333333,(-35.64295196533203, 2.855837106704712, 3.3130829334259033),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -35.6429519653
y: 2.8558371067
theta: 3.31308293343
speed: 13.9474210739
id: 0
t: 237
xxx after update is x: -36.2776908875
y: 3.31676292419
theta: 3.14283537865
speed: 13.672454834
id: 0
t: 238
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:238




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -36.2776908875
y: 3.31676292419
theta: 3.14283537865
speed: 13.672454834
id: 0
t: 238
xxx after update is x: -36.7166824341
y: 3.49671912193
theta: 3.00746321678
speed: 13.9128856659
id: 0
t: 239
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:239




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -36.7166824341
y: 3.49671912193
theta: 3.00746321678
speed: 13.9128856659
id: 0
t: 239
xxx after update is x: -37.3164482117
y: 3.36117649078
theta: 3.1246740818
speed: 14.0405054092
id: 0
t: 240
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:240




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:241


xxx before update is x: -37.3164482117
y: 3.36117649078
theta: 3.1246740818
speed: 14.0405054092
id: 0
t: 240
xxx after update is x: -38.2475776672
y: 3.43848657608
theta: 2.9807062149
speed: 13.8487997055
id: 0
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.29235577583313, -74.0859375, 4.740024089813232, 13.715466499328613)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:242


xxx before update is x: -38.2475776672
y: 3.43848657608
theta: 2.9807062149
speed: 13.8487997055
id: 0
t: 241
xxx after update is x: -38.748966217
y: 3.6338288784
theta: 3.00534415245
speed: 13.8460102081
id: 0
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -38.748966217
y: 3.6338288784
theta: 3.00534415245
speed: 13.8460102081
id: 0
t: 242
xxx after update is x: -38.8957328796
y: 3.13526988029
theta: 3.17640376091
speed: 13.7290506363
id: 0
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:243

measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:241


xxx before update is x: -3.11706256866
y: -74.0293121338
theta: 4.80670595169
speed: 13.7604646683
id: 1
t: 240
xxx after update is x: -3.29235577583
y: -74.0859375
theta: 4.74002408981
speed: 13.7154664993
id: 1
t: 241
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:242


xxx before update is x: -3.29235577583
y: -74.0859375
theta: 4.74002408981
speed: 13.7154664993
id: 1
t: 241
xxx after update is x: -3.78717541695
y: -74.4654006958
theta: 4.82919931412
speed: 13.8738603592
id: 1
t: 242
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:243


xxx before update is x: -3.78717541695
y: -74.4654006958
theta: 4.82919931412
speed: 13.8738603592
id: 1
t: 242
xxx after update is x: -3.80293869972
y: -75.3601837158
theta: 4.78391265869
speed: 14.1113395691
id: 1
t: 243
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (-38.89573287963867, 3.1352698802948, 3.176403760910034, 13.729050636291504)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.80293869972
y: -75.3601837158
theta: 4.78391265869
speed: 14.1113395691
id: 1
t: 243
xxx after update is x: -3.10995459557
y: -75.9181900024
theta: 4.68269872665
speed: 14.0698575974
id: 1
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:244




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.10995459557
y: -75.9181900024
theta: 4.68269872665
speed: 14.0698575974
id: 1
t: 244
xxx after update is x: -2.82605147362
y: -76.0923233032
theta: 4.54759407043
speed: 13.7903108597
id: 1
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:245


Received -->>: 
current clock is 10.8888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 10.8888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '10.8888888889', 'Position': ['(-39.93645095825195', ' 3.283029794692993', ' 3.1304235458374023)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.8888888889,(-39.93645095825195, 3.283029794692993, 3.1304235458374023),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.8888888889






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:246


xxx before update is x: -2.82605147362
y: -76.0923233032
theta: 4.54759407043
speed: 13.7903108597
id: 1
t


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:244


xxx before update is x: -38.8957328796
y: 3.13526988029
theta: 3.17640376091
speed: 13.7290506363
id: 0
t: 243
xxx after update is x: -39.6104621887
y: 3.30341720581
theta: 3.25143027306
speed: 13.7630491257
id: 0
t: 244
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:245


xxx before update is x: -39.6104621887
y: 3.30341720581
theta: 3.25143027306
speed: 13.7630491257
id: 0
t: 244
xxx after update is x: -39.9364509583
y: 3.28302979469
theta: 3.13042354584
speed: 13.9839601517
id: 0
t: 245
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.8260514736175537, -76.09232330322266, 4.54759407043457, 13.790310859680176)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 10.8888888889






self.maneuver_requested left
RELEASE,0,10.8888888889,(-39.93645095825195, 3.283029794692993, 3.1304235458374023),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 10.8888888889
self.communication_details == 0
sending RELEASE,0,10.8888888889,(-39.93645095825195, 3.283029794692993, 3.1304235458374023),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:246


xxx before update is x: -39.9364509583
y: 3.28302979469
theta: 3.13042354584
speed: 13.9839601517
id: 0
t: 245
xxx after update is x: -40.3324661255
y: 3.99435997009
theta: 3.13074874878
speed: 13.9149150848
id: 0
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:247


xxx before update is x: -40.3324661255
y: 3.99435997009
theta: 3.13074874878
speed: 13.9149150848
id: 0
t: 246
xxx after update is x: -41.9513816833
y: 2.86090445518
theta: 3.03210520744
speed: 13.5518760681
id: 0
t: 247
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -41.9513816833
y: 2.86090445518
theta: 3.03210520744
speed: 13.5518760681
id: 0
t: 247
xxx after update is x: -41.8394927979
y: 3.39336133003
theta: 3.05287694931
speed: 14.0668373108
id: 0
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:248




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -41.8394927979
y: 3.39336133003
theta: 3.05287694931
speed: 14.0668373108
id: 0
t: 248
xxx after update is x: -42.9057579041
y: 3.10885357857
theta: 3.08751869202
speed: 14.0842227936
id: 0
t: 249
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:249




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:250


xxx before update is x: -42.9057579041
y: 3.10885357857
theta: 3.08751869202
speed: 14.084: 245maneuver_negotiatir.py in the try maneuver function update -. sfinish

xxx after update is x: -2.67431879044
y: -76.7783432007
theta: 4.8196349144
speed: 13.7552814484
id: 1
t: 246
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:247


xxx before update is x: -2.67431879044
y: -76.7783432007
theta: 4.8196349144
speed: 13.7552814484
id: 1
t: 246
xxx after update is x: -3.76848340034
y: -77.6212997437
theta: 4.64003419876
speed: 14.0408401489
id: 1
t: 247
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.476799999999998]
222 self.state_dicts[msg.id][msg.t] is (-41.95138168334961, 2.8609044551849365, 3.0321052074432373, 13.551876068115234)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:248


xxx before update is x: -3.76848340034
y: -77.6212997437
theta: 4.64003419876
speed: 14.0408401489
id: 1
t: 247
xxx after update is x: -3.75898551941
y: -77.9903717041
theta: 4.91781806946
speed: 14.1130046844
id: 1
t: 248
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:249


xxx before update is x: -3.75898551941
y: -77.9903717041
theta: 4.91781806946
speed: 14.1130046844
id: 1
t: 248
xxx after update is x: -3.17171788216
y: -78.9928207397
theta: 4.5578622818
speed: 13.840429306
id: 1
t: 249
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.17171788216
y: -78.9928207397
theta: 4.5578622818
speed: 13.840429306
id: 1
t: 249
xxx after update is x: -3.11240077019
y: -79.5170059204
theta: 4.67968940735
speed: 14.4715099335
id: 1
t: 250
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:250


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:251


xxx before update is x: -3.11240077019
y: -79.5170059204
theta: 4.67968940735
speed: 14.4715099335
id: 1
t: 250
xxx after update is x: -3.24614596367
y: -79.6919631958
theta: 4.83053731918
speed: 13.7045297623
id: 1
t: 251
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
222 self.state_dicts[msg.id][msg.t] is (-44.24093246459961, 2.959076404571533, 3.0927751064300537, 13.633378028869629)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.24614596367
y: -79.6919631958
theta: 4.83053731918
speed: 13.7045297623
id: 1
t: 251
xxx after update is x: -3.39642930031
y: -80.258430481
theta: 4.74286413193
speed: 13.9133758545
id: 1
t: 252
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:252




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:253


xxx befo2227936
id: 0
t: 249
xxx after update is x: -43.5258560181
y: 2.63170385361
theta: 3.18370485306
speed: 13.4450616837
id: 0
t: 250
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.112400770187378, -79.51700592041016, 4.679689407348633, 14.47150993347168)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -43.5258560181
y: 2.63170385361
theta: 3.18370485306
speed: 13.4450616837
id: 0
t: 250
xxx after update is x: -44.2409324646
y: 2.95907640457
theta: 3.09277510643
speed: 13.6333780289
id: 0
t: 251
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:251




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -44.2409324646
y: 2.95907640457
theta: 3.09277510643
speed: 13.6333780289
id: 0
t: 251
xxx after update is x: -44.7705001831
y: 3.49879980087
theta: 3.24187922478
speed: 13.5061426163
id: 0
t: 252
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:252




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:253


xxx before update is x: -44.7705001831
y: 3.49879980087
theta: 3.24187922478
speed: 13.5061426163
id: 0
t: 252
xxx after update is x: -45.6569519043
y: 3.55300211906
theta: 3.1875975132
speed: 13.9077453613
id: 0
t: 253
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.2444444444






self.maneuver_requested left
RELEASE,0,11.2444444444,(-45.656951904296875, 3.553002119064331, 3.1875975131988525),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.2444444444
self.communication_details == 0
sending RELEASE,0,11.2444444444,(-45.656951904296875, 3.553002119064331, 3.1875975131988525),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:254


xxx before update is x: -45.6569519043
y: 3.55300211906
theta: 3.1875975132
speed: 13.9077453613
id: 0
t: 253
xxx after update is x: -45.8826446533
y: 3.58461332321
theta: 3.08111047745
speed: 13.7790603638
id: 0
t: 254
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1809632778167725, -81.4915771484375, 4.702902793884277, 14.06528377532959)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:255


xxx before update is x: -45.8826446533
y: 3.58461332321
theta: 3.08111047745
speed: 13.7790603638
id: 0
t: 254
xxx after update is x: -46.0200386047
y: 3.71424531937
theta: 2.93992590904
speed: 14.0346918106
id: 0
t: 255
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:256


xxx before update is x: -46.0200386047
y: 3.71424531937
theta: 2.93992590904
speed: 14.0346918106
re update is x: -3.39642930031
y: -80.258430481
theta: 4.74286413193
speed: 13.9133758545
id: 1
t: 252
xxx after update is x: -3.37449932098
y: -81.1104507446
theta: 4.73340559006
speed: 14.236987114
id: 1
t: 253
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 11.2444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.2444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '11.2444444444', 'Position': ['(-45.656951904296875', ' 3.553002119064331', ' 3.1875975131988525)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.2444444444,(-45.656951904296875, 3.553002119064331, 3.1875975131988525),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.2444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:254


xxx before update is x: -3.37449932098
y: -81.1104507446
theta: 4.73340559006
speed: 14.236987114
id: 1
t: 253
xxx after update is x: -3.18096327782
y: -81.4915771484
theta: 4.70290279388
speed: 14.0652837753
id: 1
t: 254
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.18096327782
y: -81.4915771484
theta: 4.70290279388
speed: 14.0652837753
id: 1
t: 254
xxx after update is x: -3.50164031982
y: -82.1778717041
theta: 4.69041585922
speed: 13.7276821136
id: 1
t: 255
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:255


risk is [0.0, 0.5071999999999981]
222 self.state_dicts[msg.id][msg.t] is (-46.02003860473633, 3.714245319366455, 2.9399259090423584, 14.03469181060791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:256


xxx before update is x: -3.50164031982
y: -82.1778717041
theta: 4.69041585922
speed: 13.7276821136
id: 1
t: 255
xxx after update is x: -3.26128387451
y: -83.2045135498
theta: 4.70466661453
speed: 13.5743970871
id: 1
t: 256
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:257


xxx before update is x: -3.26128387451
y: -83.2045135498
theta: 4.70466661453
speed: 13.5743970871
id: 1
t: 256
xxx after update is x: -3.414031744
y: -83.480140686
theta: 4.74846363068
speed: 13.4830760956
id: 1
t: 257
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:258


xxx before update is x: -3.414031744
y: -83.480140686
theta: 4.74846363068
speed: 13.4830760956
id: 1
t: 257
xxx after update is x: -3.4272403717
y: -84.2720870972
theta: 4.87524557114
speed: 13.9343261719
id: 1
t: 258
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbid: 0
t: 255
xxx after update is x: -47.50730896
y: 3.59116196632
theta: 3.24821567535
speed: 14.0637264252
id: 0
t: 256
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:257


xxx before update is x: -47.50730896
y: 3.59116196632
theta: 3.24821567535
speed: 14.0637264252
id: 0
t: 256
xxx after update is x: -47.9091415405
y: 3.35427117348
theta: 3.1205534935
speed: 13.6678361893
id: 0
t: 257
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:258


xxx before update is x: -47.9091415405
y: 3.35427117348
theta: 3.1205534935
speed: 13.6678361893
id: 0
t: 257
xxx after update is x: -48.2364883423
y: 2.76178455353
theta: 3.33540034294
speed: 13.8018426895
id: 0
t: 258
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4272403717041016, -84.27208709716797, 4.875245571136475, 13.934326171875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -48.2364883423
y: 2.76178455353
theta: 3.33540034294
speed: 13.8018426895
id: 0
t: 258
xxx after update is x: -49.5839118958
y: 3.64286422729
theta: 3.01448154449
speed: 14.0047340393
id: 0
t: 259
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:259




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -49.5839118958
y: 3.64286422729
theta: 3.01448154449
speed: 14.0047340393
id: 0
t: 259
xxx after update is x: -49.7651290894
y: 3.70297050476
theta: 3.179718256
speed: 13.9696416855
id: 0
t: 260
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:260


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.5555555556






self.maneuver_requested left
RELEASE,0,11.5555555556,(-49.76512908935547, 3.702970504760742, 3.179718255996704),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.5555555556
self.communication_details == 0
sending RELEASE,0,11.5555555556,(-49.76512908935547, 3.702970504760742, 3.179718255996704),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:261


xxx before update is x: -49.7651290894
y: 3.70297050476
theta: 3.179718256
speed: 13.9696416855
id: 0
t: 260
xxx after update is x: -50.6230735779
y: 3.19993638992
theta: 2.97765302658
speed: 13.8687963486
id: 0
t: 261
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:262


xxx before update is x: -50.6230735779
y: 3.19993638992
theta: 2.97765302658
speed: 13.8687963486
id: 0
t: 261
xxx after update is x: -50.7174682617
y: 3.47037267685
theta: 3.1750421524
speed: 13.7981796265
id: 0
t: 262
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.6367926597595215, -86.62407684326172, 4bbb
risk is [0.0, 0.5087999999999981]
222 self.state_dicts[msg.id][msg.t] is (-48.236488342285156, 2.761784553527832, 3.335400342941284, 13.80184268951416)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:259


xxx before update is x: -3.4272403717
y: -84.2720870972
theta: 4.87524557114
speed: 13.9343261719
id: 1
t: 258
xxx after update is x: -3.65412044525
y: -84.7610626221
theta: 4.64790344238
speed: 13.841881752
id: 1
t: 259
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.65412044525
y: -84.7610626221
theta: 4.64790344238
speed: 13.841881752
id: 1
t: 259
xxx after update is x: -3.48334288597
y: -85.5294723511
theta: 4.7837100029
speed: 13.68384552
id: 1
t: 260
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:260


Received -->>: 
current clock is 11.5555555556




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.5555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '11.5555555556', 'Position': ['(-49.76512908935547', ' 3.702970504760742', ' 3.179718255996704)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.5555555556,(-49.76512908935547, 3.702970504760742, 3.179718255996704),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:261


xxx before update is x: -3.48334288597
y: -85.5294723511
theta: 4.7837100029
speed: 13.68384552
id: 1
t: 260
xxx after update is x: -3.39414381981
y: -85.8547210693
theta: 4.67414236069
speed: 13.6319551468
id: 1
t: 261
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.6






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:262


xxx before update is x: -3.39414381981
y: -85.8547210693
theta: 4.67414236069
speed: 13.6319551468
id: 1
t: 261
xxx after update is x: -3.63679265976
y: -86.6240768433
theta: 4.73195505142
speed: 13.9263715744
id: 1
t: 262
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5407999999999991]
222 self.state_dicts[msg.id][msg.t] is (-50.71746826171875, 3.4703726768493652, 3.175042152404785, 13.798179626464844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:263


xxx before update is x: -3.63679265976
y: -86.6240768433
theta: 4.73195505142
speed: 13.9263715744
id: 1
t: 262
xxx after update is x: -3.28154826164
y: -87.2986221313
theta: 4.77879285812
speed: 14.0473461151
id: 1
t: 263
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:264


xxx before update is x: -3.28154826164
y: -87.2986221313
theta: 4.77879285812
speed: 14.0473461151
id: 1
t: 263
xxx after update is x: -2.90627026558
y: -87.6301116943
theta: 4.69614171982
speed: 14.2564029694
id: 1
t: 264
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:265


xxx before update is x: -2.90627026558
y: -87.6301116943
theta: 4.69614171982
speed: 14.2564029694
id: 1
t: 264
xxx after update is x: -3.34707975388
y: -88.3816299438
theta: 4.88730144501
speed: 13.681350708
id: 1
t: 265
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.45279999999999815]
222 self.state_dicts[msg.id][msg.t] is (-52.49689865112305, 3.1922709941864014, 3.1107776165008545, 13.999129295349121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:266


xxx before update is x: -3.34707975388
y: -88.3816299438
theta: 4.88730144501
speed: 13.681350708
id: 1
t: 265
xxx after update is x: -3.22819757462
y: -89.2041778564
theta: 4.64844274521
speed: 13.8199319839
id: 1
t: 266
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:267


xxx before update is x: -3.22819757462
y: -89.2041778564
theta: 4.64844274521
speed: 13.8199319839
id: 1
t: 266
xxx after update is x: -3.47748351097
y: -89.1879348755
theta: 4.61609792709
speed: 13.6364831924
id: 1
t: 267
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:268


xxx before update is x: -3.47748351097
y: -89.1879348755
theta: 4.61609792709
speed: 13.6364831924
id: 1
t: 267
xxx after update is x: -3.09367203712
y: -89.814781189
theta: 4.71675014496
speed: 13.630689621
id: 1
t: 268
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 11.9111111111




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 11.9111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '11.9111111111', 'Position': ['(-54.75749588012695', ' 3.71760630607605', ' 3.1855900287628174)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,11.9111111111,(-54.75749588012695, 3.71760630607605, 3.1855900287628174),14,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.9111111111






self.maneuver_requested None
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5119999999999982]
222 self.state_dicts[msg.id][msg.t] is (-54.75749588012695, 3.71760630607605, 3.1855900287628174, 14.195473670959473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the .731955051422119, 13.926371574401855)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:263


xxx before update is x: -50.7174682617
y: 3.47037267685
theta: 3.1750421524
speed: 13.7981796265
id: 0
t: 262
xxx after update is x: -52.0336685181
y: 3.74573254585
theta: 3.11170864105
speed: 13.634016037
id: 0
t: 263
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:264


xxx before update is x: -52.0336685181
y: 3.74573254585
theta: 3.11170864105
speed: 13.634016037
id: 0
t: 263
xxx after update is x: -51.9627342224
y: 2.89166331291
theta: 3.045566082
speed: 13.7594566345
id: 0
t: 264
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:265


xxx before update is x: -51.9627342224
y: 2.89166331291
theta: 3.045566082
speed: 13.7594566345
id: 0
t: 264
xxx after update is x: -52.4968986511
y: 3.19227099419
theta: 3.1107776165
speed: 13.9991292953
id: 0
t: 265
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:266


xxx before update is x: -52.4968986511
y: 3.19227099419
theta: 3.1107776165
speed: 13.9991292953
id: 0
t: 265
xxx after update is x: -53.8665733337
y: 2.95157790184
theta: 3.03051304817
speed: 13.9863071442
id: 0
t: 266
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -53.8665733337
y: 2.95157790184
theta: 3.03051304817
speed: 13.9863071442
id: 0
t: 266
xxx after update is x: -54.1274719238
y: 2.92098689079
theta: 3.27067995071
speed: 13.8585805893
id: 0
t: 267
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:267


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.4774835109710693, -89.18793487548828, 4.616097927093506, 13.636483192443848)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:268


xxx before update is x: -54.1274719238
y: 2.92098689079
theta: 3.27067995071
speed: 13.8585805893
id: 0
t: 267
xxx after update is x: -54.7574958801
y: 3.71760630608
theta: 3.18559002876
speed: 14.195473671
id: 0
t: 268
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 11.9111111111






self.maneuver_requested left
RELEASE,0,11.9111111111,(-54.75749588012695, 3.71760630607605, 3.1855900287628174),14,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 11.9111111111
self.communication_details == 0
sending RELEASE,0,11.9111111111,(-54.75749588012695, 3.71760630607605, 3.1855900287628174),14,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function xxx before update is x: -54.7574958801
y: 3.71760630608
theta: 3.18559002876
speed: 14.195473671
id: 0
t: 268
xxx after update is x: -55.4579429626
y: 3.19960784912
theta: 3.24676942825
speed: 13.9765510559
id: 0
t: 269
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:269




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:270


xxx before update is x: -55.4579429626
y: 3.19960784912
theta: 3.24676942825
speed: 13.9765510559
id: 0
t: 269
xxx after update is x: -55.8021392822
y: 3.10288047791
theta: 3.01437902451
speed: 13.8520174026
id: 0
t: 270
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -55.8021392822
y: 3.10288047791
theta: 3.01437902451
speed: 13.8520174026
id: 0
t: 270
xxx after update is x: -55.951335907
y: 3.11197781563
theta: 3.21598339081
speed: 13.9304590225
id: 0
t: 271
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:271


aaaaaa


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:272


xxx before update is x: -55.951335907
y: 3.11197781563
theta: 3.21598339081
speed: 13.9304590225
id: 0
t: 271
xxx after update is x: -56.8519172668
y: 3.7140443325
theta: 3.14553928375
speed: 14.141456604
id: 0
t: 272
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.500962734222412, -92.5260238647461, 4.563531875610352, 14.310729026794434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:273


xxx before update is x: -56.8519172668
y: 3.7140443325
theta: 3.14553928375
speed: 14.141456604
id: 0
t: 272
xxx after update is x: -57.7304878235
y: 2.91319608688
theta: 3.12236332893
speed: 13.9433803558
id: 0
t: 273
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:274


xxx before update is x: -57.7304878235
y: 2.91319608688
theta: 3.12236332893
speed: 13.9433803558
id: 0
t: 273
xxx after update is x: -58.3931884766
y: 2.99905920029
theta: 3.14360451698
speed: 13.6195611954
id: 0
t: 274
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -58.3931884766
y: 2.99905920029
theta: 3.14360451698
speed: 13.6195611954
id: 0
t: 274
xxx after update is x: -59.1259346008
y: 3.567486763
theta: 3.1776714325
speed: 13.7540740967
id: 0
t: 275
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:275




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:276


xxx before update is x: -59.1259346008
y: 3.567486763
theta: 3.1776714325
speed: 13.7540740967
id: 0
t: 275
xxx after update is x: -59.3382225037
y: 3.3936021328
theta: 3.14294195175
speed: 13.917965889
id: 0
t: 276
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
update function xxx before update is x: -3.09367203712
y: -89.814781189
theta: 4.71675014496
speed: 13.630689621
id: 1
t: 268
xxx after update is x: -3.42054533958
y: -91.5756072998
theta: 4.7074174881
speed: 14.0200176239
id: 1
t: 269
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:269


maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.42054533958
y: -91.5756072998
theta: 4.7074174881
speed: 14.0200176239
id: 1
t: 269
xxx after update is x: -2.73470759392
y: -91.5762176514
theta: 4.59126996994
speed: 13.9089889526
id: 1
t: 270
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:270




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.73470759392
y: -91.5762176514
theta: 4.59126996994
speed: 13.9089889526
id: 1
t: 270
xxx after update is x: -3.23089551926
y: -92.0172958374
theta: 4.67026805878
speed: 13.9265785217
id: 1
t: 271
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:271




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:272


xxx before update is x: -3.23089551926
y: -92.0172958374
theta: 4.67026805878
speed: 13.9265785217
id: 1
t: 271
xxx after update is x: -3.50096273422
y: -92.5260238647
theta: 4.56353187561
speed: 14.3107290268
id: 1
t: 272
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
222 self.state_dicts[msg.id][msg.t] is (-56.8519172668457, 3.7140443325042725, 3.1455392837524414, 14.141456604003906)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:273


xxx before update is x: -3.50096273422
y: -92.5260238647
theta: 4.56353187561
speed: 14.3107290268
id: 1
t: 272
xxx after update is x: -3.36844062805
y: -93.485206604
theta: 4.80801343918
speed: 13.7190093994
id: 1
t: 273
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.36844062805
y: -93.485206604
theta: 4.80801343918
speed: 13.7190093994
id: 1
t: 273
xxx after update is x: -3.05941557884
y: -93.6647186279
theta: 4.77342271805
speed: 13.8487520218
id: 1
t: 274
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:274




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.05941557884
y: -93.6647186279
theta: 4.77342271805
speed: 13.8487520218
id: 1
t: 274
xxx after update is x: -3.89007043839
y: -95.1534500122
theta: 4.78297376633
speed: 13.9563560486
id: 1
t: 275
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:275


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.2222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:276




going to the update function
sim.py in the sim.py update function Received -->>: 
current clock is 12.2222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.2222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.2666666667', 'Position': ['(-59.33822250366211', ' 3.393602132797241', ' 3.142941951751709)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.2666666667,(-59.33822250366211, 3.393602132797241, 3.142941951751709),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




xxx before update is x: -3.89007043839
y: -95.1534500122
theta: 4.78297376633
speed: 13.9563560486
id: 1
t: 275
xxx after update is x: -3.15085506439
y: -96.2342681885
theta: 4.71485710144
speed: 13.5835952759
id: 1
t: 276
maneuver_negotiatir.py finish the update agent state from ros funtion

targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:277


xxx before update is x: -3.15085506439
y: -96.2342681885
theta: 4.71485710144
speed: 13.5835952759
id: 1
t: 276
xxx after update is x: -3.28578400612
y: -96.8245697021
theta: 4.67456436157
speed: 14.0866250992
id: 1
t: 277
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.28578400612
y: -96.8245697021
theta: 4.67456436157
speed: 14.0866250992
id: 1
t: 277
xxx after update is x: -3.15465068817
y: -96.7646789551
theta: 4.62616586685
speed: 13.9468002319
id: 1
t: 278
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:278


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5231999999999986]
222 self.state_dicts[msg.id][msg.t] is (-60.651424407958984, 3.4773712158203125, 3.2776741981506348, 13.601325035095215)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:279


xxx before update is x: -3.15465068817
y: -96.7646789551
theta: 4.62616586685
speed: 13.9468002319
id: 1
t: 278
xxx after update is x: -3.48804283142
y: -97.2501602173
theta: 4.66822576523
speed: 14.0302391052
id: 1
t: 279
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:280


xxx before update is x: -3.48804283142
y: -97.2501602173
theta: 4.66822576523
speed: 14.0302391052
id: 1
t: 279
xxx after update is x: -2.19375300407
y: -97.3892822266
theta: 4.46928310394
speed: 13.87728405
id: 1
t: 280
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:281


xxx before update is x: -2.19375300407
y: -97.3892822266
theta: 4.46928310394
speed: 13.87728405
id: 1
t: 280
xxx after update is x: -3.05516266823
y: -98.0770797729
theta: 4.66671133041
speed: 13.9449825287
id: 1
t: 281
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.49919999999999787]
222 self.state_dicts[msg.id][msg.t] is (-62.27180099487305, 2.874403238296509, 3.145862340927124, 13.96213150024414)
if we have all measuremecurrent clock is 12.2666666667






self.maneuver_requested left
RELEASE,0,12.2666666667,(-59.33822250366211, 3.393602132797241, 3.142941951751709),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.2666666667
self.communication_details == 0
sending RELEASE,0,12.2666666667,(-59.33822250366211, 3.393602132797241, 3.142941951751709),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
aaaaaa
risk is [0.0, 0.0]
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:277


xxx before update is x: -59.3382225037
y: 3.3936021328
theta: 3.14294195175
speed: 13.917965889
id: 0
t: 276
xxx after update is x: -59.459148407
y: 3.45853686333
theta: 3.21726918221
speed: 13.9055490494
id: 0
t: 277
maneuver_negotiatir.py finish the update agent state from ros funtion
222 self.state_dicts[msg.id][msg.t] is (-3.2857840061187744, -96.82456970214844, 4.674564361572266, 14.086625099182129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:278


xxx before update is x: -59.459148407
y: 3.45853686333
theta: 3.21726918221
speed: 13.9055490494
id: 0
t: 277
xxx after update is x: -60.651424408
y: 3.47737121582
theta: 3.27767419815
speed: 13.6013250351
id: 0
t: 278
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -60.651424408
y: 3.47737121582
theta: 3.27767419815
speed: 13.6013250351
id: 0
t: 278
xxx after update is x: -60.9315605164
y: 3.458994627
theta: 3.14858603477
speed: 13.9142589569
id: 0
t: 279
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:279




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:280


xxx before update is x: -60.9315605164
y: 3.458994627
theta: 3.14858603477
speed: 13.9142589569
id: 0
t: 279
xxx after update is x: -61.9147071838
y: 3.26092028618
theta: 3.20140194893
speed: 13.7693719864
id: 0
t: 280
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.1937530040740967, -97.3892822265625, 4.469283103942871, 13.877284049987793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:281


xxx before update is x: -61.9147071838
y: 3.26092028618
theta: 3.20140194893
speed: 13.7693719864
id: 0
t: 280
xxx after update is x: -62.2718009949
y: 2.8744032383
theta: 3.14586234093
speed: 13.9621315002
id: 0
t: 281
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:282


xxx before update is x: -62.2718009949
y: 2.8744032383
theta: 3.14586234093
speed: 13.9621315002
id: 0
t: 281
xxx after update is x: -63.0099525452
y: 3.01938176155
theta: 3.17915940285
speed: 14.0382766724
id: 0
t: 282
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < selfnts for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:282


xxx before update is x: -3.05516266823
y: -98.0770797729
theta: 4.66671133041
speed: 13.9449825287
id: 1
t: 281
xxx after update is x: -2.91112446785
y: -99.0897216797
theta: 4.82031869888
speed: 13.844991684
id: 1
t: 282
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:283


xxx before update is x: -2.91112446785
y: -99.0897216797
theta: 4.82031869888
speed: 13.844991684
id: 1
t: 282
xxx after update is x: -3.11757421494
y: -99.7168884277
theta: 4.8046169281
speed: 13.9210348129
id: 1
t: 283
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:284


xxx before update is x: -3.11757421494
y: -99.7168884277
theta: 4.8046169281
speed: 13.9210348129
id: 1
t: 283
xxx after update is x: -3.0306854248
y: -100.293029785
theta: 4.50048112869
speed: 14.2129745483
id: 1
t: 284
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
Received -->>: 
current clock is 12.6222222222




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.6222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.6222222222', 'Position': ['(-64.14456176757812', ' 2.6202502250671387', ' 3.1913928985595703)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.6222222222,(-64.14456176757812, 2.6202502250671387, 3.1913928985595703),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
222 self.state_dicts[msg.id][msg.t] is (-64.14456176757812, 2.6202502250671387, 3.1913928985595703, 13.888216018676758)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.6222222222






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:285


maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -3.0306854248
y: -100.293029785
theta: 4.50048112869
speed: 14.2129745483
id: 1
t: 284
xxx after update is x: -2.98767781258
y: -101.804756165
theta: 4.85513114929
speed: 14.0994758606
id: 1
t: 285
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:286


xxx before update is x: -2.98767781258
y: -101.804756165
theta: 4.85513114929
speed: 14.0994758606
id: 1
t: 285
xxx after update is x: -2.99592280388
y: -101.2029953
theta: 4.84446001053
speed: 13.8595762253
id: 1
t: 286
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:287


xxx before update is x: -2.99592280388
y: .speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:283


xxx before update is x: -63.0099525452
y: 3.01938176155
theta: 3.17915940285
speed: 14.0382766724
id: 0
t: 282
xxx after update is x: -63.4881706238
y: 3.13227200508
theta: 3.19566011429
speed: 13.9007339478
id: 0
t: 283
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:284


xxx before update is x: -63.4881706238
y: 3.13227200508
theta: 3.19566011429
speed: 13.9007339478
id: 0
t: 283
xxx after update is x: -64.1445617676
y: 2.62025022507
theta: 3.19139289856
speed: 13.8882160187
id: 0
t: 284
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.6222222222






self.maneuver_requested left
RELEASE,0,12.6222222222,(-64.14456176757812, 2.6202502250671387, 3.1913928985595703),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.6222222222
self.communication_details == 0
sending RELEASE,0,12.6222222222,(-64.14456176757812, 2.6202502250671387, 3.1913928985595703),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -64.1445617676
y: 2.62025022507
theta: 3.19139289856
speed: 13.8882160187
id: 0
t: 284
xxx after update is x: -64.9931564331
y: 3.93223047256
theta: 3.17118263245
speed: 13.8302984238
id: 0
t: 285
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:285


aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.987677812576294, -101.80475616455078, 4.855131149291992, 14.099475860595703)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:286


xxx before update is x: -64.9931564331
y: 3.93223047256
theta: 3.17118263245
speed: 13.8302984238
id: 0
t: 285
xxx after update is x: -65.7171020508
y: 3.94587111473
theta: 3.03040575981
speed: 14.071398735
id: 0
t: 286
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:287


xxx before update is x: -65.7171020508
y: 3.94587111473
theta: 3.03040575981
speed: 14.071398735
id: 0
t: 286
xxx after update is x: -65.7926483154
y: 2.77049350739
theta: 3.17438197136
speed: 14.0013961792
id: 0
t: 287
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:288


xxx before update is x: -65.7926483154
y: 2.77049350739
theta: 3.17438197136
speed: 14.0013961792
id: 0
t: 287
xxx after update is x: -67.3396759033
y: 3.51559305191
theta: 3.13947057724
speed: 13.7726640701
id: 0
t: 288
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.1760761737823486, -102.95332336425781, 4.725673675537109, 14.05596923828125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.spe-101.2029953
theta: 4.84446001053
speed: 13.8595762253
id: 1
t: 286
xxx after update is x: -3.00811052322
y: -102.190345764
theta: 4.67732620239
speed: 13.6172943115
id: 1
t: 287
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:288


xxx before update is x: -3.00811052322
y: -102.190345764
theta: 4.67732620239
speed: 13.6172943115
id: 1
t: 287
xxx after update is x: -3.17607617378
y: -102.953323364
theta: 4.72567367554
speed: 14.0559692383
id: 1
t: 288
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.49919999999999787]
222 self.state_dicts[msg.id][msg.t] is (-67.33967590332031, 3.5155930519104004, 3.1394705772399902, 13.772664070129395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:289


xxx before update is x: -3.17607617378
y: -102.953323364
theta: 4.72567367554
speed: 14.0559692383
id: 1
t: 288
xxx after update is x: -3.54905819893
y: -103.8491745
theta: 4.76040840149
speed: 13.851808548
id: 1
t: 289
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:290


xxx before update is x: -3.54905819893
y: -103.8491745
theta: 4.76040840149
speed: 13.851808548
id: 1
t: 289
xxx after update is x: -3.19465970993
y: -103.803146362
theta: 4.83909988403
speed: 13.9331569672
id: 1
t: 290
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19465970993
y: -103.803146362
theta: 4.83909988403
speed: 13.9331569672
id: 1
t: 290
xxx after update is x: -3.12157034874
y: -104.43813324
theta: 4.64696359634
speed: 13.7918720245
id: 1
t: 291
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:291


************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.47199999999999803]
222 self.state_dicts[msg.id][msg.t] is (-68.68683624267578, 3.7103281021118164, 3.269965171813965, 13.806476593017578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 12.9333333333




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 12.9333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '12.9333333333', 'Position': ['(-68.68683624267578', ' 3.7103281021118164', ' 3.269965171813965)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,12.9333333333,(-68.68683624267578, 3.7103281021118164, 3.269965171813965),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:292


xxx before update is x: -3.12157034874
y: -104.43813324
theta: 4.64696359634
speed: 13.7918720245
id: 1
t: 291
xxx after update is x: -3.4067196846
y: -105.310791016
theta: 4.92065382004
speed: 13.6122713089
id: 1
t: 292
maneuver_negotied:xxxxxxxxx
 self.man_init:
xxx before update is x: -67.3396759033
y: 3.51559305191
theta: 3.13947057724
speed: 13.7726640701
id: 0
t: 288
xxx after update is x: -67.666229248
y: 2.7680683136
theta: 3.08662104607
speed: 13.4723987579
id: 0
t: 289
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:289




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:290


xxx before update is x: -67.666229248
y: 2.7680683136
theta: 3.08662104607
speed: 13.4723987579
id: 0
t: 289
xxx after update is x: -67.842010498
y: 3.39375066757
theta: 3.32406258583
speed: 13.5850439072
id: 0
t: 290
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:291


xxx before update is x: -67.842010498
y: 3.39375066757
theta: 3.32406258583
speed: 13.5850439072
id: 0
t: 290
xxx after update is x: -68.6868362427
y: 3.71032810211
theta: 3.26996517181
speed: 13.806476593
id: 0
t: 291
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.9333333333






self.maneuver_requested left
RELEASE,0,12.9333333333,(-68.68683624267578, 3.7103281021118164, 3.269965171813965),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 12.9333333333
self.communication_details == 0
sending RELEASE,0,12.9333333333,(-68.68683624267578, 3.7103281021118164, 3.269965171813965),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:292


xxx before update is x: -68.6868362427
y: 3.71032810211
theta: 3.26996517181
speed: 13.806476593
id: 0
t: 291
xxx after update is x: -69.5052337646
y: 3.52938127518
theta: 3.29936599731
speed: 14.1827468872
id: 0
t: 292
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.40671968460083, -105.310791015625, 4.920653820037842, 13.612271308898926)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:293


xxx before update is x: -69.5052337646
y: 3.52938127518
theta: 3.29936599731
speed: 14.1827468872
id: 0
t: 292
xxx after update is x: -70.2972412109
y: 3.37894248962
theta: 3.28045892715
speed: 13.9460449219
id: 0
t: 293
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -70.2972412109
y: 3.37894248962
theta: 3.28045892715
speed: 13.9460449219
id: 0
t: 293
xxx after update is x: -70.6974868774
y: 3.61272978783
theta: 3.2392385006
speed: 13.676574707
id: 0
t: 294
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:294




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:295


xxx before update is x: -70.6974868774
y: 3.61272978783
theta: 3.2392385006
speed: 13.676574707
id: 0
t: 294
xxx after update is x: -71.1964416504
y: 3.54408669472
theta: 3.20603346825
speed: 14atir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 12.9777777778






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:293


xxx before update is x: -3.4067196846
y: -105.310791016
theta: 4.92065382004
speed: 13.6122713089
id: 1
t: 292
xxx after update is x: -2.86158204079
y: -106.806053162
theta: 4.8246717453
speed: 13.5596075058
id: 1
t: 293
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:294


xxx before update is x: -2.86158204079
y: -106.806053162
theta: 4.8246717453
speed: 13.5596075058
id: 1
t: 293
xxx after update is x: -3.55186748505
y: -105.638847351
theta: 4.71475934982
speed: 13.8442268372
id: 1
t: 294
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
222 self.state_dicts[msg.id][msg.t] is (-70.6974868774414, 3.612729787826538, 3.2392385005950928, 13.67657470703125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:295


xxx before update is x: -3.55186748505
y: -105.638847351
theta: 4.71475934982
speed: 13.8442268372
id: 1
t: 294
xxx after update is x: -3.26478505135
y: -107.196121216
theta: 4.53772068024
speed: 13.9575834274
id: 1
t: 295
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:296


xxx before update is x: -3.26478505135
y: -107.196121216
theta: 4.53772068024
speed: 13.9575834274
id: 1
t: 295
xxx after update is x: -2.97921204567
y: -107.778900146
theta: 4.64122533798
speed: 13.8938875198
id: 1
t: 296
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:297


xxx before update is x: -2.97921204567
y: -107.778900146
theta: 4.64122533798
speed: 13.8938875198
id: 1
t: 296
xxx after update is x: -3.18583106995
y: -108.115638733
theta: 4.81441831589
speed: 14.1727790833
id: 1
t: 297
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:298


xxx before update is x: -3.18583106995
y: -108.115638733
theta: 4.81441831589
speed: 14.1727790833
id: 1
t: 297
xxx after update is x: -3.12549161911
y: -108.527809143
theta: 4.73245382309
speed: 13.7550563812
id: 1
t: 298
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5103999999999982]
222 self.state_dicts[msg.id][msg.t] is (-72.6753921508789, 3.032609462738037, 3.1403064727783203, 13.969582557678223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12549161911
y: -108.527809143
theta: 4.73245382309
sp.1136045456
id: 0
t: 295
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:296


xxx before update is x: -71.1964416504
y: 3.54408669472
theta: 3.20603346825
speed: 14.1136045456
id: 0
t: 295
xxx after update is x: -72.6630401611
y: 3.34494590759
theta: 3.12509036064
speed: 13.9421920776
id: 0
t: 296
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-2.9792120456695557, -107.77890014648438, 4.641225337982178, 13.893887519836426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:297


xxx before update is x: -72.6630401611
y: 3.34494590759
theta: 3.12509036064
speed: 13.9421920776
id: 0
t: 296
xxx after update is x: -72.669708252
y: 3.27566170692
theta: 2.96035790443
speed: 14.0974493027
id: 0
t: 297
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:298


xxx before update is x: -72.669708252
y: 3.27566170692
theta: 2.96035790443
speed: 14.0974493027
id: 0
t: 297
xxx after update is x: -72.6753921509
y: 3.03260946274
theta: 3.14030647278
speed: 13.9695825577
id: 0
t: 298
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:299


xxx before update is x: -72.6753921509
y: 3.03260946274
theta: 3.14030647278
speed: 13.9695825577
id: 0
t: 298
xxx after update is x: -73.196723938
y: 3.57900738716
theta: 3.04993629456
speed: 14.170674324
id: 0
t: 299
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.2888888889






self.maneuver_requested left
RELEASE,0,13.2888888889,(-73.19672393798828, 3.579007387161255, 3.049936294555664),14,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 13.2888888889
self.communication_details == 0
sending RELEASE,0,13.2888888889,(-73.19672393798828, 3.579007387161255, 3.049936294555664),14,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:300


xxx before update is x: -73.196723938
y: 3.57900738716
theta: 3.04993629456
speed: 14.170674324
id: 0
t: 299
xxx after update is x: -74.6433792114
y: 3.1902449131
theta: 3.2458999157
speed: 14.1290073395
id: 0
t: 300
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:301


xxx before update is x: -74.6433792114
y: 3.1902449131
theta: 3.2458999157
speed: 14.1290073395
id: 0
t: 300
xxx after update is x: -74.4283370972
y: 2.86910152435
theta: 3.0539317131
speed: 14.1856155396
id: 0
t: 301
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:302


xxx befeed: 13.7550563812
id: 1
t: 298
xxx after update is x: -3.73946166039
y: -109.830551147
theta: 4.80838871002
speed: 13.9863710403
id: 1
t: 299
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:299


Received -->>: 
current clock is 13.2888888889




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 13.2888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '14', 'Sender': '0', 'TagID': '1', 'Time': '13.2888888889', 'Position': ['(-73.19672393798828', ' 3.579007387161255', ' 3.049936294555664)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,13.2888888889,(-73.19672393798828, 3.579007387161255, 3.049936294555664),14,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:300


xxx before update is x: -3.73946166039
y: -109.830551147
theta: 4.80838871002
speed: 13.9863710403
id: 1
t: 299
xxx after update is x: -3.08318853378
y: -109.845611572
theta: 4.80345964432
speed: 13.5848112106
id: 1
t: 300
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.3333333333






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08318853378
y: -109.845611572
theta: 4.80345964432
speed: 13.5848112106
id: 1
t: 300
xxx after update is x: -3.18338537216
y: -110.292411804
theta: 4.66227149963
speed: 14.1997442245
id: 1
t: 301
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. sfinish
leave the update function 
in spin function, finish the n times spin:301




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.18338537216
y: -110.292411804
theta: 4.66227149963
speed: 14.1997442245
id: 1
t: 301
xxx after update is x: -3.32352900505
y: -111.002182007
theta: 4.67676305771
speed: 13.668639183
id: 1
t: 302
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:302


************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:303


xxx before update is x: -3.32352900505
y: -111.002182007
theta: 4.67676305771
speed: 13.668639183
id: 1
t: 302
xxx after update is x: -2.82328677177
y: -111.788536072
theta: 4.62049055099
speed: 13.7222471237
id: 1
t: 303
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.503999999999998]
222 self.state_dicts[msg.id][msg.t] is (-76.15839385986328, 3.232858657836914, 3.205061197280884, 14.042216300964355)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.82328677177
y: -111.788536072
theta: 4.62049055099
speed: 13.7222471237
id: 1
t: 303
xxx after update is x: -3.08396172523
y: -112.723342896
theta: 4.78810310364
speed: 13.7861776352
id: 1
t: 304
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:304




going to the update function
sim.py in the sim.py update fore update is x: -74.4283370972
y: 2.86910152435
theta: 3.0539317131
speed: 14.1856155396
id: 0
t: 301
xxx after update is x: -76.0302429199
y: 3.71567678452
theta: 3.10058832169
speed: 13.6590156555
id: 0
t: 302
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.323529005050659, -111.00218200683594, 4.67676305770874, 13.668639183044434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:303


xxx before update is x: -76.0302429199
y: 3.71567678452
theta: 3.10058832169
speed: 13.6590156555
id: 0
t: 302
xxx after update is x: -76.1583938599
y: 3.23285865784
theta: 3.20506119728
speed: 14.042216301
id: 0
t: 303
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:304


xxx before update is x: -76.1583938599
y: 3.23285865784
theta: 3.20506119728
speed: 14.042216301
id: 0
t: 303
xxx after update is x: -76.8675613403
y: 3.37246489525
theta: 3.09899401665
speed: 13.982635498
id: 0
t: 304
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:305


xxx before update is x: -76.8675613403
y: 3.37246489525
theta: 3.09899401665
speed: 13.982635498
id: 0
t: 304
xxx after update is x: -77.0189208984
y: 3.08683896065
theta: 2.99508619308
speed: 13.7185878754
id: 0
t: 305
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:306


xxx before update is x: -77.0189208984
y: 3.08683896065
theta: 2.99508619308
speed: 13.7185878754
id: 0
t: 305
xxx after update is x: -77.503578186
y: 2.91041946411
theta: 3.1289396286
speed: 13.7523822784
id: 0
t: 306
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.2331156730651855, -114.17100524902344, 4.641839504241943, 13.829623222351074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:307


xxx before update is x: -77.503578186
y: 2.91041946411
theta: 3.1289396286
speed: 13.7523822784
id: 0
t: 306
xxx after update is x: -77.9780807495
y: 2.84810185432
theta: 3.15828847885
speed: 13.845407486
id: 0
t: 307
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.6444444444






self.maneuver_requested left
RELEASE,0,13.6444444444,(-77.97808074951172, 2.848101854324341, 3.1582884788513184),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 13.6444444444
self.communication_details == 0
sending RELEASE,0,13.6444444444,(-77.97808074951172, 2.848101854324341, 3.1582884788513184),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:308


xxx before update is unction 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:305


xxx before update is x: -3.08396172523
y: -112.723342896
theta: 4.78810310364
speed: 13.7861776352
id: 1
t: 304
xxx after update is x: -3.03836679459
y: -113.153182983
theta: 4.89925718307
speed: 14.3611745834
id: 1
t: 305
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:306


xxx before update is x: -3.03836679459
y: -113.153182983
theta: 4.89925718307
speed: 14.3611745834
id: 1
t: 305
xxx after update is x: -3.23311567307
y: -114.171005249
theta: 4.64183950424
speed: 13.8296232224
id: 1
t: 306
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:307


xxx before update is x: -3.23311567307
y: -114.171005249
theta: 4.64183950424
speed: 13.8296232224
id: 1
t: 306
xxx after update is x: -3.66480183601
y: -114.700172424
theta: 4.67055416107
speed: 13.8484373093
id: 1
t: 307
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.481599999999998]
222 self.state_dicts[msg.id][msg.t] is (-77.97808074951172, 2.848101854324341, 3.1582884788513184, 13.845407485961914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
current clock is 13.6444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 13.6444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '13.6444444444', 'Position': ['(-77.97808074951172', ' 2.848101854324341', ' 3.1582884788513184)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,13.6444444444,(-77.97808074951172, 2.848101854324341, 3.1582884788513184),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:308


xxx before update is x: -3.66480183601
y: -114.700172424
theta: 4.67055416107
speed: 13.8484373093
id: 1
t: 307
xxx after update is x: -3.66931676865
y: -114.733970642
theta: 4.91011238098
speed: 13.7506084442
id: 1
t: 308
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 13.6888888889






self.maneuver_requested None


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:309


maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -3.66931676865
y: -114.733970642
theta: 4.91011238098
speed: 13.7506084442
id: 1
t: 308
xxx after update is x: -3.33601784706
y: -116.109550476
theta: 4.76658439636
speed: 13.6889209747
id: 1
t: 309
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:310


xxx before update is x: -3.33601784706
y: -116.109550476
theta: 4.76658439636
speed: 13.6889209747
id: 1
t: 309
xxx after update is x: -3.63986706734
y: -116.965362549
theta: 4.73798894882
speed: 13.922989845x: -77.9780807495
y: 2.84810185432
theta: 3.15828847885
speed: 13.845407486
id: 0
t: 307
xxx after update is x: -79.0816040039
y: 3.72259306908
theta: 3.10684728622
speed: 13.7923078537
id: 0
t: 308
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:309


xxx before update is x: -79.0816040039
y: 3.72259306908
theta: 3.10684728622
speed: 13.7923078537
id: 0
t: 308
xxx after update is x: -79.9107666016
y: 3.53922963142
theta: 3.16029429436
speed: 14.1771640778
id: 0
t: 309
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -79.9107666016
y: 3.53922963142
theta: 3.16029429436
speed: 14.1771640778
id: 0
t: 309
xxx after update is x: -80.6726989746
y: 3.27894854546
theta: 3.45238351822
speed: 14.2124633789
id: 0
t: 310
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:310




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:311


xxx before update is x: -80.6726989746
y: 3.27894854546
theta: 3.45238351822
speed: 14.2124633789
id: 0
t: 310
xxx after update is x: -80.77394104
y: 3.22500038147
theta: 3.21441817284
speed: 13.9537916183
id: 0
t: 311
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:312


xxx before update is x: -80.77394104
y: 3.22500038147
theta: 3.21441817284
speed: 13.9537916183
id: 0
t: 311
xxx after update is x: -82.1025848389
y: 2.53263115883
theta: 3.24495267868
speed: 14.119052887
id: 0
t: 312
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
222 self.state_dicts[msg.id][msg.t] is (-3.187981128692627, -117.62284851074219, 4.595920562744141, 13.558521270751953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:313


xxx before update is x: -82.1025848389
y: 2.53263115883
theta: 3.24495267868
speed: 14.119052887
id: 0
t: 312
xxx after update is x: -82.009475708
y: 3.19664096832
theta: 3.19017553329
speed: 13.9149694443
id: 0
t: 313
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -82.009475708
y: 3.19664096832
theta: 3.19017553329
speed: 13.9149694443
id: 0
t: 313
xxx after update is x: -82.4479217529
y: 2.94590783119
theta: 3.03826761246
speed: 13.7484397888
id: 0
t: 314
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:314




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:315


xxx before update is x: -82.4479217529
y: 2.94590783119
theta: 3.03826761246
speed: 13.7484397888
id: 0
t: 314
xxx after update is x: -83.5735931396
y: 3.02162957191
theta: 3.11174154282
speed: 13.6662464142
id: 0
t: 315
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.0






self.maneuver_requested left
RELEASE,0,14.0,(-83.57359313
id: 1
t: 310
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:311


xxx before update is x: -3.63986706734
y: -116.965362549
theta: 4.73798894882
speed: 13.9229898453
id: 1
t: 310
xxx after update is x: -2.89117860794
y: -116.588310242
theta: 4.63602542877
speed: 14.214222908
id: 1
t: 311
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:312


xxx before update is x: -2.89117860794
y: -116.588310242
theta: 4.63602542877
speed: 14.214222908
id: 1
t: 311
xxx after update is x: -3.18798112869
y: -117.622848511
theta: 4.59592056274
speed: 13.5585212708
id: 1
t: 312
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5327999999999988]
222 self.state_dicts[msg.id][msg.t] is (-82.10258483886719, 2.5326311588287354, 3.24495267868042, 14.11905288696289)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.18798112869
y: -117.622848511
theta: 4.59592056274
speed: 13.5585212708
id: 1
t: 312
xxx after update is x: -3.64373755455
y: -118.775497437
theta: 4.7997803688
speed: 13.9155263901
id: 1
t: 313
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:313




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:314


xxx before update is x: -3.64373755455
y: -118.775497437
theta: 4.7997803688
speed: 13.9155263901
id: 1
t: 313
xxx after update is x: -2.87245368958
y: -118.144897461
theta: 4.7191824913
speed: 13.9345436096
id: 1
t: 314
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:315


xxx before update is x: -2.87245368958
y: -118.144897461
theta: 4.7191824913
speed: 13.9345436096
id: 1
t: 314
xxx after update is x: -3.02571105957
y: -119.042976379
theta: 4.72362422943
speed: 13.7689247131
id: 1
t: 315
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
current clock is 14.0




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 14.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '14.0', 'Position': ['(-83.57359313964844', ' 3.021629571914673', ' 3.111741542816162)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,14.0,(-83.57359313964844, 3.021629571914673, 3.111741542816162),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:316


xxx before update is x: -3.02571105957
y: -119.042976379
theta: 4.72362422943
speed: 13.7689247131
id: 1
t: 315
xxx after update is x: -3.70348143578
y: -120.049102783
theta: 4.68322563171
speed: 14.0862874985
id: 1
t: 316
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir3964844, 3.021629571914673, 3.111741542816162),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 14.0
self.communication_details == 0
sending RELEASE,0,14.0,(-83.57359313964844, 3.021629571914673, 3.111741542816162),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:316


xxx before update is x: -83.5735931396
y: 3.02162957191
theta: 3.11174154282
speed: 13.6662464142
id: 0
t: 315
xxx after update is x: -84.041809082
y: 3.68452310562
theta: 2.82734155655
speed: 14.0677776337
id: 0
t: 316
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:317


xxx before update is x: -84.041809082
y: 3.68452310562
theta: 2.82734155655
speed: 14.0677776337
id: 0
t: 316
xxx after update is x: -84.9066543579
y: 3.11167693138
theta: 3.12089920044
speed: 13.9143199921
id: 0
t: 317
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:318


xxx before update is x: -84.9066543579
y: 3.11167693138
theta: 3.12089920044
speed: 13.9143199921
id: 0
t: 317
xxx after update is x: -85.0026626587
y: 3.21602296829
theta: 3.16445827484
speed: 14.1503162384
id: 0
t: 318
maneuver_negotiatir.py finish the update agent state from ros funtion


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -85.0026626587
y: 3.21602296829
theta: 3.16445827484
speed: 14.1503162384
id: 0
t: 318
xxx after update is x: -86.4261398315
y: 3.33563423157
theta: 3.2111518383
speed: 13.8689432144
id: 0
t: 319
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:319




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -86.4261398315
y: 3.33563423157
theta: 3.2111518383
speed: 13.8689432144
id: 0
t: 319
xxx after update is x: -86.4697189331
y: 3.02829456329
theta: 3.07106494904
speed: 13.4440574646
id: 0
t: 320
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:320




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -86.4697189331
y: 3.02829456329
theta: 3.07106494904
speed: 13.4440574646
id: 0
t: 320
xxx after update is x: -87.3008651733
y: 4.12818288803
theta: 3.0643992424
speed: 13.982421875
id: 0
t: 321
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:321




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -87.3008651733
y: 4.12818288803
theta: 3.0643992424
speed: 13.982421875
id: 0
t: 321
xxx after update is x: -88.2252197266
y: 2.70158934593
theta: 2.98166370392
speed: 13.5539922714
id: 0
t: 322
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:322


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.3111111111






self.maneuver_requested left
RELEASE,0,14.3111111111,(-88.2252197265625, 2.701589345932007, 2.981663703918457),13,1,3.24444444444,0
maneuver_negoti.py in the try maneuver function update -. strat
current clock is 14.0444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
************normalize weight**********************


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:317


aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5199999999999985]
222 self.state_dicts[msg.id][msg.t] is (-84.90665435791016, 3.1116769313812256, 3.120899200439453, 13.91431999206543)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:318


222 self.state_dicts[msg.id][msg.t] is (-85.0026626586914, 3.2160229682922363, 3.1644582748413086, 14.15031623840332)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:319


222 self.state_dicts[msg.id][msg.t] is (-86.42613983154297, 3.335634231567383, 3.2111518383026123, 13.868943214416504)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:320


222 self.state_dicts[msg.id][msg.t] is (-86.46971893310547, 3.028294563293457, 3.0710649490356445, 13.44405746459961)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:321


222 self.state_dicts[msg.id][msg.t] is (-87.30086517333984, 4.128182888031006, 3.064399242401123, 13.982421875)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:322


222 self.state_dicts[msg.id][msg.t] is (-88.2252197265625, 2.701589345932007, 2.981663703918457, 13.55399227142334)
Received -->>: 
current clock is 14.0444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 14.0444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '14.3111111111', 'Position': ['(-88.2252197265625', ' 2.701589345932007', ' 2.981663703918457)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,14.3111111111,(-88.2252197265625, 2.701589345932007, 2.981663703918457),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1






going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:323


222 self.state_dicts[msg.id][msg.t] is (-88.6525650024414, 3.1479227542877197, 3.1499998569488525, 13.791072845458984)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:324


222 self.state_dicts[msg.id][msg.t] is (-89.47848510742188, 3.4437410831451416, 3.2658965587615967, 14.028820037841797)
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.0444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
222 self.state_dicts[msg.id][msg.t] is (-89.88521575927734, 2.7243926525115967, 3.0905814170837402, 14.224405288696289)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:325




going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:326


222 self.state_dicts[msg.id][msg.t] is (-90.25755310058594, 2.970938205718994, 3.2221736907958984, 13.717411041259766)
222 self.state_dicts[msg.id][msg.t] is (-90.80982971191406, 3.1878597736358643, 3.159902811050415, 13.815131187438965)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finatir.py start the update_agent_message
current clock is 14.3111111111
self.communication_details == 0
sending RELEASE,0,14.3111111111,(-88.2252197265625, 2.701589345932007, 2.981663703918457),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -88.2252197266
y: 2.70158934593
theta: 2.98166370392
speed: 13.5539922714
id: 0
t: 322
xxx after update is x: -88.6525650024
y: 3.14792275429
theta: 3.14999985695
speed: 13.7910728455
id: 0
t: 323
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:323




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -88.6525650024
y: 3.14792275429
theta: 3.14999985695
speed: 13.7910728455
id: 0
t: 323
xxx after update is x: -89.4784851074
y: 3.44374108315
theta: 3.26589655876
speed: 14.0288200378
id: 0
t: 324
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:324




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -89.4784851074
y: 3.44374108315
theta: 3.26589655876
speed: 14.0288200378
id: 0
t: 324
xxx after update is x: -89.8852157593
y: 2.72439265251
theta: 3.09058141708
speed: 14.2244052887
id: 0
t: 325
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:325




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -89.8852157593
y: 2.72439265251
theta: 3.09058141708
speed: 14.2244052887
id: 0
t: 325
xxx after update is x: -90.2575531006
y: 2.97093820572
theta: 3.2221736908
speed: 13.7174110413
id: 0
t: 326
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:326




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -90.2575531006
y: 2.97093820572
theta: 3.2221736908
speed: 13.7174110413
id: 0
t: 326
xxx after update is x: -90.8098297119
y: 3.18785977364
theta: 3.15990281105
speed: 13.8151311874
id: 0
t: 327
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:327




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -90.8098297119
y: 3.18785977364
theta: 3.15990281105
speed: 13.8151311874
id: 0
t: 327
xxx after update is x: -91.2175292969
y: 3.5214176178
theta: 3.24638080597
speed: 13.7325220108
id: 0
t: 328
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:328




going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -91.2175292969
y: 3.5214176178
theta: 3.24638080597
speed: 13.7325220108
id: 0
t: 328
xxx after update is x: -92.5819473267
y: 3.1830303669
theta: 3.17128515244
speed: 13.4849624634
id: 0
t: 329
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:329


maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.6222222222






self.maneuver_requested left
RELEASE,0,14.6222222222,(-92.58194732666016, 3.183030366897583, 3.1712851524353027),13,1,3.24444444444,0
maneuver_negotiatir.py start the update_agent_message
current clock is 14.6222222222
self.communication_details == 0
sending RELEASE,0,14.6222222222,(-92.58194732666016, 3.183030366897583, 3.1712851524353027),13,1,3.24444444444,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:330


ish the n times spin:327


222 self.state_dicts[msg.id][msg.t] is (-91.217529296875, 3.5214176177978516, 3.2463808059692383, 13.732522010803223)


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:328




going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:329


222 self.state_dicts[msg.id][msg.t] is (-92.58194732666016, 3.183030366897583, 3.1712851524353027, 13.484962463378906)
Received -->>: 
current clock is 14.0444444444




maneuver_negotiatir.py message_processing, it's a long code, start...1




current clock is 14.0444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '13', 'Sender': '0', 'TagID': '1', 'Time': '14.6222222222', 'Position': ['(-92.58194732666016', ' 3.183030366897583', ' 3.1712851524353027)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,14.6222222222,(-92.58194732666016, 3.183030366897583, 3.1712851524353027),13,1,3.24444444444,0 from  car0
status: 1




maneuver_negotiatir.py in the message processing function, it's a long code, finish1




maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.0444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish
maneuver_negotiatir.py in the try maneuver function update -. strat
current clock is 14.0444444444






self.maneuver_requested None
maneuver_negotiatir.py in the try maneuver function update -. sfinish


going to the update function
sim.py in the sim.py update function 
leave the update function 
in spin function, finish the n times spin:330


... logging to /home/lu/.ros/log/18d172c6-ffac-11e8-9ca8-000c291801fc/roslaunch-ubuntu-81682.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:40825/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [81692][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 18d172c6-ffac-11e8-9ca8-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [81705][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [81722][0m
[1mprocess[rviz-3]: started with pid [81723][0m
[1mprocess[car0-4]: started with pid [81724][0m
[1mprocess[car1-5]: started with pid [81725][0m
[1mprocess[cloud-6]: started with pid [81726][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
