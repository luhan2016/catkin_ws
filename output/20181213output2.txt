sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.87856292725
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: -2.81341266632
y: 34.2631645203
theta: 4.79074001312
speed: 13.9911422729
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-2.813412666320801, 34.26316452026367, 4.790740013122559, 13.991142272949219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fe1e43ff998>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fe1e441c7e8>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: -3.27876663208
y: 34.1060943604
theta: 4.67305374146
speed: 13.3119277954
id: 1
t: 2

222 self.state_dicts[msg.id][msg.t] is (-3.278766632080078, 34.10609436035156, 4.673053741455078, 13.311927795410156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.54655814171
y: -33.1755104065
theta: 1.46134531498
speed: 13.9615335464
id: 0
t: 2
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: 3.54655814171
y: -33.1755104065
theta: 1.46134531498
speed: 13.9615335464
id: 0
t: 2
xxx after update is x: 3.32976961136
y: -33.1750183105
theta: 1.50685691833
speed: 13.8292770386
id: 0
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.32976961136
y: -33.1750183105
theta: 1.50685691833
speed: 13.8292770386
id: 0
t: 3
xxx after update is x: 3.10603284836
y: -32.4119949341
theta: 1.61220824718
speed: 14.0670509338
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: 3.10603284836
y: -32.4119949341
theta: 1.61220824718
speed: 14.06sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.57438993454
sim.py in the sim.py statecallback function, msg is

x: 3.51747131348
y: -34.3885383606
theta: 1.69610619545
speed: 13.9500932693
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (3.5174713134765625, -34.3885383605957, 1.696106195449829, 13.950093269348145)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: 3.54655814171
y: -33.1755104065
theta: 1.46134531498
speed: 13.9615335464
id: 0
t: 2

222 self.state_dicts[msg.id][msg.t] is (3.546558141708374, -33.17551040649414, 1.4613453149795532, 13.961533546447754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f0b5a2cec68>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f0b5a2f0200>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.6029753685
y: 32.8044319153
theta: 4.75764703751
speed: 13.7011127472
id: 1
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: 3.32976961136
y: -33.1750183105
theta: 1.50685691833
speed: 13.8292770386
id: 0
t: 3

222 self.state_dicts[msg.id][msg.t] is (3.3297696113586426, -33.175018310546875, 1.506856918334961, 13.829277038574219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: -3.6029753685
y: 32.8044319153
theta: 4.75764703751
speed: 13.7011127472
id: 1
t: 3
xxx after update is x: -3.16127634048
y: 32.6534767151
theta: 4.63199329376
speed: 14.0667076111
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: -3.16127634048
y: 32.6534767151
theta: 4.63199329376
speed: 14.0667076111
id: 1
t: 4
xxx after update is x: -3.33270263672
y: 31.9621486664
theta: 4.83074426651
speed: 14.2384319305
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: -3.33270263672
y: 31.9621486664
theta: 4.83074426651
speed: 14.2384319305
id: 1
t: 5
xxx after update is x: -3.25289440155
y: 31.6132583618
theta: 4.87833499908
speed: 13.8757820129
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.37553427627097036, 0.3206333283245014]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -3.25289440155
y: 31.6132583618
theta: 4.87833499908
speed: 13.8757820129
id: 1
t: 6
xxx after update is x: -3.76275420189
y: 30.8782405853
theta: 4.59446525574
speed: 13.7381620407
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: 3.10603284836
y: -32.4119949341
theta: 1.61220824718
speed: 14.0670509338
id: 0
t: 4

sim.py in the sim.py statecallback function, msg is

x: 3.31155204773
y: -32.2387504578
theta: 1.55897259712
speed: 14.0233726501
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 3.14053916931
y: -30.66547966
theta: 1.55093872547
speed: 13.9727468491
id: 0
t: 6

sim.py in the sim.py statecallback function, msg is

x: 3.25700211525
y: -30.2973442078
theta: 1.58637344837
speed: 13.8369970322
id: 0
t: 7

222 self.state_dicts[msg.id][msg.t] is (3.257002115249634, -30.297344207763672, 1.5863734483718872, 13.836997032165527)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.76275420189
y: 30.8782405853
theta: 4.59446525574
speed: 13.7381620407
id: 1
t: 7
xxx after update is x: -3.1506934166
y: 30.0623073578
theta: 4.63462924957
speed: 14.0649585724
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: -3.1506934166
y: 30.0623073578
theta: 4.63462924957
speed: 14.0649585724
id: 1
t: 8
xxx after update is x: -3.12917971611
y: 30.1156673431
theta: 4.79599952698
speed: 13.9037036896
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.12917971611
y: 30.1156673431
theta: 4.79599952698
speed: 13.9037036896
id: 1
t: 9
current clock is 0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration






self.maneuver_requested None
maneuver_negotiatir.py in the lat function
0
self.agents_to_ask is  []
self.D.intersection(self.agents_to_ask)) is  set([])
self.R.intersection(self.D.intersection(self.agents_to_ask)) is  set([])
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish
xxx before update is x: -3.12917971611
y: 30.11570509338
id: 0
t: 4
xxx after update is x: 3.31155204773
y: -32.2387504578
theta: 1.55897259712
speed: 14.0233726501
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3809661621981289, 0.3405916230722776]
sim.py in the sim.py statecallback function, msg is

x: -3.6029753685
y: 32.8044319153
theta: 4.75764703751
speed: 13.7011127472
id: 1
t: 3

sim.py in the sim.py statecallback function, msg is

x: -3.16127634048
y: 32.6534767151
theta: 4.63199329376
speed: 14.0667076111
id: 1
t: 4

sim.py in the sim.py statecallback function, msg is

x: -3.33270263672
y: 31.9621486664
theta: 4.83074426651
speed: 14.2384319305
id: 1
t: 5

222 self.state_dicts[msg.id][msg.t] is (-3.33270263671875, 31.962148666381836, 4.83074426651001, 14.238431930541992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: 3.31155204773
y: -32.2387504578
theta: 1.55897259712
speed: 14.0233726501
id: 0
t: 5
xxx after update is x: 3.14053916931
y: -30.66547966
theta: 1.55093872547
speed: 13.9727468491
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 3.14053916931
y: -30.66547966
theta: 1.55093872547
speed: 13.9727468491
id: 0
t: 6
xxx after update is x: 3.25700211525
y: -30.2973442078
theta: 1.58637344837
speed: 13.8369970322
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 3.25700211525
y: -30.2973442078
theta: 1.58637344837
speed: 13.8369970322
id: 0
t: 7
xxx after update is x: 3.36922168732
y: -29.8271121979
theta: 1.67201304436
speed: 13.6273078918
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.36922168732
y: -29.8271121979
theta: 1.67201304436
speed: 13.6273078918
id: 0
t: 8
current clock is 0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration






self.maneuver_requested None
maneuver_negotiatir.py in the lat function
0
self.agents_to_ask is  []
self.D.intersection(self.agents_to_ask)) is  set([])
self.R.intersection(self.D.intersection(self.agents_to_ask)) is  set([])
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.36922168732
y: -29.8271121979
theta: 1.67201304436
speed: 13.6273078918
id: 0
t: 8
xxx after update is x: 2.98849034309
y: -29.1785793304
theta: 1.52102088928
speed: 13.7127580643
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: 2.98849034309
y: -29.1785793304
theta: 1.52102088928
speed: 13.7127580643
id: 0
t: 9
xxx after update is x: 2.5966758728
y: -29.4490222931
theta: 1.58320701122
speed: 13.7731266022
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3182379856923974, 0.39272291602153186]
sim.py in the sim.py statecallback function, msg is

x: -3.25289440155
y: 31.6132583618
theta: 4.87833499908
speed: 13.8757820129
id: 1
t: 6

sim.py in the sim.py statecallback function, msg is

x: -3.76275420189
y: 30.8782405853
theta: 4.59446525574
speed: 13.7381620407
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.1506934166
y: 30.0623073578
theta: 4.63462924957
speed: 14.0649585724
id: 1
t: 8

sim.py in the sim.py statecallback function, msg is

x: -3.12917971611
y: 30.1156673431
theta: 4.79599952698
speed: 13.9037036896
id: 1
t: 9

sim.py in the sim.py statecallback function, msg is

x: -3.49967646599
y: 29.3674678802
theta: 4.54374647141
speed: 13.725769043
id: 1
t: 10

222 self.state_dicts[msg.id][msg.t] is (-3.499676465988159, 29.367467880249023, 4.543746471405029, 13.72576904296875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 2.5966758728
y: -29.4490222931
theta: 1.58320701122
speed: 13.7731266022
id: 0
t: 10
xxx after update is x: 3.49590015411
y: -28.6013679504
theta: 1.67261350155
speed: 14.0026311874
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 3.49590015411
y: -28.6013679504
theta: 1.67261350155
speed: 14.0026311874
id: 0
t: 11
xxx after update is x: 3.45350503922
y: -27.924747467
theta: 1.54095089436
speed: 13.7650938034
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: 3.45350503922
y: -27.924747467
theta: 1.54095089436
speed: 13.7650938034
id: 0
t: 12
xxx after update is x: 3.23830127716
y: -26.5239753723
theta: 1.35430502892
speed: 13.6424913406
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 3.23830127716
y: -26.5239753723
theta: 1.35430502892
speed: 13.6424913406
id: 0
t: 13
xxx after update is x: 2.87624716759
y: -26.6881542206
theta: 1.56037807465
speed: 13.6850748062
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.87624716759
y: -26.6881542206
theta: 1.56037807465
speed: 13.6850748062
id: 0
t: 14
xxx after update is x: 3.38986873627
y: -25.7404232025
theta: 1.63962769508
speed: 13.7762699127
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:15
risk is [0.2931931234178292, 0.3777819469670846]
sim.py in the sim.py statecallback function, msg is

x: -3.90870213509
y: 28.450340271
theta: 4.66822814941
speed: 13.9522399902
id: 1
t: 11

sim.py in the sim.py statecallback function, msg is

x: -3.50252580643
y: 27.3082122803
theta: 4.65459728241
speed: 13.8173933029
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -2.88791871071
y: 26.6015453339
theta: 4.48476791382
speed: 13.7009725571
id: 1
t: 13

sim.py in the sim.py statecallback function, msg is

x: -3.16892242432
y: 26.2152404785
theta: 4.77548742294
speed: 13.8726634979
id: 1
t: 14

sim.py in the sim.py statecallback function, msg is

x: -3.06836605072
y: 25.4042186737
theta: 4.7299079895
speed: 13.5492324829
id: 1
t: 15

222 self.state_dicts[msg.id][msg.t] is (-3.068366050720215,6673431
theta: 4.79599952698
speed: 13.9037036896
id: 1
t: 9
xxx after update is x: -3.49967646599
y: 29.3674678802
theta: 4.54374647141
speed: 13.725769043
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -3.49967646599
y: 29.3674678802
theta: 4.54374647141
speed: 13.725769043
id: 1
t: 10
xxx after update is x: -3.90870213509
y: 28.450340271
theta: 4.66822814941
speed: 13.9522399902
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: -3.90870213509
y: 28.450340271
theta: 4.66822814941
speed: 13.9522399902
id: 1
t: 11
xxx after update is x: -3.50252580643
y: 27.3082122803
theta: 4.65459728241
speed: 13.8173933029
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3305413310732186, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.36922168732
y: -29.8271121979
theta: 1.67201304436
speed: 13.6273078918
id: 0
t: 8

sim.py in the sim.py statecallback function, msg is

x: 2.98849034309
y: -29.1785793304
theta: 1.52102088928
speed: 13.7127580643
id: 0
t: 9

sim.py in the sim.py statecallback function, msg is

x: 2.5966758728
y: -29.4490222931
theta: 1.58320701122
speed: 13.7731266022
id: 0
t: 10

sim.py in the sim.py statecallback function, msg is

x: 3.49590015411
y: -28.6013679504
theta: 1.67261350155
speed: 14.0026311874
id: 0
t: 11

sim.py in the sim.py statecallback function, msg is

x: 3.45350503922
y: -27.924747467
theta: 1.54095089436
speed: 13.7650938034
id: 0
t: 12

222 self.state_dicts[msg.id][msg.t] is (3.453505039215088, -27.924747467041016, 1.540950894355774, 13.765093803405762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -3.50252580643
y: 27.3082122803
theta: 4.65459728241
speed: 13.8173933029
id: 1
t: 12
xxx after update is x: -2.88791871071
y: 26.6015453339
theta: 4.48476791382
speed: 13.7009725571
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -2.88791871071
y: 26.6015453339
theta: 4.48476791382
speed: 13.7009725571
id: 1
t: 13
xxx after update is x: -3.16892242432
y: 26.2152404785
theta: 4.77548742294
speed: 13.8726634979
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.16892242432
y: 26.2152404785
theta: 4.77548742294
speed: 13.8726634979
id: 1
t: 14
xxx after update is x: -3.06836605072
y: 25.4042186737
theta: 4.7299079895
speed: 13.5492324829
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:15
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.06836605072
y: 25.4042186737
theta: 4.7299079895
speed: 13.5492324829
id: 1
t: 15
xxx after update is x: -3.45740389824
y: 25.62707901
theta: 4.82249212265
speed: 14.058506012
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:16
aaaaaa
aaaaaabbbbb
risk is [0.37303573318490163, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.23830127716
y: -26.5239753723
theta: 1.35430502892
speed: 13.6424913406
id: 0
t: 13

sim.py in the sim.py statecallback function, msg is

x: 2.87624716759
y: -26.6881542206
theta: 1.56037807465
speed: 13.6850748062
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 3.38986873627
y: -25.7404232025
theta: 1.63962769508
speed: 13.7762699127
id: 0
t: 15

sim.py in the sim.py statecallback function, msg is

x: 2.6666097641
y: -24.8632965088
theta: 1.58152389526
speed: 13.3366518021
id: 0
t: 16

222 self.state_dicts[msg.id][msg.t] is (2.666609764099121, -24.863296508789062, 1.5815238952636719, 13.336651802062988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.45740389824
y: 25.62707901
theta: 4.82249212265
speed: 14.058506012
id: 1
t: 16
xxx after update is x: -3.81171369553
y: 24.8010253906
theta: 4.77389717102
speed: 13.9849739075
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.81171369553
y: 24.8010253906
theta: 4.77389717102
speed: 13.9849739075
id: 1
t: 17
xxx after update is x: -3.31972122192
y: 23.7303028107
theta: 4.71469545364
speed: 13.8425550461
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: -3.31972122192
y: 23.7303028107
theta: 4.71469545364
speed: 13.8425550461
id: 1
t: 18
xxx after update is x: -3.76961445808
y: 23.1790714264
theta: 4.84126329422
speed: 14.0958299637
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: -3.76961445808
y: 23.1790714264
theta: 4.84126329422
speed: 14.0958299637
id: 1
t: 19
xxx after update is x: -3.34691095352
y: 22.7078266144
theta: 4.80638647079
speed: 13.8742408752
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3943433769580757, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.83586812019
y: -24.7449455261
theta: 1.63021612167
speed: 13.0308475494
id: 0
t: 17

sim.py in the sim.py statecallback function, msg is

x: 3.41499376297
y: -23.9880638123
theta: 1.45628917217
speed: 12.8163633347
id: 0
t: 18

sim.py in the sim.py statecallback function, msg is

x: 2.89185380936
y: -23.4904518127
theta: 1.47861802578
speed: 12.5030965805
id: 0
t: 19

sim.py in the sim.py statecallback function, msg is

x: 3.34489893913
y: -23.0937900543
theta: 1.58963727951
speed: 12.6397371292
id: 0
t: 20

222 self.state_dicts[msg.id][msg.t] is (3.3448989391326904, -23.09379005432129, 1.589637279510498, 12.639737129211426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.34691095352
y: 22.7078266144
theta: 4.80638647079
speed: 13.8742408752
id: 1
t: 20
xxx after update is x: -2.80470371246
y: 21.7040481567
theta: 4.60006332397
speed: 13.6655664444
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funt 25.404218673706055, 4.729907989501953, 13.549232482910156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: 3.38986873627
y: -25.7404232025
theta: 1.63962769508
speed: 13.7762699127
id: 0
t: 15
xxx after update is x: 2.6666097641
y: -24.8632965088
theta: 1.58152389526
speed: 13.3366518021
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: 2.6666097641
y: -24.8632965088
theta: 1.58152389526
speed: 13.3366518021
id: 0
t: 16
xxx after update is x: 2.83586812019
y: -24.7449455261
theta: 1.63021612167
speed: 13.0308475494
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.83586812019
y: -24.7449455261
theta: 1.63021612167
speed: 13.0308475494
id: 0
t: 17
xxx after update is x: 3.41499376297
y: -23.9880638123
theta: 1.45628917217
speed: 12.8163633347
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:18
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.41499376297
y: -23.9880638123
theta: 1.45628917217
speed: 12.8163633347
id: 0
t: 18
xxx after update is x: 2.89185380936
y: -23.4904518127
theta: 1.47861802578
speed: 12.5030965805
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
xxx before update is x: 2.89185380936
y: -23.4904518127
theta: 1.47861802578
speed: 12.5030965805
id: 0
t: 19
xxx after update is x: 3.34489893913
y: -23.0937900543
theta: 1.58963727951
speed: 12.6397371292
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:20
risk is [0.40757577217664287, 0.3970239665049978]
sim.py in the sim.py statecallback function, msg is

x: -3.45740389824
y: 25.62707901
theta: 4.82249212265
speed: 14.058506012
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.81171369553
y: 24.8010253906
theta: 4.77389717102
speed: 13.9849739075
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -3.31972122192
y: 23.7303028107
theta: 4.71469545364
speed: 13.8425550461
id: 1
t: 18

sim.py in the sim.py statecallback function, msg is

x: -3.76961445808
y: 23.1790714264
theta: 4.84126329422
speed: 14.0958299637
id: 1
t: 19

sim.py in the sim.py statecallback function, msg is

x: -3.34691095352
y: 22.7078266144
theta: 4.80638647079
speed: 13.8742408752
id: 1
t: 20

222 self.state_dicts[msg.id][msg.t] is (-3.3469109535217285, 22.707826614379883, 4.806386470794678, 13.87424087524414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 3.34489893913
y: -23.0937900543
theta: 1.58963727951
speed: 12.6397371292
id: 0
t: 20
xxx after update is x: 4.15102434158
y: -22.2707080841
theta: 1.61536383629
speed: 12.2553453445
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:22xxx before update is x: 4.15102434158
y: -22.2707080841
theta: 1.61536383629
speed: 12.2553453445
id: 0
t: 21
xxx after update is x: 3.26365542412
y: -21.7733802795
theta: 1.52561807632
speed: 12.2301092148
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: 3.26365542412
y: -21.7733802795
theta: 1.52561807632
speed: 12.2301092148
id: 0
t: 22
xxx after update is x: 3.06415128708
y: -21.2632865906
theta: 1.50590920448
speed: 11.4783573151
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.32260453906230346, 0.21892560951906512]
sim.py in the sim.py statecallback function, msg is

x: -2.80470371246
y: 21.7040481567
theta: 4.60006332397
speed: 13.6655664444
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.43355560303
y: 21.3825321198
theta: 4.65048646927
speed: 13.8624181747
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -3.5607187748
y: 20.6025314331
theta: 4.66937732697
speed: 13.7728719711
id: 1
t: 23

222 self.state_dicts[msg.id][msg.t] is (-3.5607187747955322, 20.60253143310547, 4.669377326965332, 13.772871971130371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: 3.06415128708
y: -21.2632865906
theta: 1.50590920448
speed: 11.4783573151
id: 0
t: 23
xxx after update is x: 3.18885564804
y: -20.2898826599
theta: 1.70708930492
speed: 11.1329298019
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 3.18885564804
y: -20.2898826599
theta: 1.70708930492
speed: 11.1329298019
id: 0
t: 24
xxx after update is x: 3.3074157238
y: -20.3989524841
theta: 1.63674342632
speed: 11.5913581848
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.3074157238
y: -20.3989524841
theta: 1.63674342632
speed: 11.5913581848
id: 0
t: 25
current clock is 1.11111111111
!!!!after check statue the self.tag is [1.1111111111111112, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.3074157238
y: -20.3989524841
theta: 1.63674342632
speed: 11.5913581848
id: 0
t: 25
current clock is 1.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.11111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.11111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0,left
!!!!change stateion
leave the update function 
in spin function, finish the n times spin:21
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: -2.80470371246
y: 21.7040481567
theta: 4.60006332397
speed: 13.6655664444
id: 1
t: 21
xxx after update is x: -3.43355560303
y: 21.3825321198
theta: 4.65048646927
speed: 13.8624181747
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5798013565055176, 0]
sim.py in the sim.py statecallback function, msg is

x: 4.15102434158
y: -22.2707080841
theta: 1.61536383629
speed: 12.2553453445
id: 0
t: 21

sim.py in the sim.py statecallback function, msg is

x: 3.26365542412
y: -21.7733802795
theta: 1.52561807632
speed: 12.2301092148
id: 0
t: 22

222 self.state_dicts[msg.id][msg.t] is (3.263655424118042, -21.773380279541016, 1.525618076324463, 12.230109214782715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: -3.43355560303
y: 21.3825321198
theta: 4.65048646927
speed: 13.8624181747
id: 1
t: 22
xxx after update is x: -3.5607187748
y: 20.6025314331
theta: 4.66937732697
speed: 13.7728719711
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -3.5607187748
y: 20.6025314331
theta: 4.66937732697
speed: 13.7728719711
id: 1
t: 23
xxx after update is x: -3.60553407669
y: 20.1723423004
theta: 4.56099510193
speed: 14.085515976
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5176528974746277, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.06415128708
y: -21.2632865906
theta: 1.50590920448
speed: 11.4783573151
id: 0
t: 23

sim.py in the sim.py statecallback function, msg is

x: 3.18885564804
y: -20.2898826599
theta: 1.70708930492
speed: 11.1329298019
id: 0
t: 24

222 self.state_dicts[msg.id][msg.t] is (3.1888556480407715, -20.28988265991211, 1.7070893049240112, 11.132929801940918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: -3.60553407669
y: 20.1723423004
theta: 4.56099510193
speed: 14.085515976
id: 1
t: 24
xxx after update is x: -2.88328099251
y: 19.3065052032
theta: 4.66860866547
speed: 14.0049943924
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: -2.88328099251
y: 19.3065052032
theta: 4.66860866547
speed: 14.0049943924
id: 1
t: 25
xxx after update is x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26
current clock is 1.15555 to get self.man_init:
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 3.3074157238
y: -20.3989524841
theta: 1.63674342632
speed: 11.5913581848
id: 0
t: 25
xxx after update is x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion

GET,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending GET,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'DENY'}
car 0 received DENY,1,1.15555555556,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.1111111111111112, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26
xxx after update is x: 3.27879309654
y: -19.117855072
theta: 1.46668064594
speed: 10.7061309814
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:27
risk is [0.24595813093417465, 0.02602233900146824]
sim.py in the sim.py statecallback function, msg is

x: -3.60553407669
y: 20.1723423004
theta: 4.56099510193
speed: 14.085515976
id: 1
t: 24

sim.py in the sim.py statecallback function, msg is

x: -2.88328099251
y: 19.3065052032
theta: 4.66860866547
speed: 14.0049943924
id: 1
t: 25

sim.py in the sim.py statecallback function, msg is

x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26

sim.py in the sim.py statecallback function, msg is

x: -2.62349247932
y: 18.1690006256
theta: 4.96314907074
speed: 14.0587558746
id: 1
t: 27

222 self.state_dicts[msg.id][msg.t] is (-2.623492479324341, 18.16900062561035, 4.963149070739746, 14.058755874633789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n time555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '1.11111111111', 'IntendedCourse': 'left', 'Position': ['3.307415723800659', ' -20.39895248413086', ' 1.636743426322937'], 'TagID': '0', 'Type': 'GET', 'Velocity': '11'}
car 1 received GET,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0493827160493
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.76529826831
sender last entering time is:  1.76529826831
sender last leaving time is:  4.19701017751
my entering time is:  0.901117409788
my leaving time is:  2.83285210353
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending DENY,1,1.15555555556,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: -3.11596393585
y: 19.2802658081
theta: 4.65641403198
speed: 13.778796196
id: 1
t: 26
xxx after update is x: -2.62349247932
y: 18.1690006256
theta: 4.96314907074
speed: 14.0587558746
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.26044846861933124, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.3074157238
y: -20.3989524841
theta: 1.63674342632
speed: 11.5913581848
id: 0
t: 25

sim.py in the sim.py statecallback function, msg is

x: 3.30444073677
y: -19.5168209076
theta: 1.75502467155
speed: 10.8631000519
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.27879309654
y: -19.117855072
theta: 1.46668064594
speed: 10.7061309814
id: 0
t: 27

222 self.state_dicts[msg.id][msg.t] is (3.2787930965423584, -19.117855072021484, 1.466680645942688, 10.706130981445312)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: -2.62349247932
y: 18.1690006256
theta: 4.96314907074
speed: 14.0587558746
id: 1
t: 27
xxx after update is x: -3.61436462402
y: 17.6006317139
theta: 4.72469758987
speed: 13.7315454483
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: -3.61436462402
y: 17.6006317139
theta: 4.72469758987
speed: 13.7315454483
id: 1
t: 28
xxx after update is x: -3.38416099548
y: 16.9934120178
theta: 4.55780172348
speed: 13.6606483459
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.28478733857644073, 0]
sim.py in the sim.py s spin:28xxx before update is x: 3.27879309654
y: -19.117855072
theta: 1.46668064594
speed: 10.7061309814
id: 0
t: 27
xxx after update is x: 2.99625492096
y: -18.2806301117
theta: 1.74238598347
speed: 10.3834753036
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: 2.99625492096
y: -18.2806301117
theta: 1.74238598347
speed: 10.3834753036
id: 0
t: 28
xxx after update is x: 3.62296390533
y: -18.0087299347
theta: 1.53527891636
speed: 10.3591470718
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: 3.62296390533
y: -18.0087299347
theta: 1.53527891636
speed: 10.3591470718
id: 0
t: 29
xxx after update is x: 3.02933835983
y: -17.470582962
theta: 1.57067227364
speed: 10.0982322693
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.300420028957473, 0.03208279242295363]
sim.py in the sim.py statecallback function, msg is

x: -3.61436462402
y: 17.6006317139
theta: 4.72469758987
speed: 13.7315454483
id: 1
t: 28

sim.py in the sim.py statecallback function, msg is

x: -3.38416099548
y: 16.9934120178
theta: 4.55780172348
speed: 13.6606483459
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -2.97756075859
y: 16.4500007629
theta: 4.72844076157
speed: 13.8857965469
id: 1
t: 30

222 self.state_dicts[msg.id][msg.t] is (-2.9775607585906982, 16.450000762939453, 4.728440761566162, 13.885796546936035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 3.02933835983
y: -17.470582962
theta: 1.57067227364
speed: 10.0982322693
id: 0
t: 30
xxx after update is x: 3.55705904961
y: -17.5750408173
theta: 1.57362949848
speed: 9.86990356445
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 3.55705904961
y: -17.5750408173
theta: 1.57362949848
speed: 9.86990356445
id: 0
t: 31
xxx after update is x: 3.02741980553
y: -16.9596996307
theta: 1.40707993507
speed: 9.98836994171
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: 3.02741980553
y: -16.9596996307
theta: 1.40707993507
speed: 9.98836994171
id: 0
t: 32
xxx after update is x: 3.11086797714
y: -15.8437814713
theta: 1.55440855026
speed: 9.39221763611
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.29554979841318557, 0.018920176390285336]
sim.py in the sim.py statecallback function, msg is

x: -3.36785054207
y: 15.6897554398
theta: 4.78585577011
speed: 14.0804643631
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -3.1819434166
y: 15.70038414
theta: 4.65429782867
speed: 13.8838853836
id: 1
t: 32

sim.py in the sim.py statecallback function, msg is

x: -2.97353196144
y: 14.1827774048
theta: 4.76934862137
speed: 14.1804695129
id: 1
t: 33

222 self.state_dicts[msg.id][msg.t] is (-2.97353196144104, 14.182777404785156, 4.769348621368408, 14.180469512939453)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
cstatecallback function, msg is

x: 2.99625492096
y: -18.2806301117
theta: 1.74238598347
speed: 10.3834753036
id: 0
t: 28

sim.py in the sim.py statecallback function, msg is

x: 3.62296390533
y: -18.0087299347
theta: 1.53527891636
speed: 10.3591470718
id: 0
t: 29

222 self.state_dicts[msg.id][msg.t] is (3.6229639053344727, -18.008729934692383, 1.5352789163589478, 10.359147071838379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.38416099548
y: 16.9934120178
theta: 4.55780172348
speed: 13.6606483459
id: 1
t: 29
xxx after update is x: -2.97756075859
y: 16.4500007629
theta: 4.72844076157
speed: 13.8857965469
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:30
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: -2.97756075859
y: 16.4500007629
theta: 4.72844076157
speed: 13.8857965469
id: 1
t: 30
xxx after update is x: -3.36785054207
y: 15.6897554398
theta: 4.78585577011
speed: 14.0804643631
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -3.36785054207
y: 15.6897554398
theta: 4.78585577011
speed: 14.0804643631
id: 1
t: 31
xxx after update is x: -3.1819434166
y: 15.70038414
theta: 4.65429782867
speed: 13.8838853836
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.35650825056336244, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.02933835983
y: -17.470582962
theta: 1.57067227364
speed: 10.0982322693
id: 0
t: 30

sim.py in the sim.py statecallback function, msg is

x: 3.55705904961
y: -17.5750408173
theta: 1.57362949848
speed: 9.86990356445
id: 0
t: 31

sim.py in the sim.py statecallback function, msg is

x: 3.02741980553
y: -16.9596996307
theta: 1.40707993507
speed: 9.98836994171
id: 0
t: 32

222 self.state_dicts[msg.id][msg.t] is (3.0274198055267334, -16.959699630737305, 1.4070799350738525, 9.988369941711426)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: -3.1819434166
y: 15.70038414
theta: 4.65429782867
speed: 13.8838853836
id: 1
t: 32
xxx after update is x: -2.97353196144
y: 14.1827774048
theta: 4.76934862137
speed: 14.1804695129
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: -2.97353196144
y: 14.1827774048
theta: 4.76934862137
speed: 14.1804695129
id: 1
t: 33
xxx after update is x: -3.08139896393
y: 13.6926679611
theta: 4.69865894318
speed: 14.0029850006
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -3.08139896393
y: 13.6926679611
theta: 4.69865894318
speed: 14.0029850006
id: 1
t: 34
xxx after update is x: -3.29992580414
y: 12.9903783798
theta: 4.66799592972
speed: 13.8044977188
id: 1
t: 35
maneuver_negotiatir.py finish the update aall update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: 3.11086797714
y: -15.8437814713
theta: 1.55440855026
speed: 9.39221763611
id: 0
t: 33
xxx after update is x: 3.46821928024
y: -15.6473817825
theta: 1.52668845654
speed: 8.91674423218
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: 3.46821928024
y: -15.6473817825
theta: 1.52668845654
speed: 8.91674423218
id: 0
t: 34
xxx after update is x: 3.63216853142
y: -15.0066661835
theta: 1.44740223885
speed: 8.91429233551
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: 3.63216853142
y: -15.0066661835
theta: 1.44740223885
speed: 8.91429233551
id: 0
t: 35
xxx after update is x: 2.850304842
y: -15.2192296982
theta: 1.54059898853
speed: 8.98882865906
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 2.850304842
y: -15.2192296982
theta: 1.54059898853
speed: 8.98882865906
id: 0
t: 36
xxx after update is x: 3.49871993065
y: -14.7000255585
theta: 1.65569591522
speed: 8.37479305267
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.49871993065
y: -14.7000255585
theta: 1.65569591522
speed: 8.37479305267
id: 0
t: 37
xxx after update is x: 3.704859972
y: -13.896191597
theta: 1.53683924675
speed: 8.10967254639
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:38
aaaaaazzzzz
risk is [0.3459264070815322, 0.006690862180846063]
sim.py in the sim.py statecallback function, msg is

x: -3.08139896393
y: 13.6926679611
theta: 4.69865894318
speed: 14.0029850006
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -3.29992580414
y: 12.9903783798
theta: 4.66799592972
speed: 13.8044977188
id: 1
t: 35

sim.py in the sim.py statecallback function, msg is

x: -3.82408475876
y: 12.627866745
theta: 4.54075479507
speed: 13.9620733261
id: 1
t: 36

sim.py in the sim.py statecallback function, msg is

x: -2.65973472595
y: 12.0124959946
theta: 4.72051095963
speed: 14.2798547745
id: 1
t: 37

sim.py in the sim.py statecallback function, msg is

x: -2.56702971458
y: 11.1362123489
theta: 4.43942070007
speed: 13.9076147079
id: 1
t: 38

222 self.state_dicts[msg.id][msg.t] is (-2.5670297145843506, 11.136212348937988, 4.439420700073242, 13.907614707946777)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 3.704859972
y: -13.896191597
theta: 1.53683924675
speed: 8.10967254639
id: 0
t: 38
xxx after update is x: 3.82155680656
y: -13.9061727524
theta: 1.7380168438
speed: 8.25510025024
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: 3.82155680656
y: -13.906gent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4205819995027143, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.11086797714
y: -15.8437814713
theta: 1.55440855026
speed: 9.39221763611
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 3.46821928024
y: -15.6473817825
theta: 1.52668845654
speed: 8.91674423218
id: 0
t: 34

sim.py in the sim.py statecallback function, msg is

x: 3.63216853142
y: -15.0066661835
theta: 1.44740223885
speed: 8.91429233551
id: 0
t: 35

222 self.state_dicts[msg.id][msg.t] is (3.6321685314178467, -15.00666618347168, 1.4474022388458252, 8.914292335510254)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: -3.29992580414
y: 12.9903783798
theta: 4.66799592972
speed: 13.8044977188
id: 1
t: 35
xxx after update is x: -3.82408475876
y: 12.627866745
theta: 4.54075479507
speed: 13.9620733261
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -3.82408475876
y: 12.627866745
theta: 4.54075479507
speed: 13.9620733261
id: 1
t: 36
xxx after update is x: -2.65973472595
y: 12.0124959946
theta: 4.72051095963
speed: 14.2798547745
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.65973472595
y: 12.0124959946
theta: 4.72051095963
speed: 14.2798547745
id: 1
t: 37
xxx after update is x: -2.56702971458
y: 11.1362123489
theta: 4.43942070007
speed: 13.9076147079
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:38
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -2.56702971458
y: 11.1362123489
theta: 4.43942070007
speed: 13.9076147079
id: 1
t: 38
xxx after update is x: -3.3436152935
y: 10.6087055206
theta: 4.65529298782
speed: 14.190079689
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4436342334565434, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.850304842
y: -15.2192296982
theta: 1.54059898853
speed: 8.98882865906
id: 0
t: 36

sim.py in the sim.py statecallback function, msg is

x: 3.49871993065
y: -14.7000255585
theta: 1.65569591522
speed: 8.37479305267
id: 0
t: 37

sim.py in the sim.py statecallback function, msg is

x: 3.704859972
y: -13.896191597
theta: 1.53683924675
speed: 8.10967254639
id: 0
t: 38

sim.py in the sim.py statecallback function, msg is

x: 3.82155680656
y: -13.9061727524
theta: 1.7380168438
speed: 8.25510025024
id: 0
t: 39

222 self.state_dicts[msg.id][msg.t] is (3.821556806564331, -13.906172752380371, 1.7380168437957764, 8.25510025024414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: -3.3436152935
y: 10.6087055206
theta: 4.65529298782
speed: 14.190079689
id: 1
t: 39
xxx after update is x: -2.94885087013
y: 10.1776647568
theta: 4.74283742905
speed: 14.0153093338
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetsp1727524
theta: 1.7380168438
speed: 8.25510025024
id: 0
t: 39
xxx after update is x: 3.71074771881
y: -13.578412056
theta: 1.572904706
speed: 8.03238582611
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 3.71074771881
y: -13.578412056
theta: 1.572904706
speed: 8.03238582611
id: 0
t: 40
xxx after update is x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending RELEASE,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.7777777777777777, True, ['1']]
1.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.82222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.77777777778
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0,left
!!!!change state to get
GET,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending GET,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTimeeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: -2.94885087013
y: 10.1776647568
theta: 4.74283742905
speed: 14.0153093338
id: 1
t: 40
xxx after update is x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '11', 'Sender': '0', 'TagID': '1', 'Time': '1.11111111111', 'Position': ['(3.307415723800659', ' -20.39895248413086', ' 1.636743426322937)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.11111111111,(3.307415723800659, -20.39895248413086, 1.636743426322937),11,1,1.11111111111,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '1.82222222222', 'IntendedCourse': 'left', 'Position': ['3.8067550659179688', ' -13.178335189819336', ' 1.3761342763900757'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0809876543209
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.03286481803
sender last entering time is:  1.28591402514
sender last leaving time is:  3.33289619345
my entering time is:  0.204540554847
my leaving time is:  1.40809345537
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending DENY,1,1.82222222222,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
aaaaaabbbbb
risk is [0.504935178957086, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.71074771881
y: -13.578412056
theta: 1.572904706
speed: 8.03238582611
id: 0
t: 40

sim.py in the sim.py statecallback function, msg is

x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41

222 self.sta': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.82222222222', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'DENY'}
car 0 received DENY,1,1.82222222222,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.7777777777777777, True, ['1']]
1.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.7777777777777777, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaazzzzz
risk is [0.22800291530027228, 0.007644503831373677]
sim.py in the sim.py statecallback function, msg is

x: -3.3436152935
y: 10.6087055206
theta: 4.65529298782
speed: 14.190079689
id: 1
t: 39

sim.py in the sim.py statecallback function, msg is

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.80675506592
y: -13.1783351898
theta: 1.37613427639
speed: 7.79772615433
id: 0
t: 41
xxx after update is x: 3.29434227943
y: -12.9390363693
theta: 1.49312472343
speed: 7.36745405197
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42
x: -2.94885087013
y: 10.1776647568
theta: 4.74283742905
speed: 14.0153093338
id: 1
t: 40

sim.py in the sim.py statecallback function, msg is

x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -3.2920999527
y: 8.98888111115
theta: 4.63325929642
speed: 13.7753629684
id: 1
t: 42

222 self.state_dicts[msg.id][msg.t] is (-3.292099952697754, 8.98888111114502, 4.633259296417236, 13.775362968444824)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 3.29434227943
y: -12.9390363693
theta: 1.49312472343
speed: 7.36745405197
id: 0
t: 42
xxx after update is x: 2.95018935204
y: -12.773223877
theta: 1.71166718006
speed: 7.23811817169
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 2.95018935204
y: -12.773223877
theta: 1.71166718006
speed: 7.23811817169
id: 0
t: 43
xxx after update is x: 3.21989011765
y: -12.4441394806
theta: 1.56069755554
speed: 7.08036613464
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 3.21989011765
y: -12.4441394806
theta: 1.56069755554
speed: 7.08036613464
id: 0
t: 44
xxx after update is x: 3.22991633415
y: -11.6717300415
theta: 1.49603509903
speed: 6.97416114807
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.3999341252165333, 0.013961457140142564]
sim.py in the sim.py statecallback function, msg is

x: -3.54666399956
y: 8.65916252136
theta: 4.77215480804
speed: 13.8299188614
id: 1
t: 43

sim.py in the sim.py statecallback function, msg is

x: -3.43344593048
y: 7.11496162415
theta: 4.75575733185
speed: 14.0048856735
id: 1
t: 44

sim.py in the sim.py statecallback function, msg is

x: -3.12te_dicts[msg.id][msg.t] is (3.8067550659179688, -13.178335189819336, 1.3761342763900757, 7.797726154327393)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: -3.28399014473
y: 9.16662979126
theta: 4.65413427353
speed: 13.9645090103
id: 1
t: 41
xxx after update is x: -3.2920999527
y: 8.98888111115
theta: 4.63325929642
speed: 13.7753629684
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -3.2920999527
y: 8.98888111115
theta: 4.63325929642
speed: 13.7753629684
id: 1
t: 42
xxx after update is x: -3.54666399956
y: 8.65916252136
theta: 4.77215480804
speed: 13.8299188614
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: -3.54666399956
y: 8.65916252136
theta: 4.77215480804
speed: 13.8299188614
id: 1
t: 43
xxx after update is x: -3.43344593048
y: 7.11496162415
theta: 4.75575733185
speed: 14.0048856735
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5094465003395623, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.29434227943
y: -12.9390363693
theta: 1.49312472343
speed: 7.36745405197
id: 0
t: 42

sim.py in the sim.py statecallback function, msg is

x: 2.95018935204
y: -12.773223877
theta: 1.71166718006
speed: 7.23811817169
id: 0
t: 43

sim.py in the sim.py statecallback function, msg is

x: 3.21989011765
y: -12.4441394806
theta: 1.56069755554
speed: 7.08036613464
id: 0
t: 44

222 self.state_dicts[msg.id][msg.t] is (3.2198901176452637, -12.44413948059082, 1.5606975555419922, 7.080366134643555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -3.43344593048
y: 7.11496162415
theta: 4.75575733185
speed: 14.0048856735
id: 1
t: 44
xxx after update is x: -3.12371253967
y: 7.34778404236
theta: 4.78467655182
speed: 13.7709026337
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: -3.12371253967
y: 7.34778404236
theta: 4.78467655182
speed: 13.7709026337
id: 1
t: 45
xxx after update is x: -3.30976676941
y: 7.01931095123
theta: 4.77741098404
speed: 13.8499193192
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: -3.30976676941
y: 7.01931095123
theta: 4.77741098404
speed: 13.8499193192
id: 1
t: 46
xxx after update is x: -3.03161883354
y: 5.61343050003
theta: 4.85296916962
speed: 13.9673013687
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5645912908025876, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.22991633415
y: -11.6717300415
theta: 1.49603509903
speed: 6.97416114807
id: 0
t: 45

sim.py in the sim.py statecallback function, msg is

x371253967
y: 7.34778404236
theta: 4.78467655182
speed: 13.7709026337
id: 1
t: 45

222 self.state_dicts[msg.id][msg.t] is (-3.1237125396728516, 7.347784042358398, 4.784676551818848, 13.770902633666992)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: 3.22991633415
y: -11.6717300415
theta: 1.49603509903
speed: 6.97416114807
id: 0
t: 45
xxx after update is x: 2.90443968773
y: -11.0532083511
theta: 1.68200480938
speed: 6.85403251648
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: 2.90443968773
y: -11.0532083511
theta: 1.68200480938
speed: 6.85403251648
id: 0
t: 46
xxx after update is x: 3.55390405655
y: -11.5746746063
theta: 1.42041146755
speed: 6.22064781189
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: 3.55390405655
y: -11.5746746063
theta: 1.42041146755
speed: 6.22064781189
id: 0
t: 47
xxx after update is x: 3.34074282646
y: -11.0023431778
theta: 1.42190849781
speed: 6.09108257294
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: 3.34074282646
y: -11.0023431778
theta: 1.42190849781
speed: 6.09108257294
id: 0
t: 48
xxx after update is x: 3.1053340435
y: -11.2267532349
theta: 1.58200716972
speed: 5.89728307724
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5503212088023915, 0.002707654184167451]
sim.py in the sim.py statecallback function, msg is

x: -3.30976676941
y: 7.01931095123
theta: 4.77741098404
speed: 13.8499193192
id: 1
t: 46

sim.py in the sim.py statecallback function, msg is

x: -3.03161883354
y: 5.61343050003
theta: 4.85296916962
speed: 13.9673013687
id: 1
t: 47

sim.py in the sim.py statecallback function, msg is

x: -3.38581514359
y: 5.47320175171
theta: 4.863240242
speed: 13.9702825546
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.94370484352
y: 5.07391357422
theta: 4.80496263504
speed: 13.8629026413
id: 1
t: 49

222 self.state_dicts[msg.id][msg.t] is (-3.943704843521118, 5.07391357421875, 4.804962635040283, 13.862902641296387)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: 3.1053340435
y: -11.2267532349
theta: 1.58200716972
speed: 5.89728307724
id: 0
t: 49
xxx after update is x: 3.04437327385
y: -11.1922359467
theta: 1.48885512352
speed: 5.5700173378
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: 3.04437327385
y: -11.1922359467
theta: 1.48885512352
speed: 5.5700173378
id: 0
t: 50
xxx after update is x: 3.1475186348
y: -10.1912326813
theta: 1.50743591785
speed: 5.61494779587
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targe: 2.90443968773
y: -11.0532083511
theta: 1.68200480938
speed: 6.85403251648
id: 0
t: 46

sim.py in the sim.py statecallback function, msg is

x: 3.55390405655
y: -11.5746746063
theta: 1.42041146755
speed: 6.22064781189
id: 0
t: 47

222 self.state_dicts[msg.id][msg.t] is (3.5539040565490723, -11.574674606323242, 1.420411467552185, 6.220647811889648)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: -3.03161883354
y: 5.61343050003
theta: 4.85296916962
speed: 13.9673013687
id: 1
t: 47
xxx after update is x: -3.38581514359
y: 5.47320175171
theta: 4.863240242
speed: 13.9702825546
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: -3.38581514359
y: 5.47320175171
theta: 4.863240242
speed: 13.9702825546
id: 1
t: 48
xxx after update is x: -3.94370484352
y: 5.07391357422
theta: 4.80496263504
speed: 13.8629026413
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.94370484352
y: 5.07391357422
theta: 4.80496263504
speed: 13.8629026413
id: 1
t: 49
xxx after update is x: -3.11049294472
y: 3.93890929222
theta: 4.83503007889
speed: 13.6487731934
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:50
aaaaaa
aaaaaabbbbb
risk is [0.4717787594850771, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.34074282646
y: -11.0023431778
theta: 1.42190849781
speed: 6.09108257294
id: 0
t: 48

sim.py in the sim.py statecallback function, msg is

x: 3.1053340435
y: -11.2267532349
theta: 1.58200716972
speed: 5.89728307724
id: 0
t: 49

sim.py in the sim.py statecallback function, msg is

x: 3.04437327385
y: -11.1922359467
theta: 1.48885512352
speed: 5.5700173378
id: 0
t: 50

222 self.state_dicts[msg.id][msg.t] is (3.0443732738494873, -11.192235946655273, 1.4888551235198975, 5.570017337799072)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: -3.11049294472
y: 3.93890929222
theta: 4.83503007889
speed: 13.6487731934
id: 1
t: 50
xxx after update is x: -3.08607387543
y: 3.80039715767
theta: 4.80568647385
speed: 13.8359947205
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: -3.08607387543
y: 3.80039715767
theta: 4.80568647385
speed: 13.8359947205
id: 1
t: 51
xxx after update is x: -3.51016736031
y: 3.08708620071
theta: 4.68860197067
speed: 14.2214784622
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32742153611431585, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.1475186348
y: -10.1912326813
theta: 1.50743591785
speed: 5.61494779587
id: 0
t: 51

sim.py in the sim.py statecallback function, msg is

x: 3.22703576088
y: -9.58694171906
theta: 1.41831040382
speed: 4.88210630417
id: 0
t: 52

222 self.state_dicts[msg.id][msg.t] is (3.2270357608795166, -9.586941719055176, 1.4183104038238525, 4.882106304168701)
if we have all measurements fotspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: 3.1475186348
y: -10.1912326813
theta: 1.50743591785
speed: 5.61494779587
id: 0
t: 51
xxx after update is x: 3.22703576088
y: -9.58694171906
theta: 1.41831040382
speed: 4.88210630417
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.7224080738963684, 0.02227018881989338]
sim.py in the sim.py statecallback function, msg is

x: -3.11049294472
y: 3.93890929222
theta: 4.83503007889
speed: 13.6487731934
id: 1
t: 50

sim.py in the sim.py statecallback function, msg is

x: -3.08607387543
y: 3.80039715767
theta: 4.80568647385
speed: 13.8359947205
id: 1
t: 51

sim.py in the sim.py statecallback function, msg is

x: -3.51016736031
y: 3.08708620071
theta: 4.68860197067
speed: 14.2214784622
id: 1
t: 52

222 self.state_dicts[msg.id][msg.t] is (-3.510167360305786, 3.0870862007141113, 4.688601970672607, 14.221478462219238)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: 3.22703576088
y: -9.58694171906
theta: 1.41831040382
speed: 4.88210630417
id: 0
t: 52
xxx after update is x: 3.24445652962
y: -9.86348628998
theta: 1.42685186863
speed: 4.75026512146
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: 3.24445652962
y: -9.86348628998
theta: 1.42685186863
speed: 4.75026512146
id: 0
t: 53
xxx after update is x: 3.11682367325
y: -9.86867809296
theta: 1.57663464546
speed: 4.69248867035
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: 3.11682367325
y: -9.86867809296
theta: 1.57663464546
speed: 4.69248867035
id: 0
t: 54
xxx after update is x: 3.12458086014
y: -9.81922149658
theta: 1.47488749027
speed: 4.44200706482
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.7642879312489024, 0.0009246877262136275]
sim.py in the sim.py statecallback function, msg is

x: -3.6246881485
y: 2.14830136299
theta: 4.68697309494
speed: 14.1510038376
id: 1
t: 53

sim.py in the sim.py statecallback function, msg is

x: -3.15353488922
y: 1.72629773617
theta: 4.79599380493
speed: 13.3919811249
id: 1
t: 54

sim.py in the sim.py statecallback function, msg is

x: -3.51474523544
y: 0.778551399708
theta: 4.80122470856
speed: 13.5259799957
id: 1
t: 55

222 self.state_dicts[msg.id][msg.t] is (-3.5147452354431152, 0.7785513997077942, 4.801224708557129, 13.525979995727539)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: 3.12458086014
y: -9.81922149658
theta: 1.47488749027
speed: 4.44200706482
id: 0
t: 55
xxx after update is x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,1.82222222222,(3.8067550659179688, -r a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.51016736031
y: 3.08708620071
theta: 4.68860197067
speed: 14.2214784622
id: 1
t: 52
xxx after update is x: -3.6246881485
y: 2.14830136299
theta: 4.68697309494
speed: 14.1510038376
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:53
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: -3.6246881485
y: 2.14830136299
theta: 4.68697309494
speed: 14.1510038376
id: 1
t: 53
xxx after update is x: -3.15353488922
y: 1.72629773617
theta: 4.79599380493
speed: 13.3919811249
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.16144148416837123, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.24445652962
y: -9.86348628998
theta: 1.42685186863
speed: 4.75026512146
id: 0
t: 53

sim.py in the sim.py statecallback function, msg is

x: 3.11682367325
y: -9.86867809296
theta: 1.57663464546
speed: 4.69248867035
id: 0
t: 54

222 self.state_dicts[msg.id][msg.t] is (3.116823673248291, -9.868678092956543, 1.5766346454620361, 4.692488670349121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: -3.15353488922
y: 1.72629773617
theta: 4.79599380493
speed: 13.3919811249
id: 1
t: 54
xxx after update is x: -3.51474523544
y: 0.778551399708
theta: 4.80122470856
speed: 13.5259799957
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: -3.51474523544
y: 0.778551399708
theta: 4.80122470856
speed: 13.5259799957
id: 1
t: 55
xxx after update is x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '7', 'Sender': '0', 'TagID': '1', 'Time': '1.82222222222', 'Position': ['(3.8067550659179688', ' -13.178335189819336', ' 1.3761342763900757)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
current clock i13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending RELEASE,0,1.82222222222,(3.8067550659179688, -13.178335189819336, 1.3761342763900757),7,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.4444444444444446, True, ['1']]
2.44444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.48888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.44444444444
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0,left
!!!!change state to get
GET,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending GET,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.48888888889', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'DENY'}
car 0 received DENY,1,2.48888888889,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.4444444444444446, True, ['1']]
2.44444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.4444444444444446, True, '1']
maneuver_negotiatir.py message_s 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '2.48888888889', 'IntendedCourse': 'left', 'Position': ['3.142120599746704', ' -9.228110313415527', ' 1.524187684059143'], 'TagID': '0', 'Type': 'GET', 'Velocity': '4'}
car 1 received GET,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.110617283951
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.453342364803
sender last entering time is:  1.11061728395
sender last leaving time is:  3.48391554037
my entering time is:  0.110617283951
my leaving time is:  0.688983945022
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending DENY,1,2.48888888889,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
aaaaaabbbbb
risk is [0.18285027604047535, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.12458086014
y: -9.81922149658
theta: 1.47488749027
speed: 4.44200706482
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56

222 self.state_dicts[msg.id][msg.t] is (3.142120599746704, -9.228110313415527, 1.524187684059143, 4.678452968597412)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56
xxx after update is x: -3.34536385536
y: -0.00133852800354
theta: 4.90136623383
speed: 13.8134841919
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58
xxx before update is x: -3.34536385536
y: -0.00133852800354
theta: 4.90136623383
speed: 13.8134841919
id: 1
t: 57
xxx after update is x: -3.76440167427
y: 0.0123470965773
theta: 4.58393335342
speed: 13.9197292328
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: -3.76440167427
y: 0.0123470965773
theta: 4.58393335342
speed: 13.9197292328
id: 1
t: 58
xxx after update is x: -3.30064153671
y: -1.45356976986
theta: 4.67959356308
speed: 13.6497249603
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.43691459839354074, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.14982414246
y: -8.8578042984
theta: 1.69752848148
speed: 4.1321554184
id: 0
t: 57

siprocessing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: 3.14212059975
y: -9.22811031342
theta: 1.52418768406
speed: 4.6784529686
id: 0
t: 56
xxx after update is x: 3.14982414246
y: -8.8578042984
theta: 1.69752848148
speed: 4.1321554184
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.40869876958320167, 0.00027956825017710744]
sim.py in the sim.py statecallback function, msg is

x: -2.91674280167
y: 0.532870292664
theta: 4.6973233223
speed: 14.2886991501
id: 1
t: 56

sim.py in the sim.py statecallback function, msg is

x: -3.34536385536
y: -0.00133852800354
theta: 4.90136623383
speed: 13.8134841919
id: 1
t: 57

222 self.state_dicts[msg.id][msg.t] is (-3.3453638553619385, -0.0013385280035436153, 4.901366233825684, 13.813484191894531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:58
xxx before update is x: 3.14982414246
y: -8.8578042984
theta: 1.69752848148
speed: 4.1321554184
id: 0
t: 57
xxx after update is x: 3.06339979172
y: -8.96653842926
theta: 1.38922166824
speed: 3.85736894608
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: 3.06339979172
y: -8.96653842926
theta: 1.38922166824
speed: 3.85736894608
id: 0
t: 58
xxx after update is x: 2.8903696537
y: -8.80758571625
theta: 1.31487333775
speed: 3.64004039764
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: 2.8903696537
y: -8.80758571625
theta: 1.31487333775
speed: 3.64004039764
id: 0
t: 59
xxx after update is x: 3.11423277855
y: -8.35812473297
theta: 1.54380846024
speed: 3.36362552643
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5712100876301933, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.76440167427
y: 0.0123470965773
theta: 4.58393335342
speed: 13.9197292328
id: 1
t: 58

sim.py in the sim.py statecallback function, msg is

x: -3.30064153671
y: -1.45356976986
theta: 4.67959356308
speed: 13.6497249603
id: 1
t: 59

sim.py in the sim.py statecallback function, msg is

x: -3.66793870926
y: -2.10033082962
theta: 4.78252267838
speed: 13.6037502289
id: 1
t: 60

222 self.state_dicts[msg.id][msg.t] is (-3.667938709259033, -2.1003308296203613, 4.782522678375244, 13.603750228881836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: 3.11423277855
y: -8.35812473297
theta: 1.54380846024
speed: 3.36362552643
id: 0
t: 60
xxx after update is x: 2.8844461441
y: -8.36112499237
theta: 1.60968267918
speed: 3.0637075901
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: 2.8844461441
y: -8.36112499237
theta: 1.60968267918
speed: 3.0637075m.py in the sim.py statecallback function, msg is

x: 3.06339979172
y: -8.96653842926
theta: 1.38922166824
speed: 3.85736894608
id: 0
t: 58

sim.py in the sim.py statecallback function, msg is

x: 2.8903696537
y: -8.80758571625
theta: 1.31487333775
speed: 3.64004039764
id: 0
t: 59

222 self.state_dicts[msg.id][msg.t] is (2.8903696537017822, -8.807585716247559, 1.3148733377456665, 3.640040397644043)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: -3.30064153671
y: -1.45356976986
theta: 4.67959356308
speed: 13.6497249603
id: 1
t: 59
xxx after update is x: -3.66793870926
y: -2.10033082962
theta: 4.78252267838
speed: 13.6037502289
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: -3.66793870926
y: -2.10033082962
theta: 4.78252267838
speed: 13.6037502289
id: 1
t: 60
xxx after update is x: -3.19113683701
y: -2.90085148811
theta: 4.5879983902
speed: 13.6334543228
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: -3.19113683701
y: -2.90085148811
theta: 4.5879983902
speed: 13.6334543228
id: 1
t: 61
xxx after update is x: -3.2566113472
y: -3.47793364525
theta: 4.87342023849
speed: 13.6357564926
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6655814970132835, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.11423277855
y: -8.35812473297
theta: 1.54380846024
speed: 3.36362552643
id: 0
t: 60

sim.py in the sim.py statecallback function, msg is

x: 2.8844461441
y: -8.36112499237
theta: 1.60968267918
speed: 3.0637075901
id: 0
t: 61

sim.py in the sim.py statecallback function, msg is

x: 3.31917190552
y: -8.33666229248
theta: 1.67780578136
speed: 2.57524251938
id: 0
t: 62

222 self.state_dicts[msg.id][msg.t] is (3.319171905517578, -8.336662292480469, 1.677805781364441, 2.575242519378662)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: -3.2566113472
y: -3.47793364525
theta: 4.87342023849
speed: 13.6357564926
id: 1
t: 62
xxx after update is x: -3.0245950222
y: -4.18700361252
theta: 4.61550331116
speed: 13.749297142
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.0245950222
y: -4.18700361252
theta: 4.61550331116
speed: 13.749297142
id: 1
t: 63
xxx after update is x: -3.32647895813
y: -4.64860248566
theta: 4.57967281342
speed: 13.8105916977
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:64
aaaaaa
aaaaaabbbbb
risk is [0.6927436381083462, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.27606606483
y: -8.3608455658
theta: 1.52865219116
speed: 2.53373122215
id: 0
t: 63

sim.py in the sim.py statecallback function, msg is

x: 2.94490408897
y: -7.79774332047
theta: 1.49075460434
speed: 2.45519518852
id: 0
t: 64

222 self.state_dicts[msg.id][msg.t] is (2.944904088973999, -7.797743320465088, 1.490754604339599901
id: 0
t: 61
xxx after update is x: 3.31917190552
y: -8.33666229248
theta: 1.67780578136
speed: 2.57524251938
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: 3.31917190552
y: -8.33666229248
theta: 1.67780578136
speed: 2.57524251938
id: 0
t: 62
xxx after update is x: 3.27606606483
y: -8.3608455658
theta: 1.52865219116
speed: 2.53373122215
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.5396270005101493, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.19113683701
y: -2.90085148811
theta: 4.5879983902
speed: 13.6334543228
id: 1
t: 61

sim.py in the sim.py statecallback function, msg is

x: -3.2566113472
y: -3.47793364525
theta: 4.87342023849
speed: 13.6357564926
id: 1
t: 62

sim.py in the sim.py statecallback function, msg is

x: -3.0245950222
y: -4.18700361252
theta: 4.61550331116
speed: 13.749297142
id: 1
t: 63

222 self.state_dicts[msg.id][msg.t] is (-3.024595022201538, -4.1870036125183105, 4.615503311157227, 13.749297142028809)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: 3.27606606483
y: -8.3608455658
theta: 1.52865219116
speed: 2.53373122215
id: 0
t: 63
xxx after update is x: 2.94490408897
y: -7.79774332047
theta: 1.49075460434
speed: 2.45519518852
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: 2.94490408897
y: -7.79774332047
theta: 1.49075460434
speed: 2.45519518852
id: 0
t: 64
xxx after update is x: 3.38526034355
y: -8.29442882538
theta: 1.68283259869
speed: 1.85825657845
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: 3.38526034355
y: -8.29442882538
theta: 1.68283259869
speed: 1.85825657845
id: 0
t: 65
xxx after update is x: 3.69303226471
y: -7.60012149811
theta: 1.58568394184
speed: 1.87457454205
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.5282837233673006, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.32647895813
y: -4.64860248566
theta: 4.57967281342
speed: 13.8105916977
id: 1
t: 64

sim.py in the sim.py statecallback function, msg is

x: -3.01222109795
y: -5.58619451523
theta: 4.69063949585
speed: 14.013299942
id: 1
t: 65

sim.py in the sim.py statecallback function, msg is

x: -2.82601308823
y: -5.72567844391
theta: 4.83158349991
speed: 13.5628376007
id: 1
t: 66

222 self.state_dicts[msg.id][msg.t] is (-2.8260130882263184, -5.725678443908691, 4.831583499908447, 13.562837600708008)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: 3.69303226471
y: -7.60012149811
theta: 1.58568394184
speed: 1.87457454205
id: 0
t: 66
xxx after update is x: 3.2825293541
y: -7.96836900711
theta: 1.44086551666
speed: 1.55735480785
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
l6, 2.455195188522339)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: -3.32647895813
y: -4.64860248566
theta: 4.57967281342
speed: 13.8105916977
id: 1
t: 64
xxx after update is x: -3.01222109795
y: -5.58619451523
theta: 4.69063949585
speed: 14.013299942
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: -3.01222109795
y: -5.58619451523
theta: 4.69063949585
speed: 14.013299942
id: 1
t: 65
xxx after update is x: -2.82601308823
y: -5.72567844391
theta: 4.83158349991
speed: 13.5628376007
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4318708843380026, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.38526034355
y: -8.29442882538
theta: 1.68283259869
speed: 1.85825657845
id: 0
t: 65

sim.py in the sim.py statecallback function, msg is

x: 3.69303226471
y: -7.60012149811
theta: 1.58568394184
speed: 1.87457454205
id: 0
t: 66

222 self.state_dicts[msg.id][msg.t] is (3.6930322647094727, -7.60012149810791, 1.5856839418411255, 1.8745745420455933)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: -2.82601308823
y: -5.72567844391
theta: 4.83158349991
speed: 13.5628376007
id: 1
t: 66
xxx after update is x: -3.05771493912
y: -6.31317043304
theta: 4.62290000916
speed: 14.0060377121
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: -3.05771493912
y: -6.31317043304
theta: 4.62290000916
speed: 14.0060377121
id: 1
t: 67
xxx after update is x: -3.46505737305
y: -6.95721912384
theta: 4.68150424957
speed: 13.6991882324
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: -3.46505737305
y: -6.95721912384
theta: 4.68150424957
speed: 13.6991882324
id: 1
t: 68
xxx after update is x: -3.18595910072
y: -7.60827445984
theta: 4.64668798447
speed: 13.9792423248
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5462998586042477, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.2825293541
y: -7.96836900711
theta: 1.44086551666
speed: 1.55735480785
id: 0
t: 67

sim.py in the sim.py statecallback function, msg is

x: 3.5807762146
y: -7.88982057571
theta: 1.45684826374
speed: 1.30799877644
id: 0
t: 68

sim.py in the sim.py statecallback function, msg is

x: 3.19476795197
y: -7.18503236771
theta: 1.60451507568
speed: 0.957275927067
id: 0
t: 69

222 self.state_dicts[msg.id][msg.t] is (3.194767951965332, -7.185032367706299, 1.6045150756835938, 0.957275927066803)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x:eave the update function xxx before update is x: 3.2825293541
y: -7.96836900711
theta: 1.44086551666
speed: 1.55735480785
id: 0
t: 67
xxx after update is x: 3.5807762146
y: -7.88982057571
theta: 1.45684826374
speed: 1.30799877644
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:68
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: 3.5807762146
y: -7.88982057571
theta: 1.45684826374
speed: 1.30799877644
id: 0
t: 68
xxx after update is x: 3.19476795197
y: -7.18503236771
theta: 1.60451507568
speed: 0.957275927067
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6176901441801105, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.05771493912
y: -6.31317043304
theta: 4.62290000916
speed: 14.0060377121
id: 1
t: 67

sim.py in the sim.py statecallback function, msg is

x: -3.46505737305
y: -6.95721912384
theta: 4.68150424957
speed: 13.6991882324
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -3.18595910072
y: -7.60827445984
theta: 4.64668798447
speed: 13.9792423248
id: 1
t: 69

222 self.state_dicts[msg.id][msg.t] is (-3.1859591007232666, -7.608274459838867, 4.646687984466553, 13.979242324829102)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: 3.19476795197
y: -7.18503236771
theta: 1.60451507568
speed: 0.957275927067
id: 0
t: 69
xxx after update is x: 3.40218305588
y: -7.54007959366
theta: 1.52370393276
speed: 1.18589401245
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: 3.40218305588
y: -7.54007959366
theta: 1.52370393276
speed: 1.18589401245
id: 0
t: 70
xxx after update is x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71
current clock is 3.15555555556
self.communication_details == 0
sending RELEASE,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuve -3.18595910072
y: -7.60827445984
theta: 4.64668798447
speed: 13.9792423248
id: 1
t: 69
xxx after update is x: -3.77456068993
y: -8.19177436829
theta: 4.54615736008
speed: 13.8406295776
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: -3.77456068993
y: -8.19177436829
theta: 4.54615736008
speed: 13.8406295776
id: 1
t: 70
xxx after update is x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8225536739570877, 0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.40218305588
y: -7.54007959366
theta: 1.52370393276
speed: 1.18589401245
id: 0
t: 70

sim.py in the sim.py statecallback function, msg is

x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71

222 self.state_dicts[msg.id][msg.t] is (3.3541665077209473, -7.3513288497924805, 1.6015655994415283, 0.6341204047203064)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '4', 'Sender': '0', 'TagID': '1', 'Time': '2.48888888889', 'Position': ['(3.142120599746704', ' -9.228110313415527', ' 1.524187684059143)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.48888888889,(3.142120599746704, -9.228110313415527, 1.524187684059143),4,1,1.11111111111,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '3.15555555556', 'IntendedCourse': 'left', 'Position': ['3.3541665077209473', ' -7.3513288497924805', ' 1.6015655994415283'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.14024691358
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,3.15555555556,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0
going to the update function
sim.py in the sim.py updater_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.111111111111111, True, ['1']]
3.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 3.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.11111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71
current clock is 3.15555555556
self.communication_details == 0
sending GET,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: 3.35416650772
y: -7.35132884979
theta: 1.60156559944
speed: 0.63412040472
id: 0
t: 71
xxx after update is x: 3.29748368263
y: -8.09854698181
theta: 1.64118945599
speed: 0.636396348476
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29748368263
y: -8.09854698181
theta: 1.64118945599
speed: 0.636396348476
id: 0
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29748368263
y: -8.09854698181
theta: 1.64118945599
speed: 0.636396348476
id: 0
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.15555555556', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'GRANT'}
car 0 received GRANT,1,3.15555555556,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.111111111111111, True, ['1']]
3.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.111111111111111, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
risk is [0.7777736619116198, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.77456068993
y: -8.19177436829
theta: 4.54615736008
speed: 13.8406295776
id: 1
t: 70

sim.py in the sim.py statecallback function, msg is

x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71

sim.py in the sim.py statecallback function, msg is

x: -3.35351109505
y: -9.88855648041
theta: 4.69759273529
speed: 13.5509662628
id: 1
t: 72

222 self.state_dicts[msg.id][msg.t] is (-3.353511095046997, -9.888556480407715, 4.697592735290527, 13.550966262817383)
if we have all measurements for a certain tim function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: -3.05847191811
y: -8.28781986237
theta: 4.82363891602
speed: 14.0801420212
id: 1
t: 71
xxx after update is x: -3.35351109505
y: -9.88855648041
theta: 4.69759273529
speed: 13.5509662628
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
added car with id 0 to grantlist. current grantlist:  {0: [8.066666666666666, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.35351109505
y: -9.88855648041
theta: 4.69759273529
speed: 13.5509662628
id: 1
t: 72
current clock is 3.2
self.communication_details == 0
sending GRANT,1,3.15555555556,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.35351109505
y: -9.88855648041
theta: 4.69759273529
speed: 13.5509662628
id: 1
t: 72
current clock is 3.2
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: -3.35351109505
y: -9.88855648041
theta: 4.69759273529
speed: 13.5509662628
id: 1
t: 72
xxx after update is x: -3.41091179848
y: -9.93739318848
theta: 4.8659157753
speed: 13.8317089081
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.5317352953621128, 0.5343999999999989]
sim.py in the sim.py statecallback function, msg is

x: 3.29748368263
y: -8.09854698181
theta: 1.64118945599
speed: 0.636396348476
id: 0
t: 72

sim.py in the sim.py statecallback function, msg is

x: 3.84244942665
y: -7.59202957153
theta: 1.32514047623
speed: 0.384513407946
id: 0
t: 73

222 self.state_dicts[msg.id][msg.t] is (3.842449426651001, -7.592029571533203, 1.3251404762268066, 0.38451340794563293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: -3.41091179848
y: -9.93739318848
theta: 4.8659157753
speed: 13.8317089081
id: 1
t: 73
xxx after update is x: -2.96333956718
y: -11.375169754
theta: 4.67251968384
speed: 13.8924264908
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: -2.96333956718
y: -11.375169754
theta: 4.67251968384
speed: 13.8924264908
id: 1
t: 74
xxx after update is x: -3.04619836807
y: -11.3385477066
theta: 4.75939846039
speed: 13.7789163589
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.4274131834418084, 0.4895999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.3409318924
y: -7.76107883453
theta: 1.53556776047
speed: 0.204384043813
id: 0
t: 74

sim.py in the sim.py statecallback function, msg is

x: 3.52151203156
y: -7.57690668106
theta: 1.58024501801
speed: 0.0040115439333
id: 0
t: 75

222 self.state_dicts[msg.id][msg.t] is (3.521512031555176, -7.576906681060791, 1.580245018005371, 0.004011543933302164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the updatee-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: 3.29748368263
y: -8.09854698181
theta: 1.64118945599
speed: 0.636396348476
id: 0
t: 72
xxx after update is x: 3.84244942665
y: -7.59202957153
theta: 1.32514047623
speed: 0.384513407946
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: 3.84244942665
y: -7.59202957153
theta: 1.32514047623
speed: 0.384513407946
id: 0
t: 73
xxx after update is x: 3.3409318924
y: -7.76107883453
theta: 1.53556776047
speed: 0.204384043813
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: 3.3409318924
y: -7.76107883453
theta: 1.53556776047
speed: 0.204384043813
id: 0
t: 74
xxx after update is x: 3.52151203156
y: -7.57690668106
theta: 1.58024501801
speed: 0.0040115439333
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.819665049736114, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.41091179848
y: -9.93739318848
theta: 4.8659157753
speed: 13.8317089081
id: 1
t: 73

sim.py in the sim.py statecallback function, msg is

x: -2.96333956718
y: -11.375169754
theta: 4.67251968384
speed: 13.8924264908
id: 1
t: 74

sim.py in the sim.py statecallback function, msg is

x: -3.04619836807
y: -11.3385477066
theta: 4.75939846039
speed: 13.7789163589
id: 1
t: 75

222 self.state_dicts[msg.id][msg.t] is (-3.0461983680725098, -11.338547706604004, 4.759398460388184, 13.778916358947754)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: 3.52151203156
y: -7.57690668106
theta: 1.58024501801
speed: 0.0040115439333
id: 0
t: 75
xxx after update is x: 3.1618449688
y: -7.10952186584
theta: 1.50550329685
speed: 0.17193852365
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: 3.1618449688
y: -7.10952186584
theta: 1.50550329685
speed: 0.17193852365
id: 0
t: 76
xxx after update is x: 3.18257284164
y: -7.59918832779
theta: 1.60600173473
speed: -0.178342327476
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8467481521225021, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.36562395096
y: -11.7715024948
theta: 4.81481409073
speed: 13.9201335907
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -3.45987272263
y: -12.9246091843
theta: 4.76608705521
speed: 13.9351511002
id: 1
t: 77

222 self.state_dicts[msg.id][msg.t] is (-3.4598727226257324, -12.924609184265137, 4.766087055206299, 13.935151100158691)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: 3.18257284164
y: -7.59918832779
theta: 1.60600173473
speed: -0.178342327476
id: 0
t: 77
xxx after function xxx before update is x: -3.04619836807
y: -11.3385477066
theta: 4.75939846039
speed: 13.7789163589
id: 1
t: 75
xxx after update is x: -3.36562395096
y: -11.7715024948
theta: 4.81481409073
speed: 13.9201335907
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:76
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: -3.36562395096
y: -11.7715024948
theta: 4.81481409073
speed: 13.9201335907
id: 1
t: 76
xxx after update is x: -3.45987272263
y: -12.9246091843
theta: 4.76608705521
speed: 13.9351511002
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: -3.45987272263
y: -12.9246091843
theta: 4.76608705521
speed: 13.9351511002
id: 1
t: 77
xxx after update is x: -2.76687312126
y: -13.3292779922
theta: 4.6156244278
speed: 14.2178583145
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8415451400300199, 0.4911999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.1618449688
y: -7.10952186584
theta: 1.50550329685
speed: 0.17193852365
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 3.18257284164
y: -7.59918832779
theta: 1.60600173473
speed: -0.178342327476
id: 0
t: 77

sim.py in the sim.py statecallback function, msg is

x: 3.02640533447
y: -7.61462688446
theta: 1.37976503372
speed: 0.0966852605343
id: 0
t: 78

222 self.state_dicts[msg.id][msg.t] is (3.0264053344726562, -7.614626884460449, 1.3797650337219238, 0.0966852605342865)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: -2.76687312126
y: -13.3292779922
theta: 4.6156244278
speed: 14.2178583145
id: 1
t: 78
xxx after update is x: -3.70304965973
y: -14.1424570084
theta: 4.61874723434
speed: 13.6070127487
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: -3.70304965973
y: -14.1424570084
theta: 4.61874723434
speed: 13.6070127487
id: 1
t: 79
xxx after update is x: -3.12204051018
y: -13.8135461807
theta: 4.96163463593
speed: 13.4548377991
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8371323508038502, 0.5167999999999984]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.27815461159
y: -7.31903457642
theta: 1.62227487564
speed: 0.0649583414197
id: 0
t: 79

sim.py in the sim.py statecallback function, msg is

x: 3.56819224358
y: -6.94907140732
theta: 1.56754255295
speed: 0.0604676529765
id: 0
t: 80

222 self.state_dicts[msg.id][msg.t] is (3.56819224357605, -6.949071407318115, 1.567542552947998, 0.06046765297651291)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: -3.12204051018
y: -13.8135461807
theta: 4.96163463593
speed: 13.4548377991
id: 1
t: 80
xxx after update is x: -2.96411252022
y: -15.0269374847
theta: update is x: 3.02640533447
y: -7.61462688446
theta: 1.37976503372
speed: 0.0966852605343
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: 3.02640533447
y: -7.61462688446
theta: 1.37976503372
speed: 0.0966852605343
id: 0
t: 78
xxx after update is x: 3.27815461159
y: -7.31903457642
theta: 1.62227487564
speed: 0.0649583414197
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: 3.27815461159
y: -7.31903457642
theta: 1.62227487564
speed: 0.0649583414197
id: 0
t: 79
xxx after update is x: 3.56819224358
y: -6.94907140732
theta: 1.56754255295
speed: 0.0604676529765
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8039354706712131, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.76687312126
y: -13.3292779922
theta: 4.6156244278
speed: 14.2178583145
id: 1
t: 78

sim.py in the sim.py statecallback function, msg is

x: -3.70304965973
y: -14.1424570084
theta: 4.61874723434
speed: 13.6070127487
id: 1
t: 79

sim.py in the sim.py statecallback function, msg is

x: -3.12204051018
y: -13.8135461807
theta: 4.96163463593
speed: 13.4548377991
id: 1
t: 80

222 self.state_dicts[msg.id][msg.t] is (-3.1220405101776123, -13.813546180725098, 4.961634635925293, 13.454837799072266)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: 3.56819224358
y: -6.94907140732
theta: 1.56754255295
speed: 0.0604676529765
id: 0
t: 80
xxx after update is x: 3.43745422363
y: -7.73155784607
theta: 1.59787583351
speed: -0.0779187455773
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: 3.43745422363
y: -7.73155784607
theta: 1.59787583351
speed: -0.0779187455773
id: 0
t: 81
xxx after update is x: 3.21946191788
y: -6.892100811
theta: 1.47579908371
speed: -0.0987691655755
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: 3.21946191788
y: -6.892100811
theta: 1.47579908371
speed: -0.0987691655755
id: 0
t: 82
xxx after update is x: 3.51599550247
y: -7.5356965065
theta: 1.5319558382
speed: -0.0788553580642
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: 3.51599550247
y: -7.5356965065
theta: 1.5319558382
speed: -0.0788553580642
id: 0
t: 83
xxx after update is x: 3.58758449554
y: -7.64551305771
theta: 1.66687500477
speed: 0.131057426333
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8353003443111581, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.96411252022
y: -15.0269374847
theta: 4.56537008286
speed: 13.6762371063
id: 1
t: 81

sim.py in the sim.py statecallback function, msg is

x: -3.34948563576
y: -15.7339878082
theta: 4.64607524872
speed: 4.56537008286
speed: 13.6762371063
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: -2.96411252022
y: -15.0269374847
theta: 4.56537008286
speed: 13.6762371063
id: 1
t: 81
xxx after update is x: -3.34948563576
y: -15.7339878082
theta: 4.64607524872
speed: 13.8350868225
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: -3.34948563576
y: -15.7339878082
theta: 4.64607524872
speed: 13.8350868225
id: 1
t: 82
xxx after update is x: -3.10186338425
y: -16.3420219421
theta: 4.66755628586
speed: 14.2392463684
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: -3.10186338425
y: -16.3420219421
theta: 4.66755628586
speed: 14.2392463684
id: 1
t: 83
xxx after update is x: -3.08185100555
y: -16.4835643768
theta: 4.75099468231
speed: 13.9181938171
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7448239443996189, 0.49919999999999787]
sim.py in the sim.py statecallback function, msg is

x: 3.43745422363
y: -7.73155784607
theta: 1.59787583351
speed: -0.0779187455773
id: 0
t: 81

sim.py in the sim.py statecallback function, msg is

x: 3.21946191788
y: -6.892100811
theta: 1.47579908371
speed: -0.0987691655755
id: 0
t: 82

sim.py in the sim.py statecallback function, msg is

x: 3.51599550247
y: -7.5356965065
theta: 1.5319558382
speed: -0.0788553580642
id: 0
t: 83

sim.py in the sim.py statecallback function, msg is

x: 3.58758449554
y: -7.64551305771
theta: 1.66687500477
speed: 0.131057426333
id: 0
t: 84

222 self.state_dicts[msg.id][msg.t] is (3.5875844955444336, -7.64551305770874, 1.6668750047683716, 0.13105742633342743)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.08185100555
y: -16.4835643768
theta: 4.75099468231
speed: 13.9181938171
id: 1
t: 84
xxx after update is x: -3.16726636887
y: -17.7859916687
theta: 4.65506887436
speed: 14.0459785461
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:85
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: -3.16726636887
y: -17.7859916687
theta: 4.65506887436
speed: 14.0459785461
id: 1
t: 85
xxx after update is x: -3.39221787453
y: -18.224489212
theta: 4.78725337982
speed: 14.0328264236
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39221787453
y: -18.224489212
theta: 4.78725337982
speed: 14.0328264236
id: 1
t: 86
current clock is 3.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39221787453
y: -18.224489212
theta: 4.78725337982
speed: 14.0328264236
id: 1
t: 86
current clock is 3.82222222222
maneuver_negotiatir.py message_processing, curt 13.8350868225
id: 1
t: 82

sim.py in the sim.py statecallback function, msg is

x: -3.10186338425
y: -16.3420219421
theta: 4.66755628586
speed: 14.2392463684
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.08185100555
y: -16.4835643768
theta: 4.75099468231
speed: 13.9181938171
id: 1
t: 84

222 self.state_dicts[msg.id][msg.t] is (-3.081851005554199, -16.483564376831055, 4.750994682312012, 13.918193817138672)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: 3.58758449554
y: -7.64551305771
theta: 1.66687500477
speed: 0.131057426333
id: 0
t: 84
xxx after update is x: 2.68705391884
y: -7.19567632675
theta: 1.47857737541
speed: -0.162056326866
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: 2.68705391884
y: -7.19567632675
theta: 1.47857737541
speed: -0.162056326866
id: 0
t: 85
xxx after update is x: 3.35943055153
y: -7.34425830841
theta: 1.65066230297
speed: 0.0629388615489
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: 3.35943055153
y: -7.34425830841
theta: 1.65066230297
speed: 0.0629388615489
id: 0
t: 86
xxx after update is x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending RELEASE,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.7777777777777777, True, ['1']]
3.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 3.86666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.77777777778
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
sime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '3.15555555556', 'Position': ['(3.3541665077209473', ' -7.3513288497924805', ' 1.6015655994415283)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.15555555556,(3.3541665077209473, -7.3513288497924805, 1.6015655994415283),0,1,1.11111111111,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
xxx before update is x: -3.39221787453
y: -18.224489212
theta: 4.78725337982
speed: 14.0328264236
id: 1
t: 86
xxx after update is x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '3.86666666667', 'IntendedCourse': 'left', 'Position': ['3.162930727005005', ' -7.663048267364502', ' 1.5313109159469604'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.171851851852
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending DENY,1,3.86666666667,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87
xxx after update is x: -2.77426171303
y: -19.4574241638
theta: 4.80036687851
speed: 13.7528324127
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9087585371029006, 0.4927999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.68705391884
y: -7.19567632675
theta: 1.47857737541
speed: -0.162056326866
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: 3.35943055153
y: -7.34425830841
theta: 1.65066230297
speed: 0.0629388615489
id: 0
t: 86

sim.py in the sim.py statecallback function, msg is

x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87

sim.py in the sim.py statecallback function, msg is

x: 3.49901008606
y: -7.22773981094
theta: 1.57451987267
speed: 0.070196211338
id: 0
t: 88

222 self.agents_to_ask is ['1']
message is :GET,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending GET,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '3.86666666667', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'DENY'}
car 0 received DENY,1,3.86666666667,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.7777777777777777, True, ['1']]
3.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.7777777777777777, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: 3.16293072701
y: -7.66304826736
theta: 1.53131091595
speed: -0.0500562116504
id: 0
t: 87
xxx after update is x: 3.49901008606
y: -7.22773981094
theta: 1.57451987267
speed: 0.070196211338
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9157676598928558, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.16726636887
y: -17.7859916687
theta: 4.65506887436
speed: 14.0459785461
id: 1
t: 85

sim.py in the sim.py statecallback function, msg is

x: -3.39221787453
y: -18.224489212
theta: 4.78725337982
speed: 14.0328264236
id: 1
t: 86

sim.py in the sim.py statecallback function, msg is

x: -3.73030090332
y: -18.3520545959
theta: 4.89346170425
speed: 14.0338468552
id: 1
t: 87

sim.py in the sim.py statecallback function, msg is

x: -2.77426171303
y: -19.4574241638
theta: 4.80036687851
speed: 13.7528324127
id: 1
t: 88

222 self.state_dicts[msg.id][msg.t] is (-2.774261713027954, -19.45742416381836, 4.8003668785095215, 13.752832412719727)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.49901008606
y: -7.22773981094
theta: 1.57451987267
speed: 0.070196211338
id: 0
t: 88
xxx after update is x: 3.64922308922
y: -7.39915418625
theta: 1.49916434288
speed: -0.182636544108
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: 3.64922308922
y: -7.39915418625
theta: 1.49916434288
speed: -0.182636544108
id: 0
t: 89
xxx after update is x: 3.34943890572
y: -7.03282928467
theta: 1.71049380302
speed: 0.0156006421894
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: 3.34943890572
y: -7.03282928467
theta: 1.71049380302
speed: 0.0156006421894
id: 0
t: 90
xxx after update is x: 2.89347553253
y: -7.18327713013
theta: 1.70032048225
speed: 0.0029589808546
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: 2.89347553253
y: -7.18327713013
theta: 1.70032048225
speed: 0.0029589808546
id: 0
t: 91
xxx after update is x: 3.79025173187
y: -7.95031118393
theta: 1.57271683216
speed: -0.106028407812
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: 3.79025173187
y: -7.95031118393
theta: 1.57271683216
speed: -0.106028407812
id: 0
t: 92
xxx after update is x: 3.04047179222
y: -6.91163635254
theta: 1.61907792091
speed: -0.167231783271
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: 3.04047179222
y: -6.91163635254
theta: 1.61907792091
speed: -0.167231783271
id: 0
t: 93
xxx after update is x: 3.25002861023
y: -6.92707109451
theta: 1.49432969093
speed: 0.0615905933082
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.8578925805480783, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.95055890083
y: -19.7552337646
theta: 4.65543079376
speed: 13.4490861893
id: 1
t: 89

sim.py in the sim.py statecallback function, msg is

x: -3.41034841537
y: -20.3431549072
theta: 4.93557310104
speed: 13.9780550003
id: 1
t: 90

sim.py in the sim.py statecallback function, msg is

x: -2.90679049492
y: -21.9831581116
theta: 4.62482881546
speed: 13.5961732864
id: 1
t: 91

sim.py in the sim.py statecallback function, msg is

x: -3.13990902901
y: -21.8740882874
theta: 4.87983608246
speed: 13.8271951675
id: 1
t: 92

sim.py in the sim.py statecallback function, msg is

x: -3.61056280136
y: -22.9374694824
theta: 4.80393838882
speed: 13.2608222961
id: 1
t: 93

sim.py in the sim.py statecallback function, msg is

x: -2.85713601112
y: -23.3754291534
theta: 4.75680923462
speed: 13.425868988
id: 1
t: 94

222 self.state_dicts[msg.id][msg.t] is (-2.8571360111236572, -23.375429153442383, 4.756809234619141, 13.42586898803711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: 3.25002861023
y: -6.9270elf.state_dicts[msg.id][msg.t] is (3.4990100860595703, -7.2277398109436035, 1.5745198726654053, 0.07019621133804321)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -2.77426171303
y: -19.4574241638
theta: 4.80036687851
speed: 13.7528324127
id: 1
t: 88
xxx after update is x: -2.95055890083
y: -19.7552337646
theta: 4.65543079376
speed: 13.4490861893
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:89
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.95055890083
y: -19.7552337646
theta: 4.65543079376
speed: 13.4490861893
id: 1
t: 89
xxx after update is x: -3.41034841537
y: -20.3431549072
theta: 4.93557310104
speed: 13.9780550003
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: -3.41034841537
y: -20.3431549072
theta: 4.93557310104
speed: 13.9780550003
id: 1
t: 90
xxx after update is x: -2.90679049492
y: -21.9831581116
theta: 4.62482881546
speed: 13.5961732864
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: -2.90679049492
y: -21.9831581116
theta: 4.62482881546
speed: 13.5961732864
id: 1
t: 91
xxx after update is x: -3.13990902901
y: -21.8740882874
theta: 4.87983608246
speed: 13.8271951675
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8379559449205856, 0.4911999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.64922308922
y: -7.39915418625
theta: 1.49916434288
speed: -0.182636544108
id: 0
t: 89

sim.py in the sim.py statecallback function, msg is

x: 3.34943890572
y: -7.03282928467
theta: 1.71049380302
speed: 0.0156006421894
id: 0
t: 90

sim.py in the sim.py statecallback function, msg is

x: 2.89347553253
y: -7.18327713013
theta: 1.70032048225
speed: 0.0029589808546
id: 0
t: 91

sim.py in the sim.py statecallback function, msg is

x: 3.79025173187
y: -7.95031118393
theta: 1.57271683216
speed: -0.106028407812
id: 0
t: 92

222 self.state_dicts[msg.id][msg.t] is (3.7902517318725586, -7.950311183929443, 1.5727168321609497, -0.10602840781211853)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -3.13990902901
y: -21.8740882874
theta: 4.87983608246
speed: 13.8271951675
id: 1
t: 92
xxx after update is x: -3.61056280136
y: -22.9374694824
theta: 4.80393838882
speed: 13.2608222961
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: -3.61056280136
y: -22.9374694824
theta: 4.80393838882
speed: 13.2608222961
id: 1
t: 93
xxx after update is x: -2.85713601112
y: -23.3754291534
theta: 4.75680923462
speed: 13.425868988
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: -2.85713601112
y: -23.3754291534
theta: 4.75680923462
speed: 13.425868988
id: 1
t: 94
xxx after update is x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9053994076420503, 0.4959999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.04047179222
y: -6.91163635254
theta: 1.61907792091
speed: -0.167231783271
id: 0
t: 93

sim.py in the sim.py statecallback function, msg is

x: 3.25002861023
y: -6.92707109451
theta: 1.49432969093
speed: 0.0615905933082
id: 0
t: 94

sim.py in the sim.py statecallback function, msg is

x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95

222 self.state_dicts[msg.id][msg.t] is (3.3367760181427, -6.739217758178711, 1.4954482316970825, -0.25756049156188965)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
************normalize weight**********************
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '3.86666666667', 'Position': ['(3.162930727005005', ' -7.663048267364502', ' 1.5313109159469604)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.11111111111', 'Sender': '0', 'Time': '4.22222222222', 'IntendedCourse': 'left', 'Position': ['3.3367760181427', ' -6.739217758178711', ' 1.4954482316970825'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.187654320988
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.32172346115
y: -23.7865848541
theta: 4.45071601868
speed: 14.1415214539
id: 1
t: 95
current clock is 4.22222222222
self.communicat7109451
theta: 1.49432969093
speed: 0.0615905933082
id: 0
t: 94
xxx after update is x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96
aaaaaa
risk is [0.7536834394878492, 0.0]
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,3.86666666667,(3.162930727005005, -7.663048267364502, 1.5313109159469604),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_proion_details == 0
sending DENY,1,4.22222222222,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
aaaaaabbbbb
risk is [0.6210252968982917, 0.475199999999998]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96
cessing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '4.22222222222', 'Position': ['(-3.1291797161102295', ' 30.11566734313965', ' 4.795999526977539)'], 'Type': 'DENY'}
car 0 received DENY,1,4.22222222222,(-3.1291797161102295, 30.11566734313965, 4.795999526977539),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.222222222222222, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.222222222222222, True, ['1']]
4.22222222222
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.22222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.22222222222
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
!!!!change state to get
GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending GET,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.33677601814
y: -6.73921775818
theta: 1.4954482317
speed: -0.257560491562
id: 0
t: 95
current clock is 4.22222222222
self.communication_details == 0
sending RELEASE,0,4.22222222222,(3.3367760181427, -6.739217758178711, 1.4954482316970825),0,1,1.11111111111,0 to car 1 from car 0
ma... logging to /home/lu/.ros/log/8b342eb6-ff08-11e8-af00-000c291801fc/roslaunch-ubuntu-9856.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:34541/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [9866][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 8b342eb6-ff08-11e8-af00-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [9879][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [9886][0m
[1mprocess[rviz-3]: started with pid [9897][0m
[1mprocess[car0-4]: started with pid [9898][0m
[1mprocess[car1-5]: started with pid [9899][0m
[1mprocess[cloud-6]: started with pid [9900][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
