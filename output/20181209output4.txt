sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.80872893333
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: 3.12804722786
y: -34.1945762634
theta: 1.43310260773
speed: 13.7618808746
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (3.128047227859497, -34.194576263427734, 1.4331026077270508, 13.761880874633789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f61eac903f8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f61eacaa638>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
sim.py in the sim.py statecallback function, msg is

x: 2.60893344879
y: -33.5804786682
theta: 1.63417708874
speed: 13.66010952
id: 0
t: 2

sim.py in the sim.py statecallback function, msg is

x: 2.75563716888
y: -32.8429222107
theta: 1.68612337112
speed: 14.2325353622
id: 0
t: 3

222 self.state_dicts[msg.id][msg.t] is (2.7556371688842773, -32.84292221069336, 1.6861233711242676, 14.232535362243652)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -3.21279335022
y: 32.379070282
theta: 4.73271846771
speed: 13.7777881622
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.21279335022
y: 32.379070282
theta: 4.73271846771
speed: 13.7777881622
id: 1
t: 5
xxx after update is x: -2.52254009247
y: 31.5588779449
theta: 4.75487327576
speed: 13.6957321167
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin fsim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.81003904343
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: -3.08553266525
y: 33.7732963562
theta: 4.74538993835
speed: 13.9889278412
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-3.0855326652526855, 33.77329635620117, 4.745389938354492, 13.988927841186523)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f29272ea1b8>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f2927305e18>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
sim.py in the sim.py statecallback function, msg is

x: -3.18186402321
y: 33.6647071838
theta: 4.76254892349
speed: 14.0429363251
id: 1
t: 2

sim.py in the sim.py statecallback function, msg is

x: -2.54252314568
y: 33.2234039307
theta: 4.65309762955
speed: 13.8196239471
id: 1
t: 3

222 self.state_dicts[msg.id][msg.t] is (-2.542523145675659, 33.22340393066406, 4.653097629547119, 13.819623947143555)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.00131821632
y: -31.9391994476
theta: 1.45695412159
speed: 14.0719776154
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: 3.00131821632
y: -31.9391994476
theta: 1.45695412159
speed: 14.0719776154
id: 0
t: 5
xxx after update is x: 3.64986491203
y: -31.2465667725
theta: 1.46061718464
speed: 13.9383897781
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update fununction, finish the n times spin:6
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -2.52254009247
y: 31.5588779449
theta: 4.75487327576
speed: 13.6957321167
id: 1
t: 6
xxx after update is x: -3.53969907761
y: 30.4955654144
theta: 4.48059225082
speed: 13.8140306473
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.53969907761
y: 30.4955654144
theta: 4.48059225082
speed: 13.8140306473
id: 1
t: 7
xxx after update is x: -3.05873560905
y: 30.1052951813
theta: 4.6871137619
speed: 14.3213148117
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.34646711473680913, 0.40792621095097475]
sim.py in the sim.py statecallback function, msg is

x: 3.07606244087
y: -32.4423789978
theta: 1.60236930847
speed: 14.1125802994
id: 0
t: 4

sim.py in the sim.py statecallback function, msg is

x: 3.00131821632
y: -31.9391994476
theta: 1.45695412159
speed: 14.0719776154
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 3.64986491203
y: -31.2465667725
theta: 1.46061718464
speed: 13.9383897781
id: 0
t: 6

sim.py in the sim.py statecallback function, msg is

x: 3.25074863434
y: -30.6849708557
theta: 1.55630195141
speed: 13.7940063477
id: 0
t: 7

sim.py in the sim.py statecallback function, msg is

x: 3.06185698509
y: -29.8003158569
theta: 1.3799290657
speed: 14.1768226624
id: 0
t: 8

222 self.state_dicts[msg.id][msg.t] is (3.061856985092163, -29.800315856933594, 1.3799290657043457, 14.176822662353516)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: -3.05873560905
y: 30.1052951813
theta: 4.6871137619
speed: 14.3213148117
id: 1
t: 8
xxx after update is x: -3.45501303673
y: 29.3992919922
theta: 4.89691734314
speed: 14.1580095291
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.45501303673
y: 29.3992919922
theta: 4.89691734314
speed: 14.1580095291
id: 1
t: 9
current clock is 0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
maneuver_negotiatir.py in the try maneuver function update -. strat
xxx before update is x: -3.45501303673
y: 29.3992919922
theta: 4.89691734314
speed: 14.1580095291
id: 1
t: 9
xxx after update is x: -2.78542542458
y: 29.2446594238
theta: 4.66540145874
speed: 14.030412674
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -2.78542542458
y: 29.2446594238
theta: 4.66540145874
speed: 14.030412674
id: 1
t: 10
xxx after update is x: -2.97600340843
y: 27.9234199524
theta: 4.70821285248
speed: 14.0661849976
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2389263623647918, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.1669728756
y: -29.09100914
theta: 1.55752336979
speed: 13ction 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 3.64986491203
y: -31.2465667725
theta: 1.46061718464
speed: 13.9383897781
id: 0
t: 6
xxx after update is x: 3.25074863434
y: -30.6849708557
theta: 1.55630195141
speed: 13.7940063477
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 3.25074863434
y: -30.6849708557
theta: 1.55630195141
speed: 13.7940063477
id: 0
t: 7
xxx after update is x: 3.06185698509
y: -29.8003158569
theta: 1.3799290657
speed: 14.1768226624
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3184374111168403, 0.4544169721173454]
sim.py in the sim.py statecallback function, msg is

x: -3.52303910255
y: 32.1653518677
theta: 4.4139213562
speed: 13.9326210022
id: 1
t: 4

sim.py in the sim.py statecallback function, msg is

x: -3.21279335022
y: 32.379070282
theta: 4.73271846771
speed: 13.7777881622
id: 1
t: 5

sim.py in the sim.py statecallback function, msg is

x: -2.52254009247
y: 31.5588779449
theta: 4.75487327576
speed: 13.6957321167
id: 1
t: 6

sim.py in the sim.py statecallback function, msg is

x: -3.53969907761
y: 30.4955654144
theta: 4.48059225082
speed: 13.8140306473
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.05873560905
y: 30.1052951813
theta: 4.6871137619
speed: 14.3213148117
id: 1
t: 8

222 self.state_dicts[msg.id][msg.t] is (-3.0587356090545654, 30.105295181274414, 4.6871137619018555, 14.321314811706543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.06185698509
y: -29.8003158569
theta: 1.3799290657
speed: 14.1768226624
id: 0
t: 8
xxx after update is x: 3.1669728756
y: -29.09100914
theta: 1.55752336979
speed: 13.9159765244
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.1669728756
y: -29.09100914
theta: 1.55752336979
speed: 13.9159765244
id: 0
t: 9
current clock is 0.4
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: 3.1669728756
y: -29.09100914
theta: 1.55752336979
speed: 13.9159765244
id: 0
t: 9
xxx after update is x: 3.30627727509
y: -28.7444972992
theta: 1.51076114178
speed: 14.023065567
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 3.30627727509
y: -28.7444972992
theta: 1.51076114178
speed: 14.023065567
id: 0
t: 10
xxx after update is x: 2.99957513809
y: -28.4309196472
theta: 1.50262105465
speed: 14.0311450958
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 2.99957513809
y: -28.4309196472
theta: 1.50262105465
speed: 14.0311450958
id: 0
t: 11
xxx after update is x: 2.85077738762
y: -27.2184925079
theta: 1.46688.9159765244
id: 0
t: 9

sim.py in the sim.py statecallback function, msg is

x: 3.30627727509
y: -28.7444972992
theta: 1.51076114178
speed: 14.023065567
id: 0
t: 10

sim.py in the sim.py statecallback function, msg is

x: 2.99957513809
y: -28.4309196472
theta: 1.50262105465
speed: 14.0311450958
id: 0
t: 11

222 self.state_dicts[msg.id][msg.t] is (2.999575138092041, -28.430919647216797, 1.502621054649353, 14.031145095825195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: -2.97600340843
y: 27.9234199524
theta: 4.70821285248
speed: 14.0661849976
id: 1
t: 11
xxx after update is x: -3.143450737
y: 27.4798431396
theta: 4.81983184814
speed: 14.3860378265
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -3.143450737
y: 27.4798431396
theta: 4.81983184814
speed: 14.3860378265
id: 1
t: 12
xxx after update is x: -3.65087080002
y: 26.5792198181
theta: 4.63884925842
speed: 14.0497055054
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -3.65087080002
y: 26.5792198181
theta: 4.63884925842
speed: 14.0497055054
id: 1
t: 13
xxx after update is x: -3.09135079384
y: 26.2699146271
theta: 4.76553916931
speed: 13.8653974533
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: -3.09135079384
y: 26.2699146271
theta: 4.76553916931
speed: 13.8653974533
id: 1
t: 14
xxx after update is x: -3.23697543144
y: 25.4497127533
theta: 4.63032770157
speed: 13.7202606201
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.29021609741871934, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.85077738762
y: -27.2184925079
theta: 1.46688961983
speed: 13.660782814
id: 0
t: 12

sim.py in the sim.py statecallback function, msg is

x: 2.22128033638
y: -26.9688014984
theta: 1.49971473217
speed: 14.0225162506
id: 0
t: 13

sim.py in the sim.py statecallback function, msg is

x: 3.43753480911
y: -26.2238197327
theta: 1.5199201107
speed: 13.6895570755
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 3.28443241119
y: -25.9008808136
theta: 1.71861183643
speed: 13.1275568008
id: 0
t: 15

222 self.state_dicts[msg.id][msg.t] is (3.2844324111938477, -25.900880813598633, 1.7186118364334106, 13.127556800842285)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: -3.23697543144
y: 25.4497127533
theta: 4.63032770157
speed: 13.7202606201
id: 1
t: 15
xxx after update is x: -3.34627199173
y: 25.2835884094
theta: 4.69945144653
speed: 13.6899347305
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.34627199173
y: 25.2835884094
theta: 4.699451446961983
speed: 13.660782814
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: 2.85077738762
y: -27.2184925079
theta: 1.46688961983
speed: 13.660782814
id: 0
t: 12
xxx after update is x: 2.22128033638
y: -26.9688014984
theta: 1.49971473217
speed: 14.0225162506
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.2517727384376741, 0.3452961354494354]
sim.py in the sim.py statecallback function, msg is

x: -3.45501303673
y: 29.3992919922
theta: 4.89691734314
speed: 14.1580095291
id: 1
t: 9

sim.py in the sim.py statecallback function, msg is

x: -2.78542542458
y: 29.2446594238
theta: 4.66540145874
speed: 14.030412674
id: 1
t: 10

sim.py in the sim.py statecallback function, msg is

x: -2.97600340843
y: 27.9234199524
theta: 4.70821285248
speed: 14.0661849976
id: 1
t: 11

sim.py in the sim.py statecallback function, msg is

x: -3.143450737
y: 27.4798431396
theta: 4.81983184814
speed: 14.3860378265
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -3.65087080002
y: 26.5792198181
theta: 4.63884925842
speed: 14.0497055054
id: 1
t: 13

222 self.state_dicts[msg.id][msg.t] is (-3.6508708000183105, 26.579219818115234, 4.638849258422852, 14.049705505371094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 2.22128033638
y: -26.9688014984
theta: 1.49971473217
speed: 14.0225162506
id: 0
t: 13
xxx after update is x: 3.43753480911
y: -26.2238197327
theta: 1.5199201107
speed: 13.6895570755
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: 3.43753480911
y: -26.2238197327
theta: 1.5199201107
speed: 13.6895570755
id: 0
t: 14
xxx after update is x: 3.28443241119
y: -25.9008808136
theta: 1.71861183643
speed: 13.1275568008
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: 3.28443241119
y: -25.9008808136
theta: 1.71861183643
speed: 13.1275568008
id: 0
t: 15
xxx after update is x: 3.54044699669
y: -25.3360824585
theta: 1.36715781689
speed: 13.1077051163
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: 3.54044699669
y: -25.3360824585
theta: 1.36715781689
speed: 13.1077051163
id: 0
t: 16
xxx after update is x: 3.30553841591
y: -24.3398170471
theta: 1.54717803001
speed: 13.0640325546
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30553841591
y: -24.3398170471
theta: 1.54717803001
speed: 13.0640325546
id: 0
t: 17
current clock is 0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:18
xxx before update is53
speed: 13.6899347305
id: 1
t: 16
xxx after update is x: -3.05063080788
y: 24.4662952423
theta: 4.71343946457
speed: 14.0418834686
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05063080788
y: 24.4662952423
theta: 4.71343946457
speed: 14.0418834686
id: 1
t: 17
current clock is 0.755555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.05063080788
y: 24.4662952423
theta: 4.71343946457
speed: 14.0418834686
id: 1
t: 17
xxx after update is x: -3.26794815063
y: 23.7563209534
theta: 4.70571565628
speed: 13.7828216553
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.26794815063
y: 23.7563209534
theta: 4.70571565628
speed: 13.7828216553
id: 1
t: 18
xxx after update is x: -3.47413897514
y: 23.1533184052
theta: 4.79679918289
speed: 14.1379051208
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:19
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: -3.47413897514
y: 23.1533184052
theta: 4.79679918289
speed: 14.1379051208
id: 1
t: 19
xxx after update is x: -3.43183946609
y: 22.2539634705
theta: 4.68402385712
speed: 14.1424770355
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.47372405536659734, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.54044699669
y: -25.3360824585
theta: 1.36715781689
speed: 13.1077051163
id: 0
t: 16

sim.py in the sim.py statecallback function, msg is

x: 3.30553841591
y: -24.3398170471
theta: 1.54717803001
speed: 13.0640325546
id: 0
t: 17

sim.py in the sim.py statecallback function, msg is

x: 3.39288973808
y: -23.6995429993
theta: 1.53107774258
speed: 12.6861171722
id: 0
t: 18

sim.py in the sim.py statecallback function, msg is

x: 3.32455086708
y: -23.2716159821
theta: 1.52519667149
speed: 12.2891693115
id: 0
t: 19

sim.py in the sim.py statecallback function, msg is

x: 2.90000605583
y: -22.5642299652
theta: 1.65537309647
speed: 12.4281044006
id: 0
t: 20

222 self.state_dicts[msg.id][msg.t] is (2.900006055831909, -22.56422996520996, 1.6553730964660645, 12.428104400634766)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: -3.43183946609
y: 22.2539634705
theta: 4.68402385712
speed: 14.1424770355
id: 1
t: 20
xxx after update is x: -2.86066198349
y: 21.555934906
theta: 4.62813568115
speed: 13.7571077347
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: -2.86066198349
y: 21.555934906
theta: 4.62813568115
speed: 13.7571077347
id: 1
t: 21
xxx after update is x: -3.65662693977
y: 22.0863895416
theta: 4.85134363174
speed: 13.4249515533
id: 1
t: 22
maneuver_negotiatir.py fin x: 3.30553841591
y: -24.3398170471
theta: 1.54717803001
speed: 13.0640325546
id: 0
t: 17
xxx after update is x: 3.39288973808
y: -23.6995429993
theta: 1.53107774258
speed: 12.6861171722
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.20399032294323255, 0.299478362740107]
sim.py in the sim.py statecallback function, msg is

x: -3.09135079384
y: 26.2699146271
theta: 4.76553916931
speed: 13.8653974533
id: 1
t: 14

sim.py in the sim.py statecallback function, msg is

x: -3.23697543144
y: 25.4497127533
theta: 4.63032770157
speed: 13.7202606201
id: 1
t: 15

sim.py in the sim.py statecallback function, msg is

x: -3.34627199173
y: 25.2835884094
theta: 4.69945144653
speed: 13.6899347305
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.05063080788
y: 24.4662952423
theta: 4.71343946457
speed: 14.0418834686
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -3.26794815063
y: 23.7563209534
theta: 4.70571565628
speed: 13.7828216553
id: 1
t: 18

222 self.state_dicts[msg.id][msg.t] is (-3.2679481506347656, 23.75632095336914, 4.705715656280518, 13.782821655273438)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.39288973808
y: -23.6995429993
theta: 1.53107774258
speed: 12.6861171722
id: 0
t: 18
xxx after update is x: 3.32455086708
y: -23.2716159821
theta: 1.52519667149
speed: 12.2891693115
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: 3.32455086708
y: -23.2716159821
theta: 1.52519667149
speed: 12.2891693115
id: 0
t: 19
xxx after update is x: 2.90000605583
y: -22.5642299652
theta: 1.65537309647
speed: 12.4281044006
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 2.90000605583
y: -22.5642299652
theta: 1.65537309647
speed: 12.4281044006
id: 0
t: 20
xxx after update is x: 2.87016320229
y: -22.3107681274
theta: 1.61307895184
speed: 12.2381267548
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: 2.87016320229
y: -22.3107681274
theta: 1.61307895184
speed: 12.2381267548
id: 0
t: 21
xxx after update is x: 3.96717023849
y: -22.0390357971
theta: 1.58936285973
speed: 11.8493919373
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: 3.96717023849
y: -22.0390357971
theta: 1.58936285973
speed: 11.8493919373
id: 0
t: 22
xxx after update is x: 3.66130065918
y: -21.2241287231
theta: 1.58239114285
speed: 11.4974651337
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: 3.66130065918
y: -21.2241287231
theta: 1.58239114285
speed: 11.4974651337
id: 0
t: 23
xxx after update is x: 3.04689359665
y: -21.0993938446
theta: 1.48666477203
speed: 11.3082456589
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 3.04689359665
y: -21.0993938446
theta: 1.48666477203
speed: 11.3082456589
id: 0
t: 24
xxx after update is x: 3.2462041378
y: -20.5209789276
theta: 1.77574062347
speed: 11.248049736
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.2462041378
y: -20.5209789276
theta: 1.77574062347
speed: 11.248049736
id: 0
t: 25
current clock is 1.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
risk is [0.43169732317078774, 0.4047908179578886]
sim.py in the sim.py statecallback function, msg is

x: -3.47413897514
y: 23.1533184052
theta: 4.79679918289
speed: 14.1379051208
id: 1
t: 19

sim.py in the sim.py statecallback function, msg is

x: -3.43183946609
y: 22.2539634705
theta: 4.68402385712
speed: 14.1424770355
id: 1
t: 20

sim.py in the sim.py statecallback function, msg is

x: -2.86066198349
y: 21.555934906
theta: 4.62813568115
speed: 13.7571077347
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.65662693977
y: 22.0863895416
theta: 4.85134363174
speed: 13.4249515533
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -3.28371453285
y: 21.2672138214
theta: 4.66987943649
speed: 13.8640794754
id: 1
t: 23

sim.py in the sim.py statecallback function, msg is

x: -2.75832772255
y: 19.6597957611
theta: 4.83182859421
speed: 13.7762517929
id: 1
t: 24

sim.py in the sim.py statecallback function, msg is

x: -3.64233899117
y: 19.4721088409
theta: 4.6974029541
speed: 13.8513479233
id: 1
t: 25

222 self.state_dicts[msg.id][msg.t] is (-3.642338991165161, 19.472108840942383, 4.6974029541015625, 13.851347923278809)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 3.2462041378
y: -20.5209789276
theta: 1.77574062347
speed: 11.248049736
id: 0
t: 25
xxx after update is x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
!!!!after check statue the self.tag is [1.1555555555555554, 0]
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.11111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1]ish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: -3.65662693977
y: 22.0863895416
theta: 4.85134363174
speed: 13.4249515533
id: 1
t: 22
xxx after update is x: -3.28371453285
y: 21.2672138214
theta: 4.66987943649
speed: 13.8640794754
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -3.28371453285
y: 21.2672138214
theta: 4.66987943649
speed: 13.8640794754
id: 1
t: 23
xxx after update is x: -2.75832772255
y: 19.6597957611
theta: 4.83182859421
speed: 13.7762517929
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.28724811837978276, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.87016320229
y: -22.3107681274
theta: 1.61307895184
speed: 12.2381267548
id: 0
t: 21

sim.py in the sim.py statecallback function, msg is

x: 3.96717023849
y: -22.0390357971
theta: 1.58936285973
speed: 11.8493919373
id: 0
t: 22

sim.py in the sim.py statecallback function, msg is

x: 3.66130065918
y: -21.2241287231
theta: 1.58239114285
speed: 11.4974651337
id: 0
t: 23

sim.py in the sim.py statecallback function, msg is

x: 3.04689359665
y: -21.0993938446
theta: 1.48666477203
speed: 11.3082456589
id: 0
t: 24

222 self.state_dicts[msg.id][msg.t] is (3.04689359664917, -21.099393844604492, 1.4866647720336914, 11.308245658874512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: -2.75832772255
y: 19.6597957611
theta: 4.83182859421
speed: 13.7762517929
id: 1
t: 24
xxx after update is x: -3.64233899117
y: 19.4721088409
theta: 4.6974029541
speed: 13.8513479233
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.64233899117
y: 19.4721088409
theta: 4.6974029541
speed: 13.8513479233
id: 1
t: 25
current clock is 1.11111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: -3.64233899117
y: 19.4721088409
theta: 4.6974029541
speed: 13.8513479233
id: 1
t: 25
xxx after update is x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.155 == 1
self.agents_to_ask is ['1']
message is :GET,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending GET,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(-3.642338991165161', ' 19.472108840942383', ' 4.6974029541015625)'], 'Type': 'DENY'}
car 0 received DENY,1,1.15555555556,(-3.642338991165161, 19.472108840942383, 4.6974029541015625),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.1111111111111112, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending RELEASE,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26
xxx after update is x: 3.09238052368
y: -19.0944747925
theta: 1.67801082134
speed: 10.9228105545
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n55555556', 'IntendedCourse': 'left', 'Position': ['2.994417667388916', ' -19.432466506958008', ' 1.5481243133544922'], 'TagID': '0', 'Type': 'GET', 'Velocity': '10'}
car 1 received GET,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0513580246916
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.6842086357
sender last entering time is:  1.6842086357
sender last leaving time is:  4.03285560366
my entering time is:  0.877919882127
my leaving time is:  2.78448173956
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending DENY,1,1.15555555556,(-3.642338991165161, 19.472108840942383, 4.6974029541015625),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '10', 'Sender': '0', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(2.994417667388916', ' -19.432466506958008', ' 1.5481243133544922)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.15555555556,(2.994417667388916, -19.432466506958008, 1.5481243133544922),10,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26
xxx after update is x: -3.4700949192
y: 18.2372398376
theta: 4.64049053192
speed: 13.8602514267
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: -3.4700949192
y: 18.2372398376
theta: 4.64049053192
speed: 13.8602514267
id: 1
t: 27
xxx after update is x: -3.71675395966
y: 17.7190876007
theta: 4.74657964706
speed: 13.8097352982
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2362235283501912, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.2462041378
y: -20.5209789276
theta: 1.77574062347
speed: 11.248049736
id: 0
t: 25

sim.py in the sim.py statecallback function, msg is

x: 2.99441766739
y: -19.432466507
theta: 1.54812431335
speed: 10.8430318832
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.09238052368
y: -19.0944747925
theta: 1.67801082134
speed: 10.9228105545
id: 0
t: 27

sim.py in the sim.py statecallback function, msg is

x: 3.036672 times spin:28xxx before update is x: 3.09238052368
y: -19.0944747925
theta: 1.67801082134
speed: 10.9228105545
id: 0
t: 27
xxx after update is x: 3.03667235374
y: -18.1057300568
theta: 1.54203295708
speed: 10.5306024551
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: 3.03667235374
y: -18.1057300568
theta: 1.54203295708
speed: 10.5306024551
id: 0
t: 28
xxx after update is x: 3.27589941025
y: -18.2517967224
theta: 1.60064351559
speed: 10.5092172623
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: 3.27589941025
y: -18.2517967224
theta: 1.60064351559
speed: 10.5092172623
id: 0
t: 29
xxx after update is x: 3.49908328056
y: -17.3663787842
theta: 1.52859401703
speed: 9.80525970459
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3114500770125273, 0.0741864152445317]
sim.py in the sim.py statecallback function, msg is

x: -3.05906605721
y: 18.9306430817
theta: 4.73000335693
speed: 13.6972951889
id: 1
t: 26

sim.py in the sim.py statecallback function, msg is

x: -3.4700949192
y: 18.2372398376
theta: 4.64049053192
speed: 13.8602514267
id: 1
t: 27

sim.py in the sim.py statecallback function, msg is

x: -3.71675395966
y: 17.7190876007
theta: 4.74657964706
speed: 13.8097352982
id: 1
t: 28

sim.py in the sim.py statecallback function, msg is

x: -3.10919117928
y: 17.1265888214
theta: 4.86931848526
speed: 13.8506364822
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -2.80096125603
y: 16.7070541382
theta: 4.83513069153
speed: 14.0017108917
id: 1
t: 30

222 self.state_dicts[msg.id][msg.t] is (-2.8009612560272217, 16.707054138183594, 4.83513069152832, 14.001710891723633)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 3.49908328056
y: -17.3663787842
theta: 1.52859401703
speed: 9.80525970459
id: 0
t: 30
xxx after update is x: 3.22846126556
y: -17.4798660278
theta: 1.60807740688
speed: 10.0860548019
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 3.22846126556
y: -17.4798660278
theta: 1.60807740688
speed: 10.0860548019
id: 0
t: 31
xxx after update is x: 2.99360442162
y: -16.9115428925
theta: 1.61911094189
speed: 9.59600162506
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.99360442162
y: -16.9115428925
theta: 1.61911094189
speed: 9.59600162506
id: 0
t: 32
current clock is 1.42222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: 2.99360442162
y: -16.9115428925
theta: 1.61911094189
speed: 9.59600162506
id: 0
t: 32
xxx after update is x: 3.68404746056
y: -16.6763877869
theta: 1.47727072239
speed: 9.60059928894
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state 35374
y: -18.1057300568
theta: 1.54203295708
speed: 10.5306024551
id: 0
t: 28

222 self.state_dicts[msg.id][msg.t] is (3.036672353744507, -18.105730056762695, 1.5420329570770264, 10.53060245513916)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: -3.71675395966
y: 17.7190876007
theta: 4.74657964706
speed: 13.8097352982
id: 1
t: 28
xxx after update is x: -3.10919117928
y: 17.1265888214
theta: 4.86931848526
speed: 13.8506364822
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: -3.10919117928
y: 17.1265888214
theta: 4.86931848526
speed: 13.8506364822
id: 1
t: 29
xxx after update is x: -2.80096125603
y: 16.7070541382
theta: 4.83513069153
speed: 14.0017108917
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: -2.80096125603
y: 16.7070541382
theta: 4.83513069153
speed: 14.0017108917
id: 1
t: 30
xxx after update is x: -2.9182639122
y: 15.7163772583
theta: 4.9017906189
speed: 13.9582901001
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.42180734901881956, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.27589941025
y: -18.2517967224
theta: 1.60064351559
speed: 10.5092172623
id: 0
t: 29

sim.py in the sim.py statecallback function, msg is

x: 3.49908328056
y: -17.3663787842
theta: 1.52859401703
speed: 9.80525970459
id: 0
t: 30

sim.py in the sim.py statecallback function, msg is

x: 3.22846126556
y: -17.4798660278
theta: 1.60807740688
speed: 10.0860548019
id: 0
t: 31

222 self.state_dicts[msg.id][msg.t] is (3.228461265563965, -17.47986602783203, 1.6080774068832397, 10.086054801940918)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -2.9182639122
y: 15.7163772583
theta: 4.9017906189
speed: 13.9582901001
id: 1
t: 31
xxx after update is x: -3.15828084946
y: 15.3400373459
theta: 4.90437316895
speed: 13.9958305359
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: -3.15828084946
y: 15.3400373459
theta: 4.90437316895
speed: 13.9958305359
id: 1
t: 32
xxx after update is x: -3.19561314583
y: 14.0601577759
theta: 4.66923189163
speed: 13.7560386658
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.19561314583
y: 14.0601577759
theta: 4.66923189163
speed: 13.7560386658
id: 1
t: 33
current clock is 1.46666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave thefrom ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaazzzzz
risk is [0.32846071446150643, 0.017035971724020174]
sim.py in the sim.py statecallback function, msg is

x: -2.9182639122
y: 15.7163772583
theta: 4.9017906189
speed: 13.9582901001
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -3.15828084946
y: 15.3400373459
theta: 4.90437316895
speed: 13.9958305359
id: 1
t: 32

sim.py in the sim.py statecallback function, msg is

x: -3.19561314583
y: 14.0601577759
theta: 4.66923189163
speed: 13.7560386658
id: 1
t: 33

222 self.state_dicts[msg.id][msg.t] is (-3.195613145828247, 14.060157775878906, 4.66923189163208, 13.756038665771484)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: 3.68404746056
y: -16.6763877869
theta: 1.47727072239
speed: 9.60059928894
id: 0
t: 33
xxx after update is x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.4666666666666666, True, ['1']]
1.46666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.51111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.46666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
current clock is 1.51111111111
self.communication_details == 0
sending GET,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID':  update function xxx before update is x: -3.19561314583
y: 14.0601577759
theta: 4.66923189163
speed: 13.7560386658
id: 1
t: 33
xxx after update is x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:34
aaaaaa
aaaaaabbbbb
risk is [0.4598762572935825, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.99360442162
y: -16.9115428925
theta: 1.61911094189
speed: 9.59600162506
id: 0
t: 32

sim.py in the sim.py statecallback function, msg is

x: 3.68404746056
y: -16.6763877869
theta: 1.47727072239
speed: 9.60059928894
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34

222 self.state_dicts[msg.id][msg.t] is (3.7617180347442627, -16.1423282623291, 1.5177901983261108, 9.04741382598877)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.51111111111', 'IntendedCourse': 'left', 'Position': ['3.7617180347442627', ' -16.1423282623291', ' 1.5177901983261108'], 'TagID': '0', 'Type': 'GET', 'Velocity': '9'}
car 1 received GET,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0671604938271
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.37088740872
sender last entering time is:  1.42320698174
sender last leaving time is:  3.49504982658
my entering time is:  0.541026886175
my leaving time is:  2.09489327852
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
current clock is 1.51111111111
self.communication_details == 0
sending DENY,1,1.51111111111,(-3.195613145828247, 14.060157775878906, 4.66923189163208),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
current clock is 1.51111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '9', 'Sender': '0', 'TagID': '1', 'Time': '1.5111111111'1', 'Time': '1.51111111111', 'Position': ['(-3.195613145828247', ' 14.060157775878906', ' 4.66923189163208)'], 'Type': 'DENY'}
car 0 received DENY,1,1.51111111111,(-3.195613145828247, 14.060157775878906, 4.66923189163208),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.4666666666666666, True, ['1']]
1.46666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.4666666666666666, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
current clock is 1.51111111111
self.communication_details == 0
sending RELEASE,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: 3.76171803474
y: -16.1423282623
theta: 1.51779019833
speed: 9.04741382599
id: 0
t: 34
xxx after update is x: 3.13817191124
y: -15.3611392975
theta: 1.46641230583
speed: 8.5430803299
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: 3.13817191124
y: -15.3611392975
theta: 1.46641230583
speed: 8.5430803299
id: 0
t: 35
xxx after update is x: 3.51932930946
y: -14.864938736
theta: 1.64078938961
speed: 8.78807640076
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.41796148994213245, 0.04236650315314157]
sim.py in the sim.py statecallback function, msg is

x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -3.24997210503
y: 13.577287674
theta: 4.91583204269
speed: 13.8133029938
id: 1
t: 35

sim.py in the sim.py statecallback function, msg is

x: -2.72524571419
y: 12.961066246
theta: 4.74660539627
speed: 13.930932045
id: 1
t: 36

222 self.state_dicts[msg.id][msg.t] is (-2.725245714187622, 12.961066246032715, 4.746605396270752, 13.93093204498291)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 3.51932930946
y: -14.864938736
theta: 1.64078938961
speed: 8.78807640076
id: 0
t: 36
xxx after update is x: 3.56766009331
y: -14.310874939
theta: 1.55378460884
speed: 8.52858448029
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 se1', 'Position': ['(3.7617180347442627', ' -16.1423282623291', ' 1.5177901983261108)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.51111111111,(3.7617180347442627, -16.1423282623291, 1.5177901983261108),9,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -3.15356898308
y: 14.0320949554
theta: 4.75065994263
speed: 13.8431921005
id: 1
t: 34
xxx after update is x: -3.24997210503
y: 13.577287674
theta: 4.91583204269
speed: 13.8133029938
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: -3.24997210503
y: 13.577287674
theta: 4.91583204269
speed: 13.8133029938
id: 1
t: 35
xxx after update is x: -2.72524571419
y: 12.961066246
theta: 4.74660539627
speed: 13.930932045
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2684997774350702, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.13817191124
y: -15.3611392975
theta: 1.46641230583
speed: 8.5430803299
id: 0
t: 35

sim.py in the sim.py statecallback function, msg is

x: 3.51932930946
y: -14.864938736
theta: 1.64078938961
speed: 8.78807640076
id: 0
t: 36

222 self.state_dicts[msg.id][msg.t] is (3.519329309463501, -14.864938735961914, 1.6407893896102905, 8.788076400756836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -2.72524571419
y: 12.961066246
theta: 4.74660539627
speed: 13.930932045
id: 1
t: 36
xxx after update is x: -3.36569833755
y: 12.0301837921
theta: 4.88101243973
speed: 13.9768304825
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: -3.36569833755
y: 12.0301837921
theta: 4.88101243973
speed: 13.9768304825
id: 1
t: 37
xxx after update is x: -3.0849044323
y: 11.5366926193
theta: 4.639108181
speed: 13.7859182358
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.36832297449748636, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.56766009331
y: -14.310874939
theta: 1.55378460884
speed: 8.52858448029
id: 0
t: 37

sim.py in the sim.py statecallback function, msg is

x: 3.52089548111
y: -14.687505722
theta: 1.62053787708
speed: 8.41467761993
id: 0
t: 38

222 self.state_dicts[msg.id][msg.t] is (3.520895481109619, -14.687505722045898, 1.6205378770828247, 8.414677619934082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -3.0849044323
y: 11.5366926193
theta: 4.639108181
speed: 13.7859182358
id: 1
t: 38
xxx after update is x: -3.10506010056
y: 11.2524118423
theta: 4.72495174408
speed: 13.88742733
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
xxx before updatlf.man_init:
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: 3.56766009331
y: -14.310874939
theta: 1.55378460884
speed: 8.52858448029
id: 0
t: 37
xxx after update is x: 3.52089548111
y: -14.687505722
theta: 1.62053787708
speed: 8.41467761993
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 3.52089548111
y: -14.687505722
theta: 1.62053787708
speed: 8.41467761993
id: 0
t: 38
xxx after update is x: 3.31293654442
y: -13.4726018906
theta: 1.48572707176
speed: 7.55403804779
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.49733872371852045, 0.04334566003826969]
sim.py in the sim.py statecallback function, msg is

x: -3.36569833755
y: 12.0301837921
theta: 4.88101243973
speed: 13.9768304825
id: 1
t: 37

sim.py in the sim.py statecallback function, msg is

x: -3.0849044323
y: 11.5366926193
theta: 4.639108181
speed: 13.7859182358
id: 1
t: 38

sim.py in the sim.py statecallback function, msg is

x: -3.10506010056
y: 11.2524118423
theta: 4.72495174408
speed: 13.88742733
id: 1
t: 39

222 self.state_dicts[msg.id][msg.t] is (-3.10506010055542, 11.252411842346191, 4.72495174407959, 13.88742733001709)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: 3.31293654442
y: -13.4726018906
theta: 1.48572707176
speed: 7.55403804779
id: 0
t: 39
xxx after update is x: 3.70886683464
y: -13.7842636108
theta: 1.54568076134
speed: 7.65363740921
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.70886683464
y: -13.7842636108
theta: 1.54568076134
speed: 7.65363740921
id: 0
t: 40
current clock is 1.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 3.70886683464
y: -13.7842636108
theta: 1.54568076134
speed: 7.65363740921
id: 0
t: 40
xxx after update is x: 3.11817097664
y: -13.6879167557
theta: 1.66667211056
speed: 7.86170053482
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: 3.11817097664
y: -13.6879167557
theta: 1.66667211056
speed: 7.86170053482
id: 0
t: 41
xxx after update is x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
current clock is 1.86666666667
maneuver_ne is x: -3.10506010056
y: 11.2524118423
theta: 4.72495174408
speed: 13.88742733
id: 1
t: 39
xxx after update is x: -3.65311551094
y: 10.3244695663
theta: 4.7617726326
speed: 13.7766141891
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.65311551094
y: 10.3244695663
theta: 4.7617726326
speed: 13.7766141891
id: 1
t: 40
current clock is 1.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.65311551094
y: 10.3244695663
theta: 4.7617726326
speed: 13.7766141891
id: 1
t: 40
xxx after update is x: -2.86091399193
y: 8.78767681122
theta: 4.79949522018
speed: 14.1446409225
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:41
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.86091399193
y: 8.78767681122
theta: 4.79949522018
speed: 14.1446409225
id: 1
t: 41
xxx after update is x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:42
aaaaaa
aaaaaabbbbb
risk is [0.33099194292521833, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.31293654442
y: -13.4726018906
theta: 1.48572707176
speed: 7.55403804779
id: 0
t: 39

sim.py in the sim.py statecallback function, msg is

x: 3.70886683464
y: -13.7842636108
theta: 1.54568076134
speed: 7.65363740921
id: 0
t: 40

sim.py in the sim.py statecallback function, msg is

x: 3.11817097664
y: -13.6879167557
theta: 1.66667211056
speed: 7.86170053482
id: 0
t: 41

sim.py in the sim.py statecallback function, msg is

x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42

222 self.state_dicts[msg.id][msg.t] is (3.0435712337493896, -12.91460132598877, 1.5890666246414185, 7.6847825050354)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.86666666667', 'IntendedCourse': 'left', 'Position': ['3.0435712337493896', ' -12.91460132598877', ' 1.5890666246414185'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0829629629631
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.999086900502
sender last entering time is:  1.2729081759
sendegotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.8666666666666667, True, ['1']]
1.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.86666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.86666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
current clock is 1.86666666667
self.communication_details == 0
sending GET,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '1.86666666667', 'Position': ['(-3.6531155109405518', ' 10.324469566345215', ' 4.761772632598877)'], 'Type': 'DENY'}
car 0 received DENY,1,1.86666666667,(-3.6531155109405518, 10.324469566345215, 4.761772632598877),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.8666666666666667, True, ['1']]
1.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.8666666666666667, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
current clock is 1.86666666667
self.communication_details == 0
sending RELEASE,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in ter last leaving time is:  3.33556097716
my entering time is:  0.196252161097
my leaving time is:  1.38954135923
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
current clock is 1.86666666667
self.communication_details == 0
sending DENY,1,1.86666666667,(-3.6531155109405518, 10.324469566345215, 4.761772632598877),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
current clock is 1.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '7', 'Sender': '0', 'TagID': '1', 'Time': '1.86666666667', 'Position': ['(3.0435712337493896', ' -12.91460132598877', ' 1.5890666246414185)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.86666666667,(3.0435712337493896, -12.91460132598877, 1.5890666246414185),7,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42
xxx after update is x: -3.52956223488
y: 8.61729812622
theta: 4.77720785141
speed: 14.0294513702
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: -3.52956223488
y: 8.61729812622
theta: 4.77720785141
speed: 14.0294513702
id: 1
t: 43
xxx after update is x: -2.74124765396
y: 7.21300268173
theta: 4.78925275803
speed: 14.1024074554
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3801349939397053, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.09183597565
y: -12.3064565659
theta: 1.51155018806
speed: 7.26641845703
id: 0
t: 43

sim.py in the sim.py statecallback function, msg is

x: 3.23808336258
y: -12.2673997879
theta: 1.57248568535
speed: 6.9667057991
id: 0
t: 44

222 self.state_dicts[msg.id][msg.t] is (3.2380833625793457, -12.267399787902832, 1.5724856853485107, 6.966705799102783)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -2.74124765396
y: 7.21300268173
theta: 4.78925275803
speed: 14.1024074554
id: 1
t: 44
xxx after update is x: -2.99790215492
y: 7.45046758652
theta: 4.70043802261
speed: 14.0623044968
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
xxx before update is xhe sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 3.04357123375
y: -12.914601326
theta: 1.58906662464
speed: 7.68478250504
id: 0
t: 42
xxx after update is x: 3.09183597565
y: -12.3064565659
theta: 1.51155018806
speed: 7.26641845703
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.29790309708052587, 0.028477144967774433]
sim.py in the sim.py statecallback function, msg is

x: -3.65311551094
y: 10.3244695663
theta: 4.7617726326
speed: 13.7766141891
id: 1
t: 40

sim.py in the sim.py statecallback function, msg is

x: -2.86091399193
y: 8.78767681122
theta: 4.79949522018
speed: 14.1446409225
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -3.4136288166
y: 9.02407836914
theta: 4.74938106537
speed: 13.7617053986
id: 1
t: 42

sim.py in the sim.py statecallback function, msg is

x: -3.52956223488
y: 8.61729812622
theta: 4.77720785141
speed: 14.0294513702
id: 1
t: 43

222 self.state_dicts[msg.id][msg.t] is (-3.52956223487854, 8.617298126220703, 4.777207851409912, 14.029451370239258)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 3.09183597565
y: -12.3064565659
theta: 1.51155018806
speed: 7.26641845703
id: 0
t: 43
xxx after update is x: 3.23808336258
y: -12.2673997879
theta: 1.57248568535
speed: 6.9667057991
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 3.23808336258
y: -12.2673997879
theta: 1.57248568535
speed: 6.9667057991
id: 0
t: 44
xxx after update is x: 3.18889212608
y: -12.1518783569
theta: 1.69083750248
speed: 7.00673484802
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: 3.18889212608
y: -12.1518783569
theta: 1.69083750248
speed: 7.00673484802
id: 0
t: 45
xxx after update is x: 3.53141403198
y: -11.4474573135
theta: 1.63410818577
speed: 6.50682783127
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.31676944950085234, 0.010564993137043888]
sim.py in the sim.py statecallback function, msg is

x: -2.74124765396
y: 7.21300268173
theta: 4.78925275803
speed: 14.1024074554
id: 1
t: 44

sim.py in the sim.py statecallback function, msg is

x: -2.99790215492
y: 7.45046758652
theta: 4.70043802261
speed: 14.0623044968
id: 1
t: 45

sim.py in the sim.py statecallback function, msg is

x: -3.72688674927
y: 6.54707479477
theta: 4.79800224304
speed: 13.6594848633
id: 1
t: 46

222 self.state_dicts[msg.id][msg.t] is (-3.726886749267578, 6.547074794769287, 4.798002243041992, 13.65948486328125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: 3.53141403198
y: -11.4474573135
theta: 1.63410818577
speed: 6.50682783127
id: 0
t: 46
xxx after update is x: 3.4831674099
y: -11.6588764191
theta: 1.56505978107
speed: 6.49690580368
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.4831674099
y: -11.658876: -2.99790215492
y: 7.45046758652
theta: 4.70043802261
speed: 14.0623044968
id: 1
t: 45
xxx after update is x: -3.72688674927
y: 6.54707479477
theta: 4.79800224304
speed: 13.6594848633
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: -3.72688674927
y: 6.54707479477
theta: 4.79800224304
speed: 13.6594848633
id: 1
t: 46
xxx after update is x: -3.46830272675
y: 5.77063322067
theta: 4.6231212616
speed: 13.6649856567
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: -3.46830272675
y: 5.77063322067
theta: 4.6231212616
speed: 13.6649856567
id: 1
t: 47
xxx after update is x: -2.67984724045
y: 5.30400800705
theta: 4.73124313354
speed: 13.9146003723
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4536913628275786, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.18889212608
y: -12.1518783569
theta: 1.69083750248
speed: 7.00673484802
id: 0
t: 45

sim.py in the sim.py statecallback function, msg is

x: 3.53141403198
y: -11.4474573135
theta: 1.63410818577
speed: 6.50682783127
id: 0
t: 46

sim.py in the sim.py statecallback function, msg is

x: 3.4831674099
y: -11.6588764191
theta: 1.56505978107
speed: 6.49690580368
id: 0
t: 47

sim.py in the sim.py statecallback function, msg is

x: 3.58590316772
y: -11.2178859711
theta: 1.50116860867
speed: 6.19905090332
id: 0
t: 48

222 self.state_dicts[msg.id][msg.t] is (3.5859031677246094, -11.217885971069336, 1.5011686086654663, 6.1990509033203125)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.67984724045
y: 5.30400800705
theta: 4.73124313354
speed: 13.9146003723
id: 1
t: 48
current clock is 2.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: -2.67984724045
y: 5.30400800705
theta: 4.73124313354
speed: 13.9146003723
id: 1
t: 48
xxx after update is x: -3.07494473457
y: 4.94221878052
theta: 4.63925075531
speed: 13.891866684
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: -3.07494473457
y: 4.94221878052
theta: 4.63925075531
speed: 13.891866684
id: 1
t: 49
xxx after update is x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
ma4191
theta: 1.56505978107
speed: 6.49690580368
id: 0
t: 47
xxx after update is x: 3.58590316772
y: -11.2178859711
theta: 1.50116860867
speed: 6.19905090332
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:48
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.58590316772
y: -11.2178859711
theta: 1.50116860867
speed: 6.19905090332
id: 0
t: 48
current clock is 2.13333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:49
xxx before update is x: 3.58590316772
y: -11.2178859711
theta: 1.50116860867
speed: 6.19905090332
id: 0
t: 48
xxx after update is x: 3.50363612175
y: -10.7800302505
theta: 1.50144815445
speed: 5.84451580048
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50363612175
y: -10.7800302505
theta: 1.50144815445
speed: 5.84451580048
id: 0
t: 49
current clock is 2.17777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.1777777777777776, True, ['1']]
2.17777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.17777777778
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.17777777778
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50363612175
y: -10.7800302505
theta: 1.50144815445
speed: 5.84451580048
id: 0
t: 49
current clock is 2.17777777778
self.communication_details == 0
sending GET,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: 3.50363612175
y: -10.7800302505
theta: 1.50144815445
speed: 5.84451580048
id: 0
t: 49
xxx after update is x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.22222222222', 'Position': ['(-2.679847240447998', ' 5.3040080070495605', ' 4.731243133544922)'], 'Type': 'DENY'}
car 0 received DENY,1,2.22222222222,(-2.679847240447998, 5.3040080070495605, 4.731243133544922),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.1777777777777776, True, ['1']]
2.17777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.1777777777777776, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
maneuver_negotiatir.py message_processing,!!dwdd change status to TRYGET
RELEASE,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50
current clock is 2.22222222222
self.communication_details == 0
sending RELEASE,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50
xxx after update is x: 2.82136559486
y: -10.6926689148
theta: 1.58607661724
speed: 5.25269079208
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.49319260288439204, 0.019817659122064298]
sim.py in the sim.py statecallback function, msg is

x: -3.46830272675
y: 5.77063322067
theta: 4.6231212616
speed: 13.6649856567
id: 1
t: 47

sim.py in the sim.py statecallback function, msg is

x: -2.67984724045
y: 5.30400800705
theta: 4.73124313354
speed: 13.9146003723
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.07494473457
y: 4.94221878052
theta: 4.63925075531
speed: 13.891866684
id: 1
t: 49

sim.py in the sim.py statecallback function, msg is

x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50

sim.py in the sim.py statecallback function, msg is

x: -3.01052618027
y: 3.34252285957
theta: 4.61521053314
speed: 13.415063858
id: 1
t: 51

222 self.state_dicts[msg.id][msg.t] is (-3.010526180267334, 3.3425228595733643, 4.61521053314209, 13.415063858032227)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: 2.82136559486
y: -10.6926689148
theta: 1.58607661724
speed: 5.25269079208
id: 0
t: 51
xxneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.17777777778', 'IntendedCourse': 'left', 'Position': ['3.503636121749878', ' -10.780030250549316', ' 1.501448154449463'], 'TagID': '0', 'Type': 'GET', 'Velocity': '5'}
car 1 received GET,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0967901234569
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.691825198185
sender last entering time is:  1.1571465758
sender last leaving time is:  3.41317533171
my entering time is:  0.0967901234569
my leaving time is:  0.959543280331
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
current clock is 2.22222222222
self.communication_details == 0
sending DENY,1,2.22222222222,(-2.679847240447998, 5.3040080070495605, 4.731243133544922),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
current clock is 2.22222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '5', 'Sender': '0', 'TagID': '1', 'Time': '2.17777777778', 'Position': ['(3.503636121749878', ' -10.780030250549316', ' 1.501448154449463)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.17777777778,(3.503636121749878, -10.780030250549316, 1.501448154449463),5,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: -3.59885382652
y: 4.43330001831
theta: 4.82260656357
speed: 13.9652671814
id: 1
t: 50
xxx after update is x: -3.01052618027
y: 3.34252285957
theta: 4.61521053314
speed: 13.415063858
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.31480825010994573, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.50363612175
y: -10.7800302505
theta: 1.50144815445
speed: 5.84451580048
id: 0
t: 49

sim.py in the sim.py statecallback function, msg is

x: 3.38238668442
y: -10.4295969009
theta: 1.55865287781
speed: 5.64981985092
id: 0
t: 50

sim.py in the sim.py statecallback function, msg is

x: 2.82136559486
y: -10.6926689148
theta: 1.58607661724
speed: 5.25269079208
id: 0
t: 51

222 self.state_dicts[msg.id][msg.t] is (2.8213655948638916, -10.692668914794922, 1.5860766172409058, 5.25269079208374)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: -3.01052618027
y: 3.34252285957
theta: 4.61521053314
speed: 13.415063858
id: 1
t: 51
xxx after update is x: -3.21092820168
y: 2.64334845543
theta: 4.78229999542
speed: 14.2820224762
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: -3.21092820168
y: 2.64334845543
theta: 4.78229999542
speed: 14.2820224762
id: 1
t: 52
xxx after update is x: -3.64842700958
y: 2.50305533409
theta: 4.8304977417
speed: 14.1186704636
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: -3.64842700958
y: 2.50305533409
theta: 4.8304977417
speed: 14.1186704636
id: 1
t: 53
xxx after update is x: -3.28184843063
y: 1.26434242725
theta: 4.71955728531
speed: 13.8120069504
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: -3.28184843063
y: 1.26434242725
theta: 4.71955728531
speed: 13.8120069504
id: 1
t: 54
xxx after update is x: -3.49421668053
y: 1.22940003872
theta: 4.73628330231
speed: 13.9247322083
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: -3.49421668053
y: 1.22940003872
theta: 4.73628330231
speed: 13.9247322083
id: 1
t: 55
xxx after update is x: -3.18828129768
y: 0.112124375999
theta: 4.74159193039
speed: 13.8370065689
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4228233144949377, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.36736893654
y: -10.9860897064
theta: 1.61622393131
speed: 5.0820441246
id: 0
t: 52

sim.py in the sim.py statecallback function, msg is

x: 3.17382502556
y: -9.76690292358
theta: 1.56241297722
speed: 4.60395908356
id: 0
t: 53

sim.py in the sim.py statecallback function, msg is

x: 3.22082233429
y: -9.48400783539
theta: 1.50826609135
speed: 4.13258600235
id: 0
t: 54

sim.py in the sim.py statecallback function, msg is

x: 2.6965444088
y: -9.24851131439
theta: 1.57476949692
speed: 4.50069665909
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.2482945919
y: -9.69544029236
theta: 1.40414071083
speed: 4.47129106522
id: 0
t: 56

222 self.state_dicts[msg.id][msg.t] is (3.2482945919036865, -9.695440292358398, 1.4041407108306885, 4.4712910652160645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.18828129768
y: 0.112124375999
theta: 4.74159193039
speed: 13.8370065689
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: -3.18828129768
y: 0.112124375999
theta: 4.74159193039
speed: 13.8370065689
id: 1
t: 56
xxx aftex after update is x: 3.36736893654
y: -10.9860897064
theta: 1.61622393131
speed: 5.0820441246
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: 3.36736893654
y: -10.9860897064
theta: 1.61622393131
speed: 5.0820441246
id: 0
t: 52
xxx after update is x: 3.17382502556
y: -9.76690292358
theta: 1.56241297722
speed: 4.60395908356
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: 3.17382502556
y: -9.76690292358
theta: 1.56241297722
speed: 4.60395908356
id: 0
t: 53
xxx after update is x: 3.22082233429
y: -9.48400783539
theta: 1.50826609135
speed: 4.13258600235
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: 3.22082233429
y: -9.48400783539
theta: 1.50826609135
speed: 4.13258600235
id: 0
t: 54
xxx after update is x: 2.6965444088
y: -9.24851131439
theta: 1.57476949692
speed: 4.50069665909
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: 2.6965444088
y: -9.24851131439
theta: 1.57476949692
speed: 4.50069665909
id: 0
t: 55
xxx after update is x: 3.2482945919
y: -9.69544029236
theta: 1.40414071083
speed: 4.47129106522
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.2482945919
y: -9.69544029236
theta: 1.40414071083
speed: 4.47129106522
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57
xxx before update is x: 3.2482945919
y: -9.69544029236
theta: 1.40414071083
speed: 4.47129106522
id: 0
t: 56
xxx after update is x: 3.42244267464
y: -9.25432682037
theta: 1.38674581051
speed: 3.87688684464
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.44635244904509924, 0.04866847353174161]
sim.py in the sim.py statecallback function, msg is

x: -3.21092820168
y: 2.64334845543
theta: 4.78229999542
speed: 14.2820224762
id: 1
t: 52

sim.py in the sim.py statecallback function, msg is

x: -3.64842700958
y: 2.50305533409
theta: 4.8304977417
speed: 14.1186704636
id: 1
t: 53

sim.py in the sim.py statecallback function, msg is

x: -3.28184843063
y: 1.26434242725
theta: 4.71955728531
speed: 13.8120069504
id: 1
t: 54

sim.py in the sim.py statecallback function, msg is

x: -3.49421668053
y: 1.22940003872
theta: 4.73628330231
speed: 13.9247322083
id: 1
t: 55

sim.py in the sim.py statecallback function, msg is

x: -3.18828129768
y: 0.112124375999
theta: 4.74159193039
speed: 13.8370065689
id: 1
t: 56

sim.py in the sim.py statecallback function, msg is

x: -3.33959031105
y: -0.317106485367
theta: 4.59595489502
speed: 13.8286590576
id: 1
t: 57

222 self.state_dicts[msg.id][msg.t] is (-3.339590311050415, -0.3171064853668213, 4.595954895019531, 13.828659057617188)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:58
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.42244267464
y: -9.25432682037
theta: 1.38674581051
speed: 3.87688684464
id: 0
t: 57
current clock is 2.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.533333333333333, True, ['1']]
2.53333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.53333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.53333333333
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.53333333333,(3.422442674636841, -9.254326820373535, 1.386745810508728),3,1,1.15555555556,0,left
maneuver_negotiatir.py in the lat function
1
maneuver_negotiatir.py the R response set is not empty, so return 0, why 0, is that car 0
!!!!change state to get
GET,0,2.53333333333,(3.422442674636841, -9.254326820373535, 1.386745810508728),3,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.42244267464
y: -9.25432682037
theta: 1.38674581051
speed: 3.87688684464
id: 0
t: 57
current clock is 2.53333333333
self.communication_details == 0
sending GET,0,2.53333333333,(3.422442674636841, -9.254326820373535, 1.386745810508728),3,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
xxx before update is x: 3.42244267464
y: -9.25432682037
theta: 1.38674581051
speed: 3.87688684464
id: 0
t: 57
xxx after update is x: 3.39347195625
y: -9.02454280853
theta: 1.68448925018
speed: 3.73301172256
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.39347195625
y: -9.02454280853
theta: 1.68448925018
speed: 3.73301172256
id: 0
t: 58
current clock is 2.57777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.39347195625
y: -9.02454280853
theta: 1.68448925018
speed: 3.73301172256
id: 0
t: 58
current clock is 2.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '13', 'Sender': '1', 'TagID': '1', 'Time': '2.57777777778', 'Position': ['(-3.188281297683716', ' 0.11212437599897385', ' 4.741591930389404)'], 'Type': 'GRANT'}
car 0 received GRANT,1,2.57777777778,(-3.188281297683716, 0.11212437599897385, 4.741591930389404),13,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.533333333333333, True, ['1']]
2.53333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.533333333333333,r update is x: -3.33959031105
y: -0.317106485367
theta: 4.59595489502
speed: 13.8286590576
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58
xxx before update is x: -3.33959031105
y: -0.317106485367
theta: 4.59595489502
speed: 13.8286590576
id: 1
t: 57
xxx after update is x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58
current clock is 2.57777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58
current clock is 2.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.53333333333', 'IntendedCourse': 'left', 'Position': ['3.422442674636841', ' -9.254326820373535', ' 1.386745810508728'], 'TagID': '0', 'Type': 'GET', 'Velocity': '3'}
car 1 received GET,0,2.53333333333,(3.422442674636841, -9.254326820373535, 1.386745810508728),3,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.112592592592
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.526253145966
sender last entering time is:  1.11259259259
sender last leaving time is:  3.48589084902
my entering time is:  0.112592592592
my leaving time is:  0.571414519663
i have left the intersection:  False
sender enters just im about to leave
time is  -0.0451613736969
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,2.57777777778,(-3.188281297683716, 0.11212437599897385, 4.741591930389404),13,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [7.266666666666667, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58
current clock is 2.57777777778
self.communication_details == 0
sending GRANT,1,2.57777777778,(-3.188281297683716, 0.11212437599897385, 4.741591930389404),13,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58
xxx after update is x: -3.65625357628
y: -1.31284630299
theta: 4.81141662598
speed: 14.1753101349
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: -3.65625357628
y: -1.31284630299
theta: 4.8114166 True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py message_processing,Received a grant or deny and status == get
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
last
stopped retry timer
maneuver_negotiatir.py message_processing, self.last()
!!WW change status to execute
maneuver_negotiatir.py in the domaneuver function - start
added car with id 0 to grantlist. current grantlist:  {0: [7.266666666666667, 'left']}
Doing maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: 3.39347195625
y: -9.02454280853
theta: 1.68448925018
speed: 3.73301172256
id: 0
t: 58
xxx after update is x: 3.1476817131
y: -8.99736499786
theta: 1.49237310886
speed: 3.45861959457
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: 3.1476817131
y: -8.99736499786
theta: 1.49237310886
speed: 3.45861959457
id: 0
t: 59
xxx after update is x: 3.27269744873
y: -8.99618816376
theta: 1.45611584187
speed: 3.84615087509
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.828746911520721, 0.9558408594583143]
sim.py in the sim.py statecallback function, msg is

x: -2.82000160217
y: -1.12747323513
theta: 4.71031141281
speed: 14.265745163
id: 1
t: 58

sim.py in the sim.py statecallback function, msg is

x: -3.65625357628
y: -1.31284630299
theta: 4.81141662598
speed: 14.1753101349
id: 1
t: 59

sim.py in the sim.py statecallback function, msg is

x: -3.58154177666
y: -2.35400295258
theta: 4.83636283875
speed: 13.968252182
id: 1
t: 60

222 self.state_dicts[msg.id][msg.t] is (-3.5815417766571045, -2.3540029525756836, 4.836362838745117, 13.968252182006836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: 3.27269744873
y: -8.99618816376
theta: 1.45611584187
speed: 3.84615087509
id: 0
t: 60
xxx after update is x: 3.04527163506
y: -8.31122779846
theta: 1.72004890442
speed: 3.72913503647
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: 3.04527163506
y: -8.31122779846
theta: 1.72004890442
speed: 3.72913503647
id: 0
t: 61
xxx after update is x: 2.75929164886
y: -7.76683998108
theta: 1.59436297417
speed: 4.26746797562
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: 2.75929164886
y: -7.76683998108
theta: 1.59436297417
speed: 4.26746797562
id: 0
t: 62
xxx after update is x: 3.7568192482
y: -7.66144514084
theta: 1.56520605087
speed: 4.66205263138
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.7568192482
y: -7.66144514084
theta: 1.56520605087
speed: 4.66205263138
id: 0
t: 63
current clock is 2.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get th2598
speed: 14.1753101349
id: 1
t: 59
xxx after update is x: -3.58154177666
y: -2.35400295258
theta: 4.83636283875
speed: 13.968252182
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32163233580721085, 0.9992732069280175]
sim.py in the sim.py statecallback function, msg is

x: 3.42244267464
y: -9.25432682037
theta: 1.38674581051
speed: 3.87688684464
id: 0
t: 57

sim.py in the sim.py statecallback function, msg is

x: 3.39347195625
y: -9.02454280853
theta: 1.68448925018
speed: 3.73301172256
id: 0
t: 58

sim.py in the sim.py statecallback function, msg is

x: 3.1476817131
y: -8.99736499786
theta: 1.49237310886
speed: 3.45861959457
id: 0
t: 59

sim.py in the sim.py statecallback function, msg is

x: 3.27269744873
y: -8.99618816376
theta: 1.45611584187
speed: 3.84615087509
id: 0
t: 60

222 self.state_dicts[msg.id][msg.t] is (3.2726974487304688, -8.996188163757324, 1.4561158418655396, 3.8461508750915527)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: -3.58154177666
y: -2.35400295258
theta: 4.83636283875
speed: 13.968252182
id: 1
t: 60
xxx after update is x: -2.93216395378
y: -3.7105178833
theta: 4.64896297455
speed: 13.881644249
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.93216395378
y: -3.7105178833
theta: 4.64896297455
speed: 13.881644249
id: 1
t: 61
xxx after update is x: -2.91088199615
y: -3.84743380547
theta: 4.69346904755
speed: 13.7081069946
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: -2.91088199615
y: -3.84743380547
theta: 4.69346904755
speed: 13.7081069946
id: 1
t: 62
xxx after update is x: -3.05550503731
y: -4.13021612167
theta: 4.74391174316
speed: 13.907245636
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: -3.05550503731
y: -4.13021612167
theta: 4.74391174316
speed: 13.907245636
id: 1
t: 63
xxx after update is x: -3.53903698921
y: -5.08595991135
theta: 4.54821634293
speed: 13.8511228561
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9069041319139041, 0.9984669666175051]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.04527163506
y: -8.31122779846
theta: 1.72004890442
speed: 3.72913503647
id: 0
t: 61

sim.py in the sim.py statecallback function, msg is

x: 2.75929164886
y: -7.76683998108
theta: 1.59436297417
speed: 4.26746797562
id: 0
t: 62

sim.py in the sim.py statecallback function, msg is

x: 3.7568192482
y: -7.66144514084
theta: 1.56520605087
speed: 4.66205263138
id: 0
t: 63

sim.py in the sim.py statecallback function, msg is

x: 3.98885369301
y: -7.74613142014
theta: 1.68126046658
speed: 4.50504302979
id: 0
t: 64

222 self.state_dicts[msg.id][msg.t] is (3.988853693008423, -7.746131420135498, 1.6812604665756226, 4.505043029785156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.53903698921
y: -5.08595991135e velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: 3.7568192482
y: -7.66144514084
theta: 1.56520605087
speed: 4.66205263138
id: 0
t: 63
xxx after update is x: 3.98885369301
y: -7.74613142014
theta: 1.68126046658
speed: 4.50504302979
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: 3.98885369301
y: -7.74613142014
theta: 1.68126046658
speed: 4.50504302979
id: 0
t: 64
xxx after update is x: 3.04515838623
y: -7.37232160568
theta: 1.40513288975
speed: 5.11799001694
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.686374100522614, 0.9999999999999998]
sim.py in the sim.py statecallback function, msg is

x: -2.93216395378
y: -3.7105178833
theta: 4.64896297455
speed: 13.881644249
id: 1
t: 61

sim.py in the sim.py statecallback function, msg is

x: -2.91088199615
y: -3.84743380547
theta: 4.69346904755
speed: 13.7081069946
id: 1
t: 62

sim.py in the sim.py statecallback function, msg is

x: -3.05550503731
y: -4.13021612167
theta: 4.74391174316
speed: 13.907245636
id: 1
t: 63

sim.py in the sim.py statecallback function, msg is

x: -3.53903698921
y: -5.08595991135
theta: 4.54821634293
speed: 13.8511228561
id: 1
t: 64

sim.py in the sim.py statecallback function, msg is

x: -3.24774742126
y: -5.4368262291
theta: 4.62611341476
speed: 13.5109577179
id: 1
t: 65

222 self.state_dicts[msg.id][msg.t] is (-3.2477474212646484, -5.436826229095459, 4.626113414764404, 13.510957717895508)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: 3.04515838623
y: -7.37232160568
theta: 1.40513288975
speed: 5.11799001694
id: 0
t: 65
xxx after update is x: 3.4513771534
y: -7.64223384857
theta: 1.60920500755
speed: 5.21882772446
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.4513771534
y: -7.64223384857
theta: 1.60920500755
speed: 5.21882772446
id: 0
t: 66
current clock is 2.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
 self.man_init:xxx before update is x: 3.4513771534
y: -7.64223384857
theta: 1.60920500755
speed: 5.21882772446
id: 0
t: 66
xxx after update is x: 2.85738873482
y: -5.37452554703
theta: 1.7958997488
speed: 7.17615795135
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion

xxx before update is x: 2.85738873482
y: -5.37452554703
theta: 1.7958997488
speed: 7.17615795135
id: 0
t: 67
xxx after update is x: 3.22844672203
y: -5.30531835556
theta: 1.67278707027
speed: 7.59596824646
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.p
theta: 4.54821634293
speed: 13.8511228561
id: 1
t: 64
current clock is 2.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: -3.53903698921
y: -5.08595991135
theta: 4.54821634293
speed: 13.8511228561
id: 1
t: 64
xxx after update is x: -3.24774742126
y: -5.4368262291
theta: 4.62611341476
speed: 13.5109577179
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: -3.24774742126
y: -5.4368262291
theta: 4.62611341476
speed: 13.5109577179
id: 1
t: 65
xxx after update is x: -3.54408502579
y: -5.60347795486
theta: 4.64416885376
speed: 13.89939785
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.54408502579
y: -5.60347795486
theta: 4.64416885376
speed: 13.89939785
id: 1
t: 66
current clock is 2.93333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -3.54408502579
y: -5.60347795486
theta: 4.64416885376
speed: 13.89939785
id: 1
t: 66
xxx after update is x: -3.12118935585
y: -11.1396160126
theta: 4.87721061707
speed: 13.8397769928
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.12118935585
y: -11.1396160126
theta: 4.87721061707
speed: 13.8397769928
id: 1
t: 67
xxx after update is x: -3.25062584877
y: -11.3020563126
theta: 4.61597537994
speed: 13.7906665802
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: -3.25062584877
y: -11.3020563126
theta: 4.61597537994
speed: 13.7906665802
id: 1
t: 68
xxx after update is x: -3.09764242172
y: -11.5967693329
theta: 4.62051773071
speed: 13.8113937378
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [5.5004527050585206e-05, 0.49919999999999787]
sim.py in the sim.py statecallback function, msg is

x: 3.04515838623
y: -7.37232160568
theta: 1.40513288975
speed: 5.11799001694
id: 0
t: 65

sim.py in the sim.py statecallback function, msg is

x: 3.4513771534
y: -7.64223384857
theta: 1.60920500755
speed: 5.21882772446
id: 0
t: 66

sim.py in the sim.py statecallback function, msg is

x: 2.85738873482
y: -5.37452554703
theta: 1.7958997488
speed: 7.17615795135
id: 0
t: 67

sim.py in the sim.py statecallback function, msg is

x: 3.22844672203
y: -5.30531835556
theta: 1.67278707027
speed: 7.59596824646
id: 0
t: 68

sim.py in the sim.py statecallback function, msg is

x: 2.72604012489
y: -4.69448375702
theta: 1.70908749104
speed: 7.33197593689
id: 0
t: 69

222 self.state_diy update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: 3.22844672203
y: -5.30531835556
theta: 1.67278707027
speed: 7.59596824646
id: 0
t: 68
xxx after update is x: 2.72604012489
y: -4.69448375702
theta: 1.70908749104
speed: 7.33197593689
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: 2.72604012489
y: -4.69448375702
theta: 1.70908749104
speed: 7.33197593689
id: 0
t: 69
xxx after update is x: 3.20122122765
y: -4.61952877045
theta: 1.79229688644
speed: 7.52951574326
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [3.4147472806134894e-17, 0.9998654917965618]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: 3.20122122765
y: -4.61952877045
theta: 1.79229688644
speed: 7.52951574326
id: 0
t: 70
xxx after update is x: 2.90207982063
y: -4.03781652451
theta: 1.76616668701
speed: 7.32288599014
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.54408502579
y: -5.60347795486
theta: 4.64416885376
speed: 13.89939785
id: 1
t: 66

sim.py in the sim.py statecallback function, msg is

x: -3.12118935585
y: -11.1396160126
theta: 4.87721061707
speed: 13.8397769928
id: 1
t: 67

sim.py in the sim.py statecallback function, msg is

x: -3.25062584877
y: -11.3020563126
theta: 4.61597537994
speed: 13.7906665802
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -3.09764242172
y: -11.5967693329
theta: 4.62051773071
speed: 13.8113937378
id: 1
t: 69

sim.py in the sim.py statecallback function, msg is

x: -3.57862877846
y: -12.2951917648
theta: 4.65453338623
speed: 13.8557329178
id: 1
t: 70

sim.py in the sim.py statecallback function, msg is

x: -3.3169798851
y: -13.1356601715
theta: 4.84298467636
speed: 13.7168741226
id: 1
t: 71

222 self.state_dicts[msg.id][msg.t] is (-3.3169798851013184, -13.135660171508789, 4.842984676361084, 13.716874122619629)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: 2.90207982063
y: -4.03781652451
theta: 1.76616668701
speed: 7.32288599014
id: 0
t: 71
xxx after update is x: 3.26710915565
y: -3.42786693573
theta: 1.76955533028
speed: 8.44300079346
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: 3.26710915565
y: -3.42786693573
theta: 1.76955533028
speed: 8.44300079346
id: 0
t: 72
xxx after update is x: 3.0568151474
y: -3.39388728142
theta: 1.85972309113
speed: 8.28674411774
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: 3.0568151474
y: -3.39388728142
theta: 1.85972309113
speed: 8.28674411774
id: 0
t: 73
xxx after update is x: 2.81204319
y: -3.42967653275
theta: 1.96575093269
speed: 8.68125343323
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [1.407380053480247e-119, 2.940954047002857e-26]
sim.py in the sim.py statecallback cts[msg.id][msg.t] is (2.7260401248931885, -4.694483757019043, 1.7090874910354614, 7.331975936889648)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: -3.09764242172
y: -11.5967693329
theta: 4.62051773071
speed: 13.8113937378
id: 1
t: 69
xxx after update is x: -3.57862877846
y: -12.2951917648
theta: 4.65453338623
speed: 13.8557329178
id: 1
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: -3.57862877846
y: -12.2951917648
theta: 4.65453338623
speed: 13.8557329178
id: 1
t: 70
xxx after update is x: -3.3169798851
y: -13.1356601715
theta: 4.84298467636
speed: 13.7168741226
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: -3.3169798851
y: -13.1356601715
theta: 4.84298467636
speed: 13.7168741226
id: 1
t: 71
xxx after update is x: -3.35899329185
y: -13.6920452118
theta: 4.53410387039
speed: 14.2497091293
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: -3.35899329185
y: -13.6920452118
theta: 4.53410387039
speed: 14.2497091293
id: 1
t: 72
xxx after update is x: -3.3702917099
y: -14.2137680054
theta: 4.80509567261
speed: 13.9158525467
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [1.1120110264398814e-73, 0.4639999999999981]
sim.py in the sim.py statecallback function, msg is

x: 3.20122122765
y: -4.61952877045
theta: 1.79229688644
speed: 7.52951574326
id: 0
t: 70

sim.py in the sim.py statecallback function, msg is

x: 2.90207982063
y: -4.03781652451
theta: 1.76616668701
speed: 7.32288599014
id: 0
t: 71

sim.py in the sim.py statecallback function, msg is

x: 3.26710915565
y: -3.42786693573
theta: 1.76955533028
speed: 8.44300079346
id: 0
t: 72

sim.py in the sim.py statecallback function, msg is

x: 3.0568151474
y: -3.39388728142
theta: 1.85972309113
speed: 8.28674411774
id: 0
t: 73

222 self.state_dicts[msg.id][msg.t] is (3.0568151473999023, -3.3938872814178467, 1.8597230911254883, 8.286744117736816)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:74
xxx before update is x: -3.3702917099
y: -14.2137680054
theta: 4.80509567261
speed: 13.9158525467
id: 1
t: 73
xxx after update is x: -3.58859968185
y: -14.8579921722
theta: 4.7527513504
speed: 13.890666008
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: -3.58859968185
y: -14.8579921722
theta: 4.7527513504
speed: 13.890666008
id: 1
t: 74
xxx after update is x: -3.01768660545
y: -15.8666276932
theta: 4.6372833252
speed: 13.9332380295
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight*****function, msg is

x: -3.35899329185
y: -13.6920452118
theta: 4.53410387039
speed: 14.2497091293
id: 1
t: 72

sim.py in the sim.py statecallback function, msg is

x: -3.3702917099
y: -14.2137680054
theta: 4.80509567261
speed: 13.9158525467
id: 1
t: 73

sim.py in the sim.py statecallback function, msg is

x: -3.58859968185
y: -14.8579921722
theta: 4.7527513504
speed: 13.890666008
id: 1
t: 74

222 self.state_dicts[msg.id][msg.t] is (-3.588599681854248, -14.857992172241211, 4.752751350402832, 13.890666007995605)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: 2.81204319
y: -3.42967653275
theta: 1.96575093269
speed: 8.68125343323
id: 0
t: 74
xxx after update is x: 2.12375688553
y: -2.75774097443
theta: 2.01078367233
speed: 8.36881923676
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: 2.12375688553
y: -2.75774097443
theta: 2.01078367233
speed: 8.36881923676
id: 0
t: 75
xxx after update is x: 2.51838207245
y: -2.73378777504
theta: 2.15108776093
speed: 8.76895904541
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.51838207245
y: -2.73378777504
theta: 2.15108776093
speed: 8.76895904541
id: 0
t: 76
current clock is 3.37777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: 2.51838207245
y: -2.73378777504
theta: 2.15108776093
speed: 8.76895904541
id: 0
t: 76
xxx after update is x: 1.71986413002
y: -2.21618700027
theta: 2.09619855881
speed: 8.91989421844
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 1.0000000000000007]
sim.py in the sim.py statecallback function, msg is

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: 1.71986413002
y: -2.21618700027
theta: 2.09619855881
speed: 8.91989421844
id: 0
t: 77
xxx after update is x: 2.91621899605
y: -1.93987798691
theta: 2.04534029961
speed: 9.48653030396
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
x: -3.01768660545
y: -15.8666276932
theta: 4.6372833252
speed: 13.9332380295
id: 1
t: 75

sim.py in the sim.py statecallback function, msg is

x: -3.30248093605
y: -16.0398445129
theta: 4.48742103577
speed: 13.8207111359
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -3.1353302002
y: -16.9080505371
theta: 4.75619602203
speed: 14.2159433365
id: 1
t: 77

sim.py in the sim.py statecallback function, msg is

x: -3.67389082909
y: -17.3615436554
theta: 4.77323627472
speed: 14.250617981
id: 1
t: 78

222 self.state_dicts[msg.id][msg.t] is (-3.6738908290863037, -17.361543655395508, 4.773236274719238, 14.250617980957031)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin f*****************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
sim.py in the sim.py statecallback function, msg is

x: 2.81204319
y: -3.42967653275
theta: 1.96575093269
speed: 8.68125343323
id: 0
t: 74

sim.py in the sim.py statecallback function, msg is

x: 2.12375688553
y: -2.75774097443
theta: 2.01078367233
speed: 8.36881923676
id: 0
t: 75

222 self.state_dicts[msg.id][msg.t] is (2.1237568855285645, -2.7577409744262695, 2.0107836723327637, 8.368819236755371)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: -3.01768660545
y: -15.8666276932
theta: 4.6372833252
speed: 13.9332380295
id: 1
t: 75
xxx after update is x: -3.30248093605
y: -16.0398445129
theta: 4.48742103577
speed: 13.8207111359
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.30248093605
y: -16.0398445129
theta: 4.48742103577
speed: 13.8207111359
id: 1
t: 76
current clock is 3.37777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: -3.30248093605
y: -16.0398445129
theta: 4.48742103577
speed: 13.8207111359
id: 1
t: 76
xxx after update is x: -3.1353302002
y: -16.9080505371
theta: 4.75619602203
speed: 14.2159433365
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: -3.1353302002
y: -16.9080505371
theta: 4.75619602203
speed: 14.2159433365
id: 1
t: 77
xxx after update is x: -3.67389082909
y: -17.3615436554
theta: 4.77323627472
speed: 14.250617981
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: -3.67389082909
y: -17.3615436554
theta: 4.77323627472
speed: 14.250617981
id: 1
t: 78
xxx after update is x: -3.0827126503
y: -18.1665306091
theta: 4.61691379547
speed: 13.6469297409
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4927999999999979]
sim.py in the sim.py statecallback function, msg is

x: 2.51838207245
y: -2.73378777504
theta: 2.15108776093
speed: 8.76895904541
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 1.71986413002
y: -2.21618700027
theta: 2.09619855881
speed: 8.91989421844
id: 0
t: 77

sim.py in the sim.py statecallback function, msg is

x: 2.91621899605
y: -1.93987798691
theta: 2.04534029961
speed: 9.48653030396
id: 0
t: 78

sim.py in the sim.py statecallback function, msg is

x: 2.18334817886
y: -1.77432334423
theta: 2.10057616234
speed: 9.7122926712
id: 0
t: 79

222 self.state_dicts[msg.id][msg.t] is (2.1833481788635254, -1.7743233442306519, 2.100576162338257, 9.712292671203613)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the uunction, finish the n times spin:79xxx before update is x: 2.91621899605
y: -1.93987798691
theta: 2.04534029961
speed: 9.48653030396
id: 0
t: 78
xxx after update is x: 2.18334817886
y: -1.77432334423
theta: 2.10057616234
speed: 9.7122926712
id: 0
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: 2.18334817886
y: -1.77432334423
theta: 2.10057616234
speed: 9.7122926712
id: 0
t: 79
xxx after update is x: 1.47917854786
y: -0.82442855835
theta: 2.20035290718
speed: 10.0885429382
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.0827126503
y: -18.1665306091
theta: 4.61691379547
speed: 13.6469297409
id: 1
t: 79

sim.py in the sim.py statecallback function, msg is

x: -2.97251033783
y: -19.0617542267
theta: 4.75420713425
speed: 14.0630226135
id: 1
t: 80

222 self.state_dicts[msg.id][msg.t] is (-2.97251033782959, -19.06175422668457, 4.754207134246826, 14.06302261352539)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: 1.47917854786
y: -0.82442855835
theta: 2.20035290718
speed: 10.0885429382
id: 0
t: 80
xxx after update is x: 1.4234688282
y: -1.07696151733
theta: 2.34968566895
speed: 10.0091485977
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: 1.4234688282
y: -1.07696151733
theta: 2.34968566895
speed: 10.0091485977
id: 0
t: 81
xxx after update is x: 1.10879933834
y: -0.224546164274
theta: 2.44087052345
speed: 10.213227272
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.42337393761
y: -19.3847160339
theta: 4.73312950134
speed: 14.0335569382
id: 1
t: 81

sim.py in the sim.py statecallback function, msg is

x: -3.33624124527
y: -19.5505809784
theta: 4.64108705521
speed: 13.7469444275
id: 1
t: 82

222 self.state_dicts[msg.id][msg.t] is (-3.3362412452697754, -19.550580978393555, 4.641087055206299, 13.746944427490234)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 1.10879933834
y: -0.224546164274
theta: 2.44087052345
speed: 10.213227272
id: 0
t: 82
xxx after update is x: 0.748033702374
y: 0.100114531815
theta: 2.28874230385
speed: 10.3173236847
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:83
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 0.748033702374
y: 0.100114531815
theta: 2.28874230385
speed: 10.3173236847
id: 0
t: 83
xxx after update is x: 1.0987739563
y: 0.484379559755
theta: 2.34428620338
speed: 10.7207355499
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: 1.0987739563
y: 0.484379559755pdate function xxx before update is x: -3.0827126503
y: -18.1665306091
theta: 4.61691379547
speed: 13.6469297409
id: 1
t: 79
xxx after update is x: -2.97251033783
y: -19.0617542267
theta: 4.75420713425
speed: 14.0630226135
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:80
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: -2.97251033783
y: -19.0617542267
theta: 4.75420713425
speed: 14.0630226135
id: 1
t: 80
xxx after update is x: -3.42337393761
y: -19.3847160339
theta: 4.73312950134
speed: 14.0335569382
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: -3.42337393761
y: -19.3847160339
theta: 4.73312950134
speed: 14.0335569382
id: 1
t: 81
xxx after update is x: -3.33624124527
y: -19.5505809784
theta: 4.64108705521
speed: 13.7469444275
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5103999999999982]
sim.py in the sim.py statecallback function, msg is

x: 1.47917854786
y: -0.82442855835
theta: 2.20035290718
speed: 10.0885429382
id: 0
t: 80

sim.py in the sim.py statecallback function, msg is

x: 1.4234688282
y: -1.07696151733
theta: 2.34968566895
speed: 10.0091485977
id: 0
t: 81

sim.py in the sim.py statecallback function, msg is

x: 1.10879933834
y: -0.224546164274
theta: 2.44087052345
speed: 10.213227272
id: 0
t: 82

222 self.state_dicts[msg.id][msg.t] is (1.1087993383407593, -0.2245461642742157, 2.440870523452759, 10.213227272033691)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: -3.33624124527
y: -19.5505809784
theta: 4.64108705521
speed: 13.7469444275
id: 1
t: 82
xxx after update is x: -3.78313970566
y: -20.0873851776
theta: 4.67485904694
speed: 13.8017520905
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.78313970566
y: -20.0873851776
theta: 4.67485904694
speed: 13.8017520905
id: 1
t: 83
xxx after update is x: -3.35186815262
y: -21.4805908203
theta: 4.58309221268
speed: 13.604221344
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:84
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: -3.35186815262
y: -21.4805908203
theta: 4.58309221268
speed: 13.604221344
id: 1
t: 84
xxx after update is x: -3.36454033852
y: -21.4921169281
theta: 4.69866943359
speed: 14.0661611557
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36454033852
y: -21.4921169281
theta: 4.69866943359
speed: 14.0661611557
id: 1
t: 85
current clock is 3.77777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the s
theta: 2.34428620338
speed: 10.7207355499
id: 0
t: 84maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 1.0987739563
y: 0.484379559755
theta: 2.34428620338
speed: 10.7207355499
id: 0
t: 84
current clock is 3.73333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration

xxx after update is x: -0.556853652
y: -0.636156916618
theta: 2.5307495594
speed: 10.8758182526
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -0.556853652
y: -0.636156916618
theta: 2.5307495594
speed: 10.8758182526
id: 0
t: 85
xxx after update is x: -0.549112975597
y: 1.24126517773
theta: 2.58223795891
speed: 10.9087839127
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:86
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -0.549112975597
y: 1.24126517773
theta: 2.58223795891
speed: 10.9087839127
id: 0
t: 86
xxx after update is x: -1.06497347355
y: 1.34077906609
theta: 2.51400589943
speed: 10.7777118683
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.78313970566
y: -20.0873851776
theta: 4.67485904694
speed: 13.8017520905
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.35186815262
y: -21.4805908203
theta: 4.58309221268
speed: 13.604221344
id: 1
t: 84

sim.py in the sim.py statecallback function, msg is

x: -3.36454033852
y: -21.4921169281
theta: 4.69866943359
speed: 14.0661611557
id: 1
t: 85

sim.py in the sim.py statecallback function, msg is

x: -2.77215766907
y: -22.9986152649
theta: 4.79073572159
speed: 13.8280162811
id: 1
t: 86

sim.py in the sim.py statecallback function, msg is

x: -3.40631747246
y: -23.0154857635
theta: 4.7382979393
speed: 14.1656627655
id: 1
t: 87

222 self.state_dicts[msg.id][msg.t] is (-3.4063174724578857, -23.015485763549805, 4.738297939300537, 14.16566276550293)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -1.06497347355
y: 1.34077906609
theta: 2.51400589943
speed: 10.7777118683
id: 0
t: 87
xxx after update is x: -1.41743481159
y: 1.20261240005
theta: 2.63241004944
speed: 11.3163805008
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: -1.41743481159
y: 1.20261240005
theta: 2.63241004944
speed: 11.3163805008
id: 0
t: 88
xxx after update is x: -0.926075100899
y: 1.94309306145
theta: 2.43532919884
speed: 11.7346668243
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.88800549507
y: -23.7303009033
theta: 4.69720029831
speed: 13.8113460541
id: 1
t: 88

sim.py in the sim.py statecallback function, msg is

x: -3.34055733681
y: -24.1194934845
theta: 4.58872079849
speed: 13.6300144196
id: 1
t: 89

222 self.state_dicts[msg.id][msg.t] is (-3.340557336807251, -24.11949348449707, 4.588720798492432, 13.630014419555664)
if wim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.36454033852
y: -21.4921169281
theta: 4.69866943359
speed: 14.0661611557
id: 1
t: 85
xxx after update is x: -2.77215766907
y: -22.9986152649
theta: 4.79073572159
speed: 13.8280162811
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:86
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.77215766907
y: -22.9986152649
theta: 4.79073572159
speed: 13.8280162811
id: 1
t: 86
xxx after update is x: -3.40631747246
y: -23.0154857635
theta: 4.7382979393
speed: 14.1656627655
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:87
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -3.40631747246
y: -23.0154857635
theta: 4.7382979393
speed: 14.1656627655
id: 1
t: 87
xxx after update is x: -2.88800549507
y: -23.7303009033
theta: 4.69720029831
speed: 13.8113460541
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48799999999999794]
sim.py in the sim.py statecallback function, msg is

x: 0.748033702374
y: 0.100114531815
theta: 2.28874230385
speed: 10.3173236847
id: 0
t: 83

sim.py in the sim.py statecallback function, msg is

x: 1.0987739563
y: 0.484379559755
theta: 2.34428620338
speed: 10.7207355499
id: 0
t: 84

sim.py in the sim.py statecallback function, msg is

x: -0.556853652
y: -0.636156916618
theta: 2.5307495594
speed: 10.8758182526
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: -0.549112975597
y: 1.24126517773
theta: 2.58223795891
speed: 10.9087839127
id: 0
t: 86

sim.py in the sim.py statecallback function, msg is

x: -1.06497347355
y: 1.34077906609
theta: 2.51400589943
speed: 10.7777118683
id: 0
t: 87

sim.py in the sim.py statecallback function, msg is

x: -1.41743481159
y: 1.20261240005
theta: 2.63241004944
speed: 11.3163805008
id: 0
t: 88

222 self.state_dicts[msg.id][msg.t] is (-1.417434811592102, 1.2026124000549316, 2.6324100494384766, 11.316380500793457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: -2.88800549507
y: -23.7303009033
theta: 4.69720029831
speed: 13.8113460541
id: 1
t: 88
xxx after update is x: -3.34055733681
y: -24.1194934845
theta: 4.58872079849
speed: 13.6300144196
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: -3.34055733681
y: -24.1194934845
theta: 4.58872079849
speed: 13.6300144196
id: 1
t: 89
xxx after update is x: -3.44571089745
y: -25.6292362213
theta: 4.82127285004
speed: 14.1611261368
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.44571089745
y: -25.6292362213
theta: 4.82127285004
speed: 14.1611261368
id: 1
t: 90
xxx after update is x: -3.78093767166
y: -25.1277084351
theta: 4.5241894722
speed: 13.8989019394
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: -3.78093767166
y: -25.1277084351
theta: 4.5241894722
speed: 13.8989019394
id: 1
t: 91
xxx after update is x: -3.52558374405
y: -25.5601902008
theta: 4.62278699875
speed: 13.9873456955
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4399999999999982]
sim.py in the sim.py statecallback function, msg is

x: -0.926075100899
y: 1.94309306145
theta: 2.43532919884
speed: 11.7346668243
id: 0
t: 89

sim.py in the sim.py statecallback function, msg is

x: -2.74467802048
y: 2.02704048157
theta: 2.71992206573
speed: 11.9222164154
id: 0
t: 90

sim.py in the sim.py statecallback function, msg is

x: -2.47036027908
y: 2.15845394135
theta: 2.66926074028
speed: 11.9786205292
id: 0
t: 91

sim.py in the sim.py statecallback function, msg is

x: -2.88041901588
y: 2.18971252441
theta: 2.67906141281
speed: 12.1842670441
id: 0
t: 92

222 self.state_dicts[msg.id][msg.t] is (-2.8804190158843994, 2.1897125244140625, 2.6790614128112793, 12.184267044067383)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.52558374405
y: -25.5601902008
theta: 4.62278699875
speed: 13.9873456955
id: 1
t: 92
current clock is 4.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.52558374405
y: -25.5601902008
theta: 4.62278699875
speed: 13.9873456955
id: 1
t: 92
xxx after update is x: -3.23481440544
y: -28.2203216553
theta: 4.78655433655
speed: 13.5465049744
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:93
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23481440544
y: -28.2203216553
theta: 4.78655433655
speed: 13.5465049744
id: 1
t: 93
xxx after update is x: -3.13713049889
y: -28.2193241119
theta: 4.7733540535
speed: 13.7653999329
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:94
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: -3.13713049889
y: -28.2193241119
theta: 4.7733540535
speed: 13.7653999329
id: 1
t: 94
xxx after update is x: -3.6493935585
y: -29.6272163391
theta: 4.58539581299
speed: 14.0416755676
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.478399999999998]
sim.py in the sim.py statecallback function, msg is

x: -5.07860422134
y: 3.20997691154
theta: 2.86422252655
speed: 13.3916015625
id: 0
t: 93

sim.py in the sim.py statecallback function, msg is

x: -5.20489025116
y: 2.94175815582
theta: 2.95244026184
speed: 13.2899875641
id: 0
t: 94

sim.py in the sim.py statecallback function, msg is

x: -5.94222784042
y: 2.94160103798
theta: 2.92204117775
speed: 13.723528862
id: 0
t: 95

222 self.state_dicts[msg.id][msg.t] is (-5.942227840423584, 2.941601037979126, 2.922041177749634, 13.723528861999512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_ste have all measurements for a certain time-stamp perform risk estimationgoing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -0.926075100899
y: 1.94309306145
theta: 2.43532919884
speed: 11.7346668243
id: 0
t: 89
xxx after update is x: -2.74467802048
y: 2.02704048157
theta: 2.71992206573
speed: 11.9222164154
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:90

self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -2.74467802048
y: 2.02704048157
theta: 2.71992206573
speed: 11.9222164154
id: 0
t: 90
xxx after update is x: -2.47036027908
y: 2.15845394135
theta: 2.66926074028
speed: 11.9786205292
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:91
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: -2.47036027908
y: 2.15845394135
theta: 2.66926074028
speed: 11.9786205292
id: 0
t: 91
xxx after update is x: -2.88041901588
y: 2.18971252441
theta: 2.67906141281
speed: 12.1842670441
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.88041901588
y: 2.18971252441
theta: 2.67906141281
speed: 12.1842670441
id: 0
t: 92
current clock is 4.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: -2.88041901588
y: 2.18971252441
theta: 2.67906141281
speed: 12.1842670441
id: 0
t: 92
xxx after update is x: -5.07860422134
y: 3.20997691154
theta: 2.86422252655
speed: 13.3916015625
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -5.07860422134
y: 3.20997691154
theta: 2.86422252655
speed: 13.3916015625
id: 0
t: 93
xxx after update is x: -5.20489025116
y: 2.94175815582
theta: 2.95244026184
speed: 13.2899875641
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: -5.20489025116
y: 2.94175815582
theta: 2.95244026184
speed: 13.2899875641
id: 0
t: 94
xxx after update is x: -5.94222784042
y: 2.94160103798
theta: 2.92204117775
speed: 13.723528862
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.44571089745
y: -25.6292362213
theta: 4.82127285004
speed: 14.1611261368
id: 1
t: 90

sim.py in the sim.py statecallback function, msg is

x: -3.78093767166
y: -25.1277084351
theta: 4.5241894722
speed: 13.8989019394
id: 1
t: 91

sim.py in the sim.py statecallback function, msg is

x: -3.52558374405
y: -25.5601902008
theta: 4.62278699875
speed: 13.9873456955
id: 1
t: 92

sim.py in the sim.py statecallback function, msg is

x: -3.23481440544
y: -28.2203216553
theta: 4.78655433655
speed: 13.5465ate function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: -3.6493935585
y: -29.6272163391
theta: 4.58539581299
speed: 14.0416755676
id: 1
t: 95
xxx after update is x: -3.48763489723
y: -30.041677475
theta: 4.86878299713
speed: 13.9962997437
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: -3.48763489723
y: -30.041677475
theta: 4.86878299713
speed: 13.9962997437
id: 1
t: 96
xxx after update is x: -2.6558740139
y: -30.5110778809
theta: 4.63309812546
speed: 13.7804222107
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.46559999999999807]
sim.py in the sim.py statecallback function, msg is

x: -6.38482093811
y: 2.67754197121
theta: 3.21588659286
speed: 13.3998203278
id: 0
t: 96

sim.py in the sim.py statecallback function, msg is

x: -7.041929245
y: 3.59931159019
theta: 3.2209277153
speed: 14.0242128372
id: 0
t: 97

222 self.state_dicts[msg.id][msg.t] is (-7.041929244995117, 3.599311590194702, 3.2209277153015137, 14.024212837219238)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: -2.6558740139
y: -30.5110778809
theta: 4.63309812546
speed: 13.7804222107
id: 1
t: 97
xxx after update is x: -3.33821105957
y: -30.7406024933
theta: 4.71760225296
speed: 14.0507326126
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: -3.33821105957
y: -30.7406024933
theta: 4.71760225296
speed: 14.0507326126
id: 1
t: 98
xxx after update is x: -3.4489634037
y: -31.9933319092
theta: 4.73749351501
speed: 13.5690937042
id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.537599999999999]
sim.py in the sim.py statecallback function, msg is

x: -7.43601751328
y: 3.78625965118
theta: 3.21056866646
speed: 14.2713499069
id: 0
t: 98

sim.py in the sim.py statecallback function, msg is

x: -8.03199100494
y: 3.59374332428
theta: 3.04811835289
speed: 14.0795440674
id: 0
t: 99

222 self.state_dicts[msg.id][msg.t] is (-8.031991004943848, 3.593743324279785, 3.0481183528900146, 14.079544067382812)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.4489634037
y: -31.9933319092
theta: 4.73749351501
speed: 13.5690937042
id: 1
t: 99
xxx after update is x: -3.22589683533
y: -32.6798439026
theta: 4.73883104324
speed: 14.0508670807
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:100
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
sim.py in the sim.py statecallback function, msg is

x: -8.90808582306
y: 4.18831014633
theta: 3.1143181324
speed: 14.2602310181
id: 0
t: 100

222 self.state_dicts[msg.id][msg.t] is (-8.908085823059082, 4.188310146331787, 3.1143181324005127, 14.260231018066406)
if we have all measurements for a049744
id: 1
t: 93

sim.py in the sim.py statecallback function, msg is

x: -3.13713049889
y: -28.2193241119
theta: 4.7733540535
speed: 13.7653999329
id: 1
t: 94

sim.py in the sim.py statecallback function, msg is

x: -3.6493935585
y: -29.6272163391
theta: 4.58539581299
speed: 14.0416755676
id: 1
t: 95

222 self.state_dicts[msg.id][msg.t] is (-3.6493935585021973, -29.627216339111328, 4.585395812988281, 14.041675567626953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: -5.94222784042
y: 2.94160103798
theta: 2.92204117775
speed: 13.723528862
id: 0
t: 95
xxx after update is x: -6.38482093811
y: 2.67754197121
theta: 3.21588659286
speed: 13.3998203278
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: -6.38482093811
y: 2.67754197121
theta: 3.21588659286
speed: 13.3998203278
id: 0
t: 96
xxx after update is x: -7.041929245
y: 3.59931159019
theta: 3.2209277153
speed: 14.0242128372
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.48763489723
y: -30.041677475
theta: 4.86878299713
speed: 13.9962997437
id: 1
t: 96

sim.py in the sim.py statecallback function, msg is

x: -2.6558740139
y: -30.5110778809
theta: 4.63309812546
speed: 13.7804222107
id: 1
t: 97

222 self.state_dicts[msg.id][msg.t] is (-2.655874013900757, -30.511077880859375, 4.633098125457764, 13.78042221069336)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: -7.041929245
y: 3.59931159019
theta: 3.2209277153
speed: 14.0242128372
id: 0
t: 97
xxx after update is x: -7.43601751328
y: 3.78625965118
theta: 3.21056866646
speed: 14.2713499069
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: -7.43601751328
y: 3.78625965118
theta: 3.21056866646
speed: 14.2713499069
id: 0
t: 98
xxx after update is x: -8.03199100494
y: 3.59374332428
theta: 3.04811835289
speed: 14.0795440674
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.33821105957
y: -30.7406024933
theta: 4.71760225296
speed: 14.0507326126
id: 1
t: 98

sim.py in the sim.py statecallback function, msg is

x: -3.4489634037
y: -31.9933319092
theta: 4.73749351501
speed: 13.5690937042
id: 1
t: 99

222 self.state_dicts[msg.id][msg.t] is (-3.4489634037017822, -31.993331909179688, 4.737493515014648, 13.569093704223633)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: -8.03199100494
y: 3.59374332428
theta: 3.04811835289
speed: 14.0795440674
id: 0
t: 99
xxx after update is x: -8.90808582306
y: 4.18831014633
theta: 3.1143181324
speed: 14.2602310181
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -8.90808582306
y: 4.18831014633
theta: 3.1143181324
speed: 14.2602310181
id: 0
t: 100
xxx after update is x: -9.22979640961
y: 3.55482339859
theta: 3.05843830109
speed: 13.9222078323
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:101
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.22589683533
y: -32.6798439026
theta: 4.73883104324
speed: 14.0508670807
id: 1
t: 100

sim.py in the sim.py statecallback function, msg is

x: -3.36667633057
y: -33.7014427185
theta: 4.73795843124
speed: 13.6439266205
id: 1
t: 101

222 self.state_dicts[msg.id][msg.t] is (-3.3666763305664062, -33.70144271850586, 4.7379584312438965, 13.643926620483398)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -9.22979640961
y: 3.55482339859
theta: 3.05843830109
speed: 13.9222078323
id: 0
t: 101
current clock is 4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: -9.22979640961
y: 3.55482339859
theta: 3.05843830109
speed: 13.9222078323
id: 0
t: 101
xxx after update is x: -9.4994764328
y: 3.05879759789
theta: 3.01590132713
speed: 14.2139482498
id: 0
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: -9.4994764328
y: 3.05879759789
theta: 3.01590132713
speed: 14.2139482498
id: 0
t: 102
xxx after update is x: -10.7998437881
y: 3.61245441437
theta: 3.17983102798
speed: 13.8412036896
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: -10.7998437881
y: 3.61245441437
theta: 3.17983102798
speed: 13.8412036896
id: 0
t: 103
xxx after update is x: -10.6932640076
y: 3.46007680893
theta: 3.11806797981
speed: 13.5729808807
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -10.6932640076
y: 3.46007680893
theta: 3.11806797981
speed: 13.5729808807
id: 0
t: 104
xxx after update is x: -12.3343439102
y: 3.80947184563
theta: 3.18072128296
speed: 13.7161016464
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -12.3343439102
y: 3.80947184563
theta: 3.18072128296
speed: 13.7161016464
id: 0
t: 105
xxx after update is x: -12.3917560577
y: 3.26689052582
theta: 3.20975112915
speed: 14.1111116409
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.27871847153
y: -33.9856834412
theta: 4.7822499275 certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: -3.22589683533
y: -32.6798439026
theta: 4.73883104324
speed: 14.0508670807
id: 1
t: 100
xxx after update is x: -3.36667633057
y: -33.7014427185
theta: 4.73795843124
speed: 13.6439266205
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36667633057
y: -33.7014427185
theta: 4.73795843124
speed: 13.6439266205
id: 1
t: 101
current clock is 4.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: -3.36667633057
y: -33.7014427185
theta: 4.73795843124
speed: 13.6439266205
id: 1
t: 101
xxx after update is x: -3.27871847153
y: -33.9856834412
theta: 4.78224992752
speed: 13.7776269913
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.27871847153
y: -33.9856834412
theta: 4.78224992752
speed: 13.7776269913
id: 1
t: 102
xxx after update is x: -3.41069960594
y: -34.6331481934
theta: 4.77529335022
speed: 13.5269412994
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:103
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: -3.41069960594
y: -34.6331481934
theta: 4.77529335022
speed: 13.5269412994
id: 1
t: 103
xxx after update is x: -3.29177474976
y: -34.2047920227
theta: 4.71842908859
speed: 13.7725343704
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5071999999999981]
sim.py in the sim.py statecallback function, msg is

x: -9.22979640961
y: 3.55482339859
theta: 3.05843830109
speed: 13.9222078323
id: 0
t: 101

sim.py in the sim.py statecallback function, msg is

x: -9.4994764328
y: 3.05879759789
theta: 3.01590132713
speed: 14.2139482498
id: 0
t: 102

sim.py in the sim.py statecallback function, msg is

x: -10.7998437881
y: 3.61245441437
theta: 3.17983102798
speed: 13.8412036896
id: 0
t: 103

sim.py in the sim.py statecallback function, msg is

x: -10.6932640076
y: 3.46007680893
theta: 3.11806797981
speed: 13.5729808807
id: 0
t: 104

222 self.state_dicts[msg.id][msg.t] is (-10.69326400756836, 3.4600768089294434, 3.118067979812622, 13.572980880737305)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29177474976
y: -34.2047920227
theta: 4.71842908859
speed: 13.7725343704
id: 1
t: 104
xxx after update is x: -3.0662112236
y: -35.8668327332
theta: 4.67129325867
speed: 14.1741552353
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:105
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the up2
speed: 13.7776269913
id: 1
t: 102

sim.py in the sim.py statecallback function, msg is

x: -3.41069960594
y: -34.6331481934
theta: 4.77529335022
speed: 13.5269412994
id: 1
t: 103

sim.py in the sim.py statecallback function, msg is

x: -3.29177474976
y: -34.2047920227
theta: 4.71842908859
speed: 13.7725343704
id: 1
t: 104

sim.py in the sim.py statecallback function, msg is

x: -3.0662112236
y: -35.8668327332
theta: 4.67129325867
speed: 14.1741552353
id: 1
t: 105

sim.py in the sim.py statecallback function, msg is

x: -3.26491427422
y: -35.6382255554
theta: 4.78742790222
speed: 13.9783668518
id: 1
t: 106

222 self.state_dicts[msg.id][msg.t] is (-3.2649142742156982, -35.63822555541992, 4.78742790222168, 13.97836685180664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:107
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:108
xxx before update is x: -12.3917560577
y: 3.26689052582
theta: 3.20975112915
speed: 14.1111116409
id: 0
t: 106
xxx after update is x: -13.7701454163
y: 3.32292175293
theta: 2.91558146477
speed: 13.8623628616
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -13.7701454163
y: 3.32292175293
theta: 2.91558146477
speed: 13.8623628616
id: 0
t: 107
xxx after update is x: -14.0647926331
y: 3.33394098282
theta: 3.22023296356
speed: 14.1091814041
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109
xxx before update is x: -14.0647926331
y: 3.33394098282
theta: 3.22023296356
speed: 14.1091814041
id: 0
t: 108
xxx after update is x: -14.9353475571
y: 3.70276403427
theta: 3.37289452553
speed: 13.9993867874
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -14.9353475571
y: 3.70276403427
theta: 3.37289452553
speed: 13.9993867874
id: 0
t: 109
current clock is 4.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: -14.9353475571
y: 3.70276403427
theta: 3.37289452553
speed: 13.9993867874
id: 0
t: 109
xxx after update is x: -14.4737091064
y: 3.58328533173
theta: 3.22844171524
speed: 14.041800499
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -14.4737091064
y: 3.58328533173
theta: 3.22844171524
speed: 14.041800499
id: 0
t: 110
xxx after update is x: -15.5013027191
y: 3.84615015984
theta: 3.02745985985
speed: 13.7136621475
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:111
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.56559300423
y: -37.4916000366
theta: 4.81858062744
speed: 13.6078100204
id: 1
t: 107

sim.py in the sim.py statecallback function, msg is

x: -3.01985692978
y: -38.0795516968
theta: 4.63348674774
speed: 13.9252090454
id: 1
date function xxx before update is x: -3.0662112236
y: -35.8668327332
theta: 4.67129325867
speed: 14.1741552353
id: 1
t: 105
xxx after update is x: -3.26491427422
y: -35.6382255554
theta: 4.78742790222
speed: 13.9783668518
id: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:106
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:107
going to the update function
xxx before update is x: -3.26491427422
y: -35.6382255554
theta: 4.78742790222
speed: 13.9783668518
id: 1
t: 106
xxx after update is x: -3.56559300423
y: -37.4916000366
theta: 4.81858062744
speed: 13.6078100204
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.56559300423
y: -37.4916000366
theta: 4.81858062744
speed: 13.6078100204
id: 1
t: 107
xxx after update is x: -3.01985692978
y: -38.0795516968
theta: 4.63348674774
speed: 13.9252090454
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.01985692978
y: -38.0795516968
theta: 4.63348674774
speed: 13.9252090454
id: 1
t: 108
xxx after update is x: -3.46773767471
y: -37.4492034912
theta: 4.63469028473
speed: 13.6436872482
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:109
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.46773767471
y: -37.4492034912
theta: 4.63469028473
speed: 13.6436872482
id: 1
t: 109
current clock is 4.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5151999999999983]
sim.py in the sim.py statecallback function, msg is

x: -12.3343439102
y: 3.80947184563
theta: 3.18072128296
speed: 13.7161016464
id: 0
t: 105

sim.py in the sim.py statecallback function, msg is

x: -12.3917560577
y: 3.26689052582
theta: 3.20975112915
speed: 14.1111116409
id: 0
t: 106

sim.py in the sim.py statecallback function, msg is

x: -13.7701454163
y: 3.32292175293
theta: 2.91558146477
speed: 13.8623628616
id: 0
t: 107

sim.py in the sim.py statecallback function, msg is

x: -14.0647926331
y: 3.33394098282
theta: 3.22023296356
speed: 14.1091814041
id: 0
t: 108

sim.py in the sim.py statecallback function, msg is

x: -14.9353475571
y: 3.70276403427
theta: 3.37289452553
speed: 13.9993867874
id: 0
t: 109

222 self.state_dicts[msg.id][msg.t] is (-14.935347557067871, 3.7027640342712402, 3.372894525527954, 13.99938678741455)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: -3.46773767471
y: -37.4492034912
theta: 4.63469028473
speed: 13.6436872482
id: 1
t: 109
xxx after update is x: -3.26497149467
y: -38.5650901794
theta: 4.85635185242
speed: 13.5033979416
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111
xxx before update is x: -3.26497149467
y: -38.5650901794
theta: 4.85635185242
speed: 13.5033979416
id: 1
t: 110
xxx after update is x: -3.24321269989
y: -39.4305496216
theta: 4.82979726791
speed: 13.9959096909
id: 1
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48799999999999794]
sim.py in the sim.py statecallback function, msg is

x: -14.4737091064
y: 3.58328533173
theta: 3.22844171524
speed: 14.041800499
id: 0
t: 110

sim.py in the sim.py statecallback function, msg is

x: -15.5013027191
y: 3.84615015984
theta: 3.02745985985
speed: 13.7136621475
id: 0
t: 111

222 self.state_dicts[msg.id][msg.t] is (-15.501302719116211, 3.8461501598358154, 3.0274598598480225, 13.713662147521973)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: -3.24321269989
y: -39.4305496216
theta: 4.82979726791
speed: 13.9959096909
id: 1
t: 111
xxx after update is x: -3.06717538834
y: -39.7868423462
theta: 4.56831169128
speed: 13.8518505096
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: -3.06717538834
y: -39.7868423462
theta: 4.56831169128
speed: 13.8518505096
id: 1
t: 112
xxx after update is x: -2.72082686424
y: -40.4905319214
theta: 4.59718370438
speed: 13.8921298981
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: -2.72082686424
y: -40.4905319214
theta: 4.59718370438
speed: 13.8921298981
id: 1
t: 113
xxx after update is x: -3.11119294167
y: -41.4111824036
theta: 4.90869617462
speed: 13.70570755
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5167999999999984]
sim.py in the sim.py statecallback function, msg is

x: -16.4595279694
y: 3.73100757599
theta: 3.24518990517
speed: 13.6457910538
id: 0
t: 112

sim.py in the sim.py statecallback function, msg is

x: -16.8632564545
y: 3.49243736267
theta: 3.13741922379
speed: 14.186832428
id: 0
t: 113

sim.py in the sim.py statecallback function, msg is

x: -17.2887516022
y: 3.94892382622
theta: 3.18689084053
speed: 14.2345743179
id: 0
t: 114

222 self.state_dicts[msg.id][msg.t] is (-17.28875160217285, 3.9489238262176514, 3.1868908405303955, 14.234574317932129)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: -3.11119294167
y: -41.4111824036
theta: 4.90869617462
speed: 13.70570755
id: 1
t: 114
xxx after update is x: -3.53539419174
y: -41.6153488159
theta: 4.76585006714
speed: 13.9962568283
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:116
xxx before update is x: -3.53539419174
y: -41.6153488159
theta: 4.76585006714
speed: 13.9962568283
id: 1
t: 115
xxx after update is x: -3.7485871315
y: -43.2462234497
theta: 4.63756132126
speed: 13.789317131
id: 1
t: 116
maneuver_negotiatir.py finish the update agent t: 108

sim.py in the sim.py statecallback function, msg is

x: -3.46773767471
y: -37.4492034912
theta: 4.63469028473
speed: 13.6436872482
id: 1
t: 109

sim.py in the sim.py statecallback function, msg is

x: -3.26497149467
y: -38.5650901794
theta: 4.85635185242
speed: 13.5033979416
id: 1
t: 110

sim.py in the sim.py statecallback function, msg is

x: -3.24321269989
y: -39.4305496216
theta: 4.82979726791
speed: 13.9959096909
id: 1
t: 111

222 self.state_dicts[msg.id][msg.t] is (-3.2432126998901367, -39.43054962158203, 4.829797267913818, 13.995909690856934)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: -15.5013027191
y: 3.84615015984
theta: 3.02745985985
speed: 13.7136621475
id: 0
t: 111
xxx after update is x: -16.4595279694
y: 3.73100757599
theta: 3.24518990517
speed: 13.6457910538
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: -16.4595279694
y: 3.73100757599
theta: 3.24518990517
speed: 13.6457910538
id: 0
t: 112
xxx after update is x: -16.8632564545
y: 3.49243736267
theta: 3.13741922379
speed: 14.186832428
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: -16.8632564545
y: 3.49243736267
theta: 3.13741922379
speed: 14.186832428
id: 0
t: 113
xxx after update is x: -17.2887516022
y: 3.94892382622
theta: 3.18689084053
speed: 14.2345743179
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.06717538834
y: -39.7868423462
theta: 4.56831169128
speed: 13.8518505096
id: 1
t: 112

sim.py in the sim.py statecallback function, msg is

x: -2.72082686424
y: -40.4905319214
theta: 4.59718370438
speed: 13.8921298981
id: 1
t: 113

sim.py in the sim.py statecallback function, msg is

x: -3.11119294167
y: -41.4111824036
theta: 4.90869617462
speed: 13.70570755
id: 1
t: 114

222 self.state_dicts[msg.id][msg.t] is (-3.1111929416656494, -41.41118240356445, 4.908696174621582, 13.705707550048828)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: -17.2887516022
y: 3.94892382622
theta: 3.18689084053
speed: 14.2345743179
id: 0
t: 114
xxx after update is x: -17.1604881287
y: 3.10983896255
theta: 3.31331729889
speed: 14.1899061203
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116
xxx before update is x: -17.1604881287
y: 3.10983896255
theta: 3.31331729889
speed: 14.1899061203
id: 0
t: 115
xxx after update is x: -19.1514911652
y: 3.08916902542
theta: 2.91860461235
speed: 13.7849636078
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measuremstate from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.7485871315
y: -43.2462234497
theta: 4.63756132126
speed: 13.789317131
id: 1
t: 116
current clock is 5.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117
xxx before update is x: -3.7485871315
y: -43.2462234497
theta: 4.63756132126
speed: 13.789317131
id: 1
t: 116
xxx after update is x: -3.48937058449
y: -42.7117843628
theta: 4.80956792831
speed: 13.8541269302
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:118
xxx before update is x: -3.48937058449
y: -42.7117843628
theta: 4.80956792831
speed: 13.8541269302
id: 1
t: 117
xxx after update is x: -3.07249403
y: -43.6905212402
theta: 4.67710733414
speed: 14.1478052139
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4927999999999979]
sim.py in the sim.py statecallback function, msg is

x: -17.1604881287
y: 3.10983896255
theta: 3.31331729889
speed: 14.1899061203
id: 0
t: 115

sim.py in the sim.py statecallback function, msg is

x: -19.1514911652
y: 3.08916902542
theta: 2.91860461235
speed: 13.7849636078
id: 0
t: 116

sim.py in the sim.py statecallback function, msg is

x: -19.2736682892
y: 2.98441624641
theta: 3.21346497536
speed: 13.7729177475
id: 0
t: 117

sim.py in the sim.py statecallback function, msg is

x: -19.1182365417
y: 3.30129289627
theta: 3.08308458328
speed: 13.9560050964
id: 0
t: 118

222 self.state_dicts[msg.id][msg.t] is (-19.118236541748047, 3.301292896270752, 3.0830845832824707, 13.956005096435547)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119
xxx before update is x: -3.07249403
y: -43.6905212402
theta: 4.67710733414
speed: 14.1478052139
id: 1
t: 118
xxx after update is x: -3.29447770119
y: -43.6475067139
theta: 4.63850593567
speed: 13.9395551682
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.29447770119
y: -43.6475067139
theta: 4.63850593567
speed: 13.9395551682
id: 1
t: 119
xxx after update is x: -3.28041434288
y: -44.5663642883
theta: 4.7463350296
speed: 13.9467353821
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121
xxx before update is x: -3.28041434288
y: -44.5663642883
theta: 4.7463350296
speed: 13.9467353821
id: 1
t: 120
xxx after update is x: -3.34274625778
y: -45.396156311
theta: 4.69624519348
speed: 14.0634813309
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.475199999999998]
sim.py in the sim.py statecallback function, msg is

x: -19.7892017365
y: 3.55397963524
theta: 3.14704632759
speed: ents is Nonexxx before update is x: -19.1514911652
y: 3.08916902542
theta: 2.91860461235
speed: 13.7849636078
id: 0
t: 116
xxx after update is x: -19.2736682892
y: 2.98441624641
theta: 3.21346497536
speed: 13.7729177475
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion

self.ros_measurements is not empty
x: -19.2736682892
y: 2.98441624641
theta: 3.21346497536
speed: 13.7729177475
id: 0
t: 117
current clock is 5.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118
xxx before update is x: -19.2736682892
y: 2.98441624641
theta: 3.21346497536
speed: 13.7729177475
id: 0
t: 117
xxx after update is x: -19.1182365417
y: 3.30129289627
theta: 3.08308458328
speed: 13.9560050964
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.53539419174
y: -41.6153488159
theta: 4.76585006714
speed: 13.9962568283
id: 1
t: 115

sim.py in the sim.py statecallback function, msg is

x: -3.7485871315
y: -43.2462234497
theta: 4.63756132126
speed: 13.789317131
id: 1
t: 116

sim.py in the sim.py statecallback function, msg is

x: -3.48937058449
y: -42.7117843628
theta: 4.80956792831
speed: 13.8541269302
id: 1
t: 117

sim.py in the sim.py statecallback function, msg is

x: -3.07249403
y: -43.6905212402
theta: 4.67710733414
speed: 14.1478052139
id: 1
t: 118

222 self.state_dicts[msg.id][msg.t] is (-3.0724940299987793, -43.690521240234375, 4.677107334136963, 14.147805213928223)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:119
xxx before update is x: -19.1182365417
y: 3.30129289627
theta: 3.08308458328
speed: 13.9560050964
id: 0
t: 118
xxx after update is x: -19.7892017365
y: 3.55397963524
theta: 3.14704632759
speed: 14.0699892044
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -19.7892017365
y: 3.55397963524
theta: 3.14704632759
speed: 14.0699892044
id: 0
t: 119
xxx after update is x: -21.0901603699
y: 2.94800329208
theta: 3.20720458031
speed: 14.0169067383
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:120
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121
xxx before update is x: -21.0901603699
y: 2.94800329208
theta: 3.20720458031
speed: 14.0169067383
id: 0
t: 120
xxx after update is x: -21.4254951477
y: 3.26880955696
theta: 3.1588640213
speed: 13.6849546432
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.29447770119
y: -43.6475067139
theta: 4.63850593567
speed: 13.9395551682
id: 1
t: 119

sim.py in the sim.py statecallback function, msg is

x: -3.28041434288
y: -44.5663642883
theta: 4.7463350296
speed: 13.9467353821
id: 1
t: 120

sim.py in the sim.py statecallback function, msg is

x: -3.34274625778
y: -45.396156311
theta: 4.69624519348
speed: 14.0634813309
id: 1
t: 121

222 self.state_dicts[msg.id][msg.t] is (-3.3427462577819824, -45.396156311035156, 4.696245193481445, 14.063481330871582)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122
xxx before update is x: -21.4254951477
y: 3.26880955696
theta: 3.1588640213
speed: 13.6849546432
id: 0
t: 121
xxx after update is x: -22.284034729
y: 3.26833629608
theta: 3.21137094498
speed: 14.1162395477
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -22.284034729
y: 3.26833629608
theta: 3.21137094498
speed: 14.1162395477
id: 0
t: 122
xxx after update is x: -23.1394062042
y: 4.13159656525
theta: 3.07275652885
speed: 13.8089513779
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:123
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124
xxx before update is x: -23.1394062042
y: 4.13159656525
theta: 3.07275652885
speed: 13.8089513779
id: 0
t: 123
xxx after update is x: -23.270658493
y: 3.10356235504
theta: 3.33921432495
speed: 13.9433040619
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
maneuver_negotiatir.py finish the do maneuver function
maneuver_negotiatir.py message_processing,!!dwd change status to NORMAL
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -23.270658493
y: 3.10356235504
theta: 3.33921432495
speed: 13.9433040619
id: 0
t: 124
current clock is 5.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125
xxx before update is x: -23.270658493
y: 3.10356235504
theta: 3.33921432495
speed: 13.9433040619
id: 0
t: 124
xxx after update is x: -23.5416164398
y: 3.33933830261
theta: 3.0484418869
speed: 14.0952787399
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.727820158
y: -45.9890899658
theta: 4.64538621902
speed: 13.88920784
id: 1
t: 122

sim.py in the sim.py statecallback function, msg is

x: -3.13835740089
y: -46.5984954834
theta: 4.84799385071
speed: 13.8888273239
id: 1
t: 123

sim.py in the sim.py statecallback function, msg is

x: -2.86509799957
y: -47.4871559143
theta: 4.64242744446
speed: 13.993563652
id: 1
t: 124

sim.py in the sim.py statecallback function, msg is

x: -3.27677488327
y: -47.9917984009
theta: 4.59274721146
speed: 13.8873634338
id: 1
t: 125

222 self.state_dicts[msg.id][msg.t] is (-3.2767748832702637, -47.991798400878906, 4.592747211456299, 13.88736343383789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126
xxx before update is x: -23.5416164398
y: 3.33933830261
theta: 3.0484418869
speed: 14.0952787399
id: 0
t: 125
xxx after update is x: -24.4292068481
y: 3.3268122673
theta: 3.15019130707
speed: 14.1512813568
id: 0
t: 126
maneuver_negotiati14.0699892044
id: 0
t: 119

sim.py in the sim.py statecallback function, msg is

x: -21.0901603699
y: 2.94800329208
theta: 3.20720458031
speed: 14.0169067383
id: 0
t: 120

sim.py in the sim.py statecallback function, msg is

x: -21.4254951477
y: 3.26880955696
theta: 3.1588640213
speed: 13.6849546432
id: 0
t: 121

222 self.state_dicts[msg.id][msg.t] is (-21.425495147705078, 3.2688095569610596, 3.1588640213012695, 13.684954643249512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122
xxx before update is x: -3.34274625778
y: -45.396156311
theta: 4.69624519348
speed: 14.0634813309
id: 1
t: 121
xxx after update is x: -3.727820158
y: -45.9890899658
theta: 4.64538621902
speed: 13.88920784
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123
xxx before update is x: -3.727820158
y: -45.9890899658
theta: 4.64538621902
speed: 13.88920784
id: 1
t: 122
xxx after update is x: -3.13835740089
y: -46.5984954834
theta: 4.84799385071
speed: 13.8888273239
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124
xxx before update is x: -3.13835740089
y: -46.5984954834
theta: 4.84799385071
speed: 13.8888273239
id: 1
t: 123
xxx after update is x: -2.86509799957
y: -47.4871559143
theta: 4.64242744446
speed: 13.993563652
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.86509799957
y: -47.4871559143
theta: 4.64242744446
speed: 13.993563652
id: 1
t: 124
current clock is 5.51111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125
maneuver_negotiatir.py in the try maneuver function update -. strat
xxx before update is x: -2.86509799957
y: -47.4871559143
theta: 4.64242744446
speed: 13.993563652
id: 1
t: 124
xxx after update is x: -3.27677488327
y: -47.9917984009
theta: 4.59274721146
speed: 13.8873634338
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5071999999999981]
sim.py in the sim.py statecallback function, msg is

x: -22.284034729
y: 3.26833629608
theta: 3.21137094498
speed: 14.1162395477
id: 0
t: 122

sim.py in the sim.py statecallback function, msg is

x: -23.1394062042
y: 4.13159656525
theta: 3.07275652885
speed: 13.8089513779
id: 0
t: 123

sim.py in the sim.py statecallback function, msg is

x: -23.270658493
y: 3.10356235504
theta: 3.33921432495
speed: 13.9433040619
id: 0
t: 124

sim.py in the sim.py statecallback function, msg is

x: -23.5416164398
y: 3.33933830261
theta: 3.0484418869
speed: 14.0952787399
id: 0
t: 125

222 self.state_dicts[msg.id][msg.t] is (-23.541616439819336, 3.3393383026123047, 3.0484418869018555, 14.0952787399292)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.27677488327
y: -47.9917984009
theta: 4.59274721146
speed: 13.8873634338
id: 1
t: 125
xxx after update is x: -2.77563142776
y: -48.4848518372
theta: 4.59012937546
speed: 13.8119869232
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:126
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.77563142776
y: -48.4848518372
theta: 4.59012937546
speed: 13.8119869232
id: 1
t: 126
xxx after update is x: -3.80698037148
y: -49.0128097534
theta: 4.71933031082
speed: 14.2704715729
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:127
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128
xxx before update is x: -3.80698037148
y: -49.0128097534
theta: 4.71933031082
speed: 14.2704715729
id: 1
t: 127
xxx after update is x: -3.56441283226
y: -49.4047393799
theta: 4.57897996902
speed: 13.7674016953
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48479999999999795]
sim.py in the sim.py statecallback function, msg is

x: -24.4292068481
y: 3.3268122673
theta: 3.15019130707
speed: 14.1512813568
id: 0
t: 126

sim.py in the sim.py statecallback function, msg is

x: -25.0507640839
y: 3.13799381256
theta: 3.28338575363
speed: 13.5602579117
id: 0
t: 127

sim.py in the sim.py statecallback function, msg is

x: -25.7721500397
y: 3.65601754189
theta: 3.1837208271
speed: 13.6738176346
id: 0
t: 128

222 self.state_dicts[msg.id][msg.t] is (-25.77215003967285, 3.656017541885376, 3.183720827102661, 13.67381763458252)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129
xxx before update is x: -3.56441283226
y: -49.4047393799
theta: 4.57897996902
speed: 13.7674016953
id: 1
t: 128
xxx after update is x: -2.83539223671
y: -50.4304428101
theta: 4.6165304184
speed: 14.0316619873
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130
xxx before update is x: -2.83539223671
y: -50.4304428101
theta: 4.6165304184
speed: 14.0316619873
id: 1
t: 129
xxx after update is x: -3.35183668137
y: -51.1268196106
theta: 4.68731975555
speed: 14.002825737
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131
xxx before update is x: -3.35183668137
y: -51.1268196106
theta: 4.68731975555
speed: 14.002825737
id: 1
t: 130
xxx after update is x: -3.40836215019
y: -51.2481803894
theta: 4.74530267715
speed: 13.9279289246
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.476799999999998]
sim.py in the sim.py statecallback function, msg is

x: -26.3344173431
y: 3.1342215538
theta: 3.112855196
speed: 13.9955968857
id: 0
t: 129

sim.py in the sim.py statecallback function, msg is

x: -27.0866317749
y: 3.22858715057
theta: 3.04787564278
speed: 13.7218065262
id: 0
t: 130

sim.py in the sim.py statecallback function, msg is

x: -27.6367835999
y: 3.21250939369
theta: 3.23933386803
speed: 13.5r.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127
xxx before update is x: -24.4292068481
y: 3.3268122673
theta: 3.15019130707
speed: 14.1512813568
id: 0
t: 126
xxx after update is x: -25.0507640839
y: 3.13799381256
theta: 3.28338575363
speed: 13.5602579117
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128
xxx before update is x: -25.0507640839
y: 3.13799381256
theta: 3.28338575363
speed: 13.5602579117
id: 0
t: 127
xxx after update is x: -25.7721500397
y: 3.65601754189
theta: 3.1837208271
speed: 13.6738176346
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129
xxx before update is x: -25.7721500397
y: 3.65601754189
theta: 3.1837208271
speed: 13.6738176346
id: 0
t: 128
xxx after update is x: -26.3344173431
y: 3.1342215538
theta: 3.112855196
speed: 13.9955968857
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.77563142776
y: -48.4848518372
theta: 4.59012937546
speed: 13.8119869232
id: 1
t: 126

sim.py in the sim.py statecallback function, msg is

x: -3.80698037148
y: -49.0128097534
theta: 4.71933031082
speed: 14.2704715729
id: 1
t: 127

sim.py in the sim.py statecallback function, msg is

x: -3.56441283226
y: -49.4047393799
theta: 4.57897996902
speed: 13.7674016953
id: 1
t: 128

sim.py in the sim.py statecallback function, msg is

x: -2.83539223671
y: -50.4304428101
theta: 4.6165304184
speed: 14.0316619873
id: 1
t: 129

222 self.state_dicts[msg.id][msg.t] is (-2.8353922367095947, -50.430442810058594, 4.616530418395996, 14.031661987304688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -26.3344173431
y: 3.1342215538
theta: 3.112855196
speed: 13.9955968857
id: 0
t: 129
xxx after update is x: -27.0866317749
y: 3.22858715057
theta: 3.04787564278
speed: 13.7218065262
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:130
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131
xxx before update is x: -27.0866317749
y: 3.22858715057
theta: 3.04787564278
speed: 13.7218065262
id: 0
t: 130
xxx after update is x: -27.6367835999
y: 3.21250939369
theta: 3.23933386803
speed: 13.5717153549
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132
xxx before update is x: -27.6367835999
y: 3.21250939369
theta: 3.23933386803
speed: 13.5717153549
id: 0
t: 131
xxx after update is x: -28.2943401337
y: 3.56845831871
theta: 3.38753819466
speed: 13.736371994
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -28.2943401337
y: 3.56845831871
theta: 3.38753819466
speed: 13.736371994
id: 0
t: 132
current clock is 5.86666666667
maneuver_negotiatir.py this is get posotion func717153549
id: 0
t: 131

222 self.state_dicts[msg.id][msg.t] is (-27.636783599853516, 3.2125093936920166, 3.2393338680267334, 13.571715354919434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132
xxx before update is x: -3.40836215019
y: -51.2481803894
theta: 4.74530267715
speed: 13.9279289246
id: 1
t: 131
xxx after update is x: -3.22231030464
y: -52.508102417
theta: 4.74660873413
speed: 14.1467857361
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.22231030464
y: -52.508102417
theta: 4.74660873413
speed: 14.1467857361
id: 1
t: 132
current clock is 5.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133
xxx before update is x: -3.22231030464
y: -52.508102417
theta: 4.74660873413
speed: 14.1467857361
id: 1
t: 132
xxx after update is x: -3.44376420975
y: -52.8889312744
theta: 4.78461122513
speed: 13.5826616287
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:134
xxx before update is x: -3.44376420975
y: -52.8889312744
theta: 4.78461122513
speed: 13.5826616287
id: 1
t: 133
xxx after update is x: -2.91755771637
y: -53.7439460754
theta: 4.60805368423
speed: 14.0292015076
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5199999999999985]
sim.py in the sim.py statecallback function, msg is

x: -28.2943401337
y: 3.56845831871
theta: 3.38753819466
speed: 13.736371994
id: 0
t: 132

sim.py in the sim.py statecallback function, msg is

x: -28.6338672638
y: 3.35339140892
theta: 3.0350484848
speed: 13.9250497818
id: 0
t: 133

sim.py in the sim.py statecallback function, msg is

x: -30.0211582184
y: 3.25027441978
theta: 3.01786088943
speed: 13.9319820404
id: 0
t: 134

222 self.state_dicts[msg.id][msg.t] is (-30.02115821838379, 3.250274419784546, 3.0178608894348145, 13.931982040405273)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.91755771637
y: -53.7439460754
theta: 4.60805368423
speed: 14.0292015076
id: 1
t: 134
xxx after update is x: -2.74290895462
y: -54.4411048889
theta: 4.69435358047
speed: 14.4759521484
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:135
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136
xxx before update is x: -2.74290895462
y: -54.4411048889
theta: 4.69435358047
speed: 14.4759521484
id: 1
t: 135
xxx after update is x: -3.59515929222
y: -54.6017379761
theta: 4.66367673874
speed: 14.0163841248
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxtion, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133
xxx before update is x: -28.2943401337
y: 3.56845831871
theta: 3.38753819466
speed: 13.736371994
id: 0
t: 132
xxx after update is x: -28.6338672638
y: 3.35339140892
theta: 3.0350484848
speed: 13.9250497818
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134
xxx before update is x: -28.6338672638
y: 3.35339140892
theta: 3.0350484848
speed: 13.9250497818
id: 0
t: 133
xxx after update is x: -30.0211582184
y: 3.25027441978
theta: 3.01786088943
speed: 13.9319820404
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.35183668137
y: -51.1268196106
theta: 4.68731975555
speed: 14.002825737
id: 1
t: 130

sim.py in the sim.py statecallback function, msg is

x: -3.40836215019
y: -51.2481803894
theta: 4.74530267715
speed: 13.9279289246
id: 1
t: 131

sim.py in the sim.py statecallback function, msg is

x: -3.22231030464
y: -52.508102417
theta: 4.74660873413
speed: 14.1467857361
id: 1
t: 132

sim.py in the sim.py statecallback function, msg is

x: -3.44376420975
y: -52.8889312744
theta: 4.78461122513
speed: 13.5826616287
id: 1
t: 133

sim.py in the sim.py statecallback function, msg is

x: -2.91755771637
y: -53.7439460754
theta: 4.60805368423
speed: 14.0292015076
id: 1
t: 134

222 self.state_dicts[msg.id][msg.t] is (-2.917557716369629, -53.74394607543945, 4.608053684234619, 14.02920150756836)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135
xxx before update is x: -30.0211582184
y: 3.25027441978
theta: 3.01786088943
speed: 13.9319820404
id: 0
t: 134
xxx after update is x: -29.6116065979
y: 3.50599479675
theta: 3.14907073975
speed: 14.1935634613
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136
xxx before update is x: -29.6116065979
y: 3.50599479675
theta: 3.14907073975
speed: 14.1935634613
id: 0
t: 135
xxx after update is x: -30.895980835
y: 3.34369134903
theta: 3.04674625397
speed: 13.957988739
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137
xxx before update is x: -30.895980835
y: 3.34369134903
theta: 3.04674625397
speed: 13.957988739
id: 0
t: 136
xxx after update is x: -31.5099906921
y: 3.46103954315
theta: 3.36253476143
speed: 13.9079208374
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurementxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137
xxx before update is x: -3.59515929222
y: -54.6017379761
theta: 4.66367673874
speed: 14.0163841248
id: 1
t: 136
xxx after update is x: -3.61031699181
y: -55.3906974792
theta: 4.66947174072
speed: 13.8644933701
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.61031699181
y: -55.3906974792
theta: 4.66947174072
speed: 13.8644933701
id: 1
t: 137
current clock is 6.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139
xxx before update is x: -3.61031699181
y: -55.3906974792
theta: 4.66947174072
speed: 13.8644933701
id: 1
t: 137
xxx after update is x: -3.12860250473
y: -69.9261322021
theta: 4.65326738358
speed: 4.43690109253
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.12860250473
y: -69.9261322021
theta: 4.65326738358
speed: 4.43690109253
id: 1
t: 138
xxx after update is x: -3.54532408714
y: -69.9123535156
theta: 4.74793386459
speed: 4.45263051987
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140
xxx before update is x: -3.54532408714
y: -69.9123535156
theta: 4.74793386459
speed: 4.45263051987
id: 1
t: 139
xxx after update is x: -3.09589838982
y: -69.8931732178
theta: 4.63406181335
speed: 3.90323519707
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
sim.py in the sim.py statecallback function, msg is

x: -29.6116065979
y: 3.50599479675
theta: 3.14907073975
speed: 14.1935634613
id: 0
t: 135

sim.py in the sim.py statecallback function, msg is

x: -30.895980835
y: 3.34369134903
theta: 3.04674625397
speed: 13.957988739
id: 0
t: 136

sim.py in the sim.py statecallback function, msg is

x: -31.5099906921
y: 3.46103954315
theta: 3.36253476143
speed: 13.9079208374
id: 0
t: 137

sim.py in the sim.py statecallback function, msg is

x: -45.8892860413
y: 3.4195253849
theta: 3.45289516449
speed: 7.66900014877
id: 0
t: 138

sim.py in the sim.py statecallback function, msg is

x: -46.4925117493
y: 3.41176009178
theta: 3.16900110245
speed: 7.50746774673
id: 0
t: 139

sim.py in the sim.py statecallback function, msg is

x: -46.2242088318
y: 2.83957648277
theta: 3.17205548286
speed: 7.18298482895
id: 0
t: 140

222 self.state_dicts[msg.id][msg.t] is (-46.22420883178711, 2.839576482772827, 3.17205548286438, 7.182984828948975)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:141
xxx before update is x: -3.09589838982
y: -69.8931732178
theta: 4.63406181335
speed: 3.90323519707
id: 1
t: 140
xxx after update is x: -3.73292088509
y: -70.6291885376
theta: 4.69178295135
speed: 4.43412637711
id: 1
t: 141
maneuver_negotiatir.s is not empty
x: -31.5099906921
y: 3.46103954315
theta: 3.36253476143
speed: 13.9079208374
id: 0
t: 137
current clock is 6.08888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -31.5099906921
y: 3.46103954315
theta: 3.36253476143
speed: 13.9079208374
id: 0
t: 137
xxx after update is x: -45.8892860413
y: 3.4195253849
theta: 3.45289516449
speed: 7.66900014877
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -45.8892860413
y: 3.4195253849
theta: 3.45289516449
speed: 7.66900014877
id: 0
t: 138
xxx after update is x: -46.4925117493
y: 3.41176009178
theta: 3.16900110245
speed: 7.50746774673
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141
xxx before update is x: -46.4925117493
y: 3.41176009178
theta: 3.16900110245
speed: 7.50746774673
id: 0
t: 139
xxx after update is x: -46.2242088318
y: 2.83957648277
theta: 3.17205548286
speed: 7.18298482895
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -46.2242088318
y: 2.83957648277
theta: 3.17205548286
speed: 7.18298482895
id: 0
t: 140
xxx after update is x: -46.2686843872
y: 3.19990158081
theta: 3.02618908882
speed: 7.5894370079
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.74290895462
y: -54.4411048889
theta: 4.69435358047
speed: 14.4759521484
id: 1
t: 135

sim.py in the sim.py statecallback function, msg is

x: -3.59515929222
y: -54.6017379761
theta: 4.66367673874
speed: 14.0163841248
id: 1
t: 136

sim.py in the sim.py statecallback function, msg is

x: -3.61031699181
y: -55.3906974792
theta: 4.66947174072
speed: 13.8644933701
id: 1
t: 137

sim.py in the sim.py statecallback function, msg is

x: -3.12860250473
y: -69.9261322021
theta: 4.65326738358
speed: 4.43690109253
id: 1
t: 138

sim.py in the sim.py statecallback function, msg is

x: -3.54532408714
y: -69.9123535156
theta: 4.74793386459
speed: 4.45263051987
id: 1
t: 139

sim.py in the sim.py statecallback function, msg is

x: -3.09589838982
y: -69.8931732178
theta: 4.63406181335
speed: 3.90323519707
id: 1
t: 140

sim.py in the sim.py statecallback function, msg is

x: -3.73292088509
y: -70.6291885376
theta: 4.69178295135
speed: 4.43412637711
id: 1
t: 141

222 self.state_dicts[msg.id][msg.t] is (-3.7329208850860596, -70.62918853759766, 4.6917829513549805, 4.434126377105713)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142
xxx before update is x: -46.2686843872
y: 3.19990158081
theta: 3.02618908882
speed: 7.5894370079
id: 0
t: 141
xxx after update is x: -46.8356742859
y: 3.32632184029
theta: 3.35633540154
speed: 7.18006801605
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143
xxx before update is x: -46.8356742859
y: 3.32632184029
theta: 3.35633540154
speed: 7.18006801605
id: 0
t: 142
xxx after update is x: -47.6977844238
y: 2.93096017838
theta: 3.1797952652
speed: 7.6985168457
id: py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142
xxx before update is x: -3.73292088509
y: -70.6291885376
theta: 4.69178295135
speed: 4.43412637711
id: 1
t: 141
xxx after update is x: -3.05362868309
y: -71.2783966064
theta: 4.82415866852
speed: 4.86572122574
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.05362868309
y: -71.2783966064
theta: 4.82415866852
speed: 4.86572122574
id: 1
t: 142
xxx after update is x: -3.55119109154
y: -70.5495376587
theta: 4.72434568405
speed: 4.99301147461
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:143
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5535999999999994]
sim.py in the sim.py statecallback function, msg is

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144
xxx before update is x: -3.55119109154
y: -70.5495376587
theta: 4.72434568405
speed: 4.99301147461
id: 1
t: 143
xxx after update is x: -3.41250872612
y: -71.7256088257
theta: 4.70553827286
speed: 5.3599281311
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
x: -46.2686843872
y: 3.19990158081
theta: 3.02618908882
speed: 7.5894370079
id: 0
t: 141

sim.py in the sim.py statecallback function, msg is

x: -46.8356742859
y: 3.32632184029
theta: 3.35633540154
speed: 7.18006801605
id: 0
t: 142

sim.py in the sim.py statecallback function, msg is

x: -47.6977844238
y: 2.93096017838
theta: 3.1797952652
speed: 7.6985168457
id: 0
t: 143

sim.py in the sim.py statecallback function, msg is

x: -47.1345291138
y: 3.24039006233
theta: 3.07596182823
speed: 7.8206205368
id: 0
t: 144

222 self.state_dicts[msg.id][msg.t] is (-47.13452911376953, 3.2403900623321533, 3.0759618282318115, 7.820620536804199)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145
xxx before update is x: -3.41250872612
y: -71.7256088257
theta: 4.70553827286
speed: 5.3599281311
id: 1
t: 144
xxx after update is x: -3.26199030876
y: -71.3795089722
theta: 4.63201236725
speed: 5.51653289795
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48799999999999794]
sim.py in the sim.py statecallback function, msg is

x: -47.9711380005
y: 3.11431074142
theta: 3.18071079254
speed: 8.08620071411
id: 0
t: 145

222 self.state_dicts[msg.id][msg.t] is (-47.97113800048828, 3.1143107414245605, 3.180710792541504, 8.086200714111328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146
xxx before update is x: -3.26199030876
y: -71.3795089722
theta: 4.63201236725
speed: 5.51653289795
id: 1
t: 145
xxx after update is x: -3.19608736038
y: -71.5773162842
theta: 4.63576936722
speed: 6.17381811142
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.19608736038
y: -71.5773162842
theta: 4.63576936722
speed:0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144
xxx before update is x: -47.6977844238
y: 2.93096017838
theta: 3.1797952652
speed: 7.6985168457
id: 0
t: 143
xxx after update is x: -47.1345291138
y: 3.24039006233
theta: 3.07596182823
speed: 7.8206205368
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145
xxx before update is x: -47.1345291138
y: 3.24039006233
theta: 3.07596182823
speed: 7.8206205368
id: 0
t: 144
xxx after update is x: -47.9711380005
y: 3.11431074142
theta: 3.18071079254
speed: 8.08620071411
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146
xxx before update is x: -47.9711380005
y: 3.11431074142
theta: 3.18071079254
speed: 8.08620071411
id: 0
t: 145
xxx after update is x: -48.156414032
y: 3.31798744202
theta: 3.13040423393
speed: 8.5911655426
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.0, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.05362868309
y: -71.2783966064
theta: 4.82415866852
speed: 4.86572122574
id: 1
t: 142

sim.py in the sim.py statecallback function, msg is

x: -3.55119109154
y: -70.5495376587
theta: 4.72434568405
speed: 4.99301147461
id: 1
t: 143

sim.py in the sim.py statecallback function, msg is

x: -3.41250872612
y: -71.7256088257
theta: 4.70553827286
speed: 5.3599281311
id: 1
t: 144

sim.py in the sim.py statecallback function, msg is

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147
xxx before update is x: -48.156414032
y: 3.31798744202
theta: 3.13040423393
speed: 8.5911655426
id: 0
t: 146
xxx after update is x: -48.4206504822
y: 3.18854999542
theta: 3.10748839378
speed: 8.19474220276
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
x: -3.26199030876
y: -71.3795089722
theta: 4.63201236725
speed: 5.51653289795
id: 1
t: 145

sim.py in the sim.py statecallback function, msg is

x: -3.19608736038
y: -71.5773162842
theta: 4.63576936722
speed: 6.17381811142
id: 1
t: 146

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -48.4206504822
y: 3.18854999542
theta: 3.10748839378
speed: 8.19474220276
id: 0
t: 147
current clock is 6.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:148
xxx before update is x: -48.4206504822
y: 3.18854999542
theta: 3.10748839378
speed: 8.19474220276
id: 0
t: 147
xxx after update is x: -48.6851806641
y: 3.5178694725
theta: 3.13307309151
speed: 8.89499664307
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.74624752998
y: -72.1209030151
theta: 4.85732555389
speed: 6.28569602966
id: 1
t: 147

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149
xxx before update i 6.17381811142
id: 1
t: 146
current clock is 6.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147
xxx before update is x: -3.19608736038
y: -71.5773162842
theta: 4.63576936722
speed: 6.17381811142
id: 1
t: 146
xxx after update is x: -3.74624752998
y: -72.1209030151
theta: 4.85732555389
speed: 6.28569602966
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148
xxx before update is x: -3.74624752998
y: -72.1209030151
theta: 4.85732555389
speed: 6.28569602966
id: 1
t: 147
xxx after update is x: -3.47327017784
y: -72.2507019043
theta: 4.83701133728
speed: 6.85488080978
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149
xxx before update is x: -3.47327017784
y: -72.2507019043
theta: 4.83701133728
speed: 6.85488080978
id: 1
t: 148
xxx after update is x: -2.96951746941
y: -72.0434265137
theta: 4.66254520416
speed: 7.20695352554
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5119999999999982]
sim.py in the sim.py statecallback function, msg is

x: -48.156414032
y: 3.31798744202
theta: 3.13040423393
speed: 8.5911655426
id: 0
t: 146

sim.py in the sim.py statecallback function, msg is

x: -48.4206504822
y: 3.18854999542
theta: 3.10748839378
speed: 8.19474220276
id: 0
t: 147

sim.py in the sim.py statecallback function, msg is

x: -48.6851806641
y: 3.5178694725
theta: 3.13307309151
speed: 8.89499664307
id: 0
t: 148

sim.py in the sim.py statecallback function, msg is

x: -49.3457260132
y: 3.17411589622
theta: 3.12435650826
speed: 9.17688560486
id: 0
t: 149

222 self.state_dicts[msg.id][msg.t] is (-49.345726013183594, 3.1741158962249756, 3.124356508255005, 9.176885604858398)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150
xxx before update is x: -2.96951746941
y: -72.0434265137
theta: 4.66254520416
speed: 7.20695352554
id: 1
t: 149
xxx after update is x: -3.22915410995
y: -72.9326324463
theta: 4.67223405838
speed: 7.48231935501
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151
xxx before update is x: -3.22915410995
y: -72.9326324463
theta: 4.67223405838
speed: 7.48231935501
id: 1
t: 150
xxx after update is x: -3.26819968224
y: -73.0043716431
theta: 5.01959514618
speed: 7.86112308502
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
sim.py in the sim.py statecallback function, msg is

x: -49.3459434509
y: 3.61365294456
theta: 3.12724924088
speed: 9.51979160309
id: 0
t: 150

sim.py in the sim.py statecallback function, msg is

x: -50.1513328552
y: 3.18207550049
theta: 3.0192232132
speed: 9.65137481689
id: 0
t: 151

222 self.state_dicts[msg.id][msg.t] iss x: -48.6851806641
y: 3.5178694725
theta: 3.13307309151
speed: 8.89499664307
id: 0
t: 148
xxx after update is x: -49.3457260132
y: 3.17411589622
theta: 3.12435650826
speed: 9.17688560486
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.47327017784
y: -72.2507019043
theta: 4.83701133728
speed: 6.85488080978
id: 1
t: 148

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -49.3457260132
y: 3.17411589622
theta: 3.12435650826
speed: 9.17688560486
id: 0
t: 149
xxx after update is x: -49.3459434509
y: 3.61365294456
theta: 3.12724924088
speed: 9.51979160309
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:150
sim.py in the sim.py statecallback function, msg is

x: -2.96951746941
y: -72.0434265137
theta: 4.66254520416
speed: 7.20695352554
id: 1
t: 149

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -49.3459434509
y: 3.61365294456
theta: 3.12724924088
speed: 9.51979160309
id: 0
t: 150
xxx after update is x: -50.1513328552
y: 3.18207550049
theta: 3.0192232132
speed: 9.65137481689
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:151
sim.py in the sim.py statecallback function, msg is

x: -3.22915410995
y: -72.9326324463
theta: 4.67223405838
speed: 7.48231935501
id: 1
t: 150

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152
xxx before update is x: -50.1513328552
y: 3.18207550049
theta: 3.0192232132
speed: 9.65137481689
id: 0
t: 151
xxx after update is x: -50.452255249
y: 3.11125040054
theta: 3.15086054802
speed: 9.87820148468
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.26819968224
y: -73.0043716431
theta: 5.01959514618
speed: 7.86112308502
id: 1
t: 151

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -50.452255249
y: 3.11125040054
theta: 3.15086054802
speed: 9.87820148468
id: 0
t: 152
xxx after update is x: -50.4244155884
y: 3.26728439331
theta: 3.16722297668
speed: 10.025765419
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:153
sim.py in the sim.py statecallback function, msg is

x: -3.20648860931
y: -73.4417266846
theta: 4.74710464478
speed: 7.83007764816
id: 1
t: 152

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -50.4244155884
y: 3.26728439331
theta: 3.16722297668
speed: 10.025765419
id: 0
t: 153
xxx after update is x: -51.3001823425
y: 3.77003407478
theta: 3.20234060287
speed: 10.5047874451
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:154
sim.py in the sim.py statecallback function, msg is

x: -2.98301959038
y: -73.4846496582
theta: 4.6835064888
speed: 8.57847690582
id: 1
t: 153

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -51.3001823425
y: 3.77003407478
theta: 3.20234060287
speed: 10.5047874451
id: 0
t: 154
current clock is 6.84444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.m (-50.15133285522461, 3.1820755004882812, 3.019223213195801, 9.651374816894531)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152
xxx before update is x: -3.26819968224
y: -73.0043716431
theta: 5.01959514618
speed: 7.86112308502
id: 1
t: 151
xxx after update is x: -3.20648860931
y: -73.4417266846
theta: 4.74710464478
speed: 7.83007764816
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.502399999999998]
sim.py in the sim.py statecallback function, msg is

x: -50.452255249
y: 3.11125040054
theta: 3.15086054802
speed: 9.87820148468
id: 0
t: 152

222 self.state_dicts[msg.id][msg.t] is (-50.45225524902344, 3.111250400543213, 3.150860548019409, 9.878201484680176)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153
xxx before update is x: -3.20648860931
y: -73.4417266846
theta: 4.74710464478
speed: 7.83007764816
id: 1
t: 152
xxx after update is x: -2.98301959038
y: -73.4846496582
theta: 4.6835064888
speed: 8.57847690582
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:154
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.98301959038
y: -73.4846496582
theta: 4.6835064888
speed: 8.57847690582
id: 1
t: 153
current clock is 6.8
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -2.98301959038
y: -73.4846496582
theta: 4.6835064888
speed: 8.57847690582
id: 1
t: 153
xxx after update is x: -3.29135537148
y: -73.9422073364
theta: 4.86664438248
speed: 9.06793117523
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155
xxx before update is x: -3.29135537148
y: -73.9422073364
theta: 4.86664438248
speed: 9.06793117523
id: 1
t: 154
xxx after update is x: -3.21338391304
y: -74.6574859619
theta: 4.68295717239
speed: 9.16681575775
id: 1
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.473599999999998]
sim.py in the sim.py statecallback function, msg is

x: -50.4244155884
y: 3.26728439331
theta: 3.16722297668
speed: 10.025765419
id: 0
t: 153

sim.py in the sim.py statecallback function, msg is

x: -51.3001823425
y: 3.77003407478
theta: 3.20234060287
speed: 10.5047874451
id: 0
t: 154

sim.py in the sim.py statecallback function, msg is

x: -52.1900444031
y: 2.79059505463
theta: 3.12079071999
speed: 11.0594501495
id: 0
t: 155

222 self.state_dicts[msg.id][msg.t] is (-52.19004440307617, 2.790595054626465, 3.120790719985962, 11.059450149536133)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin functionan_init:maneuver_negotiatir.py in the try maneuver function update -. strat

xxx before update is x: -51.3001823425
y: 3.77003407478
theta: 3.20234060287
speed: 10.5047874451
id: 0
t: 154
xxx after update is x: -52.1900444031
y: 2.79059505463
theta: 3.12079071999
speed: 11.0594501495
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:155
sim.py in the sim.py statecallback function, msg is

x: -3.29135537148
y: -73.9422073364
theta: 4.86664438248
speed: 9.06793117523
id: 1
t: 154

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -52.1900444031
y: 2.79059505463
theta: 3.12079071999
speed: 11.0594501495
id: 0
t: 155
xxx after update is x: -52.0232315063
y: 2.65068101883
theta: 3.18771600723
speed: 10.8896780014
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:156
sim.py in the sim.py statecallback function, msg is

x: -3.21338391304
y: -74.6574859619
theta: 4.68295717239
speed: 9.16681575775
id: 1
t: 155

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -52.0232315063
y: 2.65068101883
theta: 3.18771600723
speed: 10.8896780014
id: 0
t: 156
xxx after update is x: -52.819442749
y: 3.06948781013
theta: 3.09594655037
speed: 11.2728366852
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:157
sim.py in the sim.py statecallback function, msg is

x: -2.87580108643
y: -75.1251602173
theta: 4.65111494064
speed: 9.38514995575
id: 1
t: 156

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158
xxx before update is x: -52.819442749
y: 3.06948781013
theta: 3.09594655037
speed: 11.2728366852
id: 0
t: 157
xxx after update is x: -53.8177452087
y: 3.2283513546
theta: 3.18903684616
speed: 11.1229000092
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.14455962181
y: -75.2903366089
theta: 4.64573335648
speed: 9.7948141098
id: 1
t: 157

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -53.8177452087
y: 3.2283513546
theta: 3.18903684616
speed: 11.1229000092
id: 0
t: 158
xxx after update is x: -53.7508468628
y: 2.88576412201
theta: 3.36083316803
speed: 10.8991479874
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:159
sim.py in the sim.py statecallback function, msg is

x: -3.21723365784
y: -76.1172790527
theta: 4.64960861206
speed: 10.2917909622
id: 1
t: 158

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -53.7508468628
y: 2.88576412201
theta: 3.36083316803
speed: 10.8991479874
id: 0
t: 159
xxx after update is x: -54.5312576294
y: 2.77952337265
theta: 3.16713428497
speed: 10.4851427078
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:160
sim.py in the sim.py statecallback function, msg is

x: -3.70248842239
y: -77.0074157715
theta: 4.73793649673
speed: 10.792889595
id: 1
t: 159

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -54.5312576294
y: 2.77952337265
theta: 3.16713428497
speed: 10.4851427078
id: 0
t: 160
xxx after update is x: -55.1309242249
y: 3.38626050949
theta: 3.24344205856
speed: 10.0271120071
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
leave th, finish the n times spin:156xxx before update is x: -3.21338391304
y: -74.6574859619
theta: 4.68295717239
speed: 9.16681575775
id: 1
t: 155
xxx after update is x: -2.87580108643
y: -75.1251602173
theta: 4.65111494064
speed: 9.38514995575
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157
xxx before update is x: -2.87580108643
y: -75.1251602173
theta: 4.65111494064
speed: 9.38514995575
id: 1
t: 156
xxx after update is x: -3.14455962181
y: -75.2903366089
theta: 4.64573335648
speed: 9.7948141098
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4943999999999979]
sim.py in the sim.py statecallback function, msg is

x: -52.0232315063
y: 2.65068101883
theta: 3.18771600723
speed: 10.8896780014
id: 0
t: 156

sim.py in the sim.py statecallback function, msg is

x: -52.819442749
y: 3.06948781013
theta: 3.09594655037
speed: 11.2728366852
id: 0
t: 157

222 self.state_dicts[msg.id][msg.t] is (-52.81944274902344, 3.0694878101348877, 3.0959465503692627, 11.272836685180664)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158
xxx before update is x: -3.14455962181
y: -75.2903366089
theta: 4.64573335648
speed: 9.7948141098
id: 1
t: 157
xxx after update is x: -3.21723365784
y: -76.1172790527
theta: 4.64960861206
speed: 10.2917909622
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159
xxx before update is x: -3.21723365784
y: -76.1172790527
theta: 4.64960861206
speed: 10.2917909622
id: 1
t: 158
xxx after update is x: -3.70248842239
y: -77.0074157715
theta: 4.73793649673
speed: 10.792889595
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.70248842239
y: -77.0074157715
theta: 4.73793649673
speed: 10.792889595
id: 1
t: 159
xxx after update is x: -3.3211286068
y: -76.8155899048
theta: 4.60351705551
speed: 10.7948942184
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:160
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5183999999999984]
sim.py in the sim.py statecallback function, msg is

x: -53.8177452087
y: 3.2283513546
theta: 3.18903684616
speed: 11.1229000092
id: 0
t: 158

sim.py in the sim.py statecallback function, msg is

x: -53.7508468628
y: 2.88576412201
theta: 3.36083316803
speed: 10.8991479874
id: 0
t: 159

sim.py in the sim.py statecallback function, msg is

x: -54.5312576294
y: 2.77952337265
theta: 3.16713428497
speed: 10.4851427078
id: 0
t: 160

222 self.state_dicts[msg.id][msg.t] is (-54.53125762939453, 2.7795233726501465, 3.1671342849731445, 10.485142707824707)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:161
xxx before update is x: -3.3211286068
y: -76.8155899048
theta: 4.60351705551
speed: 10.7948942184
id: 1
t: 160
xxx after update is x: -3.33671474457
y: -77.1884765625
theta: 4.51994991302
speed: 11.2504224777
id: 1
e update function 
in spin function, finish the n times spin:161
sim.py in the sim.py statecallback function, msg is

x: -3.3211286068
y: -76.8155899048
theta: 4.60351705551
speed: 10.7948942184
id: 1
t: 160

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -55.1309242249
y: 3.38626050949
theta: 3.24344205856
speed: 10.0271120071
id: 0
t: 161
xxx after update is x: -55.196144104
y: 2.96631598473
theta: 3.1561961174
speed: 9.87427520752
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162
sim.py in the sim.py statecallback function, msg is

x: -3.33671474457
y: -77.1884765625
theta: 4.51994991302
speed: 11.2504224777
id: 1
t: 161

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -55.196144104
y: 2.96631598473
theta: 3.1561961174
speed: 9.87427520752
id: 0
t: 162
current clock is 7.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
xxx before update is x: -55.196144104
y: 2.96631598473
theta: 3.1561961174
speed: 9.87427520752
id: 0
t: 162
xxx after update is x: -55.997303009
y: 3.12986850739
theta: 2.93918728828
speed: 9.28732872009
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:163
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -55.997303009
y: 3.12986850739
theta: 2.93918728828
speed: 9.28732872009
id: 0
t: 163
xxx after update is x: -56.4567146301
y: 3.63441109657
theta: 2.96509671211
speed: 9.10012149811
id: 0
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:164
sim.py in the sim.py statecallback function, msg is

x: -2.52704262733
y: -77.9091567993
theta: 4.65171909332
speed: 12.1854829788
id: 1
t: 162

sim.py in the sim.py statecallback function, msg is

x: -3.10420203209
y: -78.2793502808
theta: 4.76262283325
speed: 11.9802207947
id: 1
t: 163

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -56.4567146301
y: 3.63441109657
theta: 2.96509671211
speed: 9.10012149811
id: 0
t: 164
xxx after update is x: -56.3112754822
y: 3.36024451256
theta: 3.10339283943
speed: 8.99334144592
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:165
sim.py in the sim.py statecallback function, msg is

x: -3.41191601753
y: -79.0728912354
theta: 4.9559173584
speed: 12.6050252914
id: 1
t: 164

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -56.3112754822
y: 3.36024451256
theta: 3.10339283943
speed: 8.99334144592
id: 0
t: 165
xxx after update is x: -57.2006225586
y: 3.57163238525
theta: 3.25258874893
speed: 8.67767429352
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166
sim.py in the sim.py statecallback function, msg is

x: -2.96918702126
y: -79.1599349976
theta: 4.78871250153
speed: 12.5792961121
id: 1
t: 165

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -57.2006225586
y: 3.57163238525
theta: 3.25258874893
speed: 8.67767429352
id: 0
t: 166
xxx after update is x: -57.2619171143
y: 2.54261684418
theta: 3.17204070091
speed: 8.t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5215999999999985]
sim.py in the sim.py statecallback function, msg is

x: -55.1309242249
y: 3.38626050949
theta: 3.24344205856
speed: 10.0271120071
id: 0
t: 161

222 self.state_dicts[msg.id][msg.t] is (-55.130924224853516, 3.386260509490967, 3.2434420585632324, 10.027112007141113)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:162
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.33671474457
y: -77.1884765625
theta: 4.51994991302
speed: 11.2504224777
id: 1
t: 161
current clock is 7.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -3.33671474457
y: -77.1884765625
theta: 4.51994991302
speed: 11.2504224777
id: 1
t: 161
xxx after update is x: -2.52704262733
y: -77.9091567993
theta: 4.65171909332
speed: 12.1854829788
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -2.52704262733
y: -77.9091567993
theta: 4.65171909332
speed: 12.1854829788
id: 1
t: 162
xxx after update is x: -3.10420203209
y: -78.2793502808
theta: 4.76262283325
speed: 11.9802207947
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164
xxx before update is x: -3.10420203209
y: -78.2793502808
theta: 4.76262283325
speed: 11.9802207947
id: 1
t: 163
xxx after update is x: -3.41191601753
y: -79.0728912354
theta: 4.9559173584
speed: 12.6050252914
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.45439999999999814]
sim.py in the sim.py statecallback function, msg is

x: -55.196144104
y: 2.96631598473
theta: 3.1561961174
speed: 9.87427520752
id: 0
t: 162

sim.py in the sim.py statecallback function, msg is

x: -55.997303009
y: 3.12986850739
theta: 2.93918728828
speed: 9.28732872009
id: 0
t: 163

sim.py in the sim.py statecallback function, msg is

x: -56.4567146301
y: 3.63441109657
theta: 2.96509671211
speed: 9.10012149811
id: 0
t: 164

222 self.state_dicts[msg.id][msg.t] is (-56.45671463012695, 3.634411096572876, 2.9650967121124268, 9.10012149810791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165
xxx before update is x: -3.41191601753
y: -79.0728912354
theta: 4.9559173584
speed: 12.6050252914
id: 1
t: 164
xxx after update is x: -2.96918702126
y: -79.1599349976
theta: 4.78871250153
speed: 12.5792961121
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:166
xxx before update is x: -2.96918702126
y: -79.1599349976
theta: 4.78871250153
speed: 12.5792961121
id: 1
t: 165
xxx after update is x: -3.01550388336
y: -79.7325515747
theta: 4.50093507767
speed: 13.0528726578
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5007999999999979]
sim.py in the sim.py statecallback function, msg is

x: -56.3112754822
y: 3.36024451256
theta: 3.10339283943
speed: 8.99334144592
id: 0
t: 165

sim.py in the sim.py statecallback function, msg is

x: -57.2006225586
y: 3.57163238525
theta: 3.25258874893
speed: 8.67767429352
id: 0
t: 166

222 self.state_dicts[msg.id][msg.t] is (-57.20062255859375, 3.5716323852539062, 3.2525887489318848, 8.677674293518066)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:167
xxx before update is x: -3.01550388336
y: -79.7325515747
theta: 4.50093507767
speed: 13.0528726578
id: 1
t: 166
xxx after update is x: -3.72155189514
y: -80.779296875
theta: 4.78103399277
speed: 13.9597110748
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168
xxx before update is x: -3.72155189514
y: -80.779296875
theta: 4.78103399277
speed: 13.9597110748
id: 1
t: 167
xxx after update is x: -3.28918886185
y: -81.1601257324
theta: 4.73526239395
speed: 13.75182724
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4623999999999981]
sim.py in the sim.py statecallback function, msg is

x: -57.2619171143
y: 2.54261684418
theta: 3.17204070091
speed: 8.36189651489
id: 0
t: 167

sim.py in the sim.py statecallback function, msg is

x: -57.3395309448
y: 2.78751039505
theta: 3.02073764801
speed: 8.34524822235
id: 0
t: 168

222 self.state_dicts[msg.id][msg.t] is (-57.33953094482422, 2.787510395050049, 3.020737648010254, 8.345248222351074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169
xxx before update is x: -3.28918886185
y: -81.1601257324
theta: 4.73526239395
speed: 13.75182724
id: 1
t: 168
xxx after update is x: -3.602186203
y: -81.5475769043
theta: 4.56461811066
speed: 13.9290704727
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170
xxx before update is x: -3.602186203
y: -81.5475769043
theta: 4.56461811066
speed: 13.9290704727
id: 1
t: 169
xxx after update is x: -2.82207775116
y: -83.0278396606
theta: 4.82356500626
speed: 14.0175418854
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.82207775116
y: -83.0278396606
theta: 4.82356500626
speed: 14.0175418854
id: 1
t: 170
current clock is 7.55555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -2.82207775116
y: -8336189651489
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:167
sim.py in the sim.py statecallback function, msg is

x: -3.01550388336
y: -79.7325515747
theta: 4.50093507767
speed: 13.0528726578
id: 1
t: 166

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:168
xxx before update is x: -57.2619171143
y: 2.54261684418
theta: 3.17204070091
speed: 8.36189651489
id: 0
t: 167
xxx after update is x: -57.3395309448
y: 2.78751039505
theta: 3.02073764801
speed: 8.34524822235
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.72155189514
y: -80.779296875
theta: 4.78103399277
speed: 13.9597110748
id: 1
t: 167

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -57.3395309448
y: 2.78751039505
theta: 3.02073764801
speed: 8.34524822235
id: 0
t: 168
xxx after update is x: -58.4718818665
y: 3.59695649147
theta: 3.12849569321
speed: 7.91957569122
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:169
sim.py in the sim.py statecallback function, msg is

x: -3.28918886185
y: -81.1601257324
theta: 4.73526239395
speed: 13.75182724
id: 1
t: 168

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170
xxx before update is x: -58.4718818665
y: 3.59695649147
theta: 3.12849569321
speed: 7.91957569122
id: 0
t: 169
xxx after update is x: -58.799156189
y: 3.04328298569
theta: 3.27082252502
speed: 7.7943148613
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.602186203
y: -81.5475769043
theta: 4.56461811066
speed: 13.9290704727
id: 1
t: 169

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -58.799156189
y: 3.04328298569
theta: 3.27082252502
speed: 7.7943148613
id: 0
t: 170
current clock is 7.55555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -58.799156189
y: 3.04328298569
theta: 3.27082252502
speed: 7.7943148613
id: 0
t: 170
xxx after update is x: -58.5041427612
y: 2.81306433678
theta: 3.17749428749
speed: 7.78853940964
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -2.82207775116
y: -83.0278396606
theta: 4.82356500626
speed: 14.0175418854
id: 1
t: 170

leave the update function 
in spin function, finish the n times spin:171
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -58.5041427612
y: 2.81306433678
theta: 3.17749428749
speed: 7.78853940964
id: 0
t: 171
xxx after update is x: -59.3741798401
y: 3.27605295181
theta: 3.15843105316
speed: 7.14473247528
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:172
sim.py in the sim.py statecallback function, msg is

x: -2.97338628769
y: -82.4183502197
theta: 4.67445373535
speed: 13.5712842941
id: 1
t: 171

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -59.3741798401
y: 3.27605295181
theta: 3.15843105316
speed: .0278396606
theta: 4.82356500626
speed: 14.0175418854
id: 1
t: 170
xxx after update is x: -2.97338628769
y: -82.4183502197
theta: 4.67445373535
speed: 13.5712842941
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172
xxx before update is x: -2.97338628769
y: -82.4183502197
theta: 4.67445373535
speed: 13.5712842941
id: 1
t: 171
xxx after update is x: -3.26267385483
y: -83.9883270264
theta: 4.59396600723
speed: 13.8115987778
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.481599999999998]
sim.py in the sim.py statecallback function, msg is

x: -58.4718818665
y: 3.59695649147
theta: 3.12849569321
speed: 7.91957569122
id: 0
t: 169

sim.py in the sim.py statecallback function, msg is

x: -58.799156189
y: 3.04328298569
theta: 3.27082252502
speed: 7.7943148613
id: 0
t: 170

sim.py in the sim.py statecallback function, msg is

x: -58.5041427612
y: 2.81306433678
theta: 3.17749428749
speed: 7.78853940964
id: 0
t: 171

sim.py in the sim.py statecallback function, msg is

x: -59.3741798401
y: 3.27605295181
theta: 3.15843105316
speed: 7.14473247528
id: 0
t: 172

222 self.state_dicts[msg.id][msg.t] is (-59.37417984008789, 3.276052951812744, 3.158431053161621, 7.144732475280762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173
xxx before update is x: -3.26267385483
y: -83.9883270264
theta: 4.59396600723
speed: 13.8115987778
id: 1
t: 172
xxx after update is x: -3.09008741379
y: -84.3038024902
theta: 4.61707544327
speed: 13.5744991302
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175
xxx before update is x: -3.09008741379
y: -84.3038024902
theta: 4.61707544327
speed: 13.5744991302
id: 1
t: 173
xxx after update is x: -3.26166987419
y: -86.3464508057
theta: 4.7575006485
speed: 13.8279008865
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.26166987419
y: -86.3464508057
theta: 4.7575006485
speed: 13.8279008865
id: 1
t: 174
xxx after update is x: -3.07327198982
y: -85.9408111572
theta: 4.6102643013
speed: 13.927526474
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176
xxx before update is x: -3.07327198982
y: -85.9408111572
theta: 4.6102643013
speed: 13.927526474
id: 1
t: 175
xxx after update is x: -3.20694708824
y: -86.0910263062
theta: 4.74335241318
speed: 14.0537166595
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.505599999999998]
sim.py in the sim.py statecallback function, msg is

x: -59.1528816223
y: 3.20592451096
theta: 3.06545948982
speed: 6.80010223389
id: 0
t: 173

sim.py in the sim.py statecallback function, msg is

x: -59.9890632629
y: 3.22584080696
theta: 3.2158176899
speed: 6.79026603699
id: 0
t: 174

sim.py in the sim.py statecallback function, ms7.14473247528
id: 0
t: 172
xxx after update is x: -59.1528816223
y: 3.20592451096
theta: 3.06545948982
speed: 6.80010223389
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:173
sim.py in the sim.py statecallback function, msg is

x: -3.26267385483
y: -83.9883270264
theta: 4.59396600723
speed: 13.8115987778
id: 1
t: 172

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -59.1528816223
y: 3.20592451096
theta: 3.06545948982
speed: 6.80010223389
id: 0
t: 173
xxx after update is x: -59.9890632629
y: 3.22584080696
theta: 3.2158176899
speed: 6.79026603699
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:174
sim.py in the sim.py statecallback function, msg is

x: -3.09008741379
y: -84.3038024902
theta: 4.61707544327
speed: 13.5744991302
id: 1
t: 173

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -59.9890632629
y: 3.22584080696
theta: 3.2158176899
speed: 6.79026603699
id: 0
t: 174
xxx after update is x: -60.5307312012
y: 3.6509976387
theta: 3.29798078537
speed: 5.99334144592
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:175
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -60.5307312012
y: 3.6509976387
theta: 3.29798078537
speed: 5.99334144592
id: 0
t: 175
xxx after update is x: -60.7829093933
y: 3.15894842148
theta: 2.90881180763
speed: 6.21001577377
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.26166987419
y: -86.3464508057
theta: 4.7575006485
speed: 13.8279008865
id: 1
t: 174

sim.py in the sim.py statecallback function, msg is

x: -3.07327198982
y: -85.9408111572
theta: 4.6102643013
speed: 13.927526474
id: 1
t: 175

leave the update function 
in spin function, finish the n times spin:176
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -60.7829093933
y: 3.15894842148
theta: 2.90881180763
speed: 6.21001577377
id: 0
t: 176
xxx after update is x: -60.4191360474
y: 2.92451071739
theta: 3.05664467812
speed: 5.70464134216
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:177
sim.py in the sim.py statecallback function, msg is

x: -3.20694708824
y: -86.0910263062
theta: 4.74335241318
speed: 14.0537166595
id: 1
t: 176

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -60.4191360474
y: 2.92451071739
theta: 3.05664467812
speed: 5.70464134216
id: 0
t: 177
xxx after update is x: -60.7801322937
y: 3.05017018318
theta: 3.14502692223
speed: 5.46196126938
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:178
sim.py in the sim.py statecallback function, msg is

x: -3.26722502708
y: -86.8327789307
theta: 4.62691736221
speed: 13.8222198486
id: 1
t: 177

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -60.7801322937
y: 3.05017018318
theta: 3.14502692223
speed: 5.46196126938
id: 0
t: 178
xxx after update is x: -60.7760314941
y: 3.17953085899
theta: 3.19162607193
speed: 5.08146286011
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:179
sim.py in the sim.py statecallback function, msg is

x: -3.82276177406
y: -87.3117675781
theta: 4.83322143555
speedg is

x: -60.5307312012
y: 3.6509976387
theta: 3.29798078537
speed: 5.99334144592
id: 0
t: 175

sim.py in the sim.py statecallback function, msg is

x: -60.7829093933
y: 3.15894842148
theta: 2.90881180763
speed: 6.21001577377
id: 0
t: 176

222 self.state_dicts[msg.id][msg.t] is (-60.78290939331055, 3.1589484214782715, 2.9088118076324463, 6.210015773773193)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177
xxx before update is x: -3.20694708824
y: -86.0910263062
theta: 4.74335241318
speed: 14.0537166595
id: 1
t: 176
xxx after update is x: -3.26722502708
y: -86.8327789307
theta: 4.62691736221
speed: 13.8222198486
id: 1
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4911999999999979]
sim.py in the sim.py statecallback function, msg is

x: -60.4191360474
y: 2.92451071739
theta: 3.05664467812
speed: 5.70464134216
id: 0
t: 177

222 self.state_dicts[msg.id][msg.t] is (-60.41913604736328, 2.9245107173919678, 3.0566446781158447, 5.704641342163086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178
xxx before update is x: -3.26722502708
y: -86.8327789307
theta: 4.62691736221
speed: 13.8222198486
id: 1
t: 177
xxx after update is x: -3.82276177406
y: -87.3117675781
theta: 4.83322143555
speed: 13.6130628586
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.48799999999999794]
sim.py in the sim.py statecallback function, msg is

x: -60.7801322937
y: 3.05017018318
theta: 3.14502692223
speed: 5.46196126938
id: 0
t: 178

222 self.state_dicts[msg.id][msg.t] is (-60.78013229370117, 3.0501701831817627, 3.145026922225952, 5.461961269378662)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.82276177406
y: -87.3117675781
theta: 4.83322143555
speed: 13.6130628586
id: 1
t: 178
current clock is 7.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
xxx before update is x: -3.82276177406
y: -87.3117675781
theta: 4.83322143555
speed: 13.6130628586
id: 1
t: 178
xxx after update is x: -3.60837435722
y: -88.1784591675
theta: 4.80991888046
speed: 14.0502929688
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -3.60837435722
y: -88.1784591675
theta: 4.80991888046
speed: 14.0502929688
id: 1
t: 179
xxx after update is x: -3.34024834633
y: -88.8934631348
theta: 4.57759094238
speed: 14.0188550949
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in sp: 13.6130628586
id: 1
t: 178

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -60.7760314941
y: 3.17953085899
theta: 3.19162607193
speed: 5.08146286011
id: 0
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:181
xxx before update is x: -60.7760314941
y: 3.17953085899
theta: 3.19162607193
speed: 5.08146286011
id: 0
t: 179
xxx after update is x: -62.3045692444
y: 3.36059904099
theta: 3.19172692299
speed: 4.71775007248
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -62.3045692444
y: 3.36059904099
theta: 3.19172692299
speed: 4.71775007248
id: 0
t: 180
xxx after update is x: -61.1652526855
y: 2.76926636696
theta: 3.18722391129
speed: 4.84105348587
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.60837435722
y: -88.1784591675
theta: 4.80991888046
speed: 14.0502929688
id: 1
t: 179

sim.py in the sim.py statecallback function, msg is

x: -3.34024834633
y: -88.8934631348
theta: 4.57759094238
speed: 14.0188550949
id: 1
t: 180

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -61.1652526855
y: 2.76926636696
theta: 3.18722391129
speed: 4.84105348587
id: 0
t: 181
xxx after update is x: -61.550453186
y: 2.89719510078
theta: 3.23960828781
speed: 4.40845060349
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:182
sim.py in the sim.py statecallback function, msg is

x: -3.10387158394
y: -89.3504638672
theta: 4.75440883636
speed: 13.9811782837
id: 1
t: 181

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -61.550453186
y: 2.89719510078
theta: 3.23960828781
speed: 4.40845060349
id: 0
t: 182
xxx after update is x: -61.2767601013
y: 3.49474096298
theta: 3.27651000023
speed: 4.28638267517
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:183
sim.py in the sim.py statecallback function, msg is

x: -3.51220941544
y: -89.6362991333
theta: 4.66863536835
speed: 14.2162456512
id: 1
t: 182

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -61.2767601013
y: 3.49474096298
theta: 3.27651000023
speed: 4.28638267517
id: 0
t: 183
xxx after update is x: -62.1779899597
y: 3.58753561974
theta: 3.2108194828
speed: 3.79154086113
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:184
sim.py in the sim.py statecallback function, msg is

x: -3.23692011833
y: -90.4697036743
theta: 4.64637088776
speed: 13.941567421
id: 1
t: 183

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -62.1779899597
y: 3.58753561974
theta: 3.2108194828
speed: 3.79154086113
id: 0
t: 184
xxx after update is x: -62.518913269
y: 3.29226565361
theta: 3.31515169144
speed: 3.69622945786
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:18in function, finish the n times spin:181xxx before update is x: -3.34024834633
y: -88.8934631348
theta: 4.57759094238
speed: 14.0188550949
id: 1
t: 180
xxx after update is x: -3.10387158394
y: -89.3504638672
theta: 4.75440883636
speed: 13.9811782837
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182
xxx before update is x: -3.10387158394
y: -89.3504638672
theta: 4.75440883636
speed: 13.9811782837
id: 1
t: 181
xxx after update is x: -3.51220941544
y: -89.6362991333
theta: 4.66863536835
speed: 14.2162456512
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5151999999999983]
sim.py in the sim.py statecallback function, msg is

x: -60.7760314941
y: 3.17953085899
theta: 3.19162607193
speed: 5.08146286011
id: 0
t: 179

sim.py in the sim.py statecallback function, msg is

x: -62.3045692444
y: 3.36059904099
theta: 3.19172692299
speed: 4.71775007248
id: 0
t: 180

sim.py in the sim.py statecallback function, msg is

x: -61.1652526855
y: 2.76926636696
theta: 3.18722391129
speed: 4.84105348587
id: 0
t: 181

sim.py in the sim.py statecallback function, msg is

x: -61.550453186
y: 2.89719510078
theta: 3.23960828781
speed: 4.40845060349
id: 0
t: 182

222 self.state_dicts[msg.id][msg.t] is (-61.550453186035156, 2.8971951007843018, 3.2396082878112793, 4.408450603485107)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183
xxx before update is x: -3.51220941544
y: -89.6362991333
theta: 4.66863536835
speed: 14.2162456512
id: 1
t: 182
xxx after update is x: -3.23692011833
y: -90.4697036743
theta: 4.64637088776
speed: 13.941567421
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.23692011833
y: -90.4697036743
theta: 4.64637088776
speed: 13.941567421
id: 1
t: 183
xxx after update is x: -2.97751069069
y: -91.7198181152
theta: 4.80029916763
speed: 13.8332147598
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:184
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:185
xxx before update is x: -2.97751069069
y: -91.7198181152
theta: 4.80029916763
speed: 13.8332147598
id: 1
t: 184
xxx after update is x: -3.38733911514
y: -91.7931671143
theta: 4.55061435699
speed: 13.8871078491
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
sim.py in the sim.py statecallback function, msg is

x: -61.2767601013
y: 3.49474096298
theta: 3.27651000023
speed: 4.28638267517
id: 0
t: 183

sim.py in the sim.py statecallback function, msg is

x: -62.1779899597
y: 3.58753561974
theta: 3.2108194828
speed: 3.79154086113
id: 0
t: 184

sim.py in the sim.py statecallback function, msg is

x: -62.518913269
y: 3.29226565361
theta: 3.31515169144
speed: 3.69622945786
id: 0
t: 185

222 self.state_dicts[msg.id][msg.t] is (-62.51891326904297, 3.2922656536102295, 3.3151516914367676, 3.6962294578552246)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(se5
sim.py in the sim.py statecallback function, msg is

x: -2.97751069069
y: -91.7198181152
theta: 4.80029916763
speed: 13.8332147598
id: 1
t: 184

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -62.518913269
y: 3.29226565361
theta: 3.31515169144
speed: 3.69622945786
id: 0
t: 185
xxx after update is x: -63.3406944275
y: 3.53033685684
theta: 3.30969262123
speed: 3.4211127758
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:186
sim.py in the sim.py statecallback function, msg is

x: -3.38733911514
y: -91.7931671143
theta: 4.55061435699
speed: 13.8871078491
id: 1
t: 185

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.3406944275
y: 3.53033685684
theta: 3.30969262123
speed: 3.4211127758
id: 0
t: 186
xxx after update is x: -62.97057724
y: 3.10029959679
theta: 3.1565964222
speed: 3.26727986336
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:187
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -62.97057724
y: 3.10029959679
theta: 3.1565964222
speed: 3.26727986336
id: 0
t: 187
current clock is 8.31111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -3.47134613991
y: -92.3162231445
theta: 4.67658281326
speed: 13.9264039993
id: 1
t: 186

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189
xxx before update is x: -62.97057724
y: 3.10029959679
theta: 3.1565964222
speed: 3.26727986336
id: 0
t: 187
xxx after update is x: -62.2889709473
y: 2.7667427063
theta: 3.10055947304
speed: 2.51647138596
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
xxx before update is x: -62.2889709473
y: 2.7667427063
theta: 3.10055947304
speed: 2.51647138596
id: 0
t: 188
xxx after update is x: -63.1375656128
y: 2.93166089058
theta: 3.0682182312
speed: 2.58209514618
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.47184252739
y: -93.6824264526
theta: 4.69452762604
speed: 13.7646102905
id: 1
t: 187

sim.py in the sim.py statecallback function, msg is

x: -2.72171068192
y: -93.3998718262
theta: 4.43361997604
speed: 13.8874311447
id: 1
t: 188

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.1375656128
y: 2.93166089058
theta: 3.0682182312
speed: 2.58209514618
id: 0
t: 189
xxx after update is x: -63.2101325989
y: 3.26653528214
theta: 3.03440856934
speed: 2.40626692772
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190
sim.py in the sim.py statecallback function, msg is

x: -2.9495010376
y: -93.9965209961
theta: 4.90788269043
speed: 13.8735723495
id: 1
t: 189

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.2101325989
y: 3.26653528214
theta: 3.03440856934
speed: 2.40626692772
id: 0
t: 190
xxx after update is x: -62.8006210327
y: 3.72661018372
theta: 3.16502857208
speed: 2.11475777626
id: 0
t: 191
maneuver_negotiatir.py finish the ulf.id == 1):
xxx before update is x: -3.38733911514
y: -91.7931671143
theta: 4.55061435699
speed: 13.8871078491
id: 1
t: 185
xxx after update is x: -3.47134613991
y: -92.3162231445
theta: 4.67658281326
speed: 13.9264039993
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:186
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.47134613991
y: -92.3162231445
theta: 4.67658281326
speed: 13.9264039993
id: 1
t: 186
xxx after update is x: -3.47184252739
y: -93.6824264526
theta: 4.69452762604
speed: 13.7646102905
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:187
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.47184252739
y: -93.6824264526
theta: 4.69452762604
speed: 13.7646102905
id: 1
t: 187
xxx after update is x: -2.72171068192
y: -93.3998718262
theta: 4.43361997604
speed: 13.8874311447
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:188
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.72171068192
y: -93.3998718262
theta: 4.43361997604
speed: 13.8874311447
id: 1
t: 188
current clock is 8.35555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189
xxx before update is x: -2.72171068192
y: -93.3998718262
theta: 4.43361997604
speed: 13.8874311447
id: 1
t: 188
xxx after update is x: -2.9495010376
y: -93.9965209961
theta: 4.90788269043
speed: 13.8735723495
id: 1
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5087999999999981]
sim.py in the sim.py statecallback function, msg is

x: -63.3406944275
y: 3.53033685684
theta: 3.30969262123
speed: 3.4211127758
id: 0
t: 186

sim.py in the sim.py statecallback function, msg is

x: -62.97057724
y: 3.10029959679
theta: 3.1565964222
speed: 3.26727986336
id: 0
t: 187

sim.py in the sim.py statecallback function, msg is

x: -62.2889709473
y: 2.7667427063
theta: 3.10055947304
speed: 2.51647138596
id: 0
t: 188

sim.py in the sim.py statecallback function, msg is

x: -63.1375656128
y: 2.93166089058
theta: 3.0682182312
speed: 2.58209514618
id: 0
t: 189

222 self.state_dicts[msg.id][msg.t] is (-63.13756561279297, 2.9316608905792236, 3.068218231201172, 2.582095146179199)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:190
xxx before update is x: -2.9495010376
y: -93.9965209961
theta: 4.90788269043
speed: 13.8735723495
id: 1
t: 189
xxx after update is x: -3.26362872124
y: -95.0718231201
theta: 4.809030056
speed: 13.8829879761
id: 1
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.4959999999999979]
sim.py in the sim.py statecallback function, msg is

x: -63.2101325989
y: 3.26653528214
theta: 3.03440856934
speed: 2.40626692772
id: 0
t: 190

222 self.state_dicts[msg.id][msg.t] is (-63.21013259887695, 3.2665352821350098, 3.0344085693359375, 2.406266927719116)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:191
xxx before update is x: -3.26362872124
y: -95.0718231201
theta: 4.809030056
speed: 13.8829879761
id: 1
t: 190
xxx after update is x: -3.944419384
y: -94.8716812134
theta: 4.73424720764
speed: 14.0256652832
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.476799999999998]
sim.py in the sim.py statecallback function, msg is

x: -62.8006210327
y: 3.72661018372
theta: 3.16502857208
speed: 2.11475777626
id: 0
t: 191

222 self.state_dicts[msg.id][msg.t] is (-62.800621032714844, 3.7266101837158203, 3.1650285720825195, 2.114757776260376)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192
xxx before update is x: -3.944419384
y: -94.8716812134
theta: 4.73424720764
speed: 14.0256652832
id: 1
t: 191
xxx after update is x: -3.21320223808
y: -95.9448242188
theta: 4.7958779335
speed: 13.6071186066
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5263999999999986]
sim.py in the sim.py statecallback function, msg is

x: -63.8330001831
y: 3.20554256439
theta: 3.16400456429
speed: 2.19655609131
id: 0
t: 192

222 self.state_dicts[msg.id][msg.t] is (-63.83300018310547, 3.20554256439209, 3.1640045642852783, 2.1965560913085938)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.0, 0.5151999999999983]
sim.py in the sim.py statecallback function, msg is

x: -63.5270347595
y: 3.56084728241
theta: 3.09159660339
speed: 1.4198397398
id: 0
t: 193

222 self.state_dicts[msg.id][msg.t] is (-63.527034759521484, 3.560847282409668, 3.0915966033935547, 1.4198397397994995)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193
xxx before update is x: -3.21320223808
y: -95.9448242188
theta: 4.7958779335
speed: 13.6071186066
id: 1
t: 192
xxx after update is x: -2.74997496605
y: -96.074546814
theta: 4.62082386017
speed: 13.6230592728
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -63.5338287354
y: 3.0566277504
theta: 3.1955974102
speed: 1.40654039383
id: 0
t: 194

222 self.state_dicts[msg.id][msg.t] is (-63.53382873535156, 3.0566277503967285, 3.1955974102020264, 1.4065403938293457)
sim.py in the sim.py statecallback function, msg is

x: -63.3632049561
y: 2.91317296028
theta: 3.35777974129
speed: 1.04480552673
id: 0
t: 195

222 self.state_dicts[msg.id][msg.t] is (-63.36320495605469, 2.913172960281372, 3.3577797412872314, 1.0448055267333984)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194
xxx before update is x: -2.74997496605
y: -96.074546814
theta: 4.62082386017
speed: 13.6230592728
id: 1
t: 193
xxx after update is x: -2.9044752121
y: -97.2739944458
theta: 4.65317440033
speed: 13.7493867874
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -63.7564315796
y: 3.39043450356
theta: 3.23054361343
speed: 0.74pdate agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191
sim.py in the sim.py statecallback function, msg is

x: -3.26362872124
y: -95.0718231201
theta: 4.809030056
speed: 13.8829879761
id: 1
t: 190

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -62.8006210327
y: 3.72661018372
theta: 3.16502857208
speed: 2.11475777626
id: 0
t: 191
xxx after update is x: -63.8330001831
y: 3.20554256439
theta: 3.16400456429
speed: 2.19655609131
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:192
sim.py in the sim.py statecallback function, msg is

x: -3.944419384
y: -94.8716812134
theta: 4.73424720764
speed: 14.0256652832
id: 1
t: 191

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.8330001831
y: 3.20554256439
theta: 3.16400456429
speed: 2.19655609131
id: 0
t: 192
xxx after update is x: -63.5270347595
y: 3.56084728241
theta: 3.09159660339
speed: 1.4198397398
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:193
sim.py in the sim.py statecallback function, msg is

x: -3.21320223808
y: -95.9448242188
theta: 4.7958779335
speed: 13.6071186066
id: 1
t: 192

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.5270347595
y: 3.56084728241
theta: 3.09159660339
speed: 1.4198397398
id: 0
t: 193
xxx after update is x: -63.5338287354
y: 3.0566277504
theta: 3.1955974102
speed: 1.40654039383
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:194
sim.py in the sim.py statecallback function, msg is

x: -2.74997496605
y: -96.074546814
theta: 4.62082386017
speed: 13.6230592728
id: 1
t: 193

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -63.5338287354
y: 3.0566277504
theta: 3.1955974102
speed: 1.40654039383
id: 0
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.5338287354
y: 3.0566277504
theta: 3.1955974102
speed: 1.40654039383
id: 0
t: 194
xxx after update is x: -63.3632049561
y: 2.91317296028
theta: 3.35777974129
speed: 1.04480552673
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:195
sim.py in the sim.py statecallback function, msg is

x: -2.9044752121
y: -97.2739944458
theta: 4.65317440033
speed: 13.7493867874
id: 1
t: 194

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.3632049561
y: 2.91317296028
theta: 3.35777974129
speed: 1.04480552673
id: 0
t: 195
xxx after update is x: -63.7564315796
y: 3.39043450356
theta: 3.23054361343
speed: 0.749798238277
id: 0
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:196
sim.py in the sim.py statecallback function, msg is

x: -3.42845964432
y: -98.2021102905
theta: 4.78490018845
speed: 13.718585968
id: 1
t: 195

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.7564315796
y: 3.39043450356
theta: 3.23054361343
speed: 0.749798238277
id: 0
t: 196
xxx after update is x: -62.9120712289798238277
id: 0
t: 196

222 self.state_dicts[msg.id][msg.t] is (-63.756431579589844, 3.390434503555298, 3.230543613433838, 0.7497982382774353)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195
xxx before update is x: -2.9044752121
y: -97.2739944458
theta: 4.65317440033
speed: 13.7493867874
id: 1
t: 194
xxx after update is x: -3.42845964432
y: -98.2021102905
theta: 4.78490018845
speed: 13.718585968
id: 1
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -62.912071228
y: 3.43466687202
theta: 3.14489388466
speed: 0.7909745574
id: 0
t: 197

222 self.state_dicts[msg.id][msg.t] is (-62.912071228027344, 3.434666872024536, 3.1448938846588135, 0.7909745573997498)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196
xxx before update is x: -3.42845964432
y: -98.2021102905
theta: 4.78490018845
speed: 13.718585968
id: 1
t: 195
xxx after update is x: -3.49843239784
y: -98.5545730591
theta: 4.70690631866
speed: 13.9735412598
id: 1
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.49843239784
y: -98.5545730591
theta: 4.70690631866
speed: 13.9735412598
id: 1
t: 196
current clock is 8.71111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -63.9958648682
y: 3.54320311546
theta: 3.2832930088
speed: 0.419156372547
id: 0
t: 198

222 self.state_dicts[msg.id][msg.t] is (-63.99586486816406, 3.543203115463257, 3.2832930088043213, 0.41915637254714966)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.49843239784
y: -98.5545730591
theta: 4.70690631866
speed: 13.9735412598
id: 1
t: 196
xxx after update is x: -2.94320011139
y: -98.8418884277
theta: 4.74614667892
speed: 13.9414834976
id: 1
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197
sim.py in the sim.py statecallback function, msg is

x: -63.5854682922
y: 3.66220903397
theta: 3.26655578613
speed: 0.165089547634
id: 0
t: 199

222 self.state_dicts[msg.id][msg.t] is (-63.58546829223633, 3.6622090339660645, 3.2665557861328125, 0.16508954763412476)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.94320011139
y: -98.8418884277
theta: 4.74614667892
speed: 13.9414834976
id: 1
t: 197
xxx after update is x: -3.2233581543
y: -99.5011825562
theta: 4.52219247818
speed: 13.7617006302
id: 1
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:198
sim.py in the sim.py statecallback function, msg is

x: -63.3650131226
y: 2.43397665024
theta: 3.21069979668
speed: -0.219279393554
id: 0
t: 200

222 self.state_dicts[msg.id][msg.t] is (-63.365013122558594, 2.433976650238037, 3.2106997966766357, -0.21927939355373383)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.2233581543
y: -99.5011825562
theta: 4.52219247818
speed: 13.7617006302
id: 1
t: 198
xxx after update is x: -3.07704806328
y: -100.531288147
theta: 4.59981441498
speed: 14.1085071564
id: 1
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin fun
y: 3.43466687202
theta: 3.14489388466
speed: 0.7909745574
id: 0
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:197
sim.py in the sim.py statecallback function, msg is

x: -3.49843239784
y: -98.5545730591
theta: 4.70690631866
speed: 13.9735412598
id: 1
t: 196

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -62.912071228
y: 3.43466687202
theta: 3.14489388466
speed: 0.7909745574
id: 0
t: 197
xxx after update is x: -63.9958648682
y: 3.54320311546
theta: 3.2832930088
speed: 0.419156372547
id: 0
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -2.94320011139
y: -98.8418884277
theta: 4.74614667892
speed: 13.9414834976
id: 1
t: 197

leave the update function 
in spin function, finish the n times spin:198
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.9958648682
y: 3.54320311546
theta: 3.2832930088
speed: 0.419156372547
id: 0
t: 198
xxx after update is x: -63.5854682922
y: 3.66220903397
theta: 3.26655578613
speed: 0.165089547634
id: 0
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.2233581543
y: -99.5011825562
theta: 4.52219247818
speed: 13.7617006302
id: 1
t: 198

leave the update function 
in spin function, finish the n times spin:199
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: -63.5854682922
y: 3.66220903397
theta: 3.26655578613
speed: 0.165089547634
id: 0
t: 199
xxx after update is x: -63.3650131226
y: 2.43397665024
theta: 3.21069979668
speed: -0.219279393554
id: 0
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:200
sim.py in the sim.py statecallback function, msg is

x: -3.07704806328
y: -100.531288147
theta: 4.59981441498
speed: 14.1085071564
id: 1
t: 199

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -63.3650131226
y: 2.43397665024
theta: 3.21069979668
speed: -0.219279393554
id: 0
t: 200
xxx after update is x: -63.8228340149
y: 3.25969338417
theta: 3.18113541603
speed: 0.454385459423
id: 0
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201
sim.py in the sim.py statecallback function, msg is

x: -3.39737248421
y: -100.594398499
theta: 4.69113874435
speed: 13.5563955307
id: 1
t: 200

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -63.8228340149
y: 3.25969338417
theta: 3.18113541603
speed: 0.454385459423
id: 0
t: 201
xxx after update is x: -63.8624076843
y: 3.03765726089
theta: 3.13958835602
speed: 0.0234985128045
id: 0
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202
sim.py in the sim.py statecallback function, msg is

x: -3.74870586395
y: -101.518295288
theta: 4.97887086868
speed: 13.4090061188
id: 1
t: 201

maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -63.8624076843
y: 3.03765726089
theta: 3.13958835602
speed: 0.0234985128045
id: 0
t: 202
current clock is 8.97777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.ction, finish the n times spin:199
sim.py in the sim.py statecallback function, msg is

x: -63.8228340149
y: 3.25969338417
theta: 3.18113541603
speed: 0.454385459423
id: 0
t: 201

222 self.state_dicts[msg.id][msg.t] is (-63.82283401489258, 3.2596933841705322, 3.181135416030884, 0.4543854594230652)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.07704806328
y: -100.531288147
theta: 4.59981441498
speed: 14.1085071564
id: 1
t: 199
xxx after update is x: -3.39737248421
y: -100.594398499
theta: 4.69113874435
speed: 13.5563955307
id: 1
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:200
sim.py in the sim.py statecallback function, msg is

x: -63.8624076843
y: 3.03765726089
theta: 3.13958835602
speed: 0.0234985128045
id: 0
t: 202

222 self.state_dicts[msg.id][msg.t] is (-63.86240768432617, 3.0376572608947754, 3.1395883560180664, 0.02349851280450821)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.39737248421
y: -100.594398499
theta: 4.69113874435
speed: 13.5563955307
id: 1
t: 200
xxx after update is x: -3.74870586395
y: -101.518295288
theta: 4.97887086868
speed: 13.4090061188
id: 1
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:201
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.74870586395
y: -101.518295288
theta: 4.97887086868
speed: 13.4090061188
id: 1
t: 201
xxx after update is x: -3.19501185417
y: -102.266944885
theta: 4.71739387512
speed: 14.0867128372
id: 1
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:202
sim.py in the sim.py statecallback function, msg is

x: -63.7852973938
y: 3.1554942131
theta: 3.14513039589
speed: -0.253633826971
id: 0
t: 203

222 self.state_dicts[msg.id][msg.t] is (-63.78529739379883, 3.155494213104248, 3.1451303958892822, -0.2536338269710541)
sim.py in the sim.py statecallback function, msg is

x: -63.0184364319
y: 3.31926393509
theta: 3.32093405724
speed: -0.192922711372
id: 0
t: 204

222 self.state_dicts[msg.id][msg.t] is (-63.018436431884766, 3.3192639350891113, 3.3209340572357178, -0.1929227113723755)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.19501185417
y: -102.266944885
theta: 4.71739387512
speed: 14.0867128372
id: 1
t: 202
xxx after update is x: -3.48369383812
y: -102.789710999
theta: 4.59814977646
speed: 13.3762817383
id: 1
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:203
sim.py in the sim.py statecallback function, msg is

x: -63.8519515991
y: 2.59418272972
theta: 3.03312516212
speed: -0.251341998577
id: 0
t: 205

222 self.state_dicts[msg.id][msg.t] is (-63.851951599121094, 2.5941827297210693, 3.033125162124634, -0.2513419985771179)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.48369383812
y: -102.789710999
theta: 4.59814977646
speed: 13.3762817383
id: 1
t: 203
xxx after update is x: -3.24573540688
y: -102.987709045
theta: 4.81673955917
speed: 14.009677887
id: 1
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:204
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24573540688
y: -102.987709045
theta: 4.81673955917
speed: 14.009677887
id: 1
t: 204
current clock is 9.06666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py in the try maneuver function update -. strat
sim.py in the sim.py statecallback function, msg is

x: -63.5265769958
y: 3.10626339912
theta: 3.12747144699
speed: 0.0201623439789
id: 0
t: 206

222 self.state_dicts[msg.id][msg.t] is (-63.52657699584961, 3.1062633991241455, 3.127471446990967, 0.020162343978881836)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:205
man_init:
leave the update function 
in spin function, finish the n times spin:203
sim.py in the sim.py statecallback function, msg is

x: -3.19501185417
y: -102.266944885
theta: 4.71739387512
speed: 14.0867128372
id: 1
t: 202

xxx before update is x: -63.8624076843
y: 3.03765726089
theta: 3.13958835602
speed: 0.0234985128045
id: 0
t: 202
xxx after update is x: -63.7852973938
y: 3.1554942131
theta: 3.14513039589
speed: -0.253633826971
id: 0
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -63.7852973938
y: 3.1554942131
theta: 3.14513039589
speed: -0.253633826971
id: 0
t: 203
xxx after update is x: -63.0184364319
y: 3.31926393509
theta: 3.32093405724
speed: -0.192922711372
id: 0
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:204
sim.py in the sim.py statecallback function, msg is

x: -3.48369383812
y: -102.789710999
theta: 4.59814977646
speed: 13.3762817383
id: 1
t: 203

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -63.0184364319
y: 3.31926393509
theta: 3.32093405724
speed: -0.192922711372
id: 0
t: 204
xxx after update is x: -63.8519515991
y: 2.59418272972
theta: 3.03312516212
speed: -0.251341998577
id: 0
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205
sim.py in the sim.py statecallback function, msg is

x: -3.24573540688
y: -102.987709045
theta: 4.81673955917
speed: 14.009677887
id: 1
t: 204

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: -63.8519515991
y: 2.59418272972
theta: 3.03312516212
speed: -0.251341998577
id: 0
t: 205
xxx after update is x: -63.5265769958
y: 3.10626339912
theta: 3.12747144699
speed: 0.0201623439789
id: 0
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:206
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207
... logging to /home/lu/.ros/log/fcf83a92-fbcf-11e8-8a22-000c291801fc/roslaunch-ubuntu-40110.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:39301/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [40120][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to fcf83a92-fbcf-11e8-8a22-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [40133][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [40136][0m
[1mprocess[rviz-3]: started with pid [40137][0m
[1mprocess[car0-4]: started with pid [40138][0m
[1mprocess[car1-5]: started with pid [40153][0m
[1mprocess[cloud-6]: started with pid [40155][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
