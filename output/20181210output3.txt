sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 1
s is car_state0
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.56839108467
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:1
sim.py in the sim.py statecallback function, msg is

x: 3.46815872192
y: -34.5892028809
theta: 1.52845883369
speed: 13.9143447876
id: 0
t: 1

222 self.state_dicts[msg.id][msg.t] is (3.468158721923828, -34.589202880859375, 1.528458833694458, 13.914344787597656)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7fb94a060128>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7fb94a07a518>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9001)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: 3.15886878967
y: -34.0057525635
theta: 1.66891002655
speed: 13.6690759659
id: 0
t: 2

222 self.state_dicts[msg.id][msg.t] is (3.1588687896728516, -34.00575256347656, 1.668910026550293, 13.669075965881348)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: -2.73047423363
y: 33.7189216614
theta: 4.60127067566
speed: 13.721572876
id: 1
t: 2
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:3
xxx before update is x: -2.73047423363
y: 33.7189216614
theta: 4.60127067566
speed: 13.721572876
id: 1
t: 2
xxx after update is x: -3.28250741959
y: 33.4980964661
theta: 4.70486307144
speed: 13.691532135
id: 1
t: 3
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: -3.28250741959
y: 33.4980964661
theta: 4.70486307144
speed: 13.691532135
id: 1
t: 3
xxx after update is x: -3.50657820702
y: 31.9729614258
theta: 4.76326990128
speed: 14.2809877396
id: 1
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.46013047165399223, 0.32617667534673916]
sim.py in the sim.py statecallback function, msg is

x: 3.28258061409
y: -32.9621391296
theta: 1.55941081047
speed: 13.9444074631
id: 0
t: 3

sim.py sim.py in the sim.py main function
sim.py in the sim.py car function 
self.id is 0
s is car_state1
cm.CarState is <class 'virtual_blinker.msg._CarState.CarState'>
sim.py call from the state_sub_topics stateCallback
in the sim.py spin function 
diff 1.55641794205
sim.py in the sim.py statecallback function, msg is

x: -3.23927903175
y: 34.7284736633
theta: 4.65435504913
speed: 14.0152330399
id: 1
t: 1

222 self.state_dicts[msg.id][msg.t] is (-3.23927903175354, 34.72847366333008, 4.654355049133301, 14.015233039855957)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:1
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:2
sim.py in the sim.py statecallback function, msg is

x: -2.73047423363
y: 33.7189216614
theta: 4.60127067566
speed: 13.721572876
id: 1
t: 2

222 self.state_dicts[msg.id][msg.t] is (-2.7304742336273193, 33.71892166137695, 4.60127067565918, 13.721572875976562)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:True
self.fm:
self.intersection <utils.Intersection.Intersection instance at 0x7f66dd879c20>
self.risk_estimator <risk_estimation.driver.RiskEstimator instance at 0x7f66dd896a28>
run maneuver negotiator
maneuver_negotiatir.py in the maneuver negotiator. py init function - - start
call clock function
self.ros_measurements is None
self.ros_measurements is not empty
x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
current clock is 0.0
maneuver_negotiatir.py call the clock(), give the clock to self.agent_state
maneuver_negotiatir.py in the maneuver negotiator. py init function finish
maneuver_negotiatir.py in the maneuver negotiatir.py the initialize function -- start
maneuver_negotiatir.py call setup_ros function
maneuver_negotiatir.py start the setip_ros function 
maneuver_negotiatir.py start the setip_ros function  222222
maneuver_negotiatir.py start the setip_ros function  3333333
maneuver_negotiatir.py start the setip_ros function  44444
maneuver_negotiatir.py finish the setip_ros function 
maneuver_negotiatir.py start thread that listens on network for udp packets from other cars
maneuver_negotiatir.py start a thread to udp massage
maneuver_negotiatir.py in the maneuver_negotiatir.py the initialize function -- finish
maneuver_negotiatir.py start udp_msg_processor funtion
udp thread: binding to ('127.0.0.1', 9000)
sim.py in the sim.py statecallback function, msg is

x: -3.28250741959
y: 33.4980964661
theta: 4.70486307144
speed: 13.691532135
id: 1
t: 3

222 self.state_dicts[msg.id][msg.t] is (-3.2825074195861816, 33.49809646606445, 4.70486307144165, 13.691532135009766)
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:3
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:4
xxx before update is x: 1
y: 1
theta: 1
speed: 1
id: 1
t: 0
xxx after update is x: 3.09770441055
y: -32.301776886
theta: 1.68174660206
speed: 14.0520467758
id: 0
t: 4
maneuver_negotiatir.py finish the update agent state from ros funtion
sim.py in the sim.py statecallback function, msg is

x: -3.50657820702
y: 31.9729614258
theta: 4.76326990128
speed: 14.2809877396
id: 1
t: 4

222 self.state_dicts[msg.id][msg.t] is (-3.506578207015991, 31.97296142578125, 4.763269901275635, 14.280987739562988)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: 3.09770441055
y: -32.301776886
theta: 1.68174660206
speed: 14.0520467758
id: 0
t: 4
xxx after update is x: 3.18237400055
y:in the sim.py statecallback function, msg is

x: 3.09770441055
y: -32.301776886
theta: 1.68174660206
speed: 14.0520467758
id: 0
t: 4

222 self.state_dicts[msg.id][msg.t] is (3.0977044105529785, -32.30177688598633, 1.6817466020584106, 14.052046775817871)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:5
xxx before update is x: -3.50657820702
y: 31.9729614258
theta: 4.76326990128
speed: 14.2809877396
id: 1
t: 4
xxx after update is x: -3.2774002552
y: 32.429359436
theta: 4.74195766449
speed: 13.5944509506
id: 1
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: -3.2774002552
y: 32.429359436
theta: 4.74195766449
speed: 13.5944509506
id: 1
t: 5
xxx after update is x: -3.59433913231
y: 31.3252010345
theta: 4.70005464554
speed: 14.0198011398
id: 1
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: -3.59433913231
y: 31.3252010345
theta: 4.70005464554
speed: 14.0198011398
id: 1
t: 6
xxx after update is x: -3.3048825264
y: 30.5686264038
theta: 4.7475399971
speed: 13.4920091629
id: 1
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.35931251368288475, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.18237400055
y: -31.8380622864
theta: 1.56286394596
speed: 13.9892082214
id: 0
t: 5

sim.py in the sim.py statecallback function, msg is

x: 1.93060576916
y: -31.3068733215
theta: 1.5803527832
speed: 13.7371454239
id: 0
t: 6

sim.py in the sim.py statecallback function, msg is

x: 2.94482278824
y: -30.8392028809
theta: 1.37609696388
speed: 14.0588331223
id: 0
t: 7

222 self.state_dicts[msg.id][msg.t] is (2.9448227882385254, -30.839202880859375, 1.3760969638824463, 14.058833122253418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: -3.3048825264
y: 30.5686264038
theta: 4.7475399971
speed: 13.4920091629
id: 1
t: 7
xxx after update is x: -3.36200284958
y: 29.88646698
theta: 4.70276117325
speed: 14.019449234
id: 1
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:9
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.36200284958
y: 29.88646698
theta: 4.70276117325
speed: 14.019449234
id: 1
t: 8
current clock is 0.355555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration






self.maneuver_requested xxx before update is x: -3.36200284958
y: 29.88646698
theta: 4.70276117325
speed: 14.019449234
id: 1
t: 8
xxx after update is x: -2.84940338135
y: 29.3312892914
theta: 4.73353147507
speed: 13.7801141739
id: 1
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
None
self.tag[2





intended_course
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so re -31.8380622864
theta: 1.56286394596
speed: 13.9892082214
id: 0
t: 5
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:6
xxx before update is x: 3.18237400055
y: -31.8380622864
theta: 1.56286394596
speed: 13.9892082214
id: 0
t: 5
xxx after update is x: 1.93060576916
y: -31.3068733215
theta: 1.5803527832
speed: 13.7371454239
id: 0
t: 6
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:7
xxx before update is x: 1.93060576916
y: -31.3068733215
theta: 1.5803527832
speed: 13.7371454239
id: 0
t: 6
xxx after update is x: 2.94482278824
y: -30.8392028809
theta: 1.37609696388
speed: 14.0588331223
id: 0
t: 7
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:8
xxx before update is x: 2.94482278824
y: -30.8392028809
theta: 1.37609696388
speed: 14.0588331223
id: 0
t: 7
xxx after update is x: 3.39090490341
y: -29.8050746918
theta: 1.68624722958
speed: 14.2874546051
id: 0
t: 8
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.3510838380684872, 0.32523317013783243]
sim.py in the sim.py statecallback function, msg is

x: -3.2774002552
y: 32.429359436
theta: 4.74195766449
speed: 13.5944509506
id: 1
t: 5

sim.py in the sim.py statecallback function, msg is

x: -3.59433913231
y: 31.3252010345
theta: 4.70005464554
speed: 14.0198011398
id: 1
t: 6

sim.py in the sim.py statecallback function, msg is

x: -3.3048825264
y: 30.5686264038
theta: 4.7475399971
speed: 13.4920091629
id: 1
t: 7

sim.py in the sim.py statecallback function, msg is

x: -3.36200284958
y: 29.88646698
theta: 4.70276117325
speed: 14.019449234
id: 1
t: 8

222 self.state_dicts[msg.id][msg.t] is (-3.3620028495788574, 29.88646697998047, 4.702761173248291, 14.019449234008789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:9
xxx before update is x: 3.39090490341
y: -29.8050746918
theta: 1.68624722958
speed: 14.2874546051
id: 0
t: 8
xxx after update is x: 2.76825618744
y: -29.0245285034
theta: 1.702932477
speed: 13.8648271561
id: 0
t: 9
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: 2.76825618744
y: -29.0245285034
theta: 1.702932477
speed: 13.8648271561
id: 0
t: 9
xxx after update is x: 3.28617405891
y: -29.0100154877
theta: 1.5309265852
speed: 13.7854938507
id: 0
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the try maneuver function update -. strat
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.28617405891
y: -29.0100154877
theta: 1.5309265852
speed: 13.7854938507
id: 0
t: 10
current clock is 0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration






self.maneuver_requested None
self.tag[2





intended_course
maneuver_negotiatir.py in the lat function
0
maneuver_negotiatir.py the R response set is empty, so return 1, why 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish
going to the update function
sim.py in the sim.py update function 
targetturn 1, why 1. what 1 means, is that car 1
maneuver_negotiatir.py in the try maneuver function update -. sfinish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:10
xxx before update is x: -2.84940338135
y: 29.3312892914
theta: 4.73353147507
speed: 13.7801141739
id: 1
t: 9
xxx after update is x: -3.10772538185
y: 28.6419143677
theta: 4.60637664795
speed: 13.8547554016
id: 1
t: 10
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3668618776624135, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.39090490341
y: -29.8050746918
theta: 1.68624722958
speed: 14.2874546051
id: 0
t: 8

sim.py in the sim.py statecallback function, msg is

x: 2.76825618744
y: -29.0245285034
theta: 1.702932477
speed: 13.8648271561
id: 0
t: 9

sim.py in the sim.py statecallback function, msg is

x: 3.28617405891
y: -29.0100154877
theta: 1.5309265852
speed: 13.7854938507
id: 0
t: 10

222 self.state_dicts[msg.id][msg.t] is (3.2861740589141846, -29.0100154876709, 1.5309265851974487, 13.785493850708008)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: -3.10772538185
y: 28.6419143677
theta: 4.60637664795
speed: 13.8547554016
id: 1
t: 10
xxx after update is x: -3.57648420334
y: 28.2865657806
theta: 4.58925533295
speed: 13.8308944702
id: 1
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.57648420334
y: 28.2865657806
theta: 4.58925533295
speed: 13.8308944702
id: 1
t: 11
xxx after update is x: -3.36170482635
y: 28.0802211761
theta: 4.64434862137
speed: 13.6834163666
id: 1
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:12
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:13
xxx before update is x: -3.36170482635
y: 28.0802211761
theta: 4.64434862137
speed: 13.6834163666
id: 1
t: 12
xxx after update is x: -3.18162679672
y: 26.4121589661
theta: 4.68436956406
speed: 13.9677505493
id: 1
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3982772150195211, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.38778543472
y: -28.1500453949
theta: 1.46020543575
speed: 13.875415802
id: 0
t: 11

sim.py in the sim.py statecallback function, msg is

x: 3.35914039612
y: -27.6577358246
theta: 1.42776286602
speed: 14.5674800873
id: 0
t: 12

sim.py in the sim.py statecallback function, msg is

x: 2.87925577164
y: -26.888376236
theta: 1.53213834763
speed: 13.6496686935
id: 0
t: 13

222 self.state_dicts[msg.id][msg.t] is (2.879255771636963, -26.888376235961914, 1.5321383476257324, 13.64966869354248)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: -3.18162679672
y: 26.4121589661
theta: 4.68436956406
speed: 13.9677505493
id: 1
t: 13
xxx after update is x: -3.79062128067
y: 26.8412322998
theta: 4.60241556168
speed: 13.4192609787
id: 1
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the speed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:11
xxx before update is x: 3.28617405891
y: -29.0100154877
theta: 1.5309265852
speed: 13.7854938507
id: 0
t: 10
xxx after update is x: 3.38778543472
y: -28.1500453949
theta: 1.46020543575
speed: 13.875415802
id: 0
t: 11
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.30821188326594523, 0.31125980638660994]
sim.py in the sim.py statecallback function, msg is

x: -2.84940338135
y: 29.3312892914
theta: 4.73353147507
speed: 13.7801141739
id: 1
t: 9

sim.py in the sim.py statecallback function, msg is

x: -3.10772538185
y: 28.6419143677
theta: 4.60637664795
speed: 13.8547554016
id: 1
t: 10

sim.py in the sim.py statecallback function, msg is

x: -3.57648420334
y: 28.2865657806
theta: 4.58925533295
speed: 13.8308944702
id: 1
t: 11

222 self.state_dicts[msg.id][msg.t] is (-3.576484203338623, 28.28656578063965, 4.589255332946777, 13.830894470214844)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
leave the update function 
in spin function, finish the n times spin:12
xxx before update is x: 3.38778543472
y: -28.1500453949
theta: 1.46020543575
speed: 13.875415802
id: 0
t: 11
xxx after update is x: 3.35914039612
y: -27.6577358246
theta: 1.42776286602
speed: 14.5674800873
id: 0
t: 12
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
xxx before update is x: 3.35914039612
y: -27.6577358246
theta: 1.42776286602
speed: 14.5674800873
id: 0
t: 12
xxx after update is x: 2.87925577164
y: -26.888376236
theta: 1.53213834763
speed: 13.6496686935
id: 0
t: 13
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:13
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:14
xxx before update is x: 2.87925577164
y: -26.888376236
theta: 1.53213834763
speed: 13.6496686935
id: 0
t: 13
xxx after update is x: 2.63993048668
y: -26.348192215
theta: 1.49404847622
speed: 13.2560043335
id: 0
t: 14
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:15
xxx before update is x: 2.63993048668
y: -26.348192215
theta: 1.49404847622
speed: 13.2560043335
id: 0
t: 14
xxx after update is x: 2.41087865829
y: -25.9116649628
theta: 1.66767942905
speed: 13.3726530075
id: 0
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.30332437555872227, 0.39104382148356487]
sim.py in the sim.py statecallback function, msg is

x: -3.36170482635
y: 28.0802211761
theta: 4.64434862137
speed: 13.6834163666
id: 1
t: 12

sim.py in the sim.py statecallback function, msg is

x: -3.18162679672
y: 26.4121589661
theta: 4.68436956406
speed: 13.9677505493
id: 1
t: 13

sim.py in the sim.py statecallback function, msg is

x: -3.79062128067
y: 26.8412322998
theta: 4.60241556168
speed: 13.4192609787
id: 1
t: 14

sim.py in the sim.py statecallback function, msg is

x: -3.13943171501
y: 25.2852039337
theta: 4.63615083694
speed: 13.7359685898
id: 1
t: 15

222 self.state_dicts[msg.id][msg.t] is (-3.1394317150115967, 25.28520393371582, 4.63615083694458, 13.735968589782715)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: 2.41087865829
y: -25.9116649628
theta: 1.66767942905
speed: 13.3726530075
iupdate function xxx before update is x: -3.79062128067
y: 26.8412322998
theta: 4.60241556168
speed: 13.4192609787
id: 1
t: 14
xxx after update is x: -3.13943171501
y: 25.2852039337
theta: 4.63615083694
speed: 13.7359685898
id: 1
t: 15
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:15
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:16
xxx before update is x: -3.13943171501
y: 25.2852039337
theta: 4.63615083694
speed: 13.7359685898
id: 1
t: 15
xxx after update is x: -3.36447787285
y: 25.2077388763
theta: 4.78019332886
speed: 14.1110935211
id: 1
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: -3.36447787285
y: 25.2077388763
theta: 4.78019332886
speed: 14.1110935211
id: 1
t: 16
xxx after update is x: -3.41733551025
y: 24.4972496033
theta: 4.52921152115
speed: 13.8223581314
id: 1
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3781356570572681, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.63993048668
y: -26.348192215
theta: 1.49404847622
speed: 13.2560043335
id: 0
t: 14

sim.py in the sim.py statecallback function, msg is

x: 2.41087865829
y: -25.9116649628
theta: 1.66767942905
speed: 13.3726530075
id: 0
t: 15

sim.py in the sim.py statecallback function, msg is

x: 3.73461127281
y: -25.2417964935
theta: 1.57389390469
speed: 13.1138048172
id: 0
t: 16

sim.py in the sim.py statecallback function, msg is

x: 3.07846045494
y: -24.8492488861
theta: 1.52382493019
speed: 13.0277891159
id: 0
t: 17

222 self.state_dicts[msg.id][msg.t] is (3.078460454940796, -24.8492488861084, 1.52382493019104, 13.027789115905762)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: -3.41733551025
y: 24.4972496033
theta: 4.52921152115
speed: 13.8223581314
id: 1
t: 17
xxx after update is x: -3.50066447258
y: 23.4353084564
theta: 4.87193584442
speed: 13.8421583176
id: 1
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: -3.50066447258
y: 23.4353084564
theta: 4.87193584442
speed: 13.8421583176
id: 1
t: 18
xxx after update is x: -2.79934501648
y: 23.6381149292
theta: 4.61610889435
speed: 13.7382535934
id: 1
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: -2.79934501648
y: 23.6381149292
theta: 4.61610889435
speed: 13.7382535934
id: 1
t: 19
xxx after update is x: -3.67651367188
y: 22.8326206207
theta: 4.47562122345
speed: 13.9197483063
id: 1
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.37694293673516793, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.91848182678
y: -23.8493938446
theta: 1.53623664379
speed: 12.6359033585
id: 0
t: 18

sim.py in the sim.py statecallback function, msg is

x: 3.22141623497
y: -23.8519229889
theta: 1.3757917881
speed: 12.4929304123
id: 0
t: 19

sim.py in the sim.py statecallback function, msg is

x: 3.31058716774
y: -22.6566047668
theta: 1.6629537344
speed: 12.3290185928
id: 0
t: 20d: 0
t: 15
xxx after update is x: 3.73461127281
y: -25.2417964935
theta: 1.57389390469
speed: 13.1138048172
id: 0
t: 16
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:17
xxx before update is x: 3.73461127281
y: -25.2417964935
theta: 1.57389390469
speed: 13.1138048172
id: 0
t: 16
xxx after update is x: 3.07846045494
y: -24.8492488861
theta: 1.52382493019
speed: 13.0277891159
id: 0
t: 17
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:18
xxx before update is x: 3.07846045494
y: -24.8492488861
theta: 1.52382493019
speed: 13.0277891159
id: 0
t: 17
xxx after update is x: 3.91848182678
y: -23.8493938446
theta: 1.53623664379
speed: 12.6359033585
id: 0
t: 18
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:19
xxx before update is x: 3.91848182678
y: -23.8493938446
theta: 1.53623664379
speed: 12.6359033585
id: 0
t: 18
xxx after update is x: 3.22141623497
y: -23.8519229889
theta: 1.3757917881
speed: 12.4929304123
id: 0
t: 19
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:20
xxx before update is x: 3.22141623497
y: -23.8519229889
theta: 1.3757917881
speed: 12.4929304123
id: 0
t: 19
xxx after update is x: 3.31058716774
y: -22.6566047668
theta: 1.6629537344
speed: 12.3290185928
id: 0
t: 20
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.39583296744148855, 0.32958616487742676]
sim.py in the sim.py statecallback function, msg is

x: -3.36447787285
y: 25.2077388763
theta: 4.78019332886
speed: 14.1110935211
id: 1
t: 16

sim.py in the sim.py statecallback function, msg is

x: -3.41733551025
y: 24.4972496033
theta: 4.52921152115
speed: 13.8223581314
id: 1
t: 17

sim.py in the sim.py statecallback function, msg is

x: -3.50066447258
y: 23.4353084564
theta: 4.87193584442
speed: 13.8421583176
id: 1
t: 18

sim.py in the sim.py statecallback function, msg is

x: -2.79934501648
y: 23.6381149292
theta: 4.61610889435
speed: 13.7382535934
id: 1
t: 19

sim.py in the sim.py statecallback function, msg is

x: -3.67651367188
y: 22.8326206207
theta: 4.47562122345
speed: 13.9197483063
id: 1
t: 20

222 self.state_dicts[msg.id][msg.t] is (-3.676513671875, 22.83262062072754, 4.475621223449707, 13.919748306274414)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: 3.31058716774
y: -22.6566047668
theta: 1.6629537344
speed: 12.3290185928
id: 0
t: 20
xxx after update is x: 3.197660923
y: -22.3682727814
theta: 1.73155462742
speed: 12.1623573303
id: 0
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: 3.197660923
y: -22.3682727814
theta: 1.73155462742
speed: 12.1623573303
id: 0
t: 21
xxx after update is x: 2.78637266159
y: -21.9157581329
theta: 1.49640500546
speed: 12.1101846695
id: 0
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:23
xx

222 self.state_dicts[msg.id][msg.t] is (3.310587167739868, -22.656604766845703, 1.6629537343978882, 12.329018592834473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:21
xxx before update is x: -3.67651367188
y: 22.8326206207
theta: 4.47562122345
speed: 13.9197483063
id: 1
t: 20
xxx after update is x: -2.88547110558
y: 21.5919570923
theta: 4.58837461472
speed: 14.1736354828
id: 1
t: 21
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:22
xxx before update is x: -2.88547110558
y: 21.5919570923
theta: 4.58837461472
speed: 14.1736354828
id: 1
t: 21
xxx after update is x: -3.34628105164
y: 21.3223667145
theta: 4.84002399445
speed: 13.791021347
id: 1
t: 22
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:23
xxx before update is x: -3.34628105164
y: 21.3223667145
theta: 4.84002399445
speed: 13.791021347
id: 1
t: 22
xxx after update is x: -3.28520131111
y: 21.1218738556
theta: 4.84820270538
speed: 13.4360494614
id: 1
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.2534312517438884, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.197660923
y: -22.3682727814
theta: 1.73155462742
speed: 12.1623573303
id: 0
t: 21

sim.py in the sim.py statecallback function, msg is

x: 2.78637266159
y: -21.9157581329
theta: 1.49640500546
speed: 12.1101846695
id: 0
t: 22

sim.py in the sim.py statecallback function, msg is

x: 2.62082767487
y: -20.5681438446
theta: 1.63051009178
speed: 11.8049507141
id: 0
t: 23

222 self.state_dicts[msg.id][msg.t] is (2.6208276748657227, -20.568143844604492, 1.6305100917816162, 11.804950714111328)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: -3.28520131111
y: 21.1218738556
theta: 4.84820270538
speed: 13.4360494614
id: 1
t: 23
xxx after update is x: -3.65972280502
y: 19.2296504974
theta: 4.74915361404
speed: 13.5111131668
id: 1
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: -3.65972280502
y: 19.2296504974
theta: 4.74915361404
speed: 13.5111131668
id: 1
t: 24
xxx after update is x: -2.69620966911
y: 20.0025920868
theta: 4.68950510025
speed: 13.6418800354
id: 1
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5081822220116933, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.57485675812
y: -20.9635181427
theta: 1.58780109882
speed: 11.5581951141
id: 0
t: 24

sim.py in the sim.py statecallback function, msg is

x: 2.90624451637
y: -20.449010849
theta: 1.48440003395
speed: 11.2158746719
id: 0
t: 25

222 self.state_dicts[msg.id][msg.t] is (2.9062445163726807, -20.449010848999023, 1.4844000339508057, 11.215874671936035)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
lex before update is x: 2.78637266159
y: -21.9157581329
theta: 1.49640500546
speed: 12.1101846695
id: 0
t: 22
xxx after update is x: 2.62082767487
y: -20.5681438446
theta: 1.63051009178
speed: 11.8049507141
id: 0
t: 23
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:24
xxx before update is x: 2.62082767487
y: -20.5681438446
theta: 1.63051009178
speed: 11.8049507141
id: 0
t: 23
xxx after update is x: 3.57485675812
y: -20.9635181427
theta: 1.58780109882
speed: 11.5581951141
id: 0
t: 24
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.28392259156828337, 0.15915422202292495]
sim.py in the sim.py statecallback function, msg is

x: -2.88547110558
y: 21.5919570923
theta: 4.58837461472
speed: 14.1736354828
id: 1
t: 21

sim.py in the sim.py statecallback function, msg is

x: -3.34628105164
y: 21.3223667145
theta: 4.84002399445
speed: 13.791021347
id: 1
t: 22

sim.py in the sim.py statecallback function, msg is

x: -3.28520131111
y: 21.1218738556
theta: 4.84820270538
speed: 13.4360494614
id: 1
t: 23

sim.py in the sim.py statecallback function, msg is

x: -3.65972280502
y: 19.2296504974
theta: 4.74915361404
speed: 13.5111131668
id: 1
t: 24

222 self.state_dicts[msg.id][msg.t] is (-3.6597228050231934, 19.229650497436523, 4.7491536140441895, 13.511113166809082)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
leave the update function 
in spin function, finish the n times spin:25
xxx before update is x: 3.57485675812
y: -20.9635181427
theta: 1.58780109882
speed: 11.5581951141
id: 0
t: 24
xxx after update is x: 2.90624451637
y: -20.449010849
theta: 1.48440003395
speed: 11.2158746719
id: 0
t: 25
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
if not self.man_init and self.course.hasPassedRequestLine(self.x, self.y) and self.id == 0:
initiating trymaneuver, start communication between the two cars $$$$$$$$$$$$$$$$$$$$$$$
 self.man_init:
leave the update function 
in spin function, finish the n times spin:26
xxx before update is x: 2.90624451637
y: -20.449010849
theta: 1.48440003395
speed: 11.2158746719
id: 0
t: 25
xxx after update is x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 1
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
current clock is 1.15555555556
!!!!after check statue the self.tag is [1.1555555555555554, 0, 'left']
2.self.status is 1
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.11111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.15555555556,(2.607672691345215, -18.966312408447ave the update function xxx before update is x: -2.69620966911
y: 20.0025920868
theta: 4.68950510025
speed: 13.6418800354
id: 1
t: 25
xxx after update is x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:26
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.15555555556', 'IntendedCourse': 'left', 'Position': ['2.607672691345215', ' -18.966312408447266', ' 1.6649142503738403'], 'TagID': '0', 'Type': 'GET', 'Velocity': '10'}
car 1 received GET,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0513580246916
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.63961349046
sender last entering time is:  1.63961349046
sender last leaving time is:  3.94366531316
my entering time is:  0.865442329501
my leaving time is:  2.75952663431
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending DENY,1,1.15555555556,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26
xxx after update is x: -3.22115015984
y: 18.2004833221
theta: 4.58391237259
speed: 13.7092485428
id: 1
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3587182646225835, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26

sim.py in the sim.py statecallback function, msg is

x: 3.61435627937
y: -19.7127361298
theta: 1.61545503139
speed: 10.6608419418
id: 0
t: 27

222 self.state_dicts[msg.id][msg.t] is (3.614356279373169, -19.712736129760742, 1.6154550313949585, 10.660841941833496)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: -3.22115015984
y: 18.2004833221
theta: 4.58391237259
speed: 13.7092485428
id: 1
t: 27
xxx after update is x: -2.94535899162
y: 17.7202472687
thet266, 1.6649142503738403),10,1,1.15555555556,0,left
!!!!change state to get
GET,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
current clock is 1.15555555556
self.communication_details == 0
sending GET,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
current clock is 1.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,1.15555555556,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.1111111111111112, True, ['1']]
1.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.1111111111111112, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:27
xxx before update is x: 2.60767269135
y: -18.9663124084
theta: 1.66491425037
speed: 10.7649202347
id: 0
t: 26
xxx after update is x: 3.61435627937
y: -19.7127361298
theta: 1.61545503139
speed: 10.6608419418
id: 0
t: 27
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.4498768359732866, 0.02183596411079635]
sim.py in the sim.py statecallback function, msg is

x: -2.69620966911
y: 20.0025920868
theta: 4.68950510025
speed: 13.6418800354
id: 1
t: 25

sim.py in the sim.py statecallback function, msg is

x: -3.39737129211
y: 18.8067264557
theta: 4.56368875504
speed: 14.1515388489
id: 1
t: 26

sim.py in the sim.py statecallback function, msg is

x: -3.22115015984
y: 18.2004833221
theta: 4.58391237259
speed: 13.7092485428
id: 1
t: 27

222 self.state_dicts[msg.id][msg.t] is (-3.2211501598358154, 18.200483322143555, 4.583912372589111, 13.709248542785645)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:28
xxx before update is x: 3.61435627937
y: -19.7127361298
theta: 1.61545503139
speed: 10.6608419418
id: 0
t: 27
xxx after update is x: 3.74523568153
y: -18.7898635864
theta: 1.71714758873
speed: 10.8643245697
id: 0
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:29xxx before update is x: 3.74523568153
y: -18.7898635864
theta: 1.71714758873
speed: 10.8643245697
id: 0
t: 28
xxx after update is x: 3.37190961838
y: -18.4654216766
theta: 1.51548111439
speed: 10.7292766571
id: 0
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: 3.37190961838
y: -18.4654216766
theta: 1.51548111439
speed: 10.7292766571
id: 0
t: 29
xxx after update is x: 3.24241161346
y: -18.3076648712
theta: 1.61913180351
speed: 10.2191829681
id: 0
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.15992499650848638, 0.09898444618891283]
sim.py in the sim.py statecallback function, msg is

x: -2.94535899162
y: 17.7202472687
theta: 4.83885288239
speed: 13.9713315964
id: 1
t: 28

sim.py in the sim.py statecallback function, msg is

x: -3.04708909988
y: 16.9682693481
theta: 4.62756109238
speed: 13.7487955093
id: 1
t: 29

sim.py in the sim.py statecallback function, msg is

x: -3.00663805008
y: 15.9437465668
theta: 4.75262308121
speed: 13.8440198898
id: 1
t: 30

222 self.state_dicts[msg.id][msg.t] is (-3.0066380500793457, 15.943746566772461, 4.752623081207275, 13.844019889831543)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: 3.24241161346
y: -18.3076648712
theta: 1.61913180351
speed: 10.2191829681
id: 0
t: 30
xxx after update is x: 3.26523303986
y: -17.0671138763
theta: 1.54465305805
speed: 10.1345081329
id: 0
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: 3.26523303986
y: -17.0671138763
theta: 1.54465305805
speed: 10.1345081329
id: 0
t: 31
xxx after update is x: 3.78719258308
y: -17.0229072571
theta: 1.57802355289
speed: 9.58693027496
id: 0
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: 3.78719258308
y: -17.0229072571
theta: 1.57802355289
speed: 9.58693027496
id: 0
t: 32
xxx after update is x: 3.00187730789
y: -16.6760845184
theta: 1.77624070644
speed: 9.36229228973
id: 0
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.31839679813666305, 0.033620823628037734]
sim.py in the sim.py statecallback function, msg is

x: -3.33412647247
y: 15.899143219
theta: 4.73732376099
speed: 13.8439750671
id: 1
t: 31

sim.py in the sim.py statecallback function, msg is

x: -3.46232271194
y: 15.2846651077
theta: 4.67953205109
speed: 14.2280111313
id: 1
t: 32

sim.py in the sim.py statecallback function, msg is

x: -3.74029898643
y: 14.550866127
theta: 4.86725473404
speed: 14.0811061859
id: 1
t: 33

222 self.state_dicts[msg.id][msg.t] is (-3.7402989864349365, 14.55086612701416, 4.867254734039307, 14.081106185913086)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: 3.00187730789
y: -16.6760845184
theta: 1.77624070644
speed: 9.36229228973
id: 0
t: 33
xxx after update is x: 3.47220849991
y: -15.9714565277
theta: 1.37778842449
speed: 9.18782329559
id: 0
t: 34a: 4.83885288239
speed: 13.9713315964
id: 1
t: 28
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:29
xxx before update is x: -2.94535899162
y: 17.7202472687
theta: 4.83885288239
speed: 13.9713315964
id: 1
t: 28
xxx after update is x: -3.04708909988
y: 16.9682693481
theta: 4.62756109238
speed: 13.7487955093
id: 1
t: 29
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:30
xxx before update is x: -3.04708909988
y: 16.9682693481
theta: 4.62756109238
speed: 13.7487955093
id: 1
t: 29
xxx after update is x: -3.00663805008
y: 15.9437465668
theta: 4.75262308121
speed: 13.8440198898
id: 1
t: 30
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3023187144155733, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.74523568153
y: -18.7898635864
theta: 1.71714758873
speed: 10.8643245697
id: 0
t: 28

sim.py in the sim.py statecallback function, msg is

x: 3.37190961838
y: -18.4654216766
theta: 1.51548111439
speed: 10.7292766571
id: 0
t: 29

sim.py in the sim.py statecallback function, msg is

x: 3.24241161346
y: -18.3076648712
theta: 1.61913180351
speed: 10.2191829681
id: 0
t: 30

222 self.state_dicts[msg.id][msg.t] is (3.2424116134643555, -18.30766487121582, 1.6191318035125732, 10.219182968139648)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:31
xxx before update is x: -3.00663805008
y: 15.9437465668
theta: 4.75262308121
speed: 13.8440198898
id: 1
t: 30
xxx after update is x: -3.33412647247
y: 15.899143219
theta: 4.73732376099
speed: 13.8439750671
id: 1
t: 31
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:32
xxx before update is x: -3.33412647247
y: 15.899143219
theta: 4.73732376099
speed: 13.8439750671
id: 1
t: 31
xxx after update is x: -3.46232271194
y: 15.2846651077
theta: 4.67953205109
speed: 14.2280111313
id: 1
t: 32
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4451587334032072, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.26523303986
y: -17.0671138763
theta: 1.54465305805
speed: 10.1345081329
id: 0
t: 31

sim.py in the sim.py statecallback function, msg is

x: 3.78719258308
y: -17.0229072571
theta: 1.57802355289
speed: 9.58693027496
id: 0
t: 32

222 self.state_dicts[msg.id][msg.t] is (3.7871925830841064, -17.022907257080078, 1.5780235528945923, 9.586930274963379)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:33
xxx before update is x: -3.46232271194
y: 15.2846651077
theta: 4.67953205109
speed: 14.2280111313
id: 1
t: 32
xxx after update is x: -3.74029898643
y: 14.550866127
theta: 4.86725473404
speed: 14.0811061859
id: 1
t: 33
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:34
xxx before update is x: -3.74029898643
y: 14.550866127
theta: 4.86725473404
speed: 14.0811061859
id: 1
t: 33
xxx after update is x: -3.26098394394
y: 13.6134576797
theta: 4.57105970383
speed: 13.9938297272
id: 1
t: 34
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: -3.26098394394
y: 13.6134576797
theta: 4.57105970383
speed: 13.9938297272
id: 1
t: 34
xxx after update is x: -2.97007322311
y: 13.7653055191
theta: 4.64968919754
speed: 13.8722162247
id: 1
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.32501505080230825, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.00187730789
y: -16.6760845184
theta: 1.77624070644
speed: 9.36229228973
id: 0
t: 33

sim.py in the sim.py statecallback function, msg is

x: 3.47220849991
y: -15.9714565277
theta: 1.37778842449
speed: 9.18782329559
id: 0
t: 34

sim.py in the sim.py statecallback function, msg is

x: 3.19921088219
y: -15.5002365112
theta: 1.66490244865
speed: 8.81867694855
id: 0
t: 35

222 self.state_dicts[msg.id][msg.t] is (3.1992108821868896, -15.500236511230469, 1.6649024486541748, 8.818676948547363)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: -2.97007322311
y: 13.7653055191
theta: 4.64968919754
speed: 13.8722162247
id: 1
t: 35
xxx after update is x: -3.84166884422
y: 13.0573997498
theta: 4.87338495255
speed: 14.2771568298
id: 1
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: -3.84166884422
y: 13.0573997498
theta: 4.87338495255
speed: 14.2771568298
id: 1
t: 36
xxx after update is x: -3.7273440361
y: 12.0829057693
theta: 4.69911766052
speed: 14.0483636856
id: 1
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: -3.7273440361
y: 12.0829057693
theta: 4.69911766052
speed: 14.0483636856
id: 1
t: 37
xxx after update is x: -3.02335238457
y: 11.9602861404
theta: 4.8580737114
speed: 14.2300186157
id: 1
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.261855554310418, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.1077170372
y: -15.1316757202
theta: 1.55993974209
speed: 8.60606956482
id: 0
t: 36

sim.py in the sim.py statecallback function, msg is

x: 2.98538970947
y: -14.0540800095
theta: 1.44803166389
speed: 8.69986438751
id: 0
t: 37

sim.py in the sim.py statecallback function, msg is

x: 2.95907092094
y: -15.043299675
theta: 1.44881749153
speed: 8.04665279388
id: 0
t: 38

222 self.state_dicts[msg.id][msg.t] is (2.959070920944214, -15.043299674987793, 1.448817491531372, 8.046652793884277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: -3.02335238457
y: 11.9602861404
theta: 4.8580737114
speed: 14.2300186157
id: 1
t: 38
xxx after update is x: -3.07714962959
y: 11.859038353
theta: 4.72562837601
speed: 13.9564533234
id: 1
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:35
xxx before update is x: 3.47220849991
y: -15.9714565277
theta: 1.37778842449
speed: 9.18782329559
id: 0
t: 34
xxx after update is x: 3.19921088219
y: -15.5002365112
theta: 1.66490244865
speed: 8.81867694855
id: 0
t: 35
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:36
xxx before update is x: 3.19921088219
y: -15.5002365112
theta: 1.66490244865
speed: 8.81867694855
id: 0
t: 35
xxx after update is x: 3.1077170372
y: -15.1316757202
theta: 1.55993974209
speed: 8.60606956482
id: 0
t: 36
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:37
xxx before update is x: 3.1077170372
y: -15.1316757202
theta: 1.55993974209
speed: 8.60606956482
id: 0
t: 36
xxx after update is x: 2.98538970947
y: -14.0540800095
theta: 1.44803166389
speed: 8.69986438751
id: 0
t: 37
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.2275279239475995, 0.016692026597114957]
sim.py in the sim.py statecallback function, msg is

x: -3.26098394394
y: 13.6134576797
theta: 4.57105970383
speed: 13.9938297272
id: 1
t: 34

sim.py in the sim.py statecallback function, msg is

x: -2.97007322311
y: 13.7653055191
theta: 4.64968919754
speed: 13.8722162247
id: 1
t: 35

sim.py in the sim.py statecallback function, msg is

x: -3.84166884422
y: 13.0573997498
theta: 4.87338495255
speed: 14.2771568298
id: 1
t: 36

sim.py in the sim.py statecallback function, msg is

x: -3.7273440361
y: 12.0829057693
theta: 4.69911766052
speed: 14.0483636856
id: 1
t: 37

222 self.state_dicts[msg.id][msg.t] is (-3.727344036102295, 12.082905769348145, 4.699117660522461, 14.04836368560791)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:38
xxx before update is x: 2.98538970947
y: -14.0540800095
theta: 1.44803166389
speed: 8.69986438751
id: 0
t: 37
xxx after update is x: 2.95907092094
y: -15.043299675
theta: 1.44881749153
speed: 8.04665279388
id: 0
t: 38
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:39
xxx before update is x: 2.95907092094
y: -15.043299675
theta: 1.44881749153
speed: 8.04665279388
id: 0
t: 38
xxx after update is x: 3.48218607903
y: -14.2498035431
theta: 1.88159704208
speed: 8.3325958252
id: 0
t: 39
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: 3.48218607903
y: -14.2498035431
theta: 1.88159704208
speed: 8.3325958252
id: 0
t: 39
xxx after update is x: 2.93802452087
y: -14.1322107315
theta: 1.52411365509
speed: 7.82971715927
id: 0
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4297165300462966, 0.046770945957252584]
sim.py in the sim.py statecallback function, msg is

x: -3.02335238457
y: 11.9602861404
theta: 4.8580737114
speed: 14.2300186157
id: 1
t: 38

sim.py in the sim.py statecallback function, msg is

x: -3.07714962959
y: 11.859038353
theta: 4.72562837601
speed: 13.9 function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:40
xxx before update is x: -3.07714962959
y: 11.859038353
theta: 4.72562837601
speed: 13.9564533234
id: 1
t: 39
xxx after update is x: -3.51555681229
y: 10.6142148972
theta: 4.7043056488
speed: 13.947429657
id: 1
t: 40
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.10853163528598946, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.48218607903
y: -14.2498035431
theta: 1.88159704208
speed: 8.3325958252
id: 0
t: 39

sim.py in the sim.py statecallback function, msg is

x: 2.93802452087
y: -14.1322107315
theta: 1.52411365509
speed: 7.82971715927
id: 0
t: 40

222 self.state_dicts[msg.id][msg.t] is (2.9380245208740234, -14.132210731506348, 1.524113655090332, 7.82971715927124)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: -3.51555681229
y: 10.6142148972
theta: 4.7043056488
speed: 13.947429657
id: 1
t: 40
xxx after update is x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '10', 'Sender': '0', 'TagID': '1', 'Time': '1.15555555556', 'Position': ['(2.607672691345215', ' -18.966312408447266', ' 1.6649142503738403)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '1.82222222222', 'IntendedCourse': 'left', 'Position': ['3.0221872329711914', ' -13.78814697265625', ' 1.6410707235336304'], 'TagID': '0', 'Type': 'GET', 'Velocity': '7'}
car 1 received GET,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.0809876543209
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  1.11661826073
sender last entering time is:  1.31905817268
sender last leaving time is:  3.33871660755
564533234
id: 1
t: 39

sim.py in the sim.py statecallback function, msg is

x: -3.51555681229
y: 10.6142148972
theta: 4.7043056488
speed: 13.947429657
id: 1
t: 40

222 self.state_dicts[msg.id][msg.t] is (-3.515556812286377, 10.614214897155762, 4.704305648803711, 13.947429656982422)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:41
xxx before update is x: 2.93802452087
y: -14.1322107315
theta: 1.52411365509
speed: 7.82971715927
id: 0
t: 40
xxx after update is x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending RELEASE,0,1.15555555556,(2.607672691345215, -18.966312408447266, 1.6649142503738403),10,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.7777777777777777, True, ['1']]
1.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 1.82222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 1.77777777778
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0,left
!!!!change state to get
GET,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending GET,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
current clock is 1.82222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '1.82222222222', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,1.82222222222,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [1.7777777777777777, True, ['1']]
1.77777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [1.7777777777777777, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41
xxx after update is x: 3.50239992142
y: -13.3866443634
theta: 1.59092724323
speed: 7.66789722443
id: 0
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: 3.50239992142
y: -13.3866443634
theta: 1.59092724323
speed: 7.66789722443
id: 0
t: 42
xxx after update is x: 3.14583992958
y: -12.616440773
theta: 1.66202557087
speed: 7.25325584412
id: 0
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: 3.14583992958
y: -12.616440773
theta: 1.66202557087
speed: 7.25325584412
id: 0
t: 43
xxx after update is x: 3.42017149925
y: -12.3383016586
theta: 1.7251688242
speed: 6.9643740654
id: 0
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.36932139190052127, 0.004585892634738102]
sim.py in the sim.py statecallback function, msg is

x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41

sim.py in the sim.py statecallback function, msg is

x: -2.92718410492
y: 9.10403823853
theta: 4.64580202103
speed: 13.8223543167
id: 1
t: 42

sim.py in the sim.py statecallback function, msg is

x: -3.29483366013
y: 9.20529270172
theta: 4.67592287064
speed: 13.7812261581
id: 1
t: 43

sim.py in the sim.py statecallback function, msg is

x: -3.94212675095
y: 7.85611391068
theta: 4.72170448303
speed: 13.6786699295
id: 1
t: 44

222 self.state_dicts[msg.id][msg.t] is (-3.942126750946045, 7.856113910675049, 4.721704483032227, 13.678669929504395)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: 3.42017149925
y: -12.3383016586
theta: 1.7251688242
speed: 6.9643740654
id: 0
t: 44
xxx after update is x: 2.82117342949
y: -12.1398935318
theta: 1.6552567482
speed: 6.87142848969
id: 0
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: 2.82117342949
y: -12.my entering time is:  0.254809391822
my leaving time is:  1.50863112932
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
current clock is 1.82222222222
self.communication_details == 0
sending DENY,1,1.82222222222,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:42
xxx before update is x: -2.75301361084
y: 9.86480808258
theta: 4.68511819839
speed: 13.6331567764
id: 1
t: 41
xxx after update is x: -2.92718410492
y: 9.10403823853
theta: 4.64580202103
speed: 13.8223543167
id: 1
t: 42
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:43
xxx before update is x: -2.92718410492
y: 9.10403823853
theta: 4.64580202103
speed: 13.8223543167
id: 1
t: 42
xxx after update is x: -3.29483366013
y: 9.20529270172
theta: 4.67592287064
speed: 13.7812261581
id: 1
t: 43
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.21705048859425344, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.02218723297
y: -13.7881469727
theta: 1.64107072353
speed: 7.60371541977
id: 0
t: 41

sim.py in the sim.py statecallback function, msg is

x: 3.50239992142
y: -13.3866443634
theta: 1.59092724323
speed: 7.66789722443
id: 0
t: 42

sim.py in the sim.py statecallback function, msg is

x: 3.14583992958
y: -12.616440773
theta: 1.66202557087
speed: 7.25325584412
id: 0
t: 43

222 self.state_dicts[msg.id][msg.t] is (3.1458399295806885, -12.616440773010254, 1.6620255708694458, 7.253255844116211)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:44
xxx before update is x: -3.29483366013
y: 9.20529270172
theta: 4.67592287064
speed: 13.7812261581
id: 1
t: 43
xxx after update is x: -3.94212675095
y: 7.85611391068
theta: 4.72170448303
speed: 13.6786699295
id: 1
t: 44
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:45
xxx before update is x: -3.94212675095
y: 7.85611391068
theta: 4.72170448303
speed: 13.6786699295
id: 1
t: 44
xxx after update is x: -3.03946328163
y: 7.33334970474
theta: 4.76400661469
speed: 13.9802951813
id: 1
t: 45
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:46
xxx before update is x: -3.03946328163
y: 7.33334970474
theta: 4.76400661469
speed: 13.9802951813
id: 1
t: 45
xxx after update is x: -2.95224189758
y: 6.34285306931
theta: 4.65371322632
speed: 14.1405935287
id: 1
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.1644786126540552, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.42017149925
y: -12.3383016586
theta: 1.7251688242
speed: 6.9643740654
id: 0
t: 44

sim.py in the sim.py statecallback function, msg is

x: 2.82117342949
y: -12.1398935318
theta: 1.6552567482
speed: 6.87142848969
id: 0
t: 45

sim.py in the sim.py statecallback function, msg is

x: 3.24583125114
y: -11.790345192
theta: 1.6874666214
speed: 6.48837280273
id: 0
t: 46

222 self.state_dicts[msg.id][msg.t] is (3.245831251144409, -11.790345191955566, 1.6874666213989258, 6.488372802734375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: -2.95224189758
y: 6.34285306931
theta: 4.65371322632
speed: 14.1405935287
id: 1
t: 46
xxx after update is x: -3.17778992653
y: 5.91163539886
theta: 4.75997829437
speed: 13.7813901901
id: 1
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: -3.17778992653
y: 5.91163539886
theta: 4.75997829437
speed: 13.7813901901
id: 1
t: 47
xxx after update is x: -3.51940917969
y: 5.21813106537
theta: 4.53456878662
speed: 13.8228664398
id: 1
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.51940917969
y: 5.21813106537
theta: 4.53456878662
speed: 13.8228664398
id: 1
t: 48
xxx after update is x: -3.33022332191
y: 4.82921981812
theta: 4.89973926544
speed: 13.8335981369
id: 1
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49
aaaaaa
aaaaaabbbbb
risk is [0.18054621417457017, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.19113588333
y: -11.2559604645
theta: 1.53745830059
speed: 6.56913042068
id: 0
t: 47

sim.py in the sim.py statecallback function, msg is

x: 2.72696828842
y: -11.4127702713
theta: 1.45325434208
speed: 5.9431848526
id: 0
t: 48

sim.py in the sim.py statecallback function, msg is

x: 3.15773439407
y: -10.3650312424
theta: 1.54536807537
speed: 5.73475456238
id: 0
t: 49

222 self.state_dicts[msg.id][msg.t] is (3.1577343940734863, -10.365031242370605, 1.5453680753707886, 5.73475456237793)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: -3.33022332191
y: 4.82921981812
theta: 4.89973926544
speed: 13.8335981369
id: 1
t: 49
xxx after update is x: -3.20811390877
y: 3.83301854134
theta: 4.70199012756
speed: 14.1728172302
id: 1
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: -3.20811390877
y: 3.83301854134
theta: 4.70199012756
speed: 14.1728172302
id: 1
t: 50
xxx after update is x: -3.4125084877
y: 3.74354028702
theta: 4.80026102066
speed: 13.5265760422
id: 1
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.3315977920749183, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.87056159973
y: -10.7978105545
theta: 1.47540783882
speed: 5.49647474289
id: 0
t: 50

sim.py in the sim.py statecallback function, msg is

x: 3.17245650291
y: -10.183757782
theta: 1.56756460667
speed: 5.46777963638
id: 0
t: 51

222 self.state_dicts[msg.id][msg.t] is (3.1724565029144287, -10.183757781982422, 1.5675646061398935318
theta: 1.6552567482
speed: 6.87142848969
id: 0
t: 45
xxx after update is x: 3.24583125114
y: -11.790345192
theta: 1.6874666214
speed: 6.48837280273
id: 0
t: 46
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:47
xxx before update is x: 3.24583125114
y: -11.790345192
theta: 1.6874666214
speed: 6.48837280273
id: 0
t: 46
xxx after update is x: 3.19113588333
y: -11.2559604645
theta: 1.53745830059
speed: 6.56913042068
id: 0
t: 47
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.39323044930075185, 0.01642840208761227]
sim.py in the sim.py statecallback function, msg is

x: -3.03946328163
y: 7.33334970474
theta: 4.76400661469
speed: 13.9802951813
id: 1
t: 45

sim.py in the sim.py statecallback function, msg is

x: -2.95224189758
y: 6.34285306931
theta: 4.65371322632
speed: 14.1405935287
id: 1
t: 46

sim.py in the sim.py statecallback function, msg is

x: -3.17778992653
y: 5.91163539886
theta: 4.75997829437
speed: 13.7813901901
id: 1
t: 47

222 self.state_dicts[msg.id][msg.t] is (-3.1777899265289307, 5.911635398864746, 4.759978294372559, 13.781390190124512)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:48
xxx before update is x: 3.19113588333
y: -11.2559604645
theta: 1.53745830059
speed: 6.56913042068
id: 0
t: 47
xxx after update is x: 2.72696828842
y: -11.4127702713
theta: 1.45325434208
speed: 5.9431848526
id: 0
t: 48
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 2.72696828842
y: -11.4127702713
theta: 1.45325434208
speed: 5.9431848526
id: 0
t: 48
xxx after update is x: 3.15773439407
y: -10.3650312424
theta: 1.54536807537
speed: 5.73475456238
id: 0
t: 49
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:49
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:50
xxx before update is x: 3.15773439407
y: -10.3650312424
theta: 1.54536807537
speed: 5.73475456238
id: 0
t: 49
xxx after update is x: 2.87056159973
y: -10.7978105545
theta: 1.47540783882
speed: 5.49647474289
id: 0
t: 50
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.3864454588276122, 0.009245612221836914]
sim.py in the sim.py statecallback function, msg is

x: -3.51940917969
y: 5.21813106537
theta: 4.53456878662
speed: 13.8228664398
id: 1
t: 48

sim.py in the sim.py statecallback function, msg is

x: -3.33022332191
y: 4.82921981812
theta: 4.89973926544
speed: 13.8335981369
id: 1
t: 49

sim.py in the sim.py statecallback function, msg is

x: -3.20811390877
y: 3.83301854134
theta: 4.70199012756
speed: 14.1728172302
id: 1
t: 50

222 self.state_dicts[msg.id][msg.t] is (-3.2081139087677, 3.8330185413360596, 4.701990127563477, 14.17281723022461)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:51
xxx before update is x: 2.87056159973
y: -10.7978105545
theta: 1.47540783882
speed: 5.49647474289
id: 0
t: 50
xxx after update is x: 3.17245650291
y: -10.183757782
theta: 1.56756460667
speed: 5.46777963638
id: 0
t: 51
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: 3.17245650291
y: -10.183757782
theta: 1.56756460667
speed: 5.46777963638
id: 0
t: 51
xxx after update is x: 3.18150043488
y: -9.60290431976
theta: 1.63638353348
speed: 5.11014127731
id: 0
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: 3.18150043488
y: -9.60290431976
theta: 1.63638353348
speed: 5.11014127731
id: 0
t: 52
xxx after update is x: 3.59010052681
y: -10.0274581909
theta: 1.38479828835
speed: 5.17182302475
id: 0
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:54
xxx before update is x: 3.59010052681
y: -10.0274581909
theta: 1.38479828835
speed: 5.17182302475
id: 0
t: 53
xxx after update is x: 3.26728272438
y: -10.0019989014
theta: 1.70397150517
speed: 4.79157352448
id: 0
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4683211590963306, 0.027696649516803996]
sim.py in the sim.py statecallback function, msg is

x: -3.4125084877
y: 3.74354028702
theta: 4.80026102066
speed: 13.5265760422
id: 1
t: 51

sim.py in the sim.py statecallback function, msg is

x: -3.49975728989
y: 2.93795013428
theta: 4.90917682648
speed: 13.8020687103
id: 1
t: 52

sim.py in the sim.py statecallback function, msg is

x: -2.88463354111
y: 2.11781430244
theta: 4.87718439102
speed: 13.9519672394
id: 1
t: 53

sim.py in the sim.py statecallback function, msg is

x: -3.15256381035
y: 2.1022670269
theta: 4.66058206558
speed: 13.8770103455
id: 1
t: 54

222 self.state_dicts[msg.id][msg.t] is (-3.1525638103485107, 2.102267026901245, 4.660582065582275, 13.877010345458984)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: 3.26728272438
y: -10.0019989014
theta: 1.70397150517
speed: 4.79157352448
id: 0
t: 54
xxx after update is x: 3.64565777779
y: -9.59977245331
theta: 1.52568411827
speed: 4.31768751144
id: 0
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: 3.64565777779
y: -9.59977245331
theta: 1.52568411827
speed: 4.31768751144
id: 0
t: 55
xxx after update is x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending RELEASE,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver fr666565, 5.467779636383057)going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:52
xxx before update is x: -3.4125084877
y: 3.74354028702
theta: 4.80026102066
speed: 13.5265760422
id: 1
t: 51
xxx after update is x: -3.49975728989
y: 2.93795013428
theta: 4.90917682648
speed: 13.8020687103
id: 1
t: 52
maneuver_negotiatir.py finish the update agent state from ros funtion

if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:53
xxx before update is x: -3.49975728989
y: 2.93795013428
theta: 4.90917682648
speed: 13.8020687103
id: 1
t: 52
xxx after update is x: -2.88463354111
y: 2.11781430244
theta: 4.87718439102
speed: 13.9519672394
id: 1
t: 53
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.88463354111
y: 2.11781430244
theta: 4.87718439102
speed: 13.9519672394
id: 1
t: 53
xxx after update is x: -3.15256381035
y: 2.1022670269
theta: 4.66058206558
speed: 13.8770103455
id: 1
t: 54
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:54
aaaaaa
aaaaaabbbbb
risk is [0.41815144446753727, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.18150043488
y: -9.60290431976
theta: 1.63638353348
speed: 5.11014127731
id: 0
t: 52

sim.py in the sim.py statecallback function, msg is

x: 3.59010052681
y: -10.0274581909
theta: 1.38479828835
speed: 5.17182302475
id: 0
t: 53

sim.py in the sim.py statecallback function, msg is

x: 3.26728272438
y: -10.0019989014
theta: 1.70397150517
speed: 4.79157352448
id: 0
t: 54

222 self.state_dicts[msg.id][msg.t] is (3.267282724380493, -10.001998901367188, 1.7039715051651, 4.791573524475098)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:55
xxx before update is x: -3.15256381035
y: 2.1022670269
theta: 4.66058206558
speed: 13.8770103455
id: 1
t: 54
xxx after update is x: -2.95121216774
y: 0.609689712524
theta: 4.74253320694
speed: 13.8126335144
id: 1
t: 55
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:56
xxx before update is x: -2.95121216774
y: 0.609689712524
theta: 4.74253320694
speed: 13.8126335144
id: 1
t: 55
xxx after update is x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '7', 'Sender': '0', 'TagID': '1', 'Time': '1.82222222222', 'Position': ['(3.0221872329711914', ' -13.78814697265625', ' 1.6410707235336304)'], 'Type':om t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.4444444444444446, True, ['1']]
2.44444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 2.48888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 2.44444444444
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0,left
!!!!change state to get
GET,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending GET,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:57
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '2.48888888889', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,2.48888888889,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [2.488888888888889, True, ['1']]
2.48888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [2.488888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
xxx before update is x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56
xxx after update is x: 3.21232748032
y: -8.96795272827
theta: 1.64812886715
speed: 3. 'RELEASE'}going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:57

car 1 received RELEASE,0,1.82222222222,(3.0221872329711914, -13.78814697265625, 1.6410707235336304),7,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
current clock is 2.48888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '2.48888888889', 'IntendedCourse': 'left', 'Position': ['3.315629720687866', ' -9.396771430969238', ' 1.5605826377868652'], 'TagID': '0', 'Type': 'GET', 'Velocity': '4'}
car 1 received GET,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.110617283951
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
sender travel direction is:  north
sender earliest entering time is:  0.475650383076
sender last entering time is:  1.11061728395
sender last leaving time is:  3.48391554037
my entering time is:  0.110617283951
my leaving time is:  0.691851704939
i have left the intersection:  False
finish not_conflicted
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
current clock is 2.48888888889
self.communication_details == 0
sending DENY,1,2.48888888889,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
xxx before update is x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56
xxx after update is x: -2.98366498947
y: -0.441883653402
theta: 4.64182090759
speed: 13.5207738876
id: 1
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:58
xxx before update is x: -2.98366498947
y: -0.441883653402
theta: 4.64182090759
speed: 13.5207738876
id: 1
t: 57
xxx after update is x: -3.59184718132
y: -1.38387775421
theta: 4.64421892166
speed: 13.7611322403
id: 1
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: -3.59184718132
y: -1.38387775421
theta: 4.64421892166
speed: 13.7611322403
id: 1
t: 58
xxx after update is x: -2.97755932808
y: -1.31385362148
theta: 4.70766973495
speed: 13.7475337982
id: 1
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.4417221835155819, 0]
sim.py in the sim.py statecallback function, msg is

x: 62890195847
id: 0
t: 57
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.21232748032
y: -8.96795272827
theta: 1.64812886715
speed: 3.62890195847
id: 0
t: 57
xxx after update is x: 3.82894587517
y: -8.7989320755
theta: 1.60832083225
speed: 3.85178351402
id: 0
t: 58
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:58
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:59
xxx before update is x: 3.82894587517
y: -8.7989320755
theta: 1.60832083225
speed: 3.85178351402
id: 0
t: 58
xxx after update is x: 3.11605072021
y: -8.65043544769
theta: 1.53057003021
speed: 3.26868009567
id: 0
t: 59
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: 3.11605072021
y: -8.65043544769
theta: 1.53057003021
speed: 3.26868009567
id: 0
t: 59
xxx after update is x: 3.81243681908
y: -8.52142047882
theta: 1.6481180191
speed: 3.33833265305
id: 0
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaazzzzz
risk is [0.4053673525863611, 1.1339689816936487e-24]
sim.py in the sim.py statecallback function, msg is

x: -2.95121216774
y: 0.609689712524
theta: 4.74253320694
speed: 13.8126335144
id: 1
t: 55

sim.py in the sim.py statecallback function, msg is

x: -3.20516729355
y: 0.523317575455
theta: 4.49938488007
speed: 13.7786941528
id: 1
t: 56

sim.py in the sim.py statecallback function, msg is

x: -2.98366498947
y: -0.441883653402
theta: 4.64182090759
speed: 13.5207738876
id: 1
t: 57

sim.py in the sim.py statecallback function, msg is

x: -3.59184718132
y: -1.38387775421
theta: 4.64421892166
speed: 13.7611322403
id: 1
t: 58

sim.py in the sim.py statecallback function, msg is

x: -2.97755932808
y: -1.31385362148
theta: 4.70766973495
speed: 13.7475337982
id: 1
t: 59

sim.py in the sim.py statecallback function, msg is

x: -3.58188056946
y: -1.95077693462
theta: 4.69635152817
speed: 13.7646360397
id: 1
t: 60

222 self.state_dicts[msg.id][msg.t] is (-3.581880569458008, -1.9507769346237183, 4.696351528167725, 13.764636039733887)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.81243681908
y: -8.52142047882
theta: 1.6481180191
speed: 3.33833265305
id: 0
t: 60
xxx after update is x: 3.00514507294
y: -8.50715827942
theta: 1.76006031036
speed: 3.06130981445
id: 0
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:61
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: 3.00514507294
y: -8.50715827942
theta: 1.76006031036
speed: 3.06130981445
id: 0
t: 61
xxx after update is x: 3.13220953941
y: -7.65762424469
theta: 1.49706792831
speed: 3.03880786896
id: 0
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: 3.13220953941
y: -7.65762424469
theta: 1.49706792831
speed: 3.03880786896
id: 0
t: 62
xxx after update is x: 3.41553664207
y: -7.90406656265
theta: 1.67831027508
speed: 2.48928046227
id: 0
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
a3.64565777779
y: -9.59977245331
theta: 1.52568411827
speed: 4.31768751144
id: 0
t: 55

sim.py in the sim.py statecallback function, msg is

x: 3.31562972069
y: -9.39677143097
theta: 1.56058263779
speed: 4.25792074203
id: 0
t: 56

sim.py in the sim.py statecallback function, msg is

x: 3.21232748032
y: -8.96795272827
theta: 1.64812886715
speed: 3.62890195847
id: 0
t: 57

sim.py in the sim.py statecallback function, msg is

x: 3.82894587517
y: -8.7989320755
theta: 1.60832083225
speed: 3.85178351402
id: 0
t: 58

sim.py in the sim.py statecallback function, msg is

x: 3.11605072021
y: -8.65043544769
theta: 1.53057003021
speed: 3.26868009567
id: 0
t: 59

222 self.state_dicts[msg.id][msg.t] is (3.1160507202148438, -8.650435447692871, 1.5305700302124023, 3.2686800956726074)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:60
xxx before update is x: -2.97755932808
y: -1.31385362148
theta: 4.70766973495
speed: 13.7475337982
id: 1
t: 59
xxx after update is x: -3.58188056946
y: -1.95077693462
theta: 4.69635152817
speed: 13.7646360397
id: 1
t: 60
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:61
xxx before update is x: -3.58188056946
y: -1.95077693462
theta: 4.69635152817
speed: 13.7646360397
id: 1
t: 60
xxx after update is x: -3.13548541069
y: -2.73978042603
theta: 4.74144935608
speed: 13.5380754471
id: 1
t: 61
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:62
xxx before update is x: -3.13548541069
y: -2.73978042603
theta: 4.74144935608
speed: 13.5380754471
id: 1
t: 61
xxx after update is x: -3.46363091469
y: -3.23421573639
theta: 4.66030740738
speed: 13.8413295746
id: 1
t: 62
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5965792076268823, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.81243681908
y: -8.52142047882
theta: 1.6481180191
speed: 3.33833265305
id: 0
t: 60

sim.py in the sim.py statecallback function, msg is

x: 3.00514507294
y: -8.50715827942
theta: 1.76006031036
speed: 3.06130981445
id: 0
t: 61

sim.py in the sim.py statecallback function, msg is

x: 3.13220953941
y: -7.65762424469
theta: 1.49706792831
speed: 3.03880786896
id: 0
t: 62

222 self.state_dicts[msg.id][msg.t] is (3.132209539413452, -7.657624244689941, 1.497067928314209, 3.0388078689575195)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:63
xxx before update is x: -3.46363091469
y: -3.23421573639
theta: 4.66030740738
speed: 13.8413295746
id: 1
t: 62
xxx after update is x: -3.33764815331
y: -3.89022660255
theta: 4.51509571075
speed: 13.9607419968
id: 1
t: 63
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.33764815331
y: -3.89022660255
theta: 4.51509571075
speed: 13.9607419968
id: 1
t: 63
xxx after update is x: -2.93717646599
y: -4.50148487091
theta: 4.71750831604
speed: 14.1019306183
id: 1
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:64
going to the update function
sim.py in the simaaaaazzzzz
risk is [0.48268579292340463, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.13548541069
y: -2.73978042603
theta: 4.74144935608
speed: 13.5380754471
id: 1
t: 61

sim.py in the sim.py statecallback function, msg is

x: -3.46363091469
y: -3.23421573639
theta: 4.66030740738
speed: 13.8413295746
id: 1
t: 62

sim.py in the sim.py statecallback function, msg is

x: -3.33764815331
y: -3.89022660255
theta: 4.51509571075
speed: 13.9607419968
id: 1
t: 63

222 self.state_dicts[msg.id][msg.t] is (-3.3376481533050537, -3.8902266025543213, 4.5150957107543945, 13.960741996765137)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:64
xxx before update is x: 3.41553664207
y: -7.90406656265
theta: 1.67831027508
speed: 2.48928046227
id: 0
t: 63
xxx after update is x: 2.85768127441
y: -8.34290790558
theta: 1.42922890186
speed: 2.45650887489
id: 0
t: 64
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: 2.85768127441
y: -8.34290790558
theta: 1.42922890186
speed: 2.45650887489
id: 0
t: 64
xxx after update is x: 3.11163330078
y: -8.19332695007
theta: 1.66836810112
speed: 1.99434196949
id: 0
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: 3.11163330078
y: -8.19332695007
theta: 1.66836810112
speed: 1.99434196949
id: 0
t: 65
xxx after update is x: 2.98332715034
y: -8.00639820099
theta: 1.62232148647
speed: 1.74796020985
id: 0
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.7708729828228684, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.93717646599
y: -4.50148487091
theta: 4.71750831604
speed: 14.1019306183
id: 1
t: 64

sim.py in the sim.py statecallback function, msg is

x: -3.30094909668
y: -5.35082435608
theta: 4.79614305496
speed: 13.8470258713
id: 1
t: 65

sim.py in the sim.py statecallback function, msg is

x: -3.20196342468
y: -5.77476024628
theta: 4.69679021835
speed: 13.9416532516
id: 1
t: 66

222 self.state_dicts[msg.id][msg.t] is (-3.201963424682617, -5.7747602462768555, 4.6967902183532715, 13.94165325164795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: 2.98332715034
y: -8.00639820099
theta: 1.62232148647
speed: 1.74796020985
id: 0
t: 66
xxx after update is x: 2.90437412262
y: -7.69834136963
theta: 1.50486135483
speed: 1.91412830353
id: 0
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: 2.90437412262
y: -7.69834136963
theta: 1.50486135483
speed: 1.91412830353
id: 0
t: 67
xxx after update is x: 3.00579810143
y: -7.96071767807
theta: 1.73462593555
speed: 1.41013526917
id: 0
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: 3.00579810143
y: -7.96071767807
theta: 1.73462593555
speed: 1.41013526917
id: 0
t: 68.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:65
xxx before update is x: -2.93717646599
y: -4.50148487091
theta: 4.71750831604
speed: 14.1019306183
id: 1
t: 64
xxx after update is x: -3.30094909668
y: -5.35082435608
theta: 4.79614305496
speed: 13.8470258713
id: 1
t: 65
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.38512598788640906, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.41553664207
y: -7.90406656265
theta: 1.67831027508
speed: 2.48928046227
id: 0
t: 63

sim.py in the sim.py statecallback function, msg is

x: 2.85768127441
y: -8.34290790558
theta: 1.42922890186
speed: 2.45650887489
id: 0
t: 64

sim.py in the sim.py statecallback function, msg is

x: 3.11163330078
y: -8.19332695007
theta: 1.66836810112
speed: 1.99434196949
id: 0
t: 65

222 self.state_dicts[msg.id][msg.t] is (3.11163330078125, -8.193326950073242, 1.6683681011199951, 1.9943419694900513)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:66
xxx before update is x: -3.30094909668
y: -5.35082435608
theta: 4.79614305496
speed: 13.8470258713
id: 1
t: 65
xxx after update is x: -3.20196342468
y: -5.77476024628
theta: 4.69679021835
speed: 13.9416532516
id: 1
t: 66
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:67
xxx before update is x: -3.20196342468
y: -5.77476024628
theta: 4.69679021835
speed: 13.9416532516
id: 1
t: 66
xxx after update is x: -3.18933296204
y: -5.93827772141
theta: 4.72490930557
speed: 14.1320495605
id: 1
t: 67
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.5200692132656354, 0]
sim.py in the sim.py statecallback function, msg is

x: 2.98332715034
y: -8.00639820099
theta: 1.62232148647
speed: 1.74796020985
id: 0
t: 66

sim.py in the sim.py statecallback function, msg is

x: 2.90437412262
y: -7.69834136963
theta: 1.50486135483
speed: 1.91412830353
id: 0
t: 67

222 self.state_dicts[msg.id][msg.t] is (2.904374122619629, -7.698341369628906, 1.5048613548278809, 1.914128303527832)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:68
xxx before update is x: -3.18933296204
y: -5.93827772141
theta: 4.72490930557
speed: 14.1320495605
id: 1
t: 67
xxx after update is x: -3.2847340107
y: -7.22972774506
theta: 4.89489269257
speed: 13.6341466904
id: 1
t: 68
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:69
xxx before update is x: -3.2847340107
y: -7.22972774506
theta: 4.89489269257
speed: 13.6341466904
id: 1
t: 68
xxx after update is x: -3.01433062553
y: -8.51269626617
theta: 4.69702863693
speed: 13.7347841263
id: 1
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:70
xxx before update is x: -3.01433062553
y: -8.51269626617
theta: 4.69702863693
speed: 13.7347841263
id: 1
t: 69
xxx after update is x: -3.44939231873
y: -8.35868740082
theta: 4.67637443542
speed: 13.8262720108
id: 1
t: 70
mane
xxx after update is x: 3.02212548256
y: -7.84543180466
theta: 1.61009407043
speed: 1.04398965836
id: 0
t: 69
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.542833081798094, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18933296204
y: -5.93827772141
theta: 4.72490930557
speed: 14.1320495605
id: 1
t: 67

sim.py in the sim.py statecallback function, msg is

x: -3.2847340107
y: -7.22972774506
theta: 4.89489269257
speed: 13.6341466904
id: 1
t: 68

sim.py in the sim.py statecallback function, msg is

x: -3.01433062553
y: -8.51269626617
theta: 4.69702863693
speed: 13.7347841263
id: 1
t: 69

222 self.state_dicts[msg.id][msg.t] is (-3.0143306255340576, -8.512696266174316, 4.697028636932373, 13.734784126281738)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.02212548256
y: -7.84543180466
theta: 1.61009407043
speed: 1.04398965836
id: 0
t: 69
xxx after update is x: 3.61000108719
y: -7.73766279221
theta: 1.77057468891
speed: 0.768767118454
id: 0
t: 70
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:70
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
xxx before update is x: 3.61000108719
y: -7.73766279221
theta: 1.77057468891
speed: 0.768767118454
id: 0
t: 70
xxx after update is x: 3.88680815697
y: -7.43286085129
theta: 1.7552331686
speed: 0.55098426342
id: 0
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:71
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.88680815697
y: -7.43286085129
theta: 1.7552331686
speed: 0.55098426342
id: 0
t: 71
current clock is 3.15555555556
self.communication_details == 0
sending RELEASE,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.88680815697
y: -7.43286085129
theta: 1.7552331686
speed: 0.55098426342
id: 0
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.111111111111111, True, ['1']]
3.11111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 3.15555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.11111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,3.15555555556,(3.88uver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7013870082351062, 0]
sim.py in the sim.py statecallback function, msg is

x: 3.00579810143
y: -7.96071767807
theta: 1.73462593555
speed: 1.41013526917
id: 0
t: 68

sim.py in the sim.py statecallback function, msg is

x: 3.02212548256
y: -7.84543180466
theta: 1.61009407043
speed: 1.04398965836
id: 0
t: 69

sim.py in the sim.py statecallback function, msg is

x: 3.61000108719
y: -7.73766279221
theta: 1.77057468891
speed: 0.768767118454
id: 0
t: 70

222 self.state_dicts[msg.id][msg.t] is (3.6100010871887207, -7.7376627922058105, 1.770574688911438, 0.7687671184539795)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:71
xxx before update is x: -3.44939231873
y: -8.35868740082
theta: 4.67637443542
speed: 13.8262720108
id: 1
t: 70
xxx after update is x: -3.43338370323
y: -8.67595767975
theta: 4.76887130737
speed: 13.9678955078
id: 1
t: 71
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.43338370323
y: -8.67595767975
theta: 4.76887130737
speed: 13.9678955078
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.43338370323
y: -8.67595767975
theta: 4.76887130737
speed: 13.9678955078
id: 1
t: 71
current clock is 3.15555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '4', 'Sender': '0', 'TagID': '1', 'Time': '2.48888888889', 'Position': ['(3.315629720687866', ' -9.396771430969238', ' 1.5605826377868652)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,2.48888888889,(3.315629720687866, -9.396771430969238, 1.5605826377868652),4,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: -3.43338370323
y: -8.67595767975
theta: 4.76887130737
speed: 13.9678955078
id: 1
t: 71
xxx after update is x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '3.15555555556', 'IntendedCourse': 'left', 'Position': ['3.886808156967163', ' -7.432860851287842', ' 1.7552331686019897'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.14024691358
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's locati6808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0,leftgoing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:72
xxx before update is x: 3.88680815697
y: -7.43286085129
theta: 1.7552331686
speed: 0.55098426342
id: 0
t: 71
xxx after update is x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72
current clock is 3.2
self.communication_details == 0
sending GET,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72
current clock is 3.2
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '3.2', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,3.2,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.2, True, ['1']]
3.2
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.2, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
risk is [0.8758158526415363, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.44939231873
y: -8.35868740082
theta: 4.67637443542
speed: 13.8262720108
id: 1
t: 70

sim.py in the sim.py statecallback function, msg is

x: -3.43338370323
y: -8.67595767975
theta: 4.76887130737
speed: 13.9678955078
id: 1
t: 71

sim.py in the sim.py statecallback function, msg is

x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72

222 self.state_dicts[msg.id][msg.t] is (-2.669933319091797, -9.663252830505371, 4.784356594085693, 14.1165771484375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72
xxx after update is x: 3.31514406204
y: -7.00966262817
theta: 1.48864412308
speed: 0.0981326699257
id: 0
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
 self.man_init:
leave the update function 
in spin function, finish the n timon
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,3.2,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [7.977777777777778, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
current clock is 3.2
self.communication_details == 0
sending GRANT,1,3.2,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
current clock is 3.2
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:73
xxx before update is x: -2.66993331909
y: -9.66325283051
theta: 4.78435659409
speed: 14.1165771484
id: 1
t: 72
xxx after update is x: -3.20925545692
y: -10.0719213486
theta: 4.80899906158
speed: 13.6885910034
id: 1
t: 73
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.8847658751149292, 0]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.88680815697
y: -7.43286085129
theta: 1.7552331686
speed: 0.55098426342
id: 0
t: 71

sim.py in the sim.py statecallback function, msg is

x: 3.03536224365
y: -7.43175077438
theta: 1.79776847363
speed: 0.611513376236
id: 0
t: 72

sim.py in the sim.py statecallback function, msg is

x: 3.31514406204
y: -7.00966262817
theta: 1.48864412308
speed: 0.0981326699257
id: 0
t: 73

222 self.state_dicts[msg.id][msg.t] is (3.3151440620422363, -7.009662628173828, 1.4886441230773926, 0.0981326699256897)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -3.20925545692
y: -10.0719213486
theta: 4.80899906158
speed: 13.6885910034
id: 1
t: 73
xxx after update is x: -2.67614746094
y: -10.9294366837
theta: 4.66304349899
speed: 13.6649942398
id: 1
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:74
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: -2.67614746094
y: -10.9294366837
theta: 4.66304349899
speed: 13.6649942398
id: 1
t: 74
xxx after update is x: -3.19843578339
y: -11.3399000168
theta: 4.88816928864
speed: 13.8813695908
id: 1
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8375975179783318, 0.4911999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.37296056747
y: -7.1257390976
theta: 1.52127861977
speed: 0.168521314859
id: 0
t: 74

sim.py in the sim.py statecallback function, msg is

x: 2.93892645836
y: -7.54979276657
theta: 1.46098089218
speed: -0.0942755788565
id: 0
t: 75

222 self.state_dicts[msg.id][msg.t] is (2.9389264583587646, -7.549792766571045, 1.4609808921813965, -0.0942755788564682)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin funes spin:74xxx before update is x: 3.31514406204
y: -7.00966262817
theta: 1.48864412308
speed: 0.0981326699257
id: 0
t: 73
xxx after update is x: 3.37296056747
y: -7.1257390976
theta: 1.52127861977
speed: 0.168521314859
id: 0
t: 74
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:75
xxx before update is x: 3.37296056747
y: -7.1257390976
theta: 1.52127861977
speed: 0.168521314859
id: 0
t: 74
xxx after update is x: 2.93892645836
y: -7.54979276657
theta: 1.46098089218
speed: -0.0942755788565
id: 0
t: 75
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9046936810683596, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.20925545692
y: -10.0719213486
theta: 4.80899906158
speed: 13.6885910034
id: 1
t: 73

sim.py in the sim.py statecallback function, msg is

x: -2.67614746094
y: -10.9294366837
theta: 4.66304349899
speed: 13.6649942398
id: 1
t: 74

sim.py in the sim.py statecallback function, msg is

x: -3.19843578339
y: -11.3399000168
theta: 4.88816928864
speed: 13.8813695908
id: 1
t: 75

222 self.state_dicts[msg.id][msg.t] is (-3.1984357833862305, -11.339900016784668, 4.888169288635254, 13.881369590759277)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:76
xxx before update is x: 2.93892645836
y: -7.54979276657
theta: 1.46098089218
speed: -0.0942755788565
id: 0
t: 75
xxx after update is x: 3.48409986496
y: -7.20307779312
theta: 1.6125690937
speed: 0.220393195748
id: 0
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: 3.48409986496
y: -7.20307779312
theta: 1.6125690937
speed: 0.220393195748
id: 0
t: 76
xxx after update is x: 3.13628745079
y: -7.48165845871
theta: 1.43424093723
speed: -0.297718852758
id: 0
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: 3.13628745079
y: -7.48165845871
theta: 1.43424093723
speed: -0.297718852758
id: 0
t: 77
xxx after update is x: 3.36473584175
y: -7.40561532974
theta: 1.62751793861
speed: 0.16746647656
id: 0
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9551386253976436, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.18102478981
y: -11.9877672195
theta: 4.73615074158
speed: 13.8793029785
id: 1
t: 76

sim.py in the sim.py statecallback function, msg is

x: -3.15930294991
y: -12.9158658981
theta: 4.65834140778
speed: 14.1501379013
id: 1
t: 77

sim.py in the sim.py statecallback function, msg is

x: -2.86006855965
y: -13.6539783478
theta: 4.75719118118
speed: 13.6975898743
id: 1
t: 78

222 self.state_dicts[msg.id][msg.t] is (-2.8600685596466064, -13.65397834777832, 4.757191181182861, 13.697589874267578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: 3.36473584175
y: -7.40561532974
theta: 1.62751793861
speed: 0.16746647656
id: 0
t: 78
xxx after update is x: 3.52680325508
y: -7.4623966217
theta: 1.68103206158
speed: -0.0720039978623
id: 0
t: 79
ction, finish the n times spin:76xxx before update is x: -3.19843578339
y: -11.3399000168
theta: 4.88816928864
speed: 13.8813695908
id: 1
t: 75
xxx after update is x: -2.18102478981
y: -11.9877672195
theta: 4.73615074158
speed: 13.8793029785
id: 1
t: 76
maneuver_negotiatir.py finish the update agent state from ros funtion

going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:77
xxx before update is x: -2.18102478981
y: -11.9877672195
theta: 4.73615074158
speed: 13.8793029785
id: 1
t: 76
xxx after update is x: -3.15930294991
y: -12.9158658981
theta: 4.65834140778
speed: 14.1501379013
id: 1
t: 77
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9018980836241196, 0.5087999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.48409986496
y: -7.20307779312
theta: 1.6125690937
speed: 0.220393195748
id: 0
t: 76

sim.py in the sim.py statecallback function, msg is

x: 3.13628745079
y: -7.48165845871
theta: 1.43424093723
speed: -0.297718852758
id: 0
t: 77

222 self.state_dicts[msg.id][msg.t] is (3.1362874507904053, -7.481658458709717, 1.4342409372329712, -0.2977188527584076)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:78
xxx before update is x: -3.15930294991
y: -12.9158658981
theta: 4.65834140778
speed: 14.1501379013
id: 1
t: 77
xxx after update is x: -2.86006855965
y: -13.6539783478
theta: 4.75719118118
speed: 13.6975898743
id: 1
t: 78
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:79
xxx before update is x: -2.86006855965
y: -13.6539783478
theta: 4.75719118118
speed: 13.6975898743
id: 1
t: 78
xxx after update is x: -2.99564170837
y: -13.1586103439
theta: 4.59240150452
speed: 13.8578863144
id: 1
t: 79
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: -2.99564170837
y: -13.1586103439
theta: 4.59240150452
speed: 13.8578863144
id: 1
t: 79
xxx after update is x: -3.4328725338
y: -13.9598827362
theta: 4.67625427246
speed: 13.9391450882
id: 1
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.736490872187043, 0.49919999999999787]
sim.py in the sim.py statecallback function, msg is

x: 3.36473584175
y: -7.40561532974
theta: 1.62751793861
speed: 0.16746647656
id: 0
t: 78

sim.py in the sim.py statecallback function, msg is

x: 3.52680325508
y: -7.4623966217
theta: 1.68103206158
speed: -0.0720039978623
id: 0
t: 79

sim.py in the sim.py statecallback function, msg is

x: 3.23810744286
y: -7.42514753342
theta: 1.63721752167
speed: -0.258835822344
id: 0
t: 80

222 self.state_dicts[msg.id][msg.t] is (3.238107442855835, -7.425147533416748, 1.6372175216674805, -0.2588358223438263)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: -3.4328725338
y: -13.9598827362
theta: 4.67625427246
speed: 13.9391450882
id: 1
t: 80
xxx after update is x: -3.42438459396
y: -15.0085029602
theta: 4.66228866577
spemaneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:80
xxx before update is x: 3.52680325508
y: -7.4623966217
theta: 1.68103206158
speed: -0.0720039978623
id: 0
t: 79
xxx after update is x: 3.23810744286
y: -7.42514753342
theta: 1.63721752167
speed: -0.258835822344
id: 0
t: 80
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:81
xxx before update is x: 3.23810744286
y: -7.42514753342
theta: 1.63721752167
speed: -0.258835822344
id: 0
t: 80
xxx after update is x: 3.10485267639
y: -7.61619663239
theta: 1.62995409966
speed: -0.115421876311
id: 0
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8368396596608898, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.99564170837
y: -13.1586103439
theta: 4.59240150452
speed: 13.8578863144
id: 1
t: 79

sim.py in the sim.py statecallback function, msg is

x: -3.4328725338
y: -13.9598827362
theta: 4.67625427246
speed: 13.9391450882
id: 1
t: 80

sim.py in the sim.py statecallback function, msg is

x: -3.42438459396
y: -15.0085029602
theta: 4.66228866577
speed: 13.418548584
id: 1
t: 81

222 self.state_dicts[msg.id][msg.t] is (-3.424384593963623, -15.008502960205078, 4.662288665771484, 13.418548583984375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: 3.10485267639
y: -7.61619663239
theta: 1.62995409966
speed: -0.115421876311
id: 0
t: 81
xxx after update is x: 2.76598358154
y: -7.95227098465
theta: 1.7155380249
speed: -0.207135334611
id: 0
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: 2.76598358154
y: -7.95227098465
theta: 1.7155380249
speed: -0.207135334611
id: 0
t: 82
xxx after update is x: 3.43181347847
y: -8.23767566681
theta: 1.417309165
speed: 0.167535573244
id: 0
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: 3.43181347847
y: -8.23767566681
theta: 1.417309165
speed: 0.167535573244
id: 0
t: 83
xxx after update is x: 3.20912861824
y: -6.93597698212
theta: 1.67445743084
speed: -0.235656961799
id: 0
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: 3.20912861824
y: -6.93597698212
theta: 1.67445743084
speed: -0.235656961799
id: 0
t: 84
xxx after update is x: 3.09690690041
y: -7.46203899384
theta: 1.55788850784
speed: -0.19212013483
id: 0
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.895574259813331, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.23799991608
y: -15.6787576675
theta: 4.84961891174
speed: 14.1882820129
id: 1
t: 82

sim.py in the sim.py statecallback function, msg is

x: -2.62275195122
y: -16.4537658691
theta: 4.62125682831
speed: 13.8912801743
id: 1
t: 83

sim.py in the sim.py statecallback function, msg is

x: -3.71161365509
y: -16.99874ed: 13.418548584
id: 1
t: 81
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:82
xxx before update is x: -3.42438459396
y: -15.0085029602
theta: 4.66228866577
speed: 13.418548584
id: 1
t: 81
xxx after update is x: -3.23799991608
y: -15.6787576675
theta: 4.84961891174
speed: 14.1882820129
id: 1
t: 82
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:83
xxx before update is x: -3.23799991608
y: -15.6787576675
theta: 4.84961891174
speed: 14.1882820129
id: 1
t: 82
xxx after update is x: -2.62275195122
y: -16.4537658691
theta: 4.62125682831
speed: 13.8912801743
id: 1
t: 83
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7971229993789821, 0.47039999999999804]
sim.py in the sim.py statecallback function, msg is

x: 3.10485267639
y: -7.61619663239
theta: 1.62995409966
speed: -0.115421876311
id: 0
t: 81

sim.py in the sim.py statecallback function, msg is

x: 2.76598358154
y: -7.95227098465
theta: 1.7155380249
speed: -0.207135334611
id: 0
t: 82

sim.py in the sim.py statecallback function, msg is

x: 3.43181347847
y: -8.23767566681
theta: 1.417309165
speed: 0.167535573244
id: 0
t: 83

222 self.state_dicts[msg.id][msg.t] is (3.4318134784698486, -8.237675666809082, 1.4173091650009155, 0.16753557324409485)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:84
xxx before update is x: -2.62275195122
y: -16.4537658691
theta: 4.62125682831
speed: 13.8912801743
id: 1
t: 83
xxx after update is x: -3.71161365509
y: -16.9987468719
theta: 4.71634817123
speed: 13.6337747574
id: 1
t: 84
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:85
xxx before update is x: -3.71161365509
y: -16.9987468719
theta: 4.71634817123
speed: 13.6337747574
id: 1
t: 84
xxx after update is x: -2.76955580711
y: -17.1227073669
theta: 4.79597663879
speed: 14.1207914352
id: 1
t: 85
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: -2.76955580711
y: -17.1227073669
theta: 4.79597663879
speed: 14.1207914352
id: 1
t: 85
xxx after update is x: -2.90818285942
y: -18.3901538849
theta: 4.8513302803
speed: 14.1906375885
id: 1
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8904426598994274, 0.5343999999999989]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.20912861824
y: -6.93597698212
theta: 1.67445743084
speed: -0.235656961799
id: 0
t: 84

sim.py in the sim.py statecallback function, msg is

x: 3.09690690041
y: -7.46203899384
theta: 1.55788850784
speed: -0.19212013483
id: 0
t: 85

sim.py in the sim.py statecallback function, msg is

x: 2.92226076126
y: -7.57490205765
theta: 1.60461485386
speed: 0.423973411322
id: 0
t: 86

222 self.state_dicts[msg.id][msg.t] is (2.9222607612609863, -7.574902057647705, 1.6046148538589478, 0.42397341132164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
ca68719
theta: 4.71634817123
speed: 13.6337747574
id: 1
t: 84

sim.py in the sim.py statecallback function, msg is

x: -2.76955580711
y: -17.1227073669
theta: 4.79597663879
speed: 14.1207914352
id: 1
t: 85

222 self.state_dicts[msg.id][msg.t] is (-2.7695558071136475, -17.12270736694336, 4.795976638793945, 14.1207914352417)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:86
xxx before update is x: 3.09690690041
y: -7.46203899384
theta: 1.55788850784
speed: -0.19212013483
id: 0
t: 85
xxx after update is x: 2.92226076126
y: -7.57490205765
theta: 1.60461485386
speed: 0.423973411322
id: 0
t: 86
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: 2.92226076126
y: -7.57490205765
theta: 1.60461485386
speed: 0.423973411322
id: 0
t: 86
xxx after update is x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending RELEASE,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.8666666666666667, True, ['1']]
3.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 3.86666666667
(RATE*SLOWDOWN) is 22.5
MR[0] is 3.86666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending GET,0,3.86666666667,(3.50903582572937, -7.0941624641418ll update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:87
xxx before update is x: -2.90818285942
y: -18.3901538849
theta: 4.8513302803
speed: 14.1906375885
id: 1
t: 86
xxx after update is x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '3.15555555556', 'Position': ['(3.886808156967163', ' -7.432860851287842', ' 1.7552331686019897)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.15555555556,(3.886808156967163, -7.432860851287842, 1.7552331686019897),0,1,1.15555555556,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '3.86666666667', 'IntendedCourse': 'left', 'Position': ['3.50903582572937', ' -7.094162464141846', ' 1.409082055091858'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.171851851852
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
current clock is 3.86666666667
self.communication_details == 0
sending DENY,1,3.86666666667,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87
xxx after update is x: -3.99642968178
y: -19.5231399536
theta: 4.77289485931
speed: 14.0148410797
id: 1
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.s46, 1.409082055091858),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
current clock is 3.86666666667
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '3.86666666667', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,3.86666666667,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [3.8666666666666667, True, ['1']]
3.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [3.8666666666666667, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:88
xxx before update is x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87
xxx after update is x: 3.18730568886
y: -7.15279245377
theta: 1.5313680172
speed: 0.140126511455
id: 0
t: 88
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: 3.18730568886
y: -7.15279245377
theta: 1.5313680172
speed: 0.140126511455
id: 0
t: 88
xxx after update is x: 2.80745053291
y: -7.23574781418
theta: 1.48396241665
speed: 0.258043348789
id: 0
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8880044970193078, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.90818285942
y: -18.3901538849
theta: 4.8513302803
speed: 14.1906375885
id: 1
t: 86

sim.py in the sim.py statecallback function, msg is

x: -3.23391723633
y: -18.4454593658
theta: 4.61561870575
speed: 13.466794014
id: 1
t: 87

sim.py in the sim.py statecallback function, msg is

x: -3.99642968178
y: -19.5231399536
theta: 4.77289485931
speed: 14.0148410797
id: 1
t: 88

sim.py in the sim.py statecallback function, msg is

x: -2.63480806351
y: -20.0480861664
theta: 4.57586097717
speed: 13.8600311279
id: 1
t: 89

222 self.state_dicts[msg.id][msg.t] is (-2.63480806350708, -20.048086166381836, 4.575860977172852, 13.860031127929688)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: 2.80745053291
y: -7.23574781418
theta: 1.48396241665
speed: 0.258043348789
id: 0
t: 89
xxx after update is x: 2.9652359485peed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:89
xxx before update is x: -3.99642968178
y: -19.5231399536
theta: 4.77289485931
speed: 14.0148410797
id: 1
t: 88
xxx after update is x: -2.63480806351
y: -20.0480861664
theta: 4.57586097717
speed: 13.8600311279
id: 1
t: 89
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.41184520348599984, 0.4895999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.50903582573
y: -7.09416246414
theta: 1.40908205509
speed: -0.289783418179
id: 0
t: 87

sim.py in the sim.py statecallback function, msg is

x: 3.18730568886
y: -7.15279245377
theta: 1.5313680172
speed: 0.140126511455
id: 0
t: 88

sim.py in the sim.py statecallback function, msg is

x: 2.80745053291
y: -7.23574781418
theta: 1.48396241665
speed: 0.258043348789
id: 0
t: 89

222 self.state_dicts[msg.id][msg.t] is (2.807450532913208, -7.235747814178467, 1.4839624166488647, 0.2580433487892151)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:90
xxx before update is x: -2.63480806351
y: -20.0480861664
theta: 4.57586097717
speed: 13.8600311279
id: 1
t: 89
xxx after update is x: -2.83563947678
y: -20.1298294067
theta: 4.6684012413
speed: 13.9719438553
id: 1
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: -2.83563947678
y: -20.1298294067
theta: 4.6684012413
speed: 13.9719438553
id: 1
t: 90
xxx after update is x: -3.5118906498
y: -21.4011039734
theta: 4.53160619736
speed: 13.5422124863
id: 1
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: -3.5118906498
y: -21.4011039734
theta: 4.53160619736
speed: 13.5422124863
id: 1
t: 91
xxx after update is x: -3.62203145027
y: -21.8121623993
theta: 4.62163877487
speed: 14.4812355042
id: 1
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6075749364420011, 0.4895999999999979]
sim.py in the sim.py statecallback function, msg is

x: 2.96523594856
y: -7.53201580048
theta: 1.49217295647
speed: 0.0440153814852
id: 0
t: 90

sim.py in the sim.py statecallback function, msg is

x: 3.29465150833
y: -6.96559524536
theta: 1.56447517872
speed: -0.420800507069
id: 0
t: 91

sim.py in the sim.py statecallback function, msg is

x: 2.70494294167
y: -7.77504348755
theta: 1.62085950375
speed: -0.0798186957836
id: 0
t: 92

222 self.state_dicts[msg.id][msg.t] is (2.7049429416656494, -7.775043487548828, 1.6208595037460327, -0.07981869578361511)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: -3.62203145027
y: -21.8121623993
theta: 4.62163877487
speed: 14.4812355042
id: 1
t: 92
xxx after update is x: -3.23081970215
y: -22.402545929
theta: 4.63023376465
speed: 13.5845298767
id: 1
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, fi6
y: -7.53201580048
theta: 1.49217295647
speed: 0.0440153814852
id: 0
t: 90
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:91
xxx before update is x: 2.96523594856
y: -7.53201580048
theta: 1.49217295647
speed: 0.0440153814852
id: 0
t: 90
xxx after update is x: 3.29465150833
y: -6.96559524536
theta: 1.56447517872
speed: -0.420800507069
id: 0
t: 91
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:92
xxx before update is x: 3.29465150833
y: -6.96559524536
theta: 1.56447517872
speed: -0.420800507069
id: 0
t: 91
xxx after update is x: 2.70494294167
y: -7.77504348755
theta: 1.62085950375
speed: -0.0798186957836
id: 0
t: 92
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:93
xxx before update is x: 2.70494294167
y: -7.77504348755
theta: 1.62085950375
speed: -0.0798186957836
id: 0
t: 92
xxx after update is x: 3.3673992157
y: -6.96552371979
theta: 1.38298738003
speed: -0.427504837513
id: 0
t: 93
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.748350079724515, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.83563947678
y: -20.1298294067
theta: 4.6684012413
speed: 13.9719438553
id: 1
t: 90

sim.py in the sim.py statecallback function, msg is

x: -3.5118906498
y: -21.4011039734
theta: 4.53160619736
speed: 13.5422124863
id: 1
t: 91

sim.py in the sim.py statecallback function, msg is

x: -3.62203145027
y: -21.8121623993
theta: 4.62163877487
speed: 14.4812355042
id: 1
t: 92

sim.py in the sim.py statecallback function, msg is

x: -3.23081970215
y: -22.402545929
theta: 4.63023376465
speed: 13.5845298767
id: 1
t: 93

222 self.state_dicts[msg.id][msg.t] is (-3.2308197021484375, -22.402545928955078, 4.6302337646484375, 13.584529876708984)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:94
xxx before update is x: 3.3673992157
y: -6.96552371979
theta: 1.38298738003
speed: -0.427504837513
id: 0
t: 93
xxx after update is x: 2.76202845573
y: -7.22012281418
theta: 1.57549571991
speed: -0.0996971800923
id: 0
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:95
xxx before update is x: 2.76202845573
y: -7.22012281418
theta: 1.57549571991
speed: -0.0996971800923
id: 0
t: 94
xxx after update is x: 3.1108314991
y: -7.72601318359
theta: 1.43736708164
speed: -0.0277363937348
id: 0
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: 3.1108314991
y: -7.72601318359
theta: 1.43736708164
speed: -0.0277363937348
id: 0
t: 95
xxx after update is x: 3.39336800575
y: -8.30520248413
theta: 1.6317884922
speed: 0.197106570005
id: 0
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.49140113734552904, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.62706041336
y: -22.7502498627
theta: 4.8118429184
speed: 13.9890289307
id: 1
t: 9nish the n times spin:94xxx before update is x: -3.23081970215
y: -22.402545929
theta: 4.63023376465
speed: 13.5845298767
id: 1
t: 93
xxx after update is x: -3.62706041336
y: -22.7502498627
theta: 4.8118429184
speed: 13.9890289307
id: 1
t: 94
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9142232502078603, 0.5247999999999986]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.3673992157
y: -6.96552371979
theta: 1.38298738003
speed: -0.427504837513
id: 0
t: 93

sim.py in the sim.py statecallback function, msg is

x: 2.76202845573
y: -7.22012281418
theta: 1.57549571991
speed: -0.0996971800923
id: 0
t: 94

222 self.state_dicts[msg.id][msg.t] is (2.762028455734253, -7.220122814178467, 1.575495719909668, -0.09969718009233475)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -3.62706041336
y: -22.7502498627
theta: 4.8118429184
speed: 13.9890289307
id: 1
t: 94
xxx after update is x: -3.23295235634
y: -23.287940979
theta: 4.64698886871
speed: 13.269528389
id: 1
t: 95
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:95
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:96
xxx before update is x: -3.23295235634
y: -23.287940979
theta: 4.64698886871
speed: 13.269528389
id: 1
t: 95
xxx after update is x: -3.18697047234
y: -24.0771865845
theta: 4.62076234818
speed: 13.6134414673
id: 1
t: 96
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.18697047234
y: -24.0771865845
theta: 4.62076234818
speed: 13.6134414673
id: 1
t: 96
xxx after update is x: -3.52852964401
y: -25.2011451721
theta: 4.60892343521
speed: 14.1360883713
id: 1
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:97
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8159397572527448, 0.5119999999999982]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.1108314991
y: -7.72601318359
theta: 1.43736708164
speed: -0.0277363937348
id: 0
t: 95

sim.py in the sim.py statecallback function, msg is

x: 3.39336800575
y: -8.30520248413
theta: 1.6317884922
speed: 0.197106570005
id: 0
t: 96

sim.py in the sim.py statecallback function, msg is

x: 3.08874893188
y: -7.63906145096
theta: 1.4594681263
speed: -0.0303664896637
id: 0
t: 97

222 self.state_dicts[msg.id][msg.t] is (3.0887489318847656, -7.639061450958252, 1.459468126296997, -0.03036648966372013)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: -3.52852964401
y: -25.2011451721
theta: 4.60892343521
speed: 14.1360883713
id: 1
t: 97
xxx after update is x: -3.37558698654
y: -25.586271286
theta: 4.6218290329
speed: 13.5694198608
id: 1
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: -3.37558698654
y: -25.586271286
theta: 4.6218290329
speed: 13.5694198608
id: 1
t: 98
xxx after update is x: -3.25420165062
y: -26.6315593719
theta: 4.83247709274
speed: 13.8833827972
4

sim.py in the sim.py statecallback function, msg is

x: -3.23295235634
y: -23.287940979
theta: 4.64698886871
speed: 13.269528389
id: 1
t: 95

sim.py in the sim.py statecallback function, msg is

x: -3.18697047234
y: -24.0771865845
theta: 4.62076234818
speed: 13.6134414673
id: 1
t: 96

222 self.state_dicts[msg.id][msg.t] is (-3.1869704723358154, -24.077186584472656, 4.620762348175049, 13.613441467285156)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:97
xxx before update is x: 3.39336800575
y: -8.30520248413
theta: 1.6317884922
speed: 0.197106570005
id: 0
t: 96
xxx after update is x: 3.08874893188
y: -7.63906145096
theta: 1.4594681263
speed: -0.0303664896637
id: 0
t: 97
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:98
xxx before update is x: 3.08874893188
y: -7.63906145096
theta: 1.4594681263
speed: -0.0303664896637
id: 0
t: 97
xxx after update is x: 3.07690191269
y: -8.05868339539
theta: 1.41988754272
speed: 0.0474627315998
id: 0
t: 98
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:99
xxx before update is x: 3.07690191269
y: -8.05868339539
theta: 1.41988754272
speed: 0.0474627315998
id: 0
t: 98
xxx after update is x: 2.90812635422
y: -7.76804733276
theta: 1.56691324711
speed: -0.0359613262117
id: 0
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8821630931319683, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.52852964401
y: -25.2011451721
theta: 4.60892343521
speed: 14.1360883713
id: 1
t: 97

sim.py in the sim.py statecallback function, msg is

x: -3.37558698654
y: -25.586271286
theta: 4.6218290329
speed: 13.5694198608
id: 1
t: 98

sim.py in the sim.py statecallback function, msg is

x: -3.25420165062
y: -26.6315593719
theta: 4.83247709274
speed: 13.8833827972
id: 1
t: 99

222 self.state_dicts[msg.id][msg.t] is (-3.254201650619507, -26.631559371948242, 4.83247709274292, 13.883382797241211)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: 2.90812635422
y: -7.76804733276
theta: 1.56691324711
speed: -0.0359613262117
id: 0
t: 99
xxx after update is x: 3.00193548203
y: -7.03336906433
theta: 1.7060135603
speed: -0.178966209292
id: 0
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: 3.00193548203
y: -7.03336906433
theta: 1.7060135603
speed: -0.178966209292
id: 0
t: 100
xxx after update is x: 3.5386838913
y: -7.63765382767
theta: 1.71063137054
speed: 0.24120144546
id: 0
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: 3.5386838913
y: -7.63765382767
theta: 1.71063137054
speed: 0.24120144546
id: 0
t: 101
xxx after update is x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 10id: 1
t: 99
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:100
xxx before update is x: -3.25420165062
y: -26.6315593719
theta: 4.83247709274
speed: 13.8833827972
id: 1
t: 99
xxx after update is x: -2.71543264389
y: -26.6732521057
theta: 4.73501062393
speed: 13.9429559708
id: 1
t: 100
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:101
xxx before update is x: -2.71543264389
y: -26.6732521057
theta: 4.73501062393
speed: 13.9429559708
id: 1
t: 100
xxx after update is x: -3.47594189644
y: -27.2903823853
theta: 4.40981340408
speed: 13.9854259491
id: 1
t: 101
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8926461637219807, 0.5071999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.07690191269
y: -8.05868339539
theta: 1.41988754272
speed: 0.0474627315998
id: 0
t: 98

sim.py in the sim.py statecallback function, msg is

x: 2.90812635422
y: -7.76804733276
theta: 1.56691324711
speed: -0.0359613262117
id: 0
t: 99

sim.py in the sim.py statecallback function, msg is

x: 3.00193548203
y: -7.03336906433
theta: 1.7060135603
speed: -0.178966209292
id: 0
t: 100

sim.py in the sim.py statecallback function, msg is

x: 3.5386838913
y: -7.63765382767
theta: 1.71063137054
speed: 0.24120144546
id: 0
t: 101

222 self.state_dicts[msg.id][msg.t] is (3.5386838912963867, -7.637653827667236, 1.7106313705444336, 0.24120144546031952)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:102
xxx before update is x: -3.47594189644
y: -27.2903823853
theta: 4.40981340408
speed: 13.9854259491
id: 1
t: 101
xxx after update is x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '3.86666666667', 'Position': ['(3.50903582572937', ' -7.094162464141846', ' 1.409082055091858)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processin2
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
current clock is 4.53333333333
self.communication_details == 0
sending RELEASE,0,3.86666666667,(3.50903582572937, -7.094162464141846, 1.409082055091858),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.533333333333333, True, ['1']]
4.53333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 4.53333333333
(RATE*SLOWDOWN) is 22.5
MR[0] is 4.53333333333
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
current clock is 4.53333333333
self.communication_details == 0
sending GET,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
current clock is 4.53333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '4.53333333333', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,4.53333333333,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [4.533333333333333, True, ['1']]
4.53333333333
True
1
maneuver_negotiatir.py get membership, in the get_MR g, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '4.53333333333', 'IntendedCourse': 'left', 'Position': ['2.9386541843414307', ' -7.138619899749756', ' 1.4675416946411133'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.201481481481
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
current clock is 4.53333333333
self.communication_details == 0
sending DENY,1,4.53333333333,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102
xxx after update is x: -3.11128664017
y: -28.3562831879
theta: 4.7068862915
speed: 13.8185529709
id: 1
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: -3.11128664017
y: -28.3562831879
theta: 4.7068862915
speed: 13.8185529709
id: 1
t: 103
xxx after update is x: -3.37858605385
y: -28.7343788147
theta: 4.76174259186
speed: 14.1142168045
id: 1
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7888436422421999, 0.476799999999998]
sim.py in the sim.py statecallback function, msg is

x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102

sim.py in the sim.py statecallback function, msg is

x: 3.47288680077
y: -6.8798289299
theta: 1.59560334682
speed: -0.0773697197437
id: 0
t: 103

sim.py in the sim.py statecallback function, msg is

x: 3.5226585865
y: -7.14462327957
theta: 1.73673546314
speed: -0.0911379605532
id: 0
t: 104

222 self.state_dicts[msg.id][msg.t] is (3.522658586502075, -7.144623279571533, 1.736735463142395, -0.09113796055316925)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:105
xxx before update is x: -3.37858605385
y: -28.7343788147
theta: 4.76174259186
speed: 14.1142168045
id: 1
t: 104
xxx after update is x: -3.06734704971
y: -29.6266307831
theta: 4.80902385712
speed: 14.0608587265
id: 1
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:106
xxx before update is x: -3.06734704971
y: -29.6266307831
theta: 4.80902385712
speed: 14.0608587265
id: 1
t: 105
xxx after update is x: -3.22854542732
y: -30.3211994171
theta: 4.7284245491
speed: 14.1660289764
function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [4.533333333333333, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:103
xxx before update is x: 2.93865418434
y: -7.13861989975
theta: 1.46754169464
speed: 0.0891694352031
id: 0
t: 102
xxx after update is x: 3.47288680077
y: -6.8798289299
theta: 1.59560334682
speed: -0.0773697197437
id: 0
t: 103
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8569311800278977, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.71543264389
y: -26.6732521057
theta: 4.73501062393
speed: 13.9429559708
id: 1
t: 100

sim.py in the sim.py statecallback function, msg is

x: -3.47594189644
y: -27.2903823853
theta: 4.40981340408
speed: 13.9854259491
id: 1
t: 101

sim.py in the sim.py statecallback function, msg is

x: -3.15117144585
y: -27.3040351868
theta: 5.00140476227
speed: 13.6255235672
id: 1
t: 102

sim.py in the sim.py statecallback function, msg is

x: -3.11128664017
y: -28.3562831879
theta: 4.7068862915
speed: 13.8185529709
id: 1
t: 103

222 self.state_dicts[msg.id][msg.t] is (-3.1112866401672363, -28.35628318786621, 4.706886291503906, 13.81855297088623)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:104
xxx before update is x: 3.47288680077
y: -6.8798289299
theta: 1.59560334682
speed: -0.0773697197437
id: 0
t: 103
xxx after update is x: 3.5226585865
y: -7.14462327957
theta: 1.73673546314
speed: -0.0911379605532
id: 0
t: 104
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:105
xxx before update is x: 3.5226585865
y: -7.14462327957
theta: 1.73673546314
speed: -0.0911379605532
id: 0
t: 104
xxx after update is x: 3.15101575851
y: -7.02793216705
theta: 1.35876810551
speed: 0.0266097243875
id: 0
t: 105
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.15101575851
y: -7.02793216705
theta: 1.35876810551
speed: 0.0266097243875
id: 0
t: 105
xxx after update is x: 3.16339755058
y: -7.66307878494
theta: 1.4623568058
speed: 0.174773067236
id: 0
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:106
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.16339755058
y: -7.66307878494
theta: 1.4623568058
speed: 0.174773067236
id: 0
t: 106
xxx after update is x: 2.97015190125
y: -6.78618764877
theta: 1.57261478901
speed: 0.643776059151
id: 0
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107
aaaaaa
risk is [0.6925833697187095, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.37858605385
y: -28.7343788147
theta: 4.76174259186
speed: 14.1142168045
id: 1
t: 104

sim.py in the sim.py stid: 1
t: 106
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.22854542732
y: -30.3211994171
theta: 4.7284245491
speed: 14.1660289764
id: 1
t: 106
xxx after update is x: -3.52607798576
y: -30.9004459381
theta: 4.85605621338
speed: 13.7104301453
id: 1
t: 107
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:107
aaaaaa
aaaaaabbbbb
risk is [0.7488909873672526, 0.4975999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.15101575851
y: -7.02793216705
theta: 1.35876810551
speed: 0.0266097243875
id: 0
t: 105

sim.py in the sim.py statecallback function, msg is

x: 3.16339755058
y: -7.66307878494
theta: 1.4623568058
speed: 0.174773067236
id: 0
t: 106

sim.py in the sim.py statecallback function, msg is

x: 2.97015190125
y: -6.78618764877
theta: 1.57261478901
speed: 0.643776059151
id: 0
t: 107

222 self.state_dicts[msg.id][msg.t] is (2.970151901245117, -6.786187648773193, 1.5726147890090942, 0.6437760591506958)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.52607798576
y: -30.9004459381
theta: 4.85605621338
speed: 13.7104301453
id: 1
t: 107
xxx after update is x: -3.12669253349
y: -31.3716335297
theta: 4.6496720314
speed: 13.7396335602
id: 1
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12669253349
y: -31.3716335297
theta: 4.6496720314
speed: 13.7396335602
id: 1
t: 108
xxx after update is x: -3.43066048622
y: -31.8956604004
theta: 4.68302726746
speed: 13.9513664246
id: 1
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:109
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: -3.43066048622
y: -31.8956604004
theta: 4.68302726746
speed: 13.9513664246
id: 1
t: 109
xxx after update is x: -3.34172773361
y: -32.9454345703
theta: 4.819272995
speed: 13.7802629471
id: 1
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.034900544689778365, 0.4927999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.6358230114
y: -7.53093576431
theta: 1.58778178692
speed: 0.153405502439
id: 0
t: 108

sim.py in the sim.py statecallback function, msg is

x: 3.43828225136
y: -7.2961306572
theta: 1.54299414158
speed: -0.155922695994
id: 0
t: 109

sim.py in the sim.py statecallback function, msg is

x: 3.01388597488
y: -8.1871881485
theta: 1.67098963261
speed: -0.0808271318674
id: 0
t: 110

222 self.state_dicts[msg.id][msg.t] is (3.013885974884033, -8.187188148498535, 1.6709896326065063, -0.08082713186740875)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:111
xxx before update is x: -3.34172773361
y: -32.9454345703
theta: 4.819272995
speed: 13.7802629471
id: 1
t: 110
xxx after update is x: -2.97797489166
y: -33.2463531494
theta: 4.56045675278
speed: 13.8178024292
id: 1
t: 111
maneuver_negotiatir.py finish the update agent staatecallback function, msg is

x: -3.06734704971
y: -29.6266307831
theta: 4.80902385712
speed: 14.0608587265
id: 1
t: 105

sim.py in the sim.py statecallback function, msg is

x: -3.22854542732
y: -30.3211994171
theta: 4.7284245491
speed: 14.1660289764
id: 1
t: 106

sim.py in the sim.py statecallback function, msg is

x: -3.52607798576
y: -30.9004459381
theta: 4.85605621338
speed: 13.7104301453
id: 1
t: 107

222 self.state_dicts[msg.id][msg.t] is (-3.52607798576355, -30.90044593811035, 4.856056213378906, 13.710430145263672)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.97015190125
y: -6.78618764877
theta: 1.57261478901
speed: 0.643776059151
id: 0
t: 107
xxx after update is x: 3.6358230114
y: -7.53093576431
theta: 1.58778178692
speed: 0.153405502439
id: 0
t: 108
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:108
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:109
xxx before update is x: 3.6358230114
y: -7.53093576431
theta: 1.58778178692
speed: 0.153405502439
id: 0
t: 108
xxx after update is x: 3.43828225136
y: -7.2961306572
theta: 1.54299414158
speed: -0.155922695994
id: 0
t: 109
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:110
xxx before update is x: 3.43828225136
y: -7.2961306572
theta: 1.54299414158
speed: -0.155922695994
id: 0
t: 109
xxx after update is x: 3.01388597488
y: -8.1871881485
theta: 1.67098963261
speed: -0.0808271318674
id: 0
t: 110
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.010598961707009259, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.12669253349
y: -31.3716335297
theta: 4.6496720314
speed: 13.7396335602
id: 1
t: 108

sim.py in the sim.py statecallback function, msg is

x: -3.43066048622
y: -31.8956604004
theta: 4.68302726746
speed: 13.9513664246
id: 1
t: 109

sim.py in the sim.py statecallback function, msg is

x: -3.34172773361
y: -32.9454345703
theta: 4.819272995
speed: 13.7802629471
id: 1
t: 110

222 self.state_dicts[msg.id][msg.t] is (-3.3417277336120605, -32.9454345703125, 4.819272994995117, 13.78026294708252)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.01388597488
y: -8.1871881485
theta: 1.67098963261
speed: -0.0808271318674
id: 0
t: 110
xxx after update is x: 2.84788036346
y: -7.32673501968
theta: 1.62049257755
speed: -0.379770278931
id: 0
t: 111
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:111
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: 2.84788036346
y: -7.32673501968
theta: 1.62049257755
speed: -0.379770278931
id: 0
t: 111
xxx after update is x: 3.23352193832
y: -7.21234846115
theta: 1.76218163967
speed: -0.024276169017
id: 0
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: 3.23352193832
y: -7.21234846115
theta: 1.76218163967
speed: -0.024te from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9806092770863881, 0.46879999999999805]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.84788036346
y: -7.32673501968
theta: 1.62049257755
speed: -0.379770278931
id: 0
t: 111

222 self.state_dicts[msg.id][msg.t] is (2.8478803634643555, -7.326735019683838, 1.6204925775527954, -0.37977027893066406)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:112
xxx before update is x: -2.97797489166
y: -33.2463531494
theta: 4.56045675278
speed: 13.8178024292
id: 1
t: 111
xxx after update is x: -2.92951226234
y: -34.6078529358
theta: 4.96496915817
speed: 13.560136795
id: 1
t: 112
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:113
xxx before update is x: -2.92951226234
y: -34.6078529358
theta: 4.96496915817
speed: 13.560136795
id: 1
t: 112
xxx after update is x: -3.42508792877
y: -34.7823677063
theta: 4.7841463089
speed: 14.1269845963
id: 1
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.42508792877
y: -34.7823677063
theta: 4.7841463089
speed: 14.1269845963
id: 1
t: 113
xxx after update is x: -3.1257147789
y: -35.3913192749
theta: 4.61836910248
speed: 14.0088157654
id: 1
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:114
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6730477443893039, 0.4639999999999981]
sim.py in the sim.py statecallback function, msg is

x: 3.23352193832
y: -7.21234846115
theta: 1.76218163967
speed: -0.024276169017
id: 0
t: 112

sim.py in the sim.py statecallback function, msg is

x: 2.79773831367
y: -7.63647985458
theta: 1.44257545471
speed: -0.103914193809
id: 0
t: 113

sim.py in the sim.py statecallback function, msg is

x: 3.03292632103
y: -7.80035543442
theta: 1.5306661129
speed: 0.095833465457
id: 0
t: 114

222 self.state_dicts[msg.id][msg.t] is (3.032926321029663, -7.800355434417725, 1.5306661128997803, 0.09583346545696259)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: -3.1257147789
y: -35.3913192749
theta: 4.61836910248
speed: 14.0088157654
id: 1
t: 114
xxx after update is x: -3.61645245552
y: -35.8863792419
theta: 4.82550382614
speed: 13.7870426178
id: 1
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.61645245552
y: -35.8863792419
theta: 4.82550382614
speed: 13.7870426178
id: 1
t: 115
xxx after update is x: -3.01060318947
y: -36.4085083008
theta: 4.84197425842
speed: 13.3096504211
id: 1
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:116
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:117
xxx276169017
id: 0
t: 112
xxx after update is x: 2.79773831367
y: -7.63647985458
theta: 1.44257545471
speed: -0.103914193809
id: 0
t: 113
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9965720290622994, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.97797489166
y: -33.2463531494
theta: 4.56045675278
speed: 13.8178024292
id: 1
t: 111

sim.py in the sim.py statecallback function, msg is

x: -2.92951226234
y: -34.6078529358
theta: 4.96496915817
speed: 13.560136795
id: 1
t: 112

sim.py in the sim.py statecallback function, msg is

x: -3.42508792877
y: -34.7823677063
theta: 4.7841463089
speed: 14.1269845963
id: 1
t: 113

222 self.state_dicts[msg.id][msg.t] is (-3.4250879287719727, -34.78236770629883, 4.784146308898926, 14.126984596252441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:114
xxx before update is x: 2.79773831367
y: -7.63647985458
theta: 1.44257545471
speed: -0.103914193809
id: 0
t: 113
xxx after update is x: 3.03292632103
y: -7.80035543442
theta: 1.5306661129
speed: 0.095833465457
id: 0
t: 114
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:115
xxx before update is x: 3.03292632103
y: -7.80035543442
theta: 1.5306661129
speed: 0.095833465457
id: 0
t: 114
xxx after update is x: 2.68547439575
y: -7.30380678177
theta: 1.52822577953
speed: 0.135038807988
id: 0
t: 115
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:116
xxx before update is x: 2.68547439575
y: -7.30380678177
theta: 1.52822577953
speed: 0.135038807988
id: 0
t: 115
xxx after update is x: 3.47128582001
y: -7.78333091736
theta: 1.56484055519
speed: -0.0279934629798
id: 0
t: 116
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8715781161280677, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.1257147789
y: -35.3913192749
theta: 4.61836910248
speed: 14.0088157654
id: 1
t: 114

sim.py in the sim.py statecallback function, msg is

x: -3.61645245552
y: -35.8863792419
theta: 4.82550382614
speed: 13.7870426178
id: 1
t: 115

sim.py in the sim.py statecallback function, msg is

x: -3.01060318947
y: -36.4085083008
theta: 4.84197425842
speed: 13.3096504211
id: 1
t: 116

222 self.state_dicts[msg.id][msg.t] is (-3.010603189468384, -36.40850830078125, 4.841974258422852, 13.309650421142578)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:117
xxx before update is x: 3.47128582001
y: -7.78333091736
theta: 1.56484055519
speed: -0.0279934629798
id: 0
t: 116
xxx after update is x: 3.39616918564
y: -7.59736537933
theta: 1.75828874111
speed: 0.142941087484
id: 0
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ro before update is x: -3.01060318947
y: -36.4085083008
theta: 4.84197425842
speed: 13.3096504211
id: 1
t: 116
xxx after update is x: -3.39680671692
y: -37.3164710999
theta: 4.76077318192
speed: 13.8792591095
id: 1
t: 117
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8778221861727896, 0.5071999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.68547439575
y: -7.30380678177
theta: 1.52822577953
speed: 0.135038807988
id: 0
t: 115

sim.py in the sim.py statecallback function, msg is

x: 3.47128582001
y: -7.78333091736
theta: 1.56484055519
speed: -0.0279934629798
id: 0
t: 116

sim.py in the sim.py statecallback function, msg is

x: 3.39616918564
y: -7.59736537933
theta: 1.75828874111
speed: 0.142941087484
id: 0
t: 117

222 self.state_dicts[msg.id][msg.t] is (3.3961691856384277, -7.597365379333496, 1.7582887411117554, 0.14294108748435974)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -3.39680671692
y: -37.3164710999
theta: 4.76077318192
speed: 13.8792591095
id: 1
t: 117
xxx after update is x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '5.2', 'IntendedCourse': 'left', 'Position': ['3.3961691856384277', ' -7.597365379333496', ' 1.7582887411117554'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.231111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
leave the update function 
in spin function, finish the n times spin:118
added car with id 0 to grantlist. current grantlist:  {0: [10.066666666666666, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
self.communication_details == 0
sending GRANT,1,5.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is nots_measurements is not emptymaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.39616918564
y: -7.59736537933
theta: 1.75828874111
speed: 0.142941087484
id: 0
t: 117
current clock is 5.2
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [5.2, True, ['1']]
5.2
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 5.2
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.2
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.39616918564
y: -7.59736537933
theta: 1.75828874111
speed: 0.142941087484
id: 0
t: 117
current clock is 5.2
self.communication_details == 0
sending GET,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0,left to car 1 from car 0
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:118
xxx before update is x: 3.39616918564
y: -7.59736537933
theta: 1.75828874111
speed: 0.142941087484
id: 0
t: 117
xxx after update is x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118
maneuver_negotiatir.py finish the update agent state from ros funtion

x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118
current clock is 5.24444444444
self.communication_details == 0
sending RELEASE,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '5.24444444444', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [5.2, True, ['1']]
5.2
True
1
maneuver_negotiatir.py get membership, in the get_MR fun empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
current clock is 5.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '4.53333333333', 'Position': ['(2.9386541843414307', ' -7.138619899749756', ' 1.4675416946411133)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,4.53333333333,(2.9386541843414307, -7.138619899749756, 1.4675416946411133),0,1,1.15555555556,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:119
xxx before update is x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118
xxx after update is x: -3.09559297562
y: -38.5133018494
theta: 4.91973876953
speed: 13.7697515488
id: 1
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:120
xxx before update is x: -3.09559297562
y: -38.5133018494
theta: 4.91973876953
speed: 13.7697515488
id: 1
t: 119
xxx after update is x: -3.22616052628
y: -39.2334976196
theta: 4.75529718399
speed: 14.0527353287
id: 1
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8700836931487037, 0.48639999999999795]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118

sim.py in the sim.py statecallback function, msg is

x: 2.78262543678
y: -7.16473865509
theta: 1.67152905464
speed: -0.0684893131256
id: 0
t: 119

sim.py in the sim.py statecallback function, msg is

x: 2.92375969887
y: -7.28291082382
theta: 1.60394859314
speed: -0.162302359939
id: 0
t: 120

222 self.state_dicts[msg.id][msg.t] is (2.923759698867798, -7.2829108238220215, 1.6039485931396484, -0.16230235993862152)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:121
xxx before update is x: -3.22616052628
y: -39.2334976196
theta: 4.75529718399
speed: 14.0527353287
id: 1
t: 120
xxx after update is x: -3.5657119751
y: -39.7552719116
theta: 4.79223203659
speed: 13.507019043
id: 1
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:122
xxx before update is x: -3.5657119751
y: -39.7552719116
theta: 4.79223203659
speed: 13.507019043
id: 1
t: 121
xxx after update is x: -3.21937012672
y: -39.9380264282
theta: 4.66100978851
speed: 14.0996360779
id: 1
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8652961853198684, 0.4911999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.63430690765
y: -7.36918067932
theta: 1.44740176201
speed: -0.0584294423461
id: 0
t: 121

sim.py in the sim.py statecallback function, msg is

x: 3.35699534416
y: -7.80996847153
theta: 1.47619616ction, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.2, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.8657977581
y: -7.61401224136
theta: 1.64736247063
speed: -0.0624418072402
id: 0
t: 118
xxx after update is x: 2.78262543678
y: -7.16473865509
theta: 1.67152905464
speed: -0.0684893131256
id: 0
t: 119
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:119
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:120
xxx before update is x: 2.78262543678
y: -7.16473865509
theta: 1.67152905464
speed: -0.0684893131256
id: 0
t: 119
xxx after update is x: 2.92375969887
y: -7.28291082382
theta: 1.60394859314
speed: -0.162302359939
id: 0
t: 120
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8624697067279605, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.39680671692
y: -37.3164710999
theta: 4.76077318192
speed: 13.8792591095
id: 1
t: 117

sim.py in the sim.py statecallback function, msg is

x: -3.51508593559
y: -37.7336921692
theta: 4.60628700256
speed: 13.7208967209
id: 1
t: 118

sim.py in the sim.py statecallback function, msg is

x: -3.09559297562
y: -38.5133018494
theta: 4.91973876953
speed: 13.7697515488
id: 1
t: 119

sim.py in the sim.py statecallback function, msg is

x: -3.22616052628
y: -39.2334976196
theta: 4.75529718399
speed: 14.0527353287
id: 1
t: 120

222 self.state_dicts[msg.id][msg.t] is (-3.2261605262756348, -39.233497619628906, 4.7552971839904785, 14.052735328674316)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:121
xxx before update is x: 2.92375969887
y: -7.28291082382
theta: 1.60394859314
speed: -0.162302359939
id: 0
t: 120
xxx after update is x: 3.63430690765
y: -7.36918067932
theta: 1.44740176201
speed: -0.0584294423461
id: 0
t: 121
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:122
xxx before update is x: 3.63430690765
y: -7.36918067932
theta: 1.44740176201
speed: -0.0584294423461
id: 0
t: 121
xxx after update is x: 3.35699534416
y: -7.80996847153
theta: 1.47619616985
speed: 0.0172528456897
id: 0
t: 122
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:123
xxx before update is x: 3.35699534416
y: -7.80996847153
theta: 1.47619616985
speed: 0.0172528456897
id: 0
t: 122
xxx after update is x: 2.80736470222
y: -7.85835504532
theta: 1.68606078625
speed: 0.286998599768
id: 0
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8888576970590996, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.5657119751
y: -39.7552719116
theta: 4.79223203659
speed: 13.507019043
id: 1
t: 121

sim.py in the sim.py statecallback function, msg is

x: -3.21937012672
y: -39.9380264282
theta: 4.66100978851
speed: 14.0996360779
id: 1
t: 122

sim.py in the sim.py statecallback function, msg is

x: -3.53625822067
y: 985
speed: 0.0172528456897
id: 0
t: 122

222 self.state_dicts[msg.id][msg.t] is (3.3569953441619873, -7.8099684715271, 1.4761961698532104, 0.01725284568965435)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:123
xxx before update is x: -3.21937012672
y: -39.9380264282
theta: 4.66100978851
speed: 14.0996360779
id: 1
t: 122
xxx after update is x: -3.53625822067
y: -40.8575668335
theta: 4.65379858017
speed: 13.2318611145
id: 1
t: 123
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:124
xxx before update is x: -3.53625822067
y: -40.8575668335
theta: 4.65379858017
speed: 13.2318611145
id: 1
t: 123
xxx after update is x: -3.20780515671
y: -41.4638977051
theta: 4.74366521835
speed: 14.0698204041
id: 1
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:125
xxx before update is x: -3.20780515671
y: -41.4638977051
theta: 4.74366521835
speed: 14.0698204041
id: 1
t: 124
xxx after update is x: -2.94694304466
y: -42.0419540405
theta: 4.73387289047
speed: 14.2600326538
id: 1
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8332349427649778, 0.5151999999999983]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.80736470222
y: -7.85835504532
theta: 1.68606078625
speed: 0.286998599768
id: 0
t: 123

sim.py in the sim.py statecallback function, msg is

x: 2.77160620689
y: -7.80756616592
theta: 1.45940732956
speed: -0.25960752368
id: 0
t: 124

sim.py in the sim.py statecallback function, msg is

x: 2.72383666039
y: -7.84414863586
theta: 1.55305933952
speed: 0.443384289742
id: 0
t: 125

222 self.state_dicts[msg.id][msg.t] is (2.723836660385132, -7.844148635864258, 1.5530593395233154, 0.4433842897415161)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:126
xxx before update is x: -2.94694304466
y: -42.0419540405
theta: 4.73387289047
speed: 14.2600326538
id: 1
t: 125
xxx after update is x: -3.37424302101
y: -43.0462303162
theta: 4.64550971985
speed: 13.7891016006
id: 1
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:127
xxx before update is x: -3.37424302101
y: -43.0462303162
theta: 4.64550971985
speed: 13.7891016006
id: 1
t: 126
xxx after update is x: -3.62471604347
y: -43.0656509399
theta: 4.69659662247
speed: 13.6866292953
id: 1
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.5632543160249287, 0.5007999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.36132645607
y: -7.28083324432
theta: 1.75866341591
speed: -0.00829544197768
id: 0
t: 126

sim.py in the sim.py statecallback function, msg is

x: 3.11054754257
y: -7.75845479965
theta: 1.65978550911
speed: 0.130604043603
id: 0
t: 127

222 self.state_dicts[msg.id][msg.t] is (3.1105475425720215, -7.7584547996521, 1.659785509109497, 0.13060404360294342)
if we have all measurements for a certain time-stamp p-40.8575668335
theta: 4.65379858017
speed: 13.2318611145
id: 1
t: 123

222 self.state_dicts[msg.id][msg.t] is (-3.5362582206726074, -40.857566833496094, 4.653798580169678, 13.231861114501953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:124
xxx before update is x: 2.80736470222
y: -7.85835504532
theta: 1.68606078625
speed: 0.286998599768
id: 0
t: 123
xxx after update is x: 2.77160620689
y: -7.80756616592
theta: 1.45940732956
speed: -0.25960752368
id: 0
t: 124
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:125
xxx before update is x: 2.77160620689
y: -7.80756616592
theta: 1.45940732956
speed: -0.25960752368
id: 0
t: 124
xxx after update is x: 2.72383666039
y: -7.84414863586
theta: 1.55305933952
speed: 0.443384289742
id: 0
t: 125
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:126
xxx before update is x: 2.72383666039
y: -7.84414863586
theta: 1.55305933952
speed: 0.443384289742
id: 0
t: 125
xxx after update is x: 3.36132645607
y: -7.28083324432
theta: 1.75866341591
speed: -0.00829544197768
id: 0
t: 126
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:127
xxx before update is x: 3.36132645607
y: -7.28083324432
theta: 1.75866341591
speed: -0.00829544197768
id: 0
t: 126
xxx after update is x: 3.11054754257
y: -7.75845479965
theta: 1.65978550911
speed: 0.130604043603
id: 0
t: 127
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6513393258973389, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.20780515671
y: -41.4638977051
theta: 4.74366521835
speed: 14.0698204041
id: 1
t: 124

sim.py in the sim.py statecallback function, msg is

x: -2.94694304466
y: -42.0419540405
theta: 4.73387289047
speed: 14.2600326538
id: 1
t: 125

sim.py in the sim.py statecallback function, msg is

x: -3.37424302101
y: -43.0462303162
theta: 4.64550971985
speed: 13.7891016006
id: 1
t: 126

sim.py in the sim.py statecallback function, msg is

x: -3.62471604347
y: -43.0656509399
theta: 4.69659662247
speed: 13.6866292953
id: 1
t: 127

222 self.state_dicts[msg.id][msg.t] is (-3.62471604347229, -43.065650939941406, 4.696596622467041, 13.686629295349121)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:128
xxx before update is x: 3.11054754257
y: -7.75845479965
theta: 1.65978550911
speed: 0.130604043603
id: 0
t: 127
xxx after update is x: 3.2079808712
y: -8.00083827972
theta: 1.70903992653
speed: 0.0889918580651
id: 0
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:129
xxx before update is x: 3.2079808712
y: -8.00083827972
theta: 1.70903992653
speed: 0.0889918580651
id: 0
t: 128
xxx after update is x: 3.81585025787
y: -7.47576284409
theta: 1.52922213078
speed: -0.295136064291
id: 0
t: 129
maneuver_negotiatir.py finish the update agent state erform risk estimationgoing to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:128
xxx before update is x: -3.62471604347
y: -43.0656509399
theta: 4.69659662247
speed: 13.6866292953
id: 1
t: 127
xxx after update is x: -3.4768204689
y: -44.1440391541
theta: 4.73016119003
speed: 14.0245218277
id: 1
t: 128
maneuver_negotiatir.py finish the update agent state from ros funtion

self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:129
xxx before update is x: -3.4768204689
y: -44.1440391541
theta: 4.73016119003
speed: 14.0245218277
id: 1
t: 128
xxx after update is x: -3.04489898682
y: -44.5894432068
theta: 4.47926712036
speed: 13.5920658112
id: 1
t: 129
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:130
xxx before update is x: -3.04489898682
y: -44.5894432068
theta: 4.47926712036
speed: 13.5920658112
id: 1
t: 129
xxx after update is x: -3.48098015785
y: -44.8436317444
theta: 4.81704139709
speed: 13.8890781403
id: 1
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7687609670266811, 0.502399999999998]
sim.py in the sim.py statecallback function, msg is

x: 3.2079808712
y: -8.00083827972
theta: 1.70903992653
speed: 0.0889918580651
id: 0
t: 128

sim.py in the sim.py statecallback function, msg is

x: 3.81585025787
y: -7.47576284409
theta: 1.52922213078
speed: -0.295136064291
id: 0
t: 129

sim.py in the sim.py statecallback function, msg is

x: 3.47085142136
y: -7.90608501434
theta: 1.33239340782
speed: 0.139443084598
id: 0
t: 130

222 self.state_dicts[msg.id][msg.t] is (3.470851421356201, -7.906085014343262, 1.3323934078216553, 0.13944308459758759)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:131
xxx before update is x: -3.48098015785
y: -44.8436317444
theta: 4.81704139709
speed: 13.8890781403
id: 1
t: 130
xxx after update is x: -2.83366155624
y: -45.7784576416
theta: 4.74187088013
speed: 13.8456010818
id: 1
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:132
xxx before update is x: -2.83366155624
y: -45.7784576416
theta: 4.74187088013
speed: 13.8456010818
id: 1
t: 131
xxx after update is x: -3.31072044373
y: -46.3091011047
theta: 4.91407155991
speed: 13.8875780106
id: 1
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7440022989447764, 0.46879999999999805]
sim.py in the sim.py statecallback function, msg is

x: 3.10352778435
y: -7.41132450104
theta: 1.56520712376
speed: 0.141225337982
id: 0
t: 131

sim.py in the sim.py statecallback function, msg is

x: 3.63539409637
y: -7.47985172272
theta: 1.6186671257
speed: 0.0940089523792
id: 0
t: 132

222 self.state_dicts[msg.id][msg.t] is (3.6353940963745117, -7.479851722717285, 1.6186671257019043, 0.09400895237922668)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:130
xxx before update is x: 3.81585025787
y: -7.47576284409
theta: 1.52922213078
speed: -0.295136064291
id: 0
t: 129
xxx after update is x: 3.47085142136
y: -7.90608501434
theta: 1.33239340782
speed: 0.139443084598
id: 0
t: 130
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8393995282878516, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.4768204689
y: -44.1440391541
theta: 4.73016119003
speed: 14.0245218277
id: 1
t: 128

sim.py in the sim.py statecallback function, msg is

x: -3.04489898682
y: -44.5894432068
theta: 4.47926712036
speed: 13.5920658112
id: 1
t: 129

sim.py in the sim.py statecallback function, msg is

x: -3.48098015785
y: -44.8436317444
theta: 4.81704139709
speed: 13.8890781403
id: 1
t: 130

222 self.state_dicts[msg.id][msg.t] is (-3.480980157852173, -44.843631744384766, 4.817041397094727, 13.889078140258789)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:131
xxx before update is x: 3.47085142136
y: -7.90608501434
theta: 1.33239340782
speed: 0.139443084598
id: 0
t: 130
xxx after update is x: 3.10352778435
y: -7.41132450104
theta: 1.56520712376
speed: 0.141225337982
id: 0
t: 131
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:132
xxx before update is x: 3.10352778435
y: -7.41132450104
theta: 1.56520712376
speed: 0.141225337982
id: 0
t: 131
xxx after update is x: 3.63539409637
y: -7.47985172272
theta: 1.6186671257
speed: 0.0940089523792
id: 0
t: 132
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:133
xxx before update is x: 3.63539409637
y: -7.47985172272
theta: 1.6186671257
speed: 0.0940089523792
id: 0
t: 132
xxx after update is x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
current clock is 5.91111111111
self.communication_details == 0
sending RELEASE,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
custate function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:133
xxx before update is x: -3.31072044373
y: -46.3091011047
theta: 4.91407155991
speed: 13.8875780106
id: 1
t: 132
xxx after update is x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '5.2', 'Position': ['(3.3961691856384277', ' -7.597365379333496', ' 1.7582887411117554)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,5.2,(3.3961691856384277, -7.597365379333496, 1.7582887411117554),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '5.91111111111', 'IntendedCourse': 'left', 'Position': ['3.0542283058166504', ' -7.349944591522217', ' 1.6865324974060059'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.262716049383
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,5.91111111111,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [10.777777777777779, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
self.communication_details == 0
sending GRANT,1,5.91111111111,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id ==rrent clock is 5.91111111111
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [5.866666666666666, True, ['1']]
5.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 5.91111111111
(RATE*SLOWDOWN) is 22.5
MR[0] is 5.86666666667
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
current clock is 5.91111111111
self.communication_details == 0
sending GET,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
current clock is 5.91111111111
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '5.91111111111', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,5.91111111111,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [5.866666666666666, True, ['1']]
5.86666666667
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [5.866666666666666, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:134
xxx before update is x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133
xxx after update is x: 3.03514838219
y: -7.41958999634
theta: 1.61825418472
speed: 0.257625430822
id: 0
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.7697505830403417, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.83366155624
y: -45.7784576416
theta: 4.74187088013
speed: 13.8456010818
id: 1
t: 131

sim.py in the sim.py statecallback function, msg is

x: -3.31072044373
y: -46.3091011047
theta: 4.91407155991
speed: 13.8875780106
id: 1
t: 132

sim.py in the sim.py statecallback function, msg is

x: -3.24704933167
y: -47.23666 1):
leave the update function 
in spin function, finish the n times spin:134
xxx before update is x: -3.24704933167
y: -47.2366638184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133
xxx after update is x: -3.12887096405
y: -47.6951255798
theta: 4.69333028793
speed: 13.836807251
id: 1
t: 134
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:135
xxx before update is x: -3.12887096405
y: -47.6951255798
theta: 4.69333028793
speed: 13.836807251
id: 1
t: 134
xxx after update is x: -3.28959727287
y: -48.1724586487
theta: 4.74811172485
speed: 13.5606889725
id: 1
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8098456905628645, 0.4943999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.05422830582
y: -7.34994459152
theta: 1.68653249741
speed: -0.0817554444075
id: 0
t: 133

sim.py in the sim.py statecallback function, msg is

x: 3.03514838219
y: -7.41958999634
theta: 1.61825418472
speed: 0.257625430822
id: 0
t: 134

sim.py in the sim.py statecallback function, msg is

x: 2.67237615585
y: -7.58382797241
theta: 1.4573315382
speed: 0.333404153585
id: 0
t: 135

222 self.state_dicts[msg.id][msg.t] is (2.6723761558532715, -7.583827972412109, 1.4573315382003784, 0.33340415358543396)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:136
xxx before update is x: -3.28959727287
y: -48.1724586487
theta: 4.74811172485
speed: 13.5606889725
id: 1
t: 135
xxx after update is x: -2.96327614784
y: -48.7276306152
theta: 4.77969741821
speed: 13.3995914459
id: 1
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:137
xxx before update is x: -2.96327614784
y: -48.7276306152
theta: 4.77969741821
speed: 13.3995914459
id: 1
t: 136
xxx after update is x: -3.28455638885
y: -49.24010849
theta: 4.6661696434
speed: 14.1303024292
id: 1
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:138
xxx before update is x: -3.28455638885
y: -49.24010849
theta: 4.6661696434
speed: 14.1303024292
id: 1
t: 137
xxx after update is x: -3.18348407745
y: -49.9202461243
theta: 4.65276288986
speed: 13.8370389938
id: 1
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
risk is [0.6214003657446724, 0.49919999999999787]
sim.py in the sim.py statecallback function, msg is

x: 2.71791601181
y: -7.60703420639
theta: 1.59709429741
speed: -0.299443483353
id: 0
t: 136

sim.py in the sim.py statecallback function, msg is

x: 3.26515698433
y: -7.97807073593
theta: 1.50741350651
speed: 0.0817265808582
id: 0
t: 137

sim.py in the sim.py statecallback function, msg is

x: 3.77610850334
y: -7.97681522369
theta: 1.35828328133
speed: 0.311555027962
id: 0
t: 138

222 self.state_dicts[msg.id][msg.t] is (3.776108503341675, -7.976815223693848, 1.358283281326294, 0.31155502796173096)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in t38184
theta: 4.65995931625
speed: 13.7862539291
id: 1
t: 133

sim.py in the sim.py statecallback function, msg is

x: -3.12887096405
y: -47.6951255798
theta: 4.69333028793
speed: 13.836807251
id: 1
t: 134

222 self.state_dicts[msg.id][msg.t] is (-3.128870964050293, -47.695125579833984, 4.69333028793335, 13.836807250976562)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:135
xxx before update is x: 3.03514838219
y: -7.41958999634
theta: 1.61825418472
speed: 0.257625430822
id: 0
t: 134
xxx after update is x: 2.67237615585
y: -7.58382797241
theta: 1.4573315382
speed: 0.333404153585
id: 0
t: 135
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:136
xxx before update is x: 2.67237615585
y: -7.58382797241
theta: 1.4573315382
speed: 0.333404153585
id: 0
t: 135
xxx after update is x: 2.71791601181
y: -7.60703420639
theta: 1.59709429741
speed: -0.299443483353
id: 0
t: 136
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:137
xxx before update is x: 2.71791601181
y: -7.60703420639
theta: 1.59709429741
speed: -0.299443483353
id: 0
t: 136
xxx after update is x: 3.26515698433
y: -7.97807073593
theta: 1.50741350651
speed: 0.0817265808582
id: 0
t: 137
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.7809402443643841, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.28959727287
y: -48.1724586487
theta: 4.74811172485
speed: 13.5606889725
id: 1
t: 135

sim.py in the sim.py statecallback function, msg is

x: -2.96327614784
y: -48.7276306152
theta: 4.77969741821
speed: 13.3995914459
id: 1
t: 136

sim.py in the sim.py statecallback function, msg is

x: -3.28455638885
y: -49.24010849
theta: 4.6661696434
speed: 14.1303024292
id: 1
t: 137

222 self.state_dicts[msg.id][msg.t] is (-3.2845563888549805, -49.240108489990234, 4.6661696434021, 14.130302429199219)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:138
xxx before update is x: 3.26515698433
y: -7.97807073593
theta: 1.50741350651
speed: 0.0817265808582
id: 0
t: 137
xxx after update is x: 3.77610850334
y: -7.97681522369
theta: 1.35828328133
speed: 0.311555027962
id: 0
t: 138
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:139
xxx before update is x: 3.77610850334
y: -7.97681522369
theta: 1.35828328133
speed: 0.311555027962
id: 0
t: 138
xxx after update is x: 2.65992999077
y: -6.83915376663
theta: 1.47697401047
speed: -0.0528416894376
id: 0
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:140
xxx before update is x: 2.65992999077
y: -6.83915376663
theta: 1.47697401047
speed: -0.0528416894376
id: 0
t: 139
xxx after update is x: 3.27102088928
y: -7.5133228302
theta: 1.56975531578
speed: 0.093619376421
id: 0
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
he sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:139
xxx before update is x: -3.18348407745
y: -49.9202461243
theta: 4.65276288986
speed: 13.8370389938
id: 1
t: 138
xxx after update is x: -3.00726366043
y: -51.0966491699
theta: 4.70493268967
speed: 13.6901311874
id: 1
t: 139
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:140
xxx before update is x: -3.00726366043
y: -51.0966491699
theta: 4.70493268967
speed: 13.6901311874
id: 1
t: 139
xxx after update is x: -3.01224517822
y: -51.9139328003
theta: 4.72701883316
speed: 14.0940256119
id: 1
t: 140
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6957808033151908, 0.49919999999999787]
sim.py in the sim.py statecallback function, msg is

x: 2.65992999077
y: -6.83915376663
theta: 1.47697401047
speed: -0.0528416894376
id: 0
t: 139

sim.py in the sim.py statecallback function, msg is

x: 3.27102088928
y: -7.5133228302
theta: 1.56975531578
speed: 0.093619376421
id: 0
t: 140

222 self.state_dicts[msg.id][msg.t] is (3.2710208892822266, -7.513322830200195, 1.5697553157806396, 0.09361937642097473)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.01224517822
y: -51.9139328003
theta: 4.72701883316
speed: 14.0940256119
id: 1
t: 140
xxx after update is x: -3.60691213608
y: -51.6952056885
theta: 4.85560035706
speed: 14.0342788696
id: 1
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:141
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:142
xxx before update is x: -3.60691213608
y: -51.6952056885
theta: 4.85560035706
speed: 14.0342788696
id: 1
t: 141
xxx after update is x: -3.19831562042
y: -52.1693344116
theta: 4.64455318451
speed: 13.9753637314
id: 1
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:143
xxx before update is x: -3.19831562042
y: -52.1693344116
theta: 4.64455318451
speed: 13.9753637314
id: 1
t: 142
xxx after update is x: -3.38105273247
y: -53.3678970337
theta: 4.81012582779
speed: 13.723567009
id: 1
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.7504408653921432, 0.5071999999999981]
sim.py in the sim.py statecallback function, msg is

x: 3.09731888771
y: -7.39079523087
theta: 1.52071022987
speed: 0.28539082408
id: 0
t: 141

sim.py in the sim.py statecallback function, msg is

x: 3.32147550583
y: -7.39950942993
theta: 1.83198726177
speed: 0.292920678854
id: 0
t: 142

sim.py in the sim.py statecallback function, msg is

x: 2.66753697395
y: -7.89439439774
theta: 1.36711883545
speed: 0.136093378067
id: 0
t: 143

222 self.state_dicts[msg.id][msg.t] is (2.667536973953247, -7.894394397735596, 1.3671188354492188, 0.1360933780670166)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:144
xxx before update is x: -3.38105273247
y: -53.367897aaaaaa
risk is [0.8463519637065249, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18348407745
y: -49.9202461243
theta: 4.65276288986
speed: 13.8370389938
id: 1
t: 138

sim.py in the sim.py statecallback function, msg is

x: -3.00726366043
y: -51.0966491699
theta: 4.70493268967
speed: 13.6901311874
id: 1
t: 139

sim.py in the sim.py statecallback function, msg is

x: -3.01224517822
y: -51.9139328003
theta: 4.72701883316
speed: 14.0940256119
id: 1
t: 140

222 self.state_dicts[msg.id][msg.t] is (-3.0122451782226562, -51.91393280029297, 4.7270188331604, 14.094025611877441)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:141
xxx before update is x: 3.27102088928
y: -7.5133228302
theta: 1.56975531578
speed: 0.093619376421
id: 0
t: 140
xxx after update is x: 3.09731888771
y: -7.39079523087
theta: 1.52071022987
speed: 0.28539082408
id: 0
t: 141
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:142
xxx before update is x: 3.09731888771
y: -7.39079523087
theta: 1.52071022987
speed: 0.28539082408
id: 0
t: 141
xxx after update is x: 3.32147550583
y: -7.39950942993
theta: 1.83198726177
speed: 0.292920678854
id: 0
t: 142
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:143
xxx before update is x: 3.32147550583
y: -7.39950942993
theta: 1.83198726177
speed: 0.292920678854
id: 0
t: 142
xxx after update is x: 2.66753697395
y: -7.89439439774
theta: 1.36711883545
speed: 0.136093378067
id: 0
t: 143
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:144
xxx before update is x: 2.66753697395
y: -7.89439439774
theta: 1.36711883545
speed: 0.136093378067
id: 0
t: 143
xxx after update is x: 3.53263258934
y: -7.15397977829
theta: 1.42518222332
speed: 0.112530827522
id: 0
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8799109672869532, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.60691213608
y: -51.6952056885
theta: 4.85560035706
speed: 14.0342788696
id: 1
t: 141

sim.py in the sim.py statecallback function, msg is

x: -3.19831562042
y: -52.1693344116
theta: 4.64455318451
speed: 13.9753637314
id: 1
t: 142

sim.py in the sim.py statecallback function, msg is

x: -3.38105273247
y: -53.3678970337
theta: 4.81012582779
speed: 13.723567009
id: 1
t: 143

sim.py in the sim.py statecallback function, msg is

x: -2.80903100967
y: -53.444519043
theta: 4.72753190994
speed: 13.7654314041
id: 1
t: 144

222 self.state_dicts[msg.id][msg.t] is (-2.8090310096740723, -53.44451904296875, 4.727531909942627, 13.76543140411377)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:145
xxx before update is x: 3.53263258934
y: -7.15397977829
theta: 1.42518222332
speed: 0.112530827522
id: 0
t: 144
xxx after update is x: 2.88959336281
y: -7.82663297653
theta: 1.43874871731
speed: 0.102876827121
id: 0
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:146
xxx before update is x: 2.88959336281
y: -7.82663297653
theta: 1.43874871731
speed: 0.102876827121
id: 0
t: 145
xxx after update is x: 3.03170418739
y: -7.44377851486
theta: 1.49733638763
speed: 0.0211688131094
id: 0
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:147
xxx before update is x: 3.03170418739
y: -7.44377851486
theta: 1.49733638763
speed: 0.0211688131094
id: 0
t: 146
xxx after update is x: 3.70665240288
y: -7.40366697311
theta: 1.58162033558
speed: -0.194851174951
id: 0
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8075147390276367, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.0479016304
y: -54.1134262085
theta: 4.74206447601
speed: 14.004863739
id: 1
t: 145

sim.py in the sim.py statecallback function, msg is

x: -3.57929205894
y: -54.7392845154
theta: 4.7303609848
speed: 14.301867485
id: 1
t: 146

sim.py in the sim.py statecallback function, msg is

x: -3.53084683418
y: -55.5222663879
theta: 4.59981107712
speed: 13.8942298889
id: 1
t: 147

222 self.state_dicts[msg.id][msg.t] is (-3.5308468341827393, -55.52226638793945, 4.59981107711792, 13.894229888916016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:148
xxx before update is x: 3.70665240288
y: -7.40366697311
theta: 1.58162033558
speed: -0.194851174951
id: 0
t: 147
xxx after update is x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
current clock is 6.57777777778
self.communication_details == 0
sending RELEASE,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [6.5777777777777775, True, ['1']]
6.57777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 6.57777777778
(RATE*SLOWDOWN) is 22.5
MR[0] is 6.57777777778
self.0337
theta: 4.81012582779
speed: 13.723567009
id: 1
t: 143
xxx after update is x: -2.80903100967
y: -53.444519043
theta: 4.72753190994
speed: 13.7654314041
id: 1
t: 144
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:145
xxx before update is x: -2.80903100967
y: -53.444519043
theta: 4.72753190994
speed: 13.7654314041
id: 1
t: 144
xxx after update is x: -3.0479016304
y: -54.1134262085
theta: 4.74206447601
speed: 14.004863739
id: 1
t: 145
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.7604432041119407, 0.505599999999998]
sim.py in the sim.py statecallback function, msg is

x: 3.53263258934
y: -7.15397977829
theta: 1.42518222332
speed: 0.112530827522
id: 0
t: 144

sim.py in the sim.py statecallback function, msg is

x: 2.88959336281
y: -7.82663297653
theta: 1.43874871731
speed: 0.102876827121
id: 0
t: 145

222 self.state_dicts[msg.id][msg.t] is (2.8895933628082275, -7.826632976531982, 1.4387487173080444, 0.10287682712078094)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:146
xxx before update is x: -3.0479016304
y: -54.1134262085
theta: 4.74206447601
speed: 14.004863739
id: 1
t: 145
xxx after update is x: -3.57929205894
y: -54.7392845154
theta: 4.7303609848
speed: 14.301867485
id: 1
t: 146
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:147
xxx before update is x: -3.57929205894
y: -54.7392845154
theta: 4.7303609848
speed: 14.301867485
id: 1
t: 146
xxx after update is x: -3.53084683418
y: -55.5222663879
theta: 4.59981107712
speed: 13.8942298889
id: 1
t: 147
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:148
xxx before update is x: -3.53084683418
y: -55.5222663879
theta: 4.59981107712
speed: 13.8942298889
id: 1
t: 147
xxx after update is x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.752148462566022, 0.5119999999999982]
sim.py in the sim.py statecallback function, msg is

x: 3.03170418739
y: -7.44377851486
theta: 1.49733638763
speed: 0.0211688131094
id: 0
t: 146

sim.py in the sim.py statecallback function, msg is

x: 3.70665240288
y: -7.40366697311
theta: 1.58162033558
speed: -0.194851174951
id: 0
t: 147

sim.py in the sim.py statecallback function, msg is

x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148

222 self.state_dicts[msg.id][msg.t] is (3.0763444900512695, -7.633790016174316, 1.5899584293365479, -0.015768511220812798)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '5.91111111111', 'Position': ['(3.0542283058166504', ' -7.349944591522217', ' 1.6865324974060059)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,5.91111111111,(3.0542283058166504, -7.349944591522217, 1.6865324974060059),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '6.57777777778', 'IntendedCourse': 'left', 'Position': ['3.0763444900512695', ' -7.633790016174316', ' 1.5899584293365479'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.292345679012
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,6.57777777778,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [11.444444444444445, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
self.communication_details == 0
sending GRANT,1,6.57777777778,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
current clock is 6.57777777778
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:149
xxx before update is x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148
xxx after update is x: -3.41285204887
y: -56.6413764954
theta: 4.70165681839
speed: 13.8808813095
id: 1
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:150
xxx before update is x: -3.41285204887
y: -56.6413764954
theta: 4.70165681839
speed: 13.8808813095
id: 1
t: 149
xxx after update is x: -3.34803748131
y: -57.1195869446
thetTMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
current clock is 6.57777777778
self.communication_details == 0
sending GET,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
current clock is 6.57777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '6.57777777778', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,6.57777777778,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [6.5777777777777775, True, ['1']]
6.57777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [6.5777777777777775, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:149
xxx before update is x: 3.07634449005
y: -7.63379001617
theta: 1.58995842934
speed: -0.0157685112208
id: 0
t: 148
xxx after update is x: 3.20399188995
y: -7.57297801971
theta: 1.56623315811
speed: -0.00363497110084
id: 0
t: 149
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:150
xxx before update is x: 3.20399188995
y: -7.57297801971
theta: 1.56623315811
speed: -0.00363497110084
id: 0
t: 149
xxx after update is x: 3.37973451614
y: -7.12559461594
theta: 1.68713116646
speed: 0.0956670716405
id: 0
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:151
xxx before update is x: 3.37973451614
y: -7.12559461594
theta: 1.68713116646
speed: 0.0956670716405
id: 0
t: 150
xxx after update is x: 3.18392848969
y: -7.48400354385
theta: 1.54347634315
speed: 0.0420801825821
id: 0
t: 151
maneuver_negotiatir.py finish the update agent state from ros fa: 4.68398761749
speed: 14.1076793671
id: 1
t: 150
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:151
xxx before update is x: -3.34803748131
y: -57.1195869446
theta: 4.68398761749
speed: 14.1076793671
id: 1
t: 150
xxx after update is x: -3.36961078644
y: -57.9551773071
theta: 4.57823610306
speed: 13.9795017242
id: 1
t: 151
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.780980702448689, 0.478399999999998]
sim.py in the sim.py statecallback function, msg is

x: 3.20399188995
y: -7.57297801971
theta: 1.56623315811
speed: -0.00363497110084
id: 0
t: 149

sim.py in the sim.py statecallback function, msg is

x: 3.37973451614
y: -7.12559461594
theta: 1.68713116646
speed: 0.0956670716405
id: 0
t: 150

sim.py in the sim.py statecallback function, msg is

x: 3.18392848969
y: -7.48400354385
theta: 1.54347634315
speed: 0.0420801825821
id: 0
t: 151

222 self.state_dicts[msg.id][msg.t] is (3.1839284896850586, -7.48400354385376, 1.5434763431549072, 0.04208018258213997)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:152
xxx before update is x: -3.36961078644
y: -57.9551773071
theta: 4.57823610306
speed: 13.9795017242
id: 1
t: 151
xxx after update is x: -3.21160936356
y: -58.7555961609
theta: 4.65146255493
speed: 13.3866825104
id: 1
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:153
xxx before update is x: -3.21160936356
y: -58.7555961609
theta: 4.65146255493
speed: 13.3866825104
id: 1
t: 152
xxx after update is x: -2.93828678131
y: -59.2808303833
theta: 4.67577934265
speed: 13.9232473373
id: 1
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.93828678131
y: -59.2808303833
theta: 4.67577934265
speed: 13.9232473373
id: 1
t: 153
xxx after update is x: -3.3225672245
y: -59.5730934143
theta: 4.5919084549
speed: 13.7524652481
id: 1
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:154
aaaaaa
aaaaaabbbbb
risk is [0.8403010697703706, 0.5071999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.40026569366
y: -7.37985706329
theta: 1.75790882111
speed: -0.0718357935548
id: 0
t: 152

sim.py in the sim.py statecallback function, msg is

x: 3.05961370468
y: -7.31710386276
theta: 1.40117037296
speed: 0.355897039175
id: 0
t: 153

sim.py in the sim.py statecallback function, msg is

x: 3.91015338898
y: -7.41254234314
theta: 1.6090375185
speed: 0.187943413854
id: 0
t: 154

222 self.state_dicts[msg.id][msg.t] is (3.910153388977051, -7.412542343139648, 1.6090375185012817, 0.18794341385364532)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:155
xxx before update is x: -3.3225672245
y: -59.5730934143
theta: 4.5919084549
speed: 13.7524652481
id: 1
t: 154
xxx after update is x: -3.5944237709
y: -60.6723060608
theta: 4.90683841705
speed: 13.6855611801
id: 1
t: 155
maneuver_nuntion
aaaaaa
risk is [0.811752490793068, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.44994592667
y: -56.2215194702
theta: 4.76403999329
speed: 13.8639116287
id: 1
t: 148

sim.py in the sim.py statecallback function, msg is

x: -3.41285204887
y: -56.6413764954
theta: 4.70165681839
speed: 13.8808813095
id: 1
t: 149

sim.py in the sim.py statecallback function, msg is

x: -3.34803748131
y: -57.1195869446
theta: 4.68398761749
speed: 14.1076793671
id: 1
t: 150

sim.py in the sim.py statecallback function, msg is

x: -3.36961078644
y: -57.9551773071
theta: 4.57823610306
speed: 13.9795017242
id: 1
t: 151

222 self.state_dicts[msg.id][msg.t] is (-3.3696107864379883, -57.955177307128906, 4.578236103057861, 13.979501724243164)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:152
xxx before update is x: 3.18392848969
y: -7.48400354385
theta: 1.54347634315
speed: 0.0420801825821
id: 0
t: 151
xxx after update is x: 3.40026569366
y: -7.37985706329
theta: 1.75790882111
speed: -0.0718357935548
id: 0
t: 152
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:153
xxx before update is x: 3.40026569366
y: -7.37985706329
theta: 1.75790882111
speed: -0.0718357935548
id: 0
t: 152
xxx after update is x: 3.05961370468
y: -7.31710386276
theta: 1.40117037296
speed: 0.355897039175
id: 0
t: 153
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:154
xxx before update is x: 3.05961370468
y: -7.31710386276
theta: 1.40117037296
speed: 0.355897039175
id: 0
t: 153
xxx after update is x: 3.91015338898
y: -7.41254234314
theta: 1.6090375185
speed: 0.187943413854
id: 0
t: 154
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:155
xxx before update is x: 3.91015338898
y: -7.41254234314
theta: 1.6090375185
speed: 0.187943413854
id: 0
t: 154
xxx after update is x: 3.17836642265
y: -7.48976373672
theta: 1.46843028069
speed: 0.120734103024
id: 0
t: 155
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8752680301260823, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.21160936356
y: -58.7555961609
theta: 4.65146255493
speed: 13.3866825104
id: 1
t: 152

sim.py in the sim.py statecallback function, msg is

x: -2.93828678131
y: -59.2808303833
theta: 4.67577934265
speed: 13.9232473373
id: 1
t: 153

sim.py in the sim.py statecallback function, msg is

x: -3.3225672245
y: -59.5730934143
theta: 4.5919084549
speed: 13.7524652481
id: 1
t: 154

sim.py in the sim.py statecallback function, msg is

x: -3.5944237709
y: -60.6723060608
theta: 4.90683841705
speed: 13.6855611801
id: 1
t: 155

222 self.state_dicts[msg.id][msg.t] is (-3.594423770904541, -60.672306060791016, 4.906838417053223, 13.685561180114746)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:156
xxx before update is x: 3.17836642265
y: -7.48976373672
theta: 1.46843028069
speed: 0.120734103024
id: 0
t: 155
xxx after update is x: 3.09513378143
y: -8.31412887573
theta: 1.57474076748
speed: -0.239708557725egotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:156
xxx before update is x: -3.5944237709
y: -60.6723060608
theta: 4.90683841705
speed: 13.6855611801
id: 1
t: 155
xxx after update is x: -2.74859309196
y: -60.9323387146
theta: 4.74268054962
speed: 13.9003334045
id: 1
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:157
xxx before update is x: -2.74859309196
y: -60.9323387146
theta: 4.74268054962
speed: 13.9003334045
id: 1
t: 156
xxx after update is x: -2.78696203232
y: -61.4594612122
theta: 4.9130115509
speed: 14.1494922638
id: 1
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.723502161512227, 0.5279999999999987]
sim.py in the sim.py statecallback function, msg is

x: 3.17836642265
y: -7.48976373672
theta: 1.46843028069
speed: 0.120734103024
id: 0
t: 155

sim.py in the sim.py statecallback function, msg is

x: 3.09513378143
y: -8.31412887573
theta: 1.57474076748
speed: -0.239708557725
id: 0
t: 156

sim.py in the sim.py statecallback function, msg is

x: 3.14783453941
y: -7.45890283585
theta: 1.51903140545
speed: 0.110573127866
id: 0
t: 157

222 self.state_dicts[msg.id][msg.t] is (3.147834539413452, -7.458902835845947, 1.5190314054489136, 0.11057312786579132)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:158
xxx before update is x: -2.78696203232
y: -61.4594612122
theta: 4.9130115509
speed: 14.1494922638
id: 1
t: 157
xxx after update is x: -2.64034032822
y: -62.8326301575
theta: 4.57709360123
speed: 14.0852050781
id: 1
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:159
xxx before update is x: -2.64034032822
y: -62.8326301575
theta: 4.57709360123
speed: 14.0852050781
id: 1
t: 158
xxx after update is x: -3.63602995872
y: -62.5201416016
theta: 4.56389713287
speed: 14.0732126236
id: 1
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.9048487131511923, 0.502399999999998]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.57095003128
y: -7.22450304031
theta: 1.61074900627
speed: 0.156027629972
id: 0
t: 158

sim.py in the sim.py statecallback function, msg is

x: 3.32000398636
y: -7.49983167648
theta: 1.51650214195
speed: -0.184606686234
id: 0
t: 159

222 self.state_dicts[msg.id][msg.t] is (3.3200039863586426, -7.499831676483154, 1.5165021419525146, -0.18460668623447418)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:160
xxx before update is x: -3.63602995872
y: -62.5201416016
theta: 4.56389713287
speed: 14.0732126236
id: 1
t: 159
xxx after update is x: -2.89329886436
y: -62.8408546448
theta: 4.80505180359
speed: 13.3519086838
id: 1
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
i
id: 0
t: 156
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:157
xxx before update is x: 3.09513378143
y: -8.31412887573
theta: 1.57474076748
speed: -0.239708557725
id: 0
t: 156
xxx after update is x: 3.14783453941
y: -7.45890283585
theta: 1.51903140545
speed: 0.110573127866
id: 0
t: 157
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:158
xxx before update is x: 3.14783453941
y: -7.45890283585
theta: 1.51903140545
speed: 0.110573127866
id: 0
t: 157
xxx after update is x: 3.57095003128
y: -7.22450304031
theta: 1.61074900627
speed: 0.156027629972
id: 0
t: 158
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:159
xxx before update is x: 3.57095003128
y: -7.22450304031
theta: 1.61074900627
speed: 0.156027629972
id: 0
t: 158
xxx after update is x: 3.32000398636
y: -7.49983167648
theta: 1.51650214195
speed: -0.184606686234
id: 0
t: 159
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9253542311386189, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.74859309196
y: -60.9323387146
theta: 4.74268054962
speed: 13.9003334045
id: 1
t: 156

sim.py in the sim.py statecallback function, msg is

x: -2.78696203232
y: -61.4594612122
theta: 4.9130115509
speed: 14.1494922638
id: 1
t: 157

sim.py in the sim.py statecallback function, msg is

x: -2.64034032822
y: -62.8326301575
theta: 4.57709360123
speed: 14.0852050781
id: 1
t: 158

sim.py in the sim.py statecallback function, msg is

x: -3.63602995872
y: -62.5201416016
theta: 4.56389713287
speed: 14.0732126236
id: 1
t: 159

222 self.state_dicts[msg.id][msg.t] is (-3.6360299587249756, -62.5201416015625, 4.563897132873535, 14.073212623596191)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:160
xxx before update is x: 3.32000398636
y: -7.49983167648
theta: 1.51650214195
speed: -0.184606686234
id: 0
t: 159
xxx after update is x: 3.39375209808
y: -7.05141925812
theta: 1.57502651215
speed: 0.0540982112288
id: 0
t: 160
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:161
xxx before update is x: 3.39375209808
y: -7.05141925812
theta: 1.57502651215
speed: 0.0540982112288
id: 0
t: 160
xxx after update is x: 2.85534882545
y: -8.03834533691
theta: 1.57569301128
speed: -0.0815868228674
id: 0
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.85534882545
y: -8.03834533691
theta: 1.57569301128
speed: -0.0815868228674
id: 0
t: 161
xxx after update is x: 2.83371138573
y: -6.9415974617
theta: 1.52526259422
speed: 0.176396235824
id: 0
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162
aaaaaa
risk is [0.8772218162762713, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.89329886436
y: -62.8408546448
theta: 4.80505180359
speed: 13.3519086838
id: 1
t: 160

sim.py in the sim.py statecallback functn spin function, finish the n times spin:161xxx before update is x: -2.89329886436
y: -62.8408546448
theta: 4.80505180359
speed: 13.3519086838
id: 1
t: 160
xxx after update is x: -3.98462986946
y: -64.2667007446
theta: 4.72512292862
speed: 13.814707756
id: 1
t: 161
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.98462986946
y: -64.2667007446
theta: 4.72512292862
speed: 13.814707756
id: 1
t: 161
xxx after update is x: -2.90646266937
y: -64.6733169556
theta: 4.69047880173
speed: 14.0557661057
id: 1
t: 162
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:162
aaaaaa
aaaaaabbbbb
risk is [0.7877252316648726, 0.5007999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.39375209808
y: -7.05141925812
theta: 1.57502651215
speed: 0.0540982112288
id: 0
t: 160

sim.py in the sim.py statecallback function, msg is

x: 2.85534882545
y: -8.03834533691
theta: 1.57569301128
speed: -0.0815868228674
id: 0
t: 161

sim.py in the sim.py statecallback function, msg is

x: 2.83371138573
y: -6.9415974617
theta: 1.52526259422
speed: 0.176396235824
id: 0
t: 162

222 self.state_dicts[msg.id][msg.t] is (2.8337113857269287, -6.9415974617004395, 1.5252625942230225, 0.1763962358236313)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:163
xxx before update is x: -2.90646266937
y: -64.6733169556
theta: 4.69047880173
speed: 14.0557661057
id: 1
t: 162
xxx after update is x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
current clock is 7.24444444444
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
current clock is 7.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '6.57777777778', 'Position': ['(3.0763444900512695', ' -7.633790016174316', ' 1.5899584293365479)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
current clock is 7.24444444444
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
current clock is 7.24444444444
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '7.24444444444', 'IntendedCourse': 'left', 'Position': ['2.9368600845336914', ' -7.18493127822876', ' 1.436305046081543'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received Gion, msg is

x: -3.98462986946
y: -64.2667007446
theta: 4.72512292862
speed: 13.814707756
id: 1
t: 161

sim.py in the sim.py statecallback function, msg is

x: -2.90646266937
y: -64.6733169556
theta: 4.69047880173
speed: 14.0557661057
id: 1
t: 162

222 self.state_dicts[msg.id][msg.t] is (-2.9064626693725586, -64.6733169555664, 4.690478801727295, 14.055766105651855)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:163
xxx before update is x: 2.83371138573
y: -6.9415974617
theta: 1.52526259422
speed: 0.176396235824
id: 0
t: 162
xxx after update is x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163
current clock is 7.24444444444
self.communication_details == 0
sending RELEASE,0,6.57777777778,(3.0763444900512695, -7.633790016174316, 1.5899584293365479),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163
current clock is 7.24444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [7.2444444444444445, True, ['1']]
7.24444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 7.24444444444
(RATE*SLOWDOWN) is 22.5
MR[0] is 7.24444444444
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163
current clock is 7.24444444444
self.communication_details == 0
sending GET,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:164
xxx before update is x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163
xxx ET,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.321975308642
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,7.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:164
xxx before update is x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163
xxx after update is x: -3.22893404961
y: -65.7956390381
theta: 4.72373771667
speed: 14.050907135
id: 1
t: 164
maneuver_negotiatir.py finish the update agent state from ros funtion
added car with id 0 to grantlist. current grantlist:  {0: [12.066666666666666, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.22893404961
y: -65.7956390381
theta: 4.72373771667
speed: 14.050907135
id: 1
t: 164
current clock is 7.28888888889
self.communication_details == 0
sending GRANT,1,7.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.22893404961
y: -65.7956390381
theta: 4.72373771667
speed: 14.050907135
id: 1
t: 164
current clock is 7.28888888889
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:165
xxx before update is x: -3.22893404961
y: -65.7956390381
theta: 4.72373771667
speed: 14.050907135
id: 1
t: 164
xxx after update is x: -3.17234349251
y: -66.5017547607
theta: 4.73803186417
speed: 13.8650379181
id: 1
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.6561449827080493, 0.48319999999999796]
sim.py in the sim.py statecallback function, msg is

x: 2.93686008453
y: -7.18493127823
theta: 1.43630504608
speed: 0.164441853762
id: 0
t: 163

sim.py in the sim.py statecallback function, msg is

x: 3.30609202385
y: -7.42035388947
theta: 1.42255580425
speed: 0.219933629036
id: 0
t: 164

sim.py in the sim.py statecallback function, msg is

x: 3.03950595856
y: -7.47120809555
theta: 1.79068958759
speed: 0.00320647913031
id: 0
t: 165

222 self.state_dicts[msg.id][msg.t] is (3.039505958557129, -7.471208095550537, 1.7906895875930786, 0.0032064791303128004)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.17234349251
y: -66.5017547607
theta: 4.73803186417
speed: 13.8650379181
id: 1
t: 165
xxx after update is x: -3.52049469948
y: -67.2009735107
theta: 4.67173480988
speed: 13.9573335648
id: 1
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:166
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n tafter update is x: 3.30609202385
y: -7.42035388947
theta: 1.42255580425
speed: 0.219933629036
id: 0
t: 164Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30609202385
y: -7.42035388947
theta: 1.42255580425
speed: 0.219933629036
id: 0
t: 164
current clock is 7.28888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30609202385
y: -7.42035388947
theta: 1.42255580425
speed: 0.219933629036
id: 0
t: 164
current clock is 7.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '7.24444444444', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,7.24444444444,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [7.2444444444444445, True, ['1']]
7.24444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [7.2444444444444445, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish

maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:165
xxx before update is x: 3.30609202385
y: -7.42035388947
theta: 1.42255580425
speed: 0.219933629036
id: 0
t: 164
xxx after update is x: 3.03950595856
y: -7.47120809555
theta: 1.79068958759
speed: 0.00320647913031
id: 0
t: 165
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:166
xxx before update is x: 3.03950595856
y: -7.47120809555
theta: 1.79068958759
speed: 0.00320647913031
id: 0
t: 165
xxx after update is x: 2.85809063911
y: -7.68769884109
theta: 1.53432452679
speed: 0.434924006462
id: 0
t: 166
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6840009632945404, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.73147082329
y: -65.7369384766
theta: 4.61747264862
speed: 13.8460493088
id: 1
t: 163

sim.py in the sim.py statecallback function, msg is

x: -3.22893404961
y: -65.7956390381
theta: 4.72373771667
speed: 14.050907135
id: 1
t: 164

sim.py in the sim.py statecallback function, msg is

x: -3.17234349251
y: -66.5017547607
theta: 4.73803186417
speed: 13.8650379181
id: 1
t: 165

sim.py in the sim.py statecallback function, msg is

x: -3.52049469948
y: -67.2009735107
theta: 4.67173480988
speed: 13.9573335648
id: 1
t: 166

222 self.state_dicts[msg.id][msg.t] is (-3.5204946994781494, -67.20097351074219, 4.671734809875488, 13.9573335647583)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:167
xxx before update is x: 2.85809063911
y: -7.68769884109
theta: 1.53432452imes spin:167xxx before update is x: -3.52049469948
y: -67.2009735107
theta: 4.67173480988
speed: 13.9573335648
id: 1
t: 166
xxx after update is x: -3.54000496864
y: -67.9505996704
theta: 4.70126485825
speed: 13.9804534912
id: 1
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion

************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:168
xxx before update is x: -3.54000496864
y: -67.9505996704
theta: 4.70126485825
speed: 13.9804534912
id: 1
t: 167
xxx after update is x: -3.35211777687
y: -68.9315567017
theta: 4.65899372101
speed: 13.5923156738
id: 1
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9086746853426005, 0.502399999999998]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.85809063911
y: -7.68769884109
theta: 1.53432452679
speed: 0.434924006462
id: 0
t: 166

sim.py in the sim.py statecallback function, msg is

x: 3.31427526474
y: -7.31960773468
theta: 1.4516749382
speed: 0.0815611854196
id: 0
t: 167

sim.py in the sim.py statecallback function, msg is

x: 3.17206907272
y: -7.7113866806
theta: 1.61763679981
speed: -0.252430915833
id: 0
t: 168

222 self.state_dicts[msg.id][msg.t] is (3.1720690727233887, -7.711386680603027, 1.617636799812317, -0.25243091583251953)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:169
xxx before update is x: -3.35211777687
y: -68.9315567017
theta: 4.65899372101
speed: 13.5923156738
id: 1
t: 168
xxx after update is x: -3.28204798698
y: -69.0299453735
theta: 4.61150979996
speed: 13.7252264023
id: 1
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:170
xxx before update is x: -3.28204798698
y: -69.0299453735
theta: 4.61150979996
speed: 13.7252264023
id: 1
t: 169
xxx after update is x: -2.69707465172
y: -70.0079650879
theta: 4.80798196793
speed: 13.8820285797
id: 1
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8964479907941088, 0.5071999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.07329773903
y: -7.59239864349
theta: 1.67539978027
speed: 0.0379062853754
id: 0
t: 169

sim.py in the sim.py statecallback function, msg is

x: 3.39643836021
y: -7.66342067719
theta: 1.63028752804
speed: 0.00550147518516
id: 0
t: 170

222 self.state_dicts[msg.id][msg.t] is (3.3964383602142334, -7.663420677185059, 1.630287528038025, 0.0055014751851558685)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:171
xxx before update is x: -2.69707465172
y: -70.0079650879
theta: 4.80798196793
speed: 13.8820285797
id: 1
t: 170
xxx after update is x: -3.53602790833
y: -70.6885070801
theta: 4.68315935135
speed: 13.4800891876
id: 1
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:172
xxx before update is x: -3.53602790833
y: -70.6885070801
theta: 4.68315935135
speed: 13.4800891876
id: 1
t: 171
xxx after update is x: -2.93560409546
y: -71.3318023682
theta: 4.8255777359
679
speed: 0.434924006462
id: 0
t: 166
xxx after update is x: 3.31427526474
y: -7.31960773468
theta: 1.4516749382
speed: 0.0815611854196
id: 0
t: 167
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.31427526474
y: -7.31960773468
theta: 1.4516749382
speed: 0.0815611854196
id: 0
t: 167
xxx after update is x: 3.17206907272
y: -7.7113866806
theta: 1.61763679981
speed: -0.252430915833
id: 0
t: 168
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:168
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.17206907272
y: -7.7113866806
theta: 1.61763679981
speed: -0.252430915833
id: 0
t: 168
xxx after update is x: 3.07329773903
y: -7.59239864349
theta: 1.67539978027
speed: 0.0379062853754
id: 0
t: 169
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:169
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:170
xxx before update is x: 3.07329773903
y: -7.59239864349
theta: 1.67539978027
speed: 0.0379062853754
id: 0
t: 169
xxx after update is x: 3.39643836021
y: -7.66342067719
theta: 1.63028752804
speed: 0.00550147518516
id: 0
t: 170
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6259902822138868, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.54000496864
y: -67.9505996704
theta: 4.70126485825
speed: 13.9804534912
id: 1
t: 167

sim.py in the sim.py statecallback function, msg is

x: -3.35211777687
y: -68.9315567017
theta: 4.65899372101
speed: 13.5923156738
id: 1
t: 168

sim.py in the sim.py statecallback function, msg is

x: -3.28204798698
y: -69.0299453735
theta: 4.61150979996
speed: 13.7252264023
id: 1
t: 169

sim.py in the sim.py statecallback function, msg is

x: -2.69707465172
y: -70.0079650879
theta: 4.80798196793
speed: 13.8820285797
id: 1
t: 170

222 self.state_dicts[msg.id][msg.t] is (-2.6970746517181396, -70.00796508789062, 4.807981967926025, 13.882028579711914)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:171
xxx before update is x: 3.39643836021
y: -7.66342067719
theta: 1.63028752804
speed: 0.00550147518516
id: 0
t: 170
xxx after update is x: 3.48619842529
y: -8.07379627228
theta: 1.57594895363
speed: 0.124703541398
id: 0
t: 171
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:172
xxx before update is x: 3.48619842529
y: -8.07379627228
theta: 1.57594895363
speed: 0.124703541398
id: 0
t: 171
xxx after update is x: 3.5672724247
y: -7.17583703995
theta: 1.75590384007
speed: 0.126421734691
id: 0
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:173
xxx before update is x: 3.5672724247
y: -7.17583703995
theta: 1.75590384007
speed: 0.126421734691
id: 0
t: 172
xxx after update is x: 3.64802050591
y: -6.80739450455
theta: 1.56931900978
speed: -0.411854326725
id: 0
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8784240832728588, 0.0]
sim.py in the sim.py statecallback function, msg ispeed: 13.7560434341
id: 1
t: 172
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:173
xxx before update is x: -2.93560409546
y: -71.3318023682
theta: 4.8255777359
speed: 13.7560434341
id: 1
t: 172
xxx after update is x: -3.05560874939
y: -71.7949981689
theta: 4.70717906952
speed: 13.9628543854
id: 1
t: 173
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8644330015542061, 0.48799999999999794]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.48619842529
y: -8.07379627228
theta: 1.57594895363
speed: 0.124703541398
id: 0
t: 171

sim.py in the sim.py statecallback function, msg is

x: 3.5672724247
y: -7.17583703995
theta: 1.75590384007
speed: 0.126421734691
id: 0
t: 172

sim.py in the sim.py statecallback function, msg is

x: 3.64802050591
y: -6.80739450455
theta: 1.56931900978
speed: -0.411854326725
id: 0
t: 173

222 self.state_dicts[msg.id][msg.t] is (3.6480205059051514, -6.807394504547119, 1.5693190097808838, -0.4118543267250061)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:174
xxx before update is x: -3.05560874939
y: -71.7949981689
theta: 4.70717906952
speed: 13.9628543854
id: 1
t: 173
xxx after update is x: -3.75705337524
y: -71.7991790771
theta: 4.58128070831
speed: 13.8310022354
id: 1
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:175
xxx before update is x: -3.75705337524
y: -71.7991790771
theta: 4.58128070831
speed: 13.8310022354
id: 1
t: 174
xxx after update is x: -3.75161981583
y: -73.1399993896
theta: 4.6878247261
speed: 14.0137205124
id: 1
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:176
xxx before update is x: -3.75161981583
y: -73.1399993896
theta: 4.6878247261
speed: 14.0137205124
id: 1
t: 175
xxx after update is x: -3.07744026184
y: -73.4879760742
theta: 4.62268257141
speed: 14.0663442612
id: 1
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.5172271063605169, 0.4911999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.11589407921
y: -7.7112326622
theta: 1.54387629032
speed: -0.0761788859963
id: 0
t: 174

sim.py in the sim.py statecallback function, msg is

x: 2.89879488945
y: -7.04369544983
theta: 1.54365456104
speed: 0.137651443481
id: 0
t: 175

sim.py in the sim.py statecallback function, msg is

x: 3.08021187782
y: -7.72984695435
theta: 1.55289232731
speed: 0.13752412796
id: 0
t: 176

222 self.state_dicts[msg.id][msg.t] is (3.080211877822876, -7.729846954345703, 1.5528923273086548, 0.13752412796020508)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:177
xxx before update is x: -3.07744026184
y: -73.4879760742
theta: 4.62268257141
speed: 14.0663442612
id: 1
t: 176
xxx after update is x: -3.00885987282
y: -74.4317245483
theta: 4.77927398682
speed: 13.7348804474
id: 1
t: 177
maneuver_negotiatir.py finis

x: -3.53602790833
y: -70.6885070801
theta: 4.68315935135
speed: 13.4800891876
id: 1
t: 171

sim.py in the sim.py statecallback function, msg is

x: -2.93560409546
y: -71.3318023682
theta: 4.8255777359
speed: 13.7560434341
id: 1
t: 172

sim.py in the sim.py statecallback function, msg is

x: -3.05560874939
y: -71.7949981689
theta: 4.70717906952
speed: 13.9628543854
id: 1
t: 173

222 self.state_dicts[msg.id][msg.t] is (-3.0556087493896484, -71.79499816894531, 4.707179069519043, 13.962854385375977)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:174
xxx before update is x: 3.64802050591
y: -6.80739450455
theta: 1.56931900978
speed: -0.411854326725
id: 0
t: 173
xxx after update is x: 3.11589407921
y: -7.7112326622
theta: 1.54387629032
speed: -0.0761788859963
id: 0
t: 174
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:175
xxx before update is x: 3.11589407921
y: -7.7112326622
theta: 1.54387629032
speed: -0.0761788859963
id: 0
t: 174
xxx after update is x: 2.89879488945
y: -7.04369544983
theta: 1.54365456104
speed: 0.137651443481
id: 0
t: 175
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:176
xxx before update is x: 2.89879488945
y: -7.04369544983
theta: 1.54365456104
speed: 0.137651443481
id: 0
t: 175
xxx after update is x: 3.08021187782
y: -7.72984695435
theta: 1.55289232731
speed: 0.13752412796
id: 0
t: 176
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.500393868956374, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.75705337524
y: -71.7991790771
theta: 4.58128070831
speed: 13.8310022354
id: 1
t: 174

sim.py in the sim.py statecallback function, msg is

x: -3.75161981583
y: -73.1399993896
theta: 4.6878247261
speed: 14.0137205124
id: 1
t: 175

sim.py in the sim.py statecallback function, msg is

x: -3.07744026184
y: -73.4879760742
theta: 4.62268257141
speed: 14.0663442612
id: 1
t: 176

222 self.state_dicts[msg.id][msg.t] is (-3.0774402618408203, -73.48797607421875, 4.622682571411133, 14.066344261169434)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:177
xxx before update is x: 3.08021187782
y: -7.72984695435
theta: 1.55289232731
speed: 0.13752412796
id: 0
t: 176
xxx after update is x: 3.1464407444
y: -7.94152545929
theta: 1.66867625713
speed: -0.0192125085741
id: 0
t: 177
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.1464407444
y: -7.94152545929
theta: 1.66867625713
speed: -0.0192125085741
id: 0
t: 177
xxx after update is x: 3.48854994774
y: -7.91307830811
theta: 1.6140986681
speed: -0.0744494572282
id: 0
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:178
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:179
xxx before update is x: 3.48854994774
y: -7.91307830811
theta: 1.6140986681
speed: -0.0744494572282
id: 0
t: 178
sh the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:178
xxx before update is x: -3.00885987282
y: -74.4317245483
theta: 4.77927398682
speed: 13.7348804474
id: 1
t: 177
xxx after update is x: -3.68062567711
y: -74.2383270264
theta: 4.50568008423
speed: 14.1368703842
id: 1
t: 178
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8963014572385598, 0.47199999999999803]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.1464407444
y: -7.94152545929
theta: 1.66867625713
speed: -0.0192125085741
id: 0
t: 177

sim.py in the sim.py statecallback function, msg is

x: 3.48854994774
y: -7.91307830811
theta: 1.6140986681
speed: -0.0744494572282
id: 0
t: 178

222 self.state_dicts[msg.id][msg.t] is (3.4885499477386475, -7.913078308105469, 1.6140986680984497, -0.07444945722818375)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:179
xxx before update is x: -3.68062567711
y: -74.2383270264
theta: 4.50568008423
speed: 14.1368703842
id: 1
t: 178
xxx after update is x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '7.24444444444', 'Position': ['(2.9368600845336914', ' -7.18493127822876', ' 1.436305046081543)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '7.95555555556', 'IntendedCourse': 'left', 'Position': ['2.852918863296509', ' -6.869823932647705', ' 1.6281778812408447'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.353580246914
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py mexxx after update is x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
current clock is 7.95555555556
self.communication_details == 0
sending RELEASE,0,7.24444444444,(2.9368600845336914, -7.18493127822876, 1.436305046081543),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [7.911111111111111, True, ['1']]
7.91111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 7.95555555556
(RATE*SLOWDOWN) is 22.5
MR[0] is 7.91111111111
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
current clock is 7.95555555556
self.communication_details == 0
sending GET,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '7.95555555556', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,7.95555555556,(-3.3620028495788574, 29.88646697998047, 4.702761173248ssage_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,7.95555555556,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [12.822222222222223, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
self.communication_details == 0
sending GRANT,1,7.95555555556,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
current clock is 7.95555555556
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:180
xxx before update is x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179
xxx after update is x: -3.18860697746
y: -75.7208328247
theta: 4.78125476837
speed: 13.7685890198
id: 1
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:181
xxx before update is x: -3.18860697746
y: -75.7208328247
theta: 4.78125476837
speed: 13.7685890198
id: 1
t: 180
xxx after update is x: -3.05113244057
y: -76.7770309448
theta: 4.69911050797
speed: 13.6648855209
id: 1
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.862836284338185, 0.5167999999999984]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179

sim.py in the sim.py statecallback function, msg is

x: 2.95949435234
y: -7.53708219528
theta: 1.47914707661
speed: 0.0242176540196
id: 0
t: 180

sim.py in the sim.py statecallback function, msg is

x: 3.49598908424
y: -6.84644031525
theta: 1.51679825783
speed: -0.257988661528
id: 0
t: 181

222 self.state_dicts[msg.id][msg.t] is (3.4959890842437744, -6.846440315246582, 1.5167982578277588, -0.25798866152763367)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:182
xxx before update is x: -3.05113244057
y: -76.7770309448
theta: 4.69911050797
speed: 13.6648855209
id: 1
t: 181
xxx after update is x: -2.83622217178
y: -76.9741821289
theta: 4.70276260376
speed: 13.5428590775
id: 1
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:183
xxx before update is x: -2.83622217178
y: -76.9741821289
theta: 4.70276260376
speed: 13.5428590775
id: 1
t: 182
xxx after update is x: -3.28777980804
y: -77.3794937134
theta: 4.56596565247
speed: 13.8864459991
id: 1
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update functio291),14,1,0,0 from  car1finish try maneuver

status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [7.911111111111111, True, ['1']]
7.91111111111
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [7.911111111111111, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
risk is [0.8524088562587459, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.00885987282
y: -74.4317245483
theta: 4.77927398682
speed: 13.7348804474
id: 1
t: 177

sim.py in the sim.py statecallback function, msg is

x: -3.68062567711
y: -74.2383270264
theta: 4.50568008423
speed: 14.1368703842
id: 1
t: 178

sim.py in the sim.py statecallback function, msg is

x: -3.3588283062
y: -75.3309707642
theta: 4.88240861893
speed: 13.4642982483
id: 1
t: 179

222 self.state_dicts[msg.id][msg.t] is (-3.35882830619812, -75.33097076416016, 4.882408618927002, 13.464298248291016)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:180
xxx before update is x: 2.8529188633
y: -6.86982393265
theta: 1.62817788124
speed: 0.171991243958
id: 0
t: 179
xxx after update is x: 2.95949435234
y: -7.53708219528
theta: 1.47914707661
speed: 0.0242176540196
id: 0
t: 180
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.95949435234
y: -7.53708219528
theta: 1.47914707661
speed: 0.0242176540196
id: 0
t: 180
xxx after update is x: 3.49598908424
y: -6.84644031525
theta: 1.51679825783
speed: -0.257988661528
id: 0
t: 181
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:181
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:182
xxx before update is x: 3.49598908424
y: -6.84644031525
theta: 1.51679825783
speed: -0.257988661528
id: 0
t: 181
xxx after update is x: 3.32074904442
y: -7.27379417419
theta: 1.76517057419
speed: 0.139816880226
id: 0
t: 182
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.74101818329872, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.18860697746
y: -75.7208328247
theta: 4.78125476837
speed: 13.7685890198
id: 1
t: 180

sim.py in the sim.py statecallback function, msg is

x: -3.05113244057
y: -76.7770309448
theta: 4.69911050797
speed: 13.6648855209
id: 1
t: 181

sim.py in the sim.py statecallback function, msg is

x: -2.83622217178
y: -76.9741821289
theta: 4.70276260376
speed: 13.5428590775
id: 1
t: 182

222 self.state_dicts[msg.id][msg.t] is (-2.8362221717834473, -76.97418212890625, 4.702762603759766, 13.542859077453613)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:183
xxx before update is x: 3.32074904442
y: -7.27379417419
theta: 1.76517057419
speed: 0.139816880226
id: 0
t: 182
xxx after update is x: 3.345277071
y: -8.08937263489
theta: 1.57781910896
speed: 0.44941291213
id: 0
t: 183
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the upn xxx before update is x: -3.28777980804
y: -77.3794937134
theta: 4.56596565247
speed: 13.8864459991
id: 1
t: 183
xxx after update is x: -2.74219894409
y: -77.6805267334
theta: 4.68573141098
speed: 13.7041139603
id: 1
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion

in spin function, finish the n times spin:184
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.74219894409
y: -77.6805267334
theta: 4.68573141098
speed: 13.7041139603
id: 1
t: 184
xxx after update is x: -3.16146159172
y: -78.971031189
theta: 4.71524810791
speed: 13.8049383163
id: 1
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:185
aaaaaa
aaaaaabbbbb
risk is [0.7422903920249017, 0.48479999999999795]
sim.py in the sim.py statecallback function, msg is

x: 3.32074904442
y: -7.27379417419
theta: 1.76517057419
speed: 0.139816880226
id: 0
t: 182

sim.py in the sim.py statecallback function, msg is

x: 3.345277071
y: -8.08937263489
theta: 1.57781910896
speed: 0.44941291213
id: 0
t: 183

sim.py in the sim.py statecallback function, msg is

x: 3.66231369972
y: -7.04827594757
theta: 1.65549743176
speed: 0.0234222915024
id: 0
t: 184

sim.py in the sim.py statecallback function, msg is

x: 3.3100271225
y: -6.92861747742
theta: 1.31198763847
speed: 0.18634660542
id: 0
t: 185

222 self.state_dicts[msg.id][msg.t] is (3.3100271224975586, -6.928617477416992, 1.3119876384735107, 0.1863466054201126)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:186
xxx before update is x: -3.16146159172
y: -78.971031189
theta: 4.71524810791
speed: 13.8049383163
id: 1
t: 185
xxx after update is x: -2.89070057869
y: -79.1083831787
theta: 4.7910733223
speed: 13.6045637131
id: 1
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.89070057869
y: -79.1083831787
theta: 4.7910733223
speed: 13.6045637131
id: 1
t: 186
xxx after update is x: -3.30648946762
y: -80.2072906494
theta: 4.48770284653
speed: 13.841542244
id: 1
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:187
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:188
xxx before update is x: -3.30648946762
y: -80.2072906494
theta: 4.48770284653
speed: 13.841542244
id: 1
t: 187
xxx after update is x: -2.84911584854
y: -80.7746429443
theta: 4.6292591095
speed: 13.8266563416
id: 1
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.33378634477262653, 0.4975999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.57198596001
y: -7.70775175095
theta: 1.48646974564
speed: 0.107112690806
id: 0
t: 186

sim.py in the sim.py statecallback function, msg is

x: 3.41880369186
y: -7.44805383682
theta: 1.67924487591
speed: -0.180264785886
id: 0
t: 187

sim.py in the sim.py statecallback function, msg is

x: 3.16252112389
y: -7.42918157578
theta: 1.63018941879
speed: 0.241229563951
id: 0
t: 188

222 self.state_dicts[msg.id][msg.t] is (3.1625211238861084, -7.4291815757751465, 1.6301894187927246, 0.2412295639514923)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update functdate function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:184
xxx before update is x: 3.345277071
y: -8.08937263489
theta: 1.57781910896
speed: 0.44941291213
id: 0
t: 183
xxx after update is x: 3.66231369972
y: -7.04827594757
theta: 1.65549743176
speed: 0.0234222915024
id: 0
t: 184
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:185
xxx before update is x: 3.66231369972
y: -7.04827594757
theta: 1.65549743176
speed: 0.0234222915024
id: 0
t: 184
xxx after update is x: 3.3100271225
y: -6.92861747742
theta: 1.31198763847
speed: 0.18634660542
id: 0
t: 185
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:186
xxx before update is x: 3.3100271225
y: -6.92861747742
theta: 1.31198763847
speed: 0.18634660542
id: 0
t: 185
xxx after update is x: 3.57198596001
y: -7.70775175095
theta: 1.48646974564
speed: 0.107112690806
id: 0
t: 186
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:187
xxx before update is x: 3.57198596001
y: -7.70775175095
theta: 1.48646974564
speed: 0.107112690806
id: 0
t: 186
xxx after update is x: 3.41880369186
y: -7.44805383682
theta: 1.67924487591
speed: -0.180264785886
id: 0
t: 187
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8683225195914183, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.28777980804
y: -77.3794937134
theta: 4.56596565247
speed: 13.8864459991
id: 1
t: 183

sim.py in the sim.py statecallback function, msg is

x: -2.74219894409
y: -77.6805267334
theta: 4.68573141098
speed: 13.7041139603
id: 1
t: 184

sim.py in the sim.py statecallback function, msg is

x: -3.16146159172
y: -78.971031189
theta: 4.71524810791
speed: 13.8049383163
id: 1
t: 185

sim.py in the sim.py statecallback function, msg is

x: -2.89070057869
y: -79.1083831787
theta: 4.7910733223
speed: 13.6045637131
id: 1
t: 186

sim.py in the sim.py statecallback function, msg is

x: -3.30648946762
y: -80.2072906494
theta: 4.48770284653
speed: 13.841542244
id: 1
t: 187

222 self.state_dicts[msg.id][msg.t] is (-3.3064894676208496, -80.20729064941406, 4.4877028465271, 13.84154224395752)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:188
xxx before update is x: 3.41880369186
y: -7.44805383682
theta: 1.67924487591
speed: -0.180264785886
id: 0
t: 187
xxx after update is x: 3.16252112389
y: -7.42918157578
theta: 1.63018941879
speed: 0.241229563951
id: 0
t: 188
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:189
xxx before update is x: 3.16252112389
y: -7.42918157578
theta: 1.63018941879
speed: 0.241229563951
id: 0
t: 188
xxx after update is x: 3.34329915047
y: -7.47699546814
theta: 1.57939577103
speed: -0.149969220161
id: 0
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:190
xxxion 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:189
xxx before update is x: -2.84911584854
y: -80.7746429443
theta: 4.6292591095
speed: 13.8266563416
id: 1
t: 188
xxx after update is x: -2.78102993965
y: -81.8325271606
theta: 4.72591304779
speed: 13.9144906998
id: 1
t: 189
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.78102993965
y: -81.8325271606
theta: 4.72591304779
speed: 13.9144906998
id: 1
t: 189
xxx after update is x: -2.83683753014
y: -82.2948150635
theta: 4.81191921234
speed: 13.9630289078
id: 1
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:190
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -2.83683753014
y: -82.2948150635
theta: 4.81191921234
speed: 13.9630289078
id: 1
t: 190
xxx after update is x: -3.0420486927
y: -82.3513183594
theta: 4.58240222931
speed: 14.0237646103
id: 1
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:191
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8543919011376583, 0.5071999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.34329915047
y: -7.47699546814
theta: 1.57939577103
speed: -0.149969220161
id: 0
t: 189

sim.py in the sim.py statecallback function, msg is

x: 3.3753247261
y: -8.17749786377
theta: 1.52047908306
speed: 0.272383153439
id: 0
t: 190

sim.py in the sim.py statecallback function, msg is

x: 3.02747011185
y: -7.51163721085
theta: 1.45954358578
speed: -0.00381164602004
id: 0
t: 191

222 self.state_dicts[msg.id][msg.t] is (3.027470111846924, -7.511637210845947, 1.4595435857772827, -0.003811646020039916)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:192
xxx before update is x: -3.0420486927
y: -82.3513183594
theta: 4.58240222931
speed: 14.0237646103
id: 1
t: 191
xxx after update is x: -3.47596716881
y: -83.1048431396
theta: 4.62691497803
speed: 13.5177555084
id: 1
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:193
xxx before update is x: -3.47596716881
y: -83.1048431396
theta: 4.62691497803
speed: 13.5177555084
id: 1
t: 192
xxx after update is x: -3.38506579399
y: -83.8051834106
theta: 4.69447517395
speed: 13.7657651901
id: 1
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:194
xxx before update is x: -3.38506579399
y: -83.8051834106
theta: 4.69447517395
speed: 13.7657651901
id: 1
t: 193
xxx after update is x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
aaaaaabbbbb
risk is [0.9009948287979794, 0.48479999999999795]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.27314758301
y: -7.46283769608
theta: 1.61295199394
speed: -0.0872625559568
id: 0
t: 192

sim.py in the sim.py statecallback function, msg is

x: 3.3835978508
y: -7.90702056885
theta: 1.48347270489
spee before update is x: 3.34329915047
y: -7.47699546814
theta: 1.57939577103
speed: -0.149969220161
id: 0
t: 189
xxx after update is x: 3.3753247261
y: -8.17749786377
theta: 1.52047908306
speed: 0.272383153439
id: 0
t: 190
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:191
xxx before update is x: 3.3753247261
y: -8.17749786377
theta: 1.52047908306
speed: 0.272383153439
id: 0
t: 190
xxx after update is x: 3.02747011185
y: -7.51163721085
theta: 1.45954358578
speed: -0.00381164602004
id: 0
t: 191
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9140929889085176, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.84911584854
y: -80.7746429443
theta: 4.6292591095
speed: 13.8266563416
id: 1
t: 188

sim.py in the sim.py statecallback function, msg is

x: -2.78102993965
y: -81.8325271606
theta: 4.72591304779
speed: 13.9144906998
id: 1
t: 189

sim.py in the sim.py statecallback function, msg is

x: -2.83683753014
y: -82.2948150635
theta: 4.81191921234
speed: 13.9630289078
id: 1
t: 190

sim.py in the sim.py statecallback function, msg is

x: -3.0420486927
y: -82.3513183594
theta: 4.58240222931
speed: 14.0237646103
id: 1
t: 191

222 self.state_dicts[msg.id][msg.t] is (-3.042048692703247, -82.351318359375, 4.582402229309082, 14.023764610290527)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:192
xxx before update is x: 3.02747011185
y: -7.51163721085
theta: 1.45954358578
speed: -0.00381164602004
id: 0
t: 191
xxx after update is x: 3.27314758301
y: -7.46283769608
theta: 1.61295199394
speed: -0.0872625559568
id: 0
t: 192
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:193
xxx before update is x: 3.27314758301
y: -7.46283769608
theta: 1.61295199394
speed: -0.0872625559568
id: 0
t: 192
xxx after update is x: 3.3835978508
y: -7.90702056885
theta: 1.48347270489
speed: -0.0611360184848
id: 0
t: 193
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:194
xxx before update is x: 3.3835978508
y: -7.90702056885
theta: 1.48347270489
speed: -0.0611360184848
id: 0
t: 193
xxx after update is x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
current clock is 8.62222222222
self.communication_details == 0
sending RELEASE,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [8.577777777777778, True, ['1']]
8.57777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 8.62222222222
(RATE*SLOWDOWN) is 22.5
MR[0] is 8.57777777778
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
current clock is 8.62222222222
self.communication_details == 0
sending GET,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '8.62222222222', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,8.62222222222,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [8.577777777777778, True, ['1']]
8.57777777778
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [8.577777777777778, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
aaaaaa
risk is [0.8963740357393659, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.47596716881
y: -83.1048431396
theta: 4.62691497803
speed: 13.5177555084
id: 1
t: 192

sim.py in the sim.py statecallback function, msg is

x: -3.38506579399
y: -83.8051834106
theta: 4.69447517395
speed: 13.7657651901
id: 1
t: 193

sim.py in the sim.py statecallback function, msg is

x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148d: -0.0611360184848
id: 0
t: 193

sim.py in the sim.py statecallback function, msg is

x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194

222 self.state_dicts[msg.id][msg.t] is (2.731745481491089, -7.269685745239258, 1.4470133781433105, 0.003966932184994221)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '7.95555555556', 'Position': ['(2.852918863296509', ' -6.869823932647705', ' 1.6281778812408447)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,7.95555555556,(2.852918863296509, -6.869823932647705, 1.6281778812408447),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '8.62222222222', 'IntendedCourse': 'left', 'Position': ['2.731745481491089', ' -7.269685745239258', ' 1.4470133781433105'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.383209876543
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,8.62222222222,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [13.488888888888889, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
self.communication_details == 0
sending GRANT,1,8.62222222222,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
current clock is 8.62222222222
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:195
xxx before update is x: -3.29350018501
y: -84.0745315552
theta: 4.60524892807
speed: 13.8378620148
id: 1
t: 194
xxx after update is x: -3.76965761185
y: -84.8721008301
theta: 4.80285358429
speed: 13.3092556
id: 1
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:196
xxx before update is x: -3.76965761185
y: -84.8721008301
theta: 4.80285358429
speed: 13.3092556
id: 1
t: 195
xxx after update is x: -2.71095204353
y: -85.8879394531
theta: 4.62388563156
speed: 13.9705219269
id: 1
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8224181946175418, 0.5247999999999986]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.6150829792
y: -6.98855781555
theta: 1.68997335434
speed: -0.0207606814802
id: 0
t: 195

sim.py in the sim.py statecallback function, msg is

x: 3.73049354553
y: -7.64253950119
theta: 1.61726820469
speed: -0.0015748150181
id: 0
t: 196

222 self.state_dicts[msg.id][msg.t] is (3.7304935455322266, -7.6425395011901855, 1.6172682046890259, -0.0015748150181025267)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:197
xxx before update is x: -2.71095204353
y: -85.8879394531
theta: 4.62388563156
speed: 13.9705219269
id: 1
t: 196
xxx after update is x: -3.37322020531
y: -86.0143890381
theta: 4.71691894531
speed: 13.7731590271
id: 1
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:198
xxx before update is x: -3.37322020531
y: -86.0143890381
theta: 4.71691894531
speed: 13.7731590271
id: 1
t: 197
xxx after update is x: -3.1522758007
y: -87.3093032837
theta: 4.69349241257
speed: 13.6579456329
id: 1
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:199
xxx before update is x: -3.1522758007
y: -87.3093032837
theta: 4.69349241257
speed: 13.6579456329
id: 1
t: 198
xxx after update is x: -3.56622767448
y: -87.5973434448
theta: 4.58513784409
speed: 14.1543884277
id: 1
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8199321840615834, 0.4927999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.17855882645
y: -7.90223121643
theta: 1.53446602821
speed: -0.168759614229
id: 0
t: 197

sim.py in the sim.py statecallback function, msg is

x: 3.60226726532
y: -7.38828277588
theta: 1.54769027233
speed: 0.105384133756
id: 0
t: 198

sim.py in the sim.py statecallback function, msg is

x: 3.0954875946
y: -6.65886878967
theta: 1.50052797794
speed: -0.097855463624
id: 0
t: 199

222 self.state_dicts[msg.id][msg.t] is (3.095487594604492, -6.658868789672852, 1.5005279779434204, -0.09785546362400055)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:200
xxx before update is x: -3.56622767448
y: -87
id: 1
t: 194

222 self.state_dicts[msg.id][msg.t] is (-3.2935001850128174, -84.07453155517578, 4.605248928070068, 13.837862014770508)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:195
xxx before update is x: 2.73174548149
y: -7.26968574524
theta: 1.44701337814
speed: 0.00396693218499
id: 0
t: 194
xxx after update is x: 3.6150829792
y: -6.98855781555
theta: 1.68997335434
speed: -0.0207606814802
id: 0
t: 195
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:196
xxx before update is x: 3.6150829792
y: -6.98855781555
theta: 1.68997335434
speed: -0.0207606814802
id: 0
t: 195
xxx after update is x: 3.73049354553
y: -7.64253950119
theta: 1.61726820469
speed: -0.0015748150181
id: 0
t: 196
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:197
xxx before update is x: 3.73049354553
y: -7.64253950119
theta: 1.61726820469
speed: -0.0015748150181
id: 0
t: 196
xxx after update is x: 3.17855882645
y: -7.90223121643
theta: 1.53446602821
speed: -0.168759614229
id: 0
t: 197
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:198
xxx before update is x: 3.17855882645
y: -7.90223121643
theta: 1.53446602821
speed: -0.168759614229
id: 0
t: 197
xxx after update is x: 3.60226726532
y: -7.38828277588
theta: 1.54769027233
speed: 0.105384133756
id: 0
t: 198
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.857411861343392, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.76965761185
y: -84.8721008301
theta: 4.80285358429
speed: 13.3092556
id: 1
t: 195

sim.py in the sim.py statecallback function, msg is

x: -2.71095204353
y: -85.8879394531
theta: 4.62388563156
speed: 13.9705219269
id: 1
t: 196

sim.py in the sim.py statecallback function, msg is

x: -3.37322020531
y: -86.0143890381
theta: 4.71691894531
speed: 13.7731590271
id: 1
t: 197

sim.py in the sim.py statecallback function, msg is

x: -3.1522758007
y: -87.3093032837
theta: 4.69349241257
speed: 13.6579456329
id: 1
t: 198

222 self.state_dicts[msg.id][msg.t] is (-3.152275800704956, -87.3093032836914, 4.693492412567139, 13.65794563293457)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:199
xxx before update is x: 3.60226726532
y: -7.38828277588
theta: 1.54769027233
speed: 0.105384133756
id: 0
t: 198
xxx after update is x: 3.0954875946
y: -6.65886878967
theta: 1.50052797794
speed: -0.097855463624
id: 0
t: 199
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:200
xxx before update is x: 3.0954875946
y: -6.65886878967
theta: 1.50052797794
speed: -0.097855463624
id: 0
t: 199
xxx after update is x: 3.28978586197
y: -7.26410770416
theta: 1.5820504427
speed: -0.0163124911487
id: 0
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the .5973434448
theta: 4.58513784409
speed: 14.1543884277
id: 1
t: 199
xxx after update is x: -2.65270256996
y: -88.1867218018
theta: 4.69119596481
speed: 13.4833869934
id: 1
t: 200
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:201
xxx before update is x: -2.65270256996
y: -88.1867218018
theta: 4.69119596481
speed: 13.4833869934
id: 1
t: 200
xxx after update is x: -3.34109950066
y: -89.0043106079
theta: 4.59535598755
speed: 13.7004232407
id: 1
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:202
xxx before update is x: -3.34109950066
y: -89.0043106079
theta: 4.59535598755
speed: 13.7004232407
id: 1
t: 201
xxx after update is x: -2.88934731483
y: -88.5093460083
theta: 4.90669488907
speed: 13.8828334808
id: 1
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:203
xxx before update is x: -2.88934731483
y: -88.5093460083
theta: 4.90669488907
speed: 13.8828334808
id: 1
t: 202
xxx after update is x: -3.22768902779
y: -89.6463623047
theta: 4.68132448196
speed: 13.7096090317
id: 1
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.6911458797967089, 0.4943999999999979]
sim.py in the sim.py statecallback function, msg is

x: 3.28978586197
y: -7.26410770416
theta: 1.5820504427
speed: -0.0163124911487
id: 0
t: 200

sim.py in the sim.py statecallback function, msg is

x: 3.36573600769
y: -7.67633295059
theta: 1.53996944427
speed: -0.0450076013803
id: 0
t: 201

sim.py in the sim.py statecallback function, msg is

x: 3.05555033684
y: -7.23931837082
theta: 1.70516371727
speed: 0.0178370699286
id: 0
t: 202

sim.py in the sim.py statecallback function, msg is

x: 2.99867534637
y: -7.36656951904
theta: 1.77097475529
speed: -0.189795851707
id: 0
t: 203

222 self.state_dicts[msg.id][msg.t] is (2.9986753463745117, -7.366569519042969, 1.7709747552871704, -0.1897958517074585)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:204
xxx before update is x: -3.22768902779
y: -89.6463623047
theta: 4.68132448196
speed: 13.7096090317
id: 1
t: 203
xxx after update is x: -3.62740111351
y: -91.2294692993
theta: 4.95389699936
speed: 13.9764280319
id: 1
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.62740111351
y: -91.2294692993
theta: 4.95389699936
speed: 13.9764280319
id: 1
t: 204
xxx after update is x: -3.19765329361
y: -91.2513427734
theta: 4.62794208527
speed: 13.9723396301
id: 1
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:205
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:206
xxx before update is x: -3.19765329361
y: -91.2513427734
theta: 4.62794208527
speed: 13.9723396301
id: 1
t: 205
xxx after update is x: -2.96068668365
y: -91.4045944214
theta: 4.57065057755
speed: 13.9101476669
id: 1
t: 206
maneuver_negotiatir.py finish the update agent state fsim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:201
xxx before update is x: 3.28978586197
y: -7.26410770416
theta: 1.5820504427
speed: -0.0163124911487
id: 0
t: 200
xxx after update is x: 3.36573600769
y: -7.67633295059
theta: 1.53996944427
speed: -0.0450076013803
id: 0
t: 201
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:202
xxx before update is x: 3.36573600769
y: -7.67633295059
theta: 1.53996944427
speed: -0.0450076013803
id: 0
t: 201
xxx after update is x: 3.05555033684
y: -7.23931837082
theta: 1.70516371727
speed: 0.0178370699286
id: 0
t: 202
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8685674213313082, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.56622767448
y: -87.5973434448
theta: 4.58513784409
speed: 14.1543884277
id: 1
t: 199

sim.py in the sim.py statecallback function, msg is

x: -2.65270256996
y: -88.1867218018
theta: 4.69119596481
speed: 13.4833869934
id: 1
t: 200

sim.py in the sim.py statecallback function, msg is

x: -3.34109950066
y: -89.0043106079
theta: 4.59535598755
speed: 13.7004232407
id: 1
t: 201

sim.py in the sim.py statecallback function, msg is

x: -2.88934731483
y: -88.5093460083
theta: 4.90669488907
speed: 13.8828334808
id: 1
t: 202

222 self.state_dicts[msg.id][msg.t] is (-2.8893473148345947, -88.50934600830078, 4.9066948890686035, 13.882833480834961)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.05555033684
y: -7.23931837082
theta: 1.70516371727
speed: 0.0178370699286
id: 0
t: 202
xxx after update is x: 2.99867534637
y: -7.36656951904
theta: 1.77097475529
speed: -0.189795851707
id: 0
t: 203
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:203
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:204
xxx before update is x: 2.99867534637
y: -7.36656951904
theta: 1.77097475529
speed: -0.189795851707
id: 0
t: 203
xxx after update is x: 3.46174478531
y: -7.16845226288
theta: 1.49777555466
speed: -0.160233721137
id: 0
t: 204
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:205
xxx before update is x: 3.46174478531
y: -7.16845226288
theta: 1.49777555466
speed: -0.160233721137
id: 0
t: 204
xxx after update is x: 3.07802414894
y: -7.88502216339
theta: 1.47816932201
speed: 0.207002222538
id: 0
t: 205
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:206
xxx before update is x: 3.07802414894
y: -7.88502216339
theta: 1.47816932201
speed: 0.207002222538
id: 0
t: 205
xxx after update is x: 3.32727074623
y: -7.5976524353
theta: 1.59002757072
speed: 0.177429795265
id: 0
t: 206
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:207
xxx before update is x: 3.32727074623
y: -7.5976524353
theta: 1.59002757072
speed: 0.177429795265
id: 0
t: 206
xxx after update is x: 3.19114995003
y: -7.38878059387
theta: 1.61048948765
speed: 0.214286834002
id: 0
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.8312793293636961, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.22768902779
y: -89.6463623047
theta: 4.68132448196
speed: 13.7096090317
id: 1
t: 203

sim.py in the sim.py statecallback function, msg is

x: -3.62740111351
y: -91.2294692993
theta: 4.95389699936
speed: 13.9764280319
id: 1
t: 204

sim.py in the sim.py statecallback function, msg is

x: -3.19765329361
y: -91.2513427734
theta: 4.62794208527
speed: 13.9723396301
id: 1
t: 205

sim.py in the sim.py statecallback function, msg is

x: -2.96068668365
y: -91.4045944214
theta: 4.57065057755
speed: 13.9101476669
id: 1
t: 206

sim.py in the sim.py statecallback function, msg is

x: -3.53423452377
y: -91.984664917
theta: 4.78063154221
speed: 14.2575521469
id: 1
t: 207

222 self.state_dicts[msg.id][msg.t] is (-3.5342345237731934, -91.98466491699219, 4.7806315422058105, 14.257552146911621)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:208
xxx before update is x: 3.19114995003
y: -7.38878059387
theta: 1.61048948765
speed: 0.214286834002
id: 0
t: 207
xxx after update is x: 2.84783363342
y: -7.14333295822
theta: 1.71861302853
speed: 0.173098310828
id: 0
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:209
xxx before update is x: 2.84783363342
y: -7.14333295822
theta: 1.71861302853
speed: 0.173098310828
id: 0
t: 208
xxx after update is x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
current clock is 9.28888888889
self.communication_details == 0
sending RELEASE,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnrom ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:207
xxx before update is x: -2.96068668365
y: -91.4045944214
theta: 4.57065057755
speed: 13.9101476669
id: 1
t: 206
xxx after update is x: -3.53423452377
y: -91.984664917
theta: 4.78063154221
speed: 14.2575521469
id: 1
t: 207
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8899572728459763, 0.5279999999999987]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.46174478531
y: -7.16845226288
theta: 1.49777555466
speed: -0.160233721137
id: 0
t: 204

sim.py in the sim.py statecallback function, msg is

x: 3.07802414894
y: -7.88502216339
theta: 1.47816932201
speed: 0.207002222538
id: 0
t: 205

sim.py in the sim.py statecallback function, msg is

x: 3.32727074623
y: -7.5976524353
theta: 1.59002757072
speed: 0.177429795265
id: 0
t: 206

sim.py in the sim.py statecallback function, msg is

x: 3.19114995003
y: -7.38878059387
theta: 1.61048948765
speed: 0.214286834002
id: 0
t: 207

222 self.state_dicts[msg.id][msg.t] is (3.191149950027466, -7.38878059387207, 1.6104894876480103, 0.21428683400154114)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:208
xxx before update is x: -3.53423452377
y: -91.984664917
theta: 4.78063154221
speed: 14.2575521469
id: 1
t: 207
xxx after update is x: -3.12325334549
y: -92.8210525513
theta: 4.53847789764
speed: 13.4061307907
id: 1
t: 208
maneuver_negotiatir.py finish the update agent state from ros funtion
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.12325334549
y: -92.8210525513
theta: 4.53847789764
speed: 13.4061307907
id: 1
t: 208
xxx after update is x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:209
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '8.62222222222', 'Position': ['(2.731745481491089', ' -7.269685745239258', ' 1.4470133781433105)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,8.62222222222,(2.731745481491089, -7.269685745239258, 1.4470133781433105),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:210
xxx before update is x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209
xxx after update is x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '9.28888888889', 'IntendedCourse': 'left', 'Position': ['3.2850680351257324', ' -7.69127893447876', ' 1.6551623344421387'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.412839506173
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,9.28888888889,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [14.022222222222222, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
current clock is 9.33333333333
self.communication_details == 0
sending GRANT,1,9.28888888889,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
current clock is 9.33333333333
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
current clock is 9.33333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
current clock is 9.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '9.28888888889', 'IntendedCourse': 'left', 'Position': ['3.2850680351257324', ' -7.69127893447876', ' 1.6551623344421387'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.412839506173
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
current clock is 9.33333333333
self.communication_detage)
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
current clock is 9.28888888889
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [9.244444444444444, True, ['1']]
9.24444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 9.28888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 9.24444444444
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
current clock is 9.28888888889
self.communication_details == 0
sending GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:210
xxx before update is x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209
xxx after update is x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210
maneuver_negotiatir.py finish the update agent state from ros funtion
membership is [9.244444444444444, True, ['1']]
9.24444444444
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 9.28888888889
(RATE*SLOWDOWN) is 22.5
MR[0] is 9.24444444444
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210
current clock is 9.33333333333
self.communication_details == 0
sending GET,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210
current clock is 9.33333333333
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210
current clock is 9.33333333333
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '9.28888888889', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,9.28888888889,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:211
xxx before update is x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210
xxx after update is x: 3.30284070969
y: -7.13599348068
theta: 1.59039545059
speed: 0.184128314257
id: 0
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion

maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [9.28888888888889, True, ['1']]
9.28888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [9.28888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30284070969
y: -7.13599348068
theta: 1.59039545059
speed: 0.184128314257
id: 0
t: 211
current clock is 9.37777777778
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.30284070969
y: -7.13599348068
theta: 1.59039545059
speed: 0.184128314257
id: 0
t: 211
current clock is 9.37777777778
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '9.33333333333', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,9.33333333333,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [9.28888888888889, True, ['1']]
9.28888888889
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set([]) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [9.28888888888889, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set([])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 3.30284070969
y: -7.13599348068
theta: 1.59039545059
speed: 0.184128314257
id: 0
t: 211
xxx after update is x: 2.50535368919
y: -7.39594554901
theta: 1.58140301704
speed: -0.128277689219
id: 0
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:212
aaaaaa
risk is [0.8419053596428123, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.12325334549
y: -92.8210525513
theta: 4.53847789764
speed: 13.4061307907
id: 1
t: 208

sim.py in the sim.py statecallback function, msg is

x: -2.8133149147
y: -93.7812194824
theta: 4.71157455444
speed: 14.1511821747
id: 1
t: 209

sim.py in the sim.py statecallback function, msg is

x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210

sim.py in the sim.py statecallback function, msg is

x: -2.95253705978
y: -94.4454727173
theta: 4.57359552383
speed: 14.1943864822
id: 1
t: 211

sim.py in the sim.py statecallback function, msg is

x: -2.99095773697
y: -95.6962432861
theta: 4.85029983521
speed: 13.7490959167
id: 1
t: 212

222 self.state_dicts[msg.id][msg.t] is (-2.990957736968994, -95.69624328613281, 4.850299835205078, 13.749095916748047)
iils == 0
sending DENY,1,9.33333333333,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:211
xxx before update is x: -3.39426803589
y: -94.3055801392
theta: 4.70470142365
speed: 14.0009584427
id: 1
t: 210
xxx after update is x: -2.95253705978
y: -94.4454727173
theta: 4.57359552383
speed: 14.1943864822
id: 1
t: 211
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:212
xxx before update is x: -2.95253705978
y: -94.4454727173
theta: 4.57359552383
speed: 14.1943864822
id: 1
t: 211
xxx after update is x: -2.99095773697
y: -95.6962432861
theta: 4.85029983521
speed: 13.7490959167
id: 1
t: 212
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8463729760568022, 0.473599999999998]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 2.84783363342
y: -7.14333295822
theta: 1.71861302853
speed: 0.173098310828
id: 0
t: 208

sim.py in the sim.py statecallback function, msg is

x: 3.28506803513
y: -7.69127893448
theta: 1.65516233444
speed: 0.205622896552
id: 0
t: 209

sim.py in the sim.py statecallback function, msg is

x: 3.29203891754
y: -7.08578157425
theta: 1.33964300156
speed: 0.103589378297
id: 0
t: 210

sim.py in the sim.py statecallback function, msg is

x: 3.30284070969
y: -7.13599348068
theta: 1.59039545059
speed: 0.184128314257
id: 0
t: 211

sim.py in the sim.py statecallback function, msg is

x: 2.50535368919
y: -7.39594554901
theta: 1.58140301704
speed: -0.128277689219
id: 0
t: 212

222 self.state_dicts[msg.id][msg.t] is (2.5053536891937256, -7.3959455490112305, 1.5814030170440674, -0.12827768921852112)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:213
xxx before update is x: -2.99095773697
y: -95.6962432861
theta: 4.85029983521
speed: 13.7490959167
id: 1
t: 212
xxx after update is x: -2.97619342804
y: -95.9560470581
theta: 4.78388309479
speed: 13.4541988373
id: 1
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:214
xxx before update is x: -2.97619342804
y: -95.9560470581
theta: 4.78388309479
speed: 13.4541988373
id: 1
t: 213
xxx after update is x: -3.46270871162
y: -96.8035888672
theta: 4.88627290726
speed: 13.8434267044
id: 1
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:215
xxx before update is x: -3.46270871162
y: -96.8035888672
theta: 4.88627290726
speed: 13.8434267044
id: 1
t: 214
xxx after update is x: -2.84607863426
y: -97.4365081787
theta: 4.77596902847
speed: 13.8677425385
id: 1
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8877430738003939, 0.502399999999998]
Stops!
sim.py in the sim.py statecallback function, msgf we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:213
xxx before update is x: 2.50535368919
y: -7.39594554901
theta: 1.58140301704
speed: -0.128277689219
id: 0
t: 212
xxx after update is x: 3.16674542427
y: -7.43422603607
theta: 1.5135910511
speed: -0.138463333249
id: 0
t: 213
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:214
xxx before update is x: 3.16674542427
y: -7.43422603607
theta: 1.5135910511
speed: -0.138463333249
id: 0
t: 213
xxx after update is x: 3.38475608826
y: -7.20956802368
theta: 1.6901999712
speed: -0.529273331165
id: 0
t: 214
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:215
xxx before update is x: 3.38475608826
y: -7.20956802368
theta: 1.6901999712
speed: -0.529273331165
id: 0
t: 214
xxx after update is x: 2.90340566635
y: -7.58636140823
theta: 1.49988424778
speed: -0.256274133921
id: 0
t: 215
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:216
xxx before update is x: 2.90340566635
y: -7.58636140823
theta: 1.49988424778
speed: -0.256274133921
id: 0
t: 215
xxx after update is x: 4.02294015884
y: -7.20440244675
theta: 1.67329323292
speed: 0.121577061713
id: 0
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.9237171730166673, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -2.97619342804
y: -95.9560470581
theta: 4.78388309479
speed: 13.4541988373
id: 1
t: 213

sim.py in the sim.py statecallback function, msg is

x: -3.46270871162
y: -96.8035888672
theta: 4.88627290726
speed: 13.8434267044
id: 1
t: 214

sim.py in the sim.py statecallback function, msg is

x: -2.84607863426
y: -97.4365081787
theta: 4.77596902847
speed: 13.8677425385
id: 1
t: 215

sim.py in the sim.py statecallback function, msg is

x: -3.05499911308
y: -97.8261260986
theta: 4.73614501953
speed: 13.5978603363
id: 1
t: 216

222 self.state_dicts[msg.id][msg.t] is (-3.0549991130828857, -97.82612609863281, 4.73614501953125, 13.597860336303711)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:217
xxx before update is x: 4.02294015884
y: -7.20440244675
theta: 1.67329323292
speed: 0.121577061713
id: 0
t: 216
xxx after update is x: 2.88851928711
y: -7.5039730072
theta: 1.48135411739
speed: -0.0956416577101
id: 0
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
xxx before update is x: 2.88851928711
y: -7.5039730072
theta: 1.48135411739
speed: -0.0956416577101
id: 0
t: 217
xxx after update is x: 3.42302632332
y: -7.10777235031
theta: 1.47684752941
speed: 0.298269927502
id: 0
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:218
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n ti is

x: 3.16674542427
y: -7.43422603607
theta: 1.5135910511
speed: -0.138463333249
id: 0
t: 213

sim.py in the sim.py statecallback function, msg is

x: 3.38475608826
y: -7.20956802368
theta: 1.6901999712
speed: -0.529273331165
id: 0
t: 214

sim.py in the sim.py statecallback function, msg is

x: 2.90340566635
y: -7.58636140823
theta: 1.49988424778
speed: -0.256274133921
id: 0
t: 215

222 self.state_dicts[msg.id][msg.t] is (2.9034056663513184, -7.586361408233643, 1.4998842477798462, -0.25627413392066956)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
xxx before update is x: -2.84607863426
y: -97.4365081787
theta: 4.77596902847
speed: 13.8677425385
id: 1
t: 215
xxx after update is x: -3.05499911308
y: -97.8261260986
theta: 4.73614501953
speed: 13.5978603363
id: 1
t: 216
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:216
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:217
xxx before update is x: -3.05499911308
y: -97.8261260986
theta: 4.73614501953
speed: 13.5978603363
id: 1
t: 216
xxx after update is x: -3.3569881916
y: -98.6537780762
theta: 4.79261636734
speed: 13.8220624924
id: 1
t: 217
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8825462905030843, 0.5087999999999981]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 4.02294015884
y: -7.20440244675
theta: 1.67329323292
speed: 0.121577061713
id: 0
t: 216

sim.py in the sim.py statecallback function, msg is

x: 2.88851928711
y: -7.5039730072
theta: 1.48135411739
speed: -0.0956416577101
id: 0
t: 217

222 self.state_dicts[msg.id][msg.t] is (2.888519287109375, -7.503973007202148, 1.4813541173934937, -0.09564165771007538)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:218
xxx before update is x: -3.3569881916
y: -98.6537780762
theta: 4.79261636734
speed: 13.8220624924
id: 1
t: 217
xxx after update is x: -3.22606611252
y: -99.3708190918
theta: 4.71165895462
speed: 13.3491392136
id: 1
t: 218
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:219
xxx before update is x: -3.22606611252
y: -99.3708190918
theta: 4.71165895462
speed: 13.3491392136
id: 1
t: 218
xxx after update is x: -3.2547416687
y: -99.6176757812
theta: 4.86095237732
speed: 13.5543003082
id: 1
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:220
xxx before update is x: -3.2547416687
y: -99.6176757812
theta: 4.86095237732
speed: 13.5543003082
id: 1
t: 219
xxx after update is x: -3.4297451973
y: -99.9388504028
theta: 4.64435815811
speed: 13.7095708847
id: 1
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8284626536279035, 0.4927999999999979]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.42302632332
y: -7.10777235031
theta: 1.47684752941
speed: 0.298269927502
id: 0
t: 218

sim.py in the sim.py statecallback function, msg is

x: 3.39464306831
y: -7.30702781677
theta: 1.57289278507
smes spin:219xxx before update is x: 3.42302632332
y: -7.10777235031
theta: 1.47684752941
speed: 0.298269927502
id: 0
t: 218
xxx after update is x: 3.39464306831
y: -7.30702781677
theta: 1.57289278507
speed: -0.32678309083
id: 0
t: 219
maneuver_negotiatir.py finish the update agent state from ros funtion

aaaaaa
risk is [0.7061435667921899, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.3569881916
y: -98.6537780762
theta: 4.79261636734
speed: 13.8220624924
id: 1
t: 217

sim.py in the sim.py statecallback function, msg is

x: -3.22606611252
y: -99.3708190918
theta: 4.71165895462
speed: 13.3491392136
id: 1
t: 218

sim.py in the sim.py statecallback function, msg is

x: -3.2547416687
y: -99.6176757812
theta: 4.86095237732
speed: 13.5543003082
id: 1
t: 219

222 self.state_dicts[msg.id][msg.t] is (-3.254741668701172, -99.61767578125, 4.860952377319336, 13.554300308227539)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:220
xxx before update is x: 3.39464306831
y: -7.30702781677
theta: 1.57289278507
speed: -0.32678309083
id: 0
t: 219
xxx after update is x: 3.11254310608
y: -7.53997898102
theta: 1.65828573704
speed: 0.0209887418896
id: 0
t: 220
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:221
xxx before update is x: 3.11254310608
y: -7.53997898102
theta: 1.65828573704
speed: 0.0209887418896
id: 0
t: 220
xxx after update is x: 3.91170978546
y: -8.24751377106
theta: 1.64582502842
speed: -0.0238684210926
id: 0
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:222
xxx before update is x: 3.91170978546
y: -8.24751377106
theta: 1.64582502842
speed: -0.0238684210926
id: 0
t: 221
xxx after update is x: 3.37131428719
y: -8.1387462616
theta: 1.60490632057
speed: 0.127250596881
id: 0
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion
aaaaaa
risk is [0.6562361180245702, 0.0]
sim.py in the sim.py statecallback function, msg is

x: -3.4297451973
y: -99.9388504028
theta: 4.64435815811
speed: 13.7095708847
id: 1
t: 220

sim.py in the sim.py statecallback function, msg is

x: -3.61376452446
y: -100.808189392
theta: 4.54465770721
speed: 13.2184753418
id: 1
t: 221

sim.py in the sim.py statecallback function, msg is

x: -3.48252058029
y: -101.845542908
theta: 4.82817220688
speed: 13.8229608536
id: 1
t: 222

222 self.state_dicts[msg.id][msg.t] is (-3.482520580291748, -101.84554290771484, 4.828172206878662, 13.82296085357666)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:223
xxx before update is x: 3.37131428719
y: -8.1387462616
theta: 1.60490632057
speed: 0.127250596881
id: 0
t: 222
xxx after update is x: 3.62696528435
y: -8.08686351776
theta: 1.84883463383
speed: 0.146341770887
id: 0
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:224
xxx before update is x: 3.62696528435
y: -8.08686351776
theta: 1.84883463383
speed: 0.146341770887
id: 0
t: 223
xxx after update is x: 3.59214639664
y: -7.5187792778
theta: 1.58167636395
speed: 0.039025239peed: -0.32678309083
id: 0
t: 219

sim.py in the sim.py statecallback function, msg is

x: 3.11254310608
y: -7.53997898102
theta: 1.65828573704
speed: 0.0209887418896
id: 0
t: 220

222 self.state_dicts[msg.id][msg.t] is (3.1125431060791016, -7.539978981018066, 1.6582857370376587, 0.020988741889595985)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:221
xxx before update is x: -3.4297451973
y: -99.9388504028
theta: 4.64435815811
speed: 13.7095708847
id: 1
t: 220
xxx after update is x: -3.61376452446
y: -100.808189392
theta: 4.54465770721
speed: 13.2184753418
id: 1
t: 221
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:222
xxx before update is x: -3.61376452446
y: -100.808189392
theta: 4.54465770721
speed: 13.2184753418
id: 1
t: 221
xxx after update is x: -3.48252058029
y: -101.845542908
theta: 4.82817220688
speed: 13.8229608536
id: 1
t: 222
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
xxx before update is x: -3.48252058029
y: -101.845542908
theta: 4.82817220688
speed: 13.8229608536
id: 1
t: 222
xxx after update is x: -2.71417498589
y: -101.91317749
theta: 4.68740034103
speed: 14.2225532532
id: 1
t: 223
maneuver_negotiatir.py finish the update agent state from ros funtion
leave the update function 
in spin function, finish the n times spin:223
************normalize weight**********************
aaaaaa
aaaaaabbbbb
risk is [0.8757747663140266, 0.5151999999999983]
Stops!
sim.py in the sim.py statecallback function, msg is

x: 3.91170978546
y: -8.24751377106
theta: 1.64582502842
speed: -0.0238684210926
id: 0
t: 221

sim.py in the sim.py statecallback function, msg is

x: 3.37131428719
y: -8.1387462616
theta: 1.60490632057
speed: 0.127250596881
id: 0
t: 222

sim.py in the sim.py statecallback function, msg is

x: 3.62696528435
y: -8.08686351776
theta: 1.84883463383
speed: 0.146341770887
id: 0
t: 223

222 self.state_dicts[msg.id][msg.t] is (3.626965284347534, -8.08686351776123, 1.8488346338272095, 0.14634177088737488)
if we have all measurements for a certain time-stamp perform risk estimation
self.fm:False
 self.fm = False
call update_state function
removed car with id 0 from grantlist. currentgrantlist: {}
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:224
xxx before update is x: -2.71417498589
y: -101.91317749
theta: 4.68740034103
speed: 14.2225532532
id: 1
t: 223
xxx after update is x: -2.86643362045
y: -102.633155823
theta: 4.70706510544
speed: 13.7405891418
id: 1
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:225
xxx before update is x: -2.86643362045
y: -102.633155823
theta: 4.70706510544
speed: 13.7405891418
id: 1
t: 224
xxx after update is x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278486464
id: 0
t: 224
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 3.59214639664
y: -7.5187792778
theta: 1.58167636395
speed: 0.0390252396464
id: 0
t: 224
current clock is 9.95555555556
self.communication_details == 0
sending RELEASE,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:225
xxx before update is x: 3.59214639664
y: -7.5187792778
theta: 1.58167636395
speed: 0.0390252396464
id: 0
t: 224
xxx after update is x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
maneuver_negotiatir.py finish the update agent state from ros funtion
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py 8
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '9.28888888889', 'Position': ['(3.2850680351257324', ' -7.69127893447876', ' 1.6551623344421387)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,9.28888888889,(3.2850680351257324, -7.69127893447876, 1.6551623344421387),0,1,1.15555555556,0 from  car0
status: 1
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '10.0', 'IntendedCourse': 'left', 'Position': ['2.870136260986328', ' -7.356144905090332', ' 1.620017409324646'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left from  car0
status: 1
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, not conlicted
maneuver_negotiatir.py message_processing,!!dd342 change status to GRANT
self.grantID is 0
GRANT,1,10.0,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0
added car with id 0 to grantlist. current grantlist:  {0: [14.777777777777779, 'left']}
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
self.communication_details == 0
sending GRANT,1,10.0,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
message type is RELEASE, meaasge dict is {'TagTime': '0', 'Sender': '0', 'TagID': '1', 'Time': '10.0', 'Position': ['(2.870136260986328', ' -7.356144905090332', ' 1.620017409324646)'], 'Type': 'RELEASE'}
car 1 received RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 from  car0
status: 4
maneuver_negotiatir.py in the message processing function, it's a long code, finish
Received -->>: 
self.ros_measurements is None
self.ros_measurementfinish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GRANT, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '10.0', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'GRANT'}
car 0 received GRANT,1,10.0,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set(['1']) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [10.0, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set(['1'])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
Received -->>: 
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details !=s is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, it's a long code, start...
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
maneuver_negotiatir.py message_processing, curtime-t <= self.TD) .True
maneuver_negotiatir.py message_processing, self.communication_details != 1
maneuver_negotiatir.py message_processing,message type is GET, meaasge dict is {'Acc': '1', 'TagTime': '1.15555555556', 'Sender': '0', 'Time': '10.0', 'IntendedCourse': 'left', 'Position': ['2.870136260986328', ' -7.356144905090332', ' 1.620017409324646'], 'TagID': '0', 'Type': 'GET', 'Velocity': '0'}
car 1 received GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left from  car0
status: 4
maneuver_negotiatir.py message_processing, (m_dict[Type] == GET)
maneuver_negotiatir.py in no conflict funtion , start
current time is  0.444444444444
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py message_processing, no conflict
maneuver_negotiatir.py message_processing, woshishui wozainali
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: -3.69647455215
y: -103.506744385
theta: 4.67059278488
speed: 14.0692138672
id: 1
t: 225
current clock is 10.0
self.communication_details == 0
sending DENY,1,10.0,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 to car 0 from car 1
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the message processing function, it's a long code, finish
maneuver_negotiatir.py in the tgrant function, this function is the same as the paper
!!! change status from grant to normal
tgarnt done
************normalize weight**********************
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
(self.id == 1):
leave the update function 
in spin function, finish the n times spin:226
 1
maneuver_negotiatir.py message_processing,message type is DENY, meaasge dict is {'TagTime': '14', 'Sender': '1', 'TagID': '1', 'Time': '10.0', 'Position': ['(-3.3620028495788574', ' 29.88646697998047', ' 4.702761173248291)'], 'Type': 'DENY'}
car 0 received DENY,1,10.0,(-3.3620028495788574, 29.88646697998047, 4.702761173248291),14,1,0,0 from  car1
status: 2
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
maneuver_negotiatir.py message_processing,in request processing, exisiting membership = set([]) 
maneuver_negotiatir.py message_processing,in request processing, new membership =  [10.0, True, '1']
maneuver_negotiatir.py message_processing,in request processing, new R = set([])
maneuver_negotiatir.py in the message processing function, it's a long code, finish
finish try maneuver
aaaaaa
risk is [0.8284150740760075, 0.0]
going to the update function
sim.py in the sim.py update function 
targetspeed < self.speed:xxxxxxxxx
 self.man_init:
leave the update function 
in spin function, finish the n times spin:226
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our requestmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,leftmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reachedmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's locationmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,leftmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_messagemaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our requestmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_messagemaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finishmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_messagemaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message

self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
finish try maneuver
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,leftmaneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
!!!!!!!!!!change status from get to tryget(tried get, already get), Some agents in the Safety Membership             set aren't reachable or have answered DENY to our request
RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maneuver_negotiatir.py in the t_retry function, all agnets in resopnse agnet set can not reached
reached retry trymaneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 6
2.self.status is 6
change normal to tryget(for the case tryget, it doesn't need to chcnge)
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
maneuver_negotiatir.py this is get posotion function, it's important for me to read other car's location
maneuver_negotiatir.py get the velocity
maneuver_negotiatir.py get the acceleration
maneuver_negotiatir.py get membership, in the get_MR function, start
maneuver_negotiatir.py intended_course
left
membership is [10.0, True, ['1']]
10.0
True
1
maneuver_negotiatir.py get membership, in the get_MR function, finish
self.agent_state[0] is 10.0
(RATE*SLOWDOWN) is 22.5
MR[0] is 10.0
self.TMan is 5
( self.agent_state[0]/(RATE*SLOWDOWN) < MR[0] + 2*self.TMan) and MR[1] == 1
self.agents_to_ask is ['1']
message is :GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
!!!!change state to get
GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left
maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending RELEASE,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0 to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
call tryManeuver from t_retry>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

maneuver_negotiatir.py start the update_agent_message
self.ros_measurements is None
self.ros_measurements is not empty
x: 2.87013626099
y: -7.35614490509
theta: 1.62001740932
speed: -0.0730476155877
id: 0
t: 225
current clock is 10.0
self.communication_details == 0
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.self.status is 2
2.self.status is 2
finish try maneuver
sending GET,0,10.0,(2.870136260986328, -7.356144905090332, 1.620017409324646),0,1,1.15555555556,0,left to car 1 from car 0
maneuver_negotiatir.py finish the update_agent_message
maneuver_negotiatir.py in the trymaneuver function - start$$$$$$$$$$$$$$$$$$$$$... logging to /home/lu/.ros/log/43f77720-fca0-11e8-a4c6-000c291801fc/roslaunch-ubuntu-19262.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch
[1mstarted roslaunch server http://ubuntu:34449/[0m

SUMMARY
========

PARAMETERS
 * /enable_negotiator: True
 * /file_prefix: 
 * /nr_cars: 2
 * /plot: False
 * /rosdistro: kinetic
 * /rosversion: 1.12.14
 * /save: False

NODES
  /
    car0 (virtual_blinker/sim.py)
    car1 (virtual_blinker/sim.py)
    cloud (virtual_blinker/cloud.py)
    rviz (rviz/rviz)
    visualization (virtual_blinker/visualization.py)

auto-starting new master
[1mprocess[master]: started with pid [19272][0m
[1mROS_MASTER_URI=http://localhost:11311[0m
]2;/home/lu/catkin_ws/src/virtual_blinker/sim.launch http://localhost:11311
[1msetting /run_id to 43f77720-fca0-11e8-a4c6-000c291801fc[0m
[1mprocess[rosout-1]: started with pid [19285][0m
started core service [/rosout]
[1mprocess[visualization-2]: started with pid [19302][0m
[1mprocess[rviz-3]: started with pid [19303][0m
[1mprocess[car0-4]: started with pid [19304][0m
[1mprocess[car1-5]: started with pid [19305][0m
[1mprocess[cloud-6]: started with pid [19306][0m
[cloud-6] killing on exit
[car1-5] killing on exit
[car0-4] killing on exit
[rviz-3] killing on exit
[visualization-2] killing on exit
[rosout-1] killing on exit
[master] killing on exit
shutting down processing monitor...
... shutting down processing monitor complete
[1mdone[0m
